  EVAL_ONE_STR(
"(linklet"
"()"
"((embedded-load embedded-load)"
"(eval$1 eval)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/module-declared? module-declared?)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/module-path? module-path?)"
"(seal seal)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(1/dynamic-require dynamic-require)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(make-namespace make-namespace)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(1/current-namespace current-namespace)"
"(boot boot)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(1/module-path-index-join module-path-index-join)"
"(compile-to-linklets compile-to-linklets)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(1/datum->syntax datum->syntax)"
"(namespace->instance namespace->instance)"
"(compile$1 compile)"
"(1/syntax-debug-info syntax-debug-info)"
"(dynamic-require-reader dynamic-require-reader)"
"(1/syntax->datum syntax->datum)"
"(1/module-path-index? module-path-index?)"
"(1/identifier-binding identifier-binding)"
"(1/namespace-require namespace-require)"
"(1/module-compiled-exports module-compiled-exports)"
"(syntax?$1 syntax?)"
"(1/resolved-module-path? resolved-module-path?)"
"(expand$1 expand)"
"(identifier? identifier?)"
"(1/namespace-attach-module namespace-attach-module)"
"(1/read-syntax read-syntax)"
"(syntax-property$1 syntax-property)"
"(syntax-e$2 syntax-e)"
"(1/module->language-info module->language-info)"
"(1/namespace-syntax-introduce namespace-syntax-introduce))"
"(define-values"
"(qq-append)"
"  (lambda (a_106 b_107) (if (list? a_106) (append a_106 b_107) (raise-argument-error 'unquote-splicing \"list?\" a_106))))"
"(define-values(call/ec) call-with-escape-continuation)"
" (define-values (bad-list$1) (lambda (who_1 orig-l_2) (raise-mismatch-error who_1 \"not a proper list: \" orig-l_2)))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(values"
"(let-values(((memq_12)"
"(lambda(v_13 orig-l_14)"
"((letrec-values(((loop_15)"
"(lambda(ls_16)"
"(if(null? ls_16)"
"(let-values() #f)"
"(if(not(pair? ls_16))"
"(let-values()(bad-list$1 'memq orig-l_14))"
"(if(eq? v_13(car ls_16))"
"(let-values() ls_16)"
"(let-values()(loop_15(cdr ls_16)))))))))"
" loop_15)"
" orig-l_14))))"
" memq_12)"
"(let-values(((memv_17)"
"(lambda(v_18 orig-l_19)"
"((letrec-values(((loop_20)"
"(lambda(ls_21)"
"(if(null? ls_21)"
"(let-values() #f)"
"(if(not(pair? ls_21))"
"(let-values()(bad-list$1 'memv orig-l_19))"
"(if(eqv? v_18(car ls_21))"
"(let-values() ls_21)"
"(let-values()(loop_20(cdr ls_21)))))))))"
" loop_20)"
" orig-l_19))))"
" memv_17)"
"(let-values(((default_22)"
"(let-values(((member_23)"
"(lambda(v_24 orig-l_25)"
"((letrec-values(((loop_26)"
"(lambda(ls_27)"
"(if(null? ls_27)"
"(let-values() #f)"
"(if(not(pair? ls_27))"
"(let-values()(bad-list$1 'member orig-l_25))"
"(if(equal? v_24(car ls_27))"
"(let-values() ls_27)"
"(let-values()(loop_26(cdr ls_27)))))))))"
" loop_26)"
" orig-l_25))))"
" member_23)))"
"(let-values(((member_28)"
"(case-lambda"
"((v_29 orig-l_30)(default_22 v_29 orig-l_30))"
"((v_31 orig-l_32 eq?_33)"
"(begin"
"(if(if(procedure? eq?_33)(procedure-arity-includes? eq?_33 2) #f)"
"(void)"
"                           (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_33))"
"((let-values(((member_34)"
"(lambda(v_35 orig-l_36)"
"((letrec-values(((loop_37)"
"(lambda(ls_38)"
"(if(null? ls_38)"
"(let-values() #f)"
"(if(not(pair? ls_38))"
"(let-values()(bad-list$1 'member orig-l_36))"
"(if(eq?_33 v_35(car ls_38))"
"(let-values() ls_38)"
"(let-values()(loop_37(cdr ls_38)))))))))"
" loop_37)"
" orig-l_36))))"
" member_34)"
" v_31"
" orig-l_32))))))"
" member_28)))))"
"(define-values"
"(current-parameterization)"
"(lambda()(extend-parameterization(continuation-mark-set-first #f parameterization-key))))"
"(define-values"
"(call-with-parameterization)"
"(lambda(paramz_430 thunk_431)"
"(begin"
"(if(parameterization? paramz_430)"
"(void)"
"        (let-values () (raise-argument-error 'call-with-parameterization \"parameterization?\" 0 paramz_430 thunk_431)))"
"(if(if(procedure? thunk_431)(procedure-arity-includes? thunk_431 0) #f)"
"(void)"
"        (let-values () (raise-argument-error 'call-with-parameterization \"(-> any)\" 1 paramz_430 thunk_431)))"
"(with-continuation-mark parameterization-key paramz_430(thunk_431)))))"
"(define-values"
"(struct:break-paramz make-break-paramz break-paramz? break-paramz-ref break-paramz-set!)"
"(make-struct-type 'break-parameterization #f 1 0 #f))"
"(define-values"
"(struct:break-parameterization"
" make-break-parameterization"
" break-parameterization?"
" break-parameterization-cell"
" set-break-parameterization-cell!)"
"(let-values(((inspector_432)(current-inspector)))"
"(begin"
"(if(if inspector_432(not(inspector? inspector_432)) #f)"
"        (raise-argument-error 'define-struct \"(or/c inspector? #f)\" inspector_432)"
"(void))"
"(let-values(((type_433 maker_434 pred_435 access_436 mutate_437)"
"(make-struct-type 'break-parameterization #f 1 0 #f null inspector_432)))"
"(values"
" type_433"
" maker_434"
" pred_435"
"(make-struct-field-accessor access_436 0 'cell)"
"(make-struct-field-mutator mutate_437 0 'cell))))))"
"(define-values"
"(current-break-parameterization)"
"(lambda()(make-break-paramz(continuation-mark-set-first #f break-enabled-key))))"
"(define-values"
"(call-with-break-parameterization)"
"(lambda(paramz_438 thunk_439)"
"(begin"
"(if(break-paramz? paramz_438)"
"(void)"
"(let-values()"
"          (raise-argument-error 'call-with-break-parameterization \"break-parameterization?\" 0 paramz_438 thunk_439)))"
"(if(if(procedure? thunk_439)(procedure-arity-includes? thunk_439 0) #f)"
"(void)"
"        (let-values () (raise-argument-error 'call-with-parameterization \"(-> any)\" 1 paramz_438 thunk_439)))"
"(begin0"
"(with-continuation-mark break-enabled-key(break-paramz-ref paramz_438 0)(begin(check-for-break)(thunk_439)))"
"(check-for-break)))))"
"(define-values"
"(select-handler/no-breaks)"
"(lambda(e_440 bpz_441 l_442)"
"(with-continuation-mark"
" break-enabled-key"
"(make-thread-cell #f)"
"((letrec-values(((loop_443)"
"(lambda(l_444)"
"(if(null? l_444)"
"(let-values()(raise e_440))"
"(if((caar l_444) e_440)"
"(let-values()"
"(begin0"
"((cdar l_444) e_440)"
"(with-continuation-mark break-enabled-key bpz_441(check-for-break))))"
"(let-values()(loop_443(cdr l_444))))))))"
" loop_443)"
" l_442))))"
"(define-values"
"(select-handler/breaks-as-is)"
"(lambda(e_445 bpz_446 l_447)"
"(if(null? l_447)"
"(let-values()(raise e_445))"
"(if((caar l_447) e_445)"
"(let-values()"
"(with-continuation-mark break-enabled-key bpz_446(begin(check-for-break)((cdar l_447) e_445))))"
"(let-values()(select-handler/breaks-as-is e_445 bpz_446(cdr l_447)))))))"
"(define-values(false-thread-cell)(make-thread-cell #f))"
"(define-values"
"(check-with-handlers-in-context)"
"(lambda(handler-prompt-key_448)"
"(if(continuation-prompt-available? handler-prompt-key_448)"
"(void)"
"      (let-values () (error 'with-handlers \"exception handler used out of context\")))))"
"(define-values(handler-prompt-key)(make-continuation-prompt-tag))"
"(define-values"
"(call-handled-body)"
"(lambda(bpz_449 handle-proc_450 body-thunk_451)"
"(with-continuation-mark"
" break-enabled-key"
" false-thread-cell"
"(call-with-continuation-prompt"
"(lambda(bpz_452 body-thunk_453)"
"(with-continuation-mark"
" break-enabled-key"
" bpz_452"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(e_454)(abort-current-continuation handler-prompt-key e_454))"
"(body-thunk_453))))"
" handler-prompt-key"
" handle-proc_450"
" bpz_449"
" body-thunk_451))))"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_455 thunk_456)(begin0(with-continuation-mark exception-handler-key exnh_455(thunk_456))(void))))"
"(define-values(call/cc) call-with-current-continuation)"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_457)(gensym)))"
"(let-values(((up_458)"
"(lambda(who_459 mut?_460 set_461 ht_462 key_463 xform_464 default_465)"
"(begin"
"(if(if(hash? ht_462)(if mut?_460(not(immutable? ht_462))(immutable? ht_462)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_459"
"                           (if mut?_460 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_462)))"
"(if(if(procedure? xform_464)(procedure-arity-includes? xform_464 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error who_459 \"(any/c . -> . any/c)\" xform_464)))"
"(let-values(((v_466)(hash-ref ht_462 key_463 default_465)))"
"(if(eq? v_466 not-there_457)"
"                          (raise-mismatch-error who_459 \"no value found for key: \" key_463)"
"(set_461 ht_462 key_463(xform_464 v_466))))))))"
"(let-values(((hash-update_467)"
"(case-lambda"
"((ht_471 key_472 xform_473 default_474)"
"(up_458 'hash-update #f hash-set ht_471 key_472 xform_473 default_474))"
"((ht_475 key_476 xform_477)(hash-update ht_475 key_476 xform_477 not-there_457))))"
"((hash-update!_468)"
"(case-lambda"
"((ht_478 key_479 xform_480 default_481)"
"(up_458 'hash-update! #t hash-set! ht_478 key_479 xform_480 default_481))"
"((ht_482 key_483 xform_484)(hash-update! ht_482 key_483 xform_484 not-there_457))))"
"((hash-has-key?_469)"
"(lambda(ht_485 key_486)"
"(begin"
"(if(hash? ht_485)"
"(void)"
"                          (let-values () (raise-argument-error 'hash-has-key? \"hash?\" 0 ht_485 key_486)))"
"(not(eq? not-there_457(hash-ref ht_485 key_486 not-there_457))))))"
"((hash-ref!_470)"
"(lambda(ht_487 key_488 new_489)"
"(begin"
"(if(if(hash? ht_487)(not(immutable? ht_487)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'hash-ref!"
"                             \"(and/c hash? (not/c immutable?))\""
" 0"
" ht_487"
" key_488"
" new_489)))"
"(let-values(((v_490)(hash-ref ht_487 key_488 not-there_457)))"
"(if(eq? not-there_457 v_490)"
"(let-values(((n_491)(if(procedure? new_489)(new_489) new_489)))"
"(begin(hash-set! ht_487 key_488 n_491) n_491))"
" v_490))))))"
"(values hash-update_467 hash-update!_468 hash-has-key?_469 hash-ref!_470)))))"
"(define-values"
"(path-string?)"
"(lambda(s_1)"
"(let-values(((or-part_2)(path? s_1)))"
"(if or-part_2"
" or-part_2"
"(if(string? s_1)"
"(let-values(((or-part_3)(relative-path? s_1)))(if or-part_3 or-part_3(absolute-path? s_1)))"
" #f)))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_4)"
"(begin"
"(if(let-values(((or-part_5)(path-for-some-system? s_4)))(if or-part_5 or-part_5(path-string? s_4)))"
"(void)"
"        (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_4)))"
"(if(if(path-for-some-system? s_4)(eq?(path-convention-type s_4) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_6)(if(string? s_4) s_4(bytes->string/locale(path->bytes s_4)))))"
"            (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_6)"
"(if(string? s_4)(string->path s_4) s_4)"
"(let-values(((s_7)(string-locale-downcase str_6)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                   '#rx\"/\""
"                   (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_7) s_7 (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_7 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_4)(let-values()(string->path s_4))(let-values() s_4))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_8 sfx_9 who_10)"
"(begin"
"(if(let-values(((or-part_11)(path-for-some-system? s_8)))(if or-part_11 or-part_11(path-string? s_8)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c path-for-some-system? path-string?)\" 0 s_8 sfx_9)))"
"(if(let-values(((or-part_12)(string? sfx_9)))(if or-part_12 or-part_12(bytes? sfx_9)))"
"(void)"
"        (let-values () (raise-argument-error who_10 \"(or/c string? bytes?)\" 1 s_8 sfx_9)))"
"(let-values(((base_13 name_14 dir?_15)(split-path s_8)))"
"(begin"
"(if(not base_13)"
"            (let-values () (raise-mismatch-error who_10 \"cannot add an extension to a root path: \" s_8))"
"(void))"
"(values base_13 name_14))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_16 sep_17 rest-bytes_18 s_19 sfx_20)"
"(let-values(((base_21 name_22)(check-extension-call s_19 sfx_20 name_16)))"
"(let-values(((bs_23)(path-element->bytes name_22)))"
"(let-values(((finish_24)"
"(lambda(i_25 sep_26 i2_27)"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_23 0 i_25)"
" sep_26"
"(rest-bytes_18 bs_23 i2_27)"
"(if(string? sfx_20)(string->bytes/locale sfx_20(char->integer '#\\?)) sfx_20))"
"(if(path-for-some-system? s_19)(path-convention-type s_19)(system-path-convention-type))))))"
"(let-values(((new-name_28)"
"(letrec-values(((loop_29)"
"(lambda(i_30)"
"(if(zero? i_30)"
"                                             (finish_24 (bytes-length bs_23) #\"\" (bytes-length bs_23))"
"(let-values(((i_31)(sub1 i_30)))"
"(if(if(not(zero? i_31))"
"(eq?(char->integer '#\\.)(bytes-ref bs_23 i_31))"
" #f)"
"(finish_24 i_31 sep_17(add1 i_31))"
"(loop_29 i_31)))))))"
"(loop_29(bytes-length bs_23)))))"
"(if(path-for-some-system? base_21)(build-path base_21 new-name_28) new-name_28)))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_32 sfx_33) (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_34 i_35) #\"\") s_32 sfx_33)))"
"(define-values"
"(path-add-extension)"
"  (lambda (s_36 sfx_37) (path-adjust-extension 'path-add-extension #\"_\" subbytes s_36 sfx_37)))"
"(define-values"
"(reroot-path)"
"(lambda(p_38 root_39)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_43)(path-string? p_38)))"
"(if or-part_43 or-part_43(path-for-some-system? p_38)))"
"(void)"
"(let-values()"
"                        (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_38 root_39)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_44)(path-string? root_39)))"
"(if or-part_44 or-part_44(path-for-some-system? root_39)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                           \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_38"
" root_39)))"
"(values))))"
"(let-values(((conv_40)"
"(if(path-for-some-system? p_38)(path-convention-type p_38)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_45)(complete-path? p_38)))"
"(if or-part_45 or-part_45(eq?(system-path-convention-type) conv_40)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                               \"path is not complete and not the platform's convention\""
"                               \"path\""
" p_38"
"                               \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_39)"
"(path-convention-type root_39)"
"(system-path-convention-type))"
" conv_40)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"given paths use different conventions\""
"                                 \"path\""
" p_38"
"                                 \"root path\""
" root_39)))"
"(values))))"
"(let-values(((c-p_41)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_38) p_38(path->complete-path p_38))))))"
"(let-values(((bstr_42)(path->bytes c-p_41)))"
"(if(eq? conv_40 'unix)"
"(let-values()"
"                      (if (bytes=? bstr_42 #\"/\")"
"(if(path-for-some-system? root_39) root_39(string->path root_39))"
"(build-path root_39(bytes->path(subbytes(path->bytes c-p_41) 1) conv_40))))"
"(if(eq? conv_40 'windows)"
"(let-values()"
"(build-path"
" root_39"
"(bytes->path"
"                          (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_42)"
"(let-values()"
"                              (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4 5) #\"\\\\\" (subbytes bstr_42 6)))"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                              (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_42)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_42 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_42)"
"                                  (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_42 2)))"
"                                  (if (regexp-match? '#rx\"^[a-z]:\" bstr_42)"
"(let-values()(bytes-append(subbytes bstr_42 0 1)(subbytes bstr_42 2)))"
"(void))))))"
" conv_40)))"
"(void))))))))))))"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_1)"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_3) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_3 sep_3)))))"
"((cons-path_2)"
"(lambda(default_4 s_5 l_6)"
"                  (let-values (((s_7) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_5 #\"\") s_5)))"
"                    (if (bytes=? s_7 #\"\") (append default_4 l_6) (cons (bytes->path s_7) l_6))))))"
"(lambda(s_8 default_9)"
"(begin"
"(if(let-values(((or-part_10)(bytes? s_8)))(if or-part_10 or-part_10(string? s_8)))"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_8)))"
"(if(if(list? default_9)(andmap path? default_9) #f)"
"(void)"
"          (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_9)))"
"((letrec-values(((loop_11)"
"(lambda(s_12)"
"(let-values(((m_13)(regexp-match r_1 s_12)))"
"(if m_13"
"(cons-path_2 default_9(cadr m_13)(loop_11(caddr m_13)))"
"(cons-path_2 default_9 s_12 null))))))"
" loop_11)"
"(if(string? s_8)(string->bytes/utf-8 s_8) s_8))))))"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_1 libpath_2 reverse?_3)"
"(begin"
"(if(path-string? program_1)"
"(void)"
"        (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_1)))"
"(if(let-values(((or-part_4)(not libpath_2)))"
"(if or-part_4 or-part_4(if(path-string? libpath_2)(relative-path? libpath_2) #f)))"
"(void)"
"(let-values()"
"          (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_2)))"
"(letrec-values(((found-exec_5)"
"(lambda(exec-name_6)"
"(if libpath_2"
"(let-values(((base_7 name_8 isdir?_9)(split-path exec-name_6)))"
"(let-values(((next_10)"
"(lambda()"
"(let-values(((resolved_11)(resolve-path exec-name_6)))"
"(if(equal? resolved_11 exec-name_6)"
"(let-values() #f)"
"(if(relative-path? resolved_11)"
"(let-values()(found-exec_5(build-path base_7 resolved_11)))"
"(let-values()(found-exec_5 resolved_11))))))))"
"(let-values(((or-part_12)(if reverse?_3(next_10) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_7)"
"(let-values(((lib_14)(build-path base_7 libpath_2)))"
"(if(let-values(((or-part_15)(directory-exists? lib_14)))"
"(if or-part_15 or-part_15(file-exists? lib_14)))"
" lib_14"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_3)(next_10) #f)))))))"
" exec-name_6))))"
"(if(if(relative-path? program_1)"
"(let-values(((base_16 name_17 dir?_18)(split-path program_1)))(eq? base_16 'relative))"
" #f)"
"          (let-values (((paths-str_19) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_20)"
"                        (lambda (s_21) (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_21) s_21))))"
"((letrec-values(((loop_22)"
"(lambda(paths_23)"
"(if(null? paths_23)"
" #f"
"(let-values(((base_24)(path->complete-path(car paths_23))))"
"(let-values(((name_25)(build-path base_24 program_1)))"
"(if(file-exists? name_25)(found-exec_5 name_25)(loop_22(cdr paths_23)))))))))"
" loop_22)"
"(win-add_20"
"(if paths-str_19(path-list-string->path-list(bytes->string/locale paths-str_19 '#\\?) null) null))))"
"(let-values(((p_26)(path->complete-path program_1)))(if(file-exists? p_26)(found-exec_5 p_26) #f))))))"
"((program_27 libpath_28)(find-executable-path program_27 libpath_28 #f))"
"((program_29)(find-executable-path program_29 #f #f))))"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" read-square-bracket-as-paren"
" #t"
" read-curly-brace-as-paren"
" #t"
" read-square-bracket-with-tag"
" #f"
" read-curly-brace-with-tag"
" #f"
" read-accept-box"
" #t"
" read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" read-accept-graph"
" #t"
" read-decimal-as-inexact"
" #t"
" read-cdot"
" #f"
" read-accept-dot"
" #t"
" read-accept-infix-dot"
" #t"
" read-accept-quasiquote"
" #t"
" read-accept-reader"
" #f"
" read-accept-lang"
" #t"
" current-readtable"
" #f)"
"(let-values()(thunk_1)))"
"      (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_1))))"
"(define-values"
"(find-main-collects)"
"(lambda()(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir))))))"
"(define-values"
"(find-main-config)"
"(lambda()(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_1)"
"(if(complete-path? collects-path_1)"
"(let-values()(simplify-path collects-path_1))"
"(if(absolute-path? collects-path_1)"
"(let-values()"
"(let-values(((exec_2)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_3 name_4 dir?_5)(split-path exec_2)))"
"(simplify-path(path->complete-path collects-path_1 base_3)))))"
"(let-values()"
"(let-values(((p_6)(find-executable-path(find-system-path 'exec-file) collects-path_1 #t)))"
"(if p_6(simplify-path p_6) #f)))))))"
"(define-values"
"(-check-relpath)"
"(lambda(who_1 s_2)"
"(begin"
"      (if (path-string? s_2) (void) (let-values () (raise-argument-error who_1 \"path-string?\" s_2)))"
"(if(relative-path? s_2)"
"(void)"
"        (let-values () (raise-arguments-error who_1 \"invalid relative path\" \"path\" s_2))))))"
"(define-values"
"(-check-collection)"
"(lambda(who_3 collection_4 collection-path_5)"
"(begin(-check-relpath who_3 collection_4)(for-each(lambda(p_6)(-check-relpath who_3 p_6)) collection-path_5))))"
"(define-values"
"(-check-fail)"
"(lambda(who_7 fail_8)"
"(if(if(procedure? fail_8)(procedure-arity-includes? fail_8 1) #f)"
"(void)"
"      (let-values () (raise-argument-error who_7 \"(any/c . -> . any)\" fail_8)))))"
"(define-values"
"(collection-path)"
"(lambda(fail_9 collection_10 collection-path_11)"
"(begin"
"(-check-collection 'collection-path collection_10 collection-path_11)"
"(-check-fail 'collection-path fail_9)"
"(find-col-file fail_9 collection_10 collection-path_11 #f #f))))"
"(define-values"
"(collection-file-path)"
"(lambda(fail_12 check-compiled?_13 file-name_14 collection_15 collection-path_16)"
"(begin"
"(-check-relpath 'collection-file-path file-name_14)"
"(-check-collection 'collection-file-path collection_15 collection-path_16)"
"(-check-fail 'collection-file-path fail_12)"
"(find-col-file fail_12 collection_15 collection-path_16 file-name_14 check-compiled?_13))))"
"(define-values"
"(get-config-table)"
"(lambda(d_17)"
"    (let-values (((p_18) (if d_17 (build-path d_17 \"config.rktd\") #f)))"
"(let-values(((or-part_19)"
"(if p_18"
"(if(file-exists? p_18)"
"(with-input-from-file"
" p_18"
"(lambda()"
"(let-values(((v_20)(call-with-default-reading-parameterization read)))"
"(if(hash? v_20) v_20 #f))))"
" #f)"
" #f)))"
"(if or-part_19 or-part_19 '#hash())))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_21)(hash-ref config-table_21 'installation-name(version))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_22)"
"(if(string? p_22)"
"(let-values()(collects-relative-path->complete-path(string->path p_22)))"
"(if(bytes? p_22)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_22)))"
"(if(path? p_22)(let-values()(collects-relative-path->complete-path p_22))(let-values() p_22))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_23)"
"(if(complete-path? p_23)"
"(let-values() p_23)"
"(let-values()"
"(path->complete-path"
" p_23"
"(let-values(((or-part_24)(find-main-collects)))(if or-part_24 or-part_24(current-directory))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_25 key_26 orig-l_27)"
"(let-values(((l_28)(hash-ref ht_25 key_26 #f)))"
"(if l_28"
"((letrec-values(((loop_29)"
"(lambda(l_30)"
"(if(null? l_30)"
"(let-values() null)"
"(if(not(car l_30))"
"(let-values()(append orig-l_27(loop_29(cdr l_30))))"
"(let-values()(cons(coerce-to-path(car l_30))(loop_29(cdr l_30)))))))))"
" loop_29)"
" l_28)"
" orig-l_27))))"
"(define-values"
"(find-library-collection-links)"
"(lambda()"
"(let-values(((ht_31)(get-config-table(find-main-config))))"
"(let-values(((lf_32)"
"(coerce-to-path"
"(let-values(((or-part_33)(hash-ref ht_31 'links-file #f)))"
"(if or-part_33"
" or-part_33"
"(build-path"
"(let-values(((or-part_34)(hash-ref ht_31 'share-dir #f)))"
"                            (if or-part_34 or-part_34 (build-path 'up \"share\")))"
"                          \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(use-user-specific-search-paths)(use-collection-link-paths) #f)"
"           (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_31) \"links.rktd\"))"
" null)"
"(if(use-collection-link-paths)(add-config-search ht_31 'links-search-files(list lf_32)) null))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_35 old-stamp_36)"
"(if(if old-stamp_36(if(cdr old-stamp_36)(not(sync/timeout 0(cdr old-stamp_36))) #f) #f)"
"(let-values() old-stamp_36)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(exn_37)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_37)(lambda() #f)(lambda()(raise exn_37)))))"
"(let-values(((dir-evt_38)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_39)"
"(lambda(path_40)"
"(let-values(((base_41 name_42 dir?_43)(split-path path_40)))"
"(if(path? base_41)"
"(if(directory-exists? base_41)"
"(filesystem-change-evt base_41(lambda() #f))"
"(loop_39 base_41))"
" #f)))))"
" loop_39)"
" path_35)"
" #f)))"
"(if(not(file-exists? path_35))"
"(cons #f dir-evt_38)"
"(let-values(((evt_44)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_35(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_38(let-values()(filesystem-change-evt-cancel dir-evt_38))(void))"
"(cons"
"(let-values(((p_45)(open-input-file path_35)))"
"(dynamic-wind"
" void"
"(lambda()"
"(let-values(((bstr_46)(read-bytes 8192 p_45)))"
"(if(if(bytes? bstr_46)(>=(bytes-length bstr_46) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_46"
"((letrec-values(((loop_47)"
"(lambda()"
"(let-values(((bstr_48)(read-bytes 8192 p_45)))"
"(if(eof-object? bstr_48) null(cons bstr_48(loop_47)))))))"
" loop_47))))"
" bstr_46)))"
"(lambda()(close-input-port p_45))))"
" evt_44)))))))"
" stamp-prompt-tag)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_49)(let-values(((or-part_50)(not a_49)))(if or-part_50 or-part_50(not(car a_49))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_51)"
"(call-with-escape-continuation"
"(lambda(esc_52)"
"(let-values(((make-handler_53)"
"(lambda(ts_54)"
"(lambda(exn_55)"
"(begin"
"(if(exn:fail? exn_55)"
"(let-values(((l_56)(current-logger)))"
"(if(log-level? l_56 'error)"
"(let-values()"
"(log-message"
" l_56"
" 'error"
"(format"
"                                     \"error reading collection links file ~s: ~a\""
" links-path_51"
"(exn-message exn_55))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_54"
"(let-values()(hash-set! links-cache links-path_51(cons ts_54 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_55)(esc_52(make-hasheq)) exn_55))))))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 #f)"
"(let-values(((links-stamp+cache_57)(hash-ref links-cache links-path_51 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_58)(car links-stamp+cache_57)))"
"(let-values(((ts_59)(file->stamp links-path_51 a-links-stamp_58)))"
"(if(not(equal? ts_59 a-links-stamp_58))"
"(with-continuation-mark"
" exception-handler-key"
"(make-handler_53 ts_59)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_60)"
"(if(no-file-stamp? ts_59)"
" null"
"(let-values(((p_61)(open-input-file links-path_51 'binary)))"
"(dynamic-wind"
" void"
"(lambda()"
"(begin0"
"(read p_61)"
"(if(eof-object?(read p_61))"
"(void)"
"                                               (let-values () (error \"expected a single S-expression\")))))"
"(lambda()(close-input-port p_61)))))))"
"(begin"
"(if(if(list? v_60)"
"(andmap"
"(lambda(p_62)"
"(if(list? p_62)"
"(if(let-values(((or-part_63)(= 2(length p_62))))"
"(if or-part_63 or-part_63(= 3(length p_62))))"
"(if(let-values(((or-part_64)(string?(car p_62))))"
"(if or-part_64"
" or-part_64"
"(let-values(((or-part_65)(eq? 'root(car p_62))))"
"(if or-part_65 or-part_65(eq? 'static-root(car p_62))))))"
"(if(path-string?(cadr p_62))"
"(let-values(((or-part_66)(null?(cddr p_62))))"
"(if or-part_66 or-part_66(regexp?(caddr p_62))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_60)"
" #f)"
"(void)"
"                            (let-values () (error \"ill-formed content\")))"
"(let-values(((ht_67)(make-hasheq))"
"((dir_68)"
"(let-values(((base_69 name_70 dir?_71)(split-path links-path_51))) base_69)))"
"(begin"
"(for-each"
"(lambda(p_72)"
"(if(let-values(((or-part_73)(null?(cddr p_72))))"
"(if or-part_73 or-part_73(regexp-match?(caddr p_72)(version))))"
"(let-values()"
"(let-values(((dir_74)(simplify-path(path->complete-path(cadr p_72) dir_68))))"
"(if(eq?(car p_72) 'static-root)"
"(let-values()"
"(for-each"
"(lambda(sub_75)"
"(if(directory-exists?(build-path dir_74 sub_75))"
"(let-values()"
"(let-values(((k_76)(string->symbol(path->string sub_75))))"
"(hash-set! ht_67 k_76(cons dir_74(hash-ref ht_67 k_76 null)))))"
"(void)))"
"(directory-list dir_74)))"
"(if(eq?(car p_72) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_67 #f #f)"
"(void)"
"(let-values()(hash-set! ht_67 #f null)))"
"(hash-for-each"
" ht_67"
"(lambda(k_77 v_78)(hash-set! ht_67 k_77(cons dir_74 v_78))))))"
"(let-values()"
"(let-values(((s_79)(string->symbol(car p_72))))"
"(hash-set!"
" ht_67"
" s_79"
"(cons(box dir_74)(hash-ref ht_67 s_79 null)))))))))"
"(void)))"
" v_60)"
"(hash-for-each ht_67(lambda(k_80 v_81)(hash-set! ht_67 k_80(reverse v_81))))"
"(hash-set! links-cache links-path_51(cons ts_59 ht_67))"
" ht_67)))))))"
"(cdr links-stamp+cache_57)))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_82 collection-path_83)"
"(if(string? collection_82)"
"(let-values()"
"        (let-values (((m_84) (regexp-match-positions '#rx\"/+\" collection_82)))"
"(if m_84"
"(if(=(caar m_84)(sub1(string-length collection_82)))"
"(let-values()(values(substring collection_82 0(caar m_84)) collection-path_83))"
"(let-values()"
"(values"
"(substring collection_82 0(caar m_84))"
"(cons(substring collection_82(cdar m_84)) collection-path_83))))"
"(values collection_82 collection-path_83))))"
"(let-values()"
"(let-values(((base_85 name_86 dir?_87)(split-path collection_82)))"
"(if(eq? base_85 'relative)"
"(values name_86 collection-path_83)"
"(normalize-collection-reference base_85(cons name_86 collection-path_83))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_88 collection_89 collection-path_90 file-name_91 check-compiled?_92)"
"(let-values(((collection_93 collection-path_94)(normalize-collection-reference collection_89 collection-path_90)))"
"(let-values(((all-paths_95)"
"(let-values(((sym_96)"
"(string->symbol"
"(if(path? collection_93)(path->string collection_93) collection_93))))"
"((letrec-values(((loop_97)"
"(lambda(l_98)"
"(if(null? l_98)"
"(let-values() null)"
"(if(not(car l_98))"
"(let-values()"
"(append(current-library-collection-paths)(loop_97(cdr l_98))))"
"(if(hash?(car l_98))"
"(let-values()"
"(append"
"(map box(hash-ref(car l_98) sym_96 null))"
"(hash-ref(car l_98) #f null)"
"(loop_97(cdr l_98))))"
"(let-values()"
"(let-values(((ht_99)(get-linked-collections(car l_98))))"
"(append"
"(hash-ref ht_99 sym_96 null)"
"(hash-ref ht_99 #f null)"
"(loop_97(cdr l_98)))))))))))"
" loop_97)"
"(current-library-collection-links)))))"
"(let-values(((done_100)(lambda(p_104)(if file-name_91(build-path p_104 file-name_91) p_104))))"
"(let-values(((*build-path-rep_101)"
"(lambda(p_105 c_106)(if(path? p_105)(build-path p_105 c_106)(unbox p_105)))))"
"(let-values(((*directory-exists?_102)"
"(lambda(orig_107 p_108)(if(path? orig_107)(directory-exists? p_108) #t))))"
"(let-values(((to-string_103)(lambda(p_109)(if(path? p_109)(path->string p_109) p_109))))"
"((letrec-values(((cloop_110)"
"(lambda(paths_111 found-col_112)"
"(if(null? paths_111)"
"(if found-col_112"
"(done_100 found-col_112)"
"(let-values(((rest-coll_113)"
"(if(null? collection-path_94)"
"                                                        \"\""
"(apply"
" string-append"
"((letrec-values(((loop_114)"
"(lambda(cp_115)"
"(if(null?(cdr cp_115))"
"(list(to-string_103(car cp_115)))"
"(list*"
"(to-string_103(car cp_115))"
"                                                                                \"/\""
"(loop_114(cdr cp_115)))))))"
" loop_114)"
" collection-path_94)))))"
"(letrec-values(((filter_116)"
"(lambda(f_117 l_118)"
"(if(null? l_118)"
" null"
"(if(f_117(car l_118))"
"(cons(car l_118)(filter_116 f_117(cdr l_118)))"
"(filter_116 f_117(cdr l_118)))))))"
"(fail_88"
"(format"
"                                              \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_94)"
"(to-string_103 collection_93)"
"                                                (string-append (to-string_103 collection_93) \"/\" rest-coll_113))"
"(apply"
" string-append"
"(map"
"                                                (lambda (p_119) (format \"\\n ~a ~a\" \" \" p_119))"
"(let-values(((len_120)(length all-paths_95))"
"((clen_121)(length(current-library-collection-paths))))"
"(if(<(- len_120 clen_121) 5)"
" all-paths_95"
"(append"
"(current-library-collection-paths)"
"(list"
"(format"
"                                                       \"... [~a additional linked and package directories]\""
"(- len_120 clen_121))))))))"
"(if(ormap box? all-paths_95)"
"(format"
"                                                 \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_113"
"(apply"
" string-append"
"(map"
"                                                   (lambda (p_122) (format \"\\n   ~a\" (unbox p_122)))"
"(filter_116 box? all-paths_95))))"
"                                                \"\"))))))"
"(let-values(((dir_123)(*build-path-rep_101(car paths_111) collection_93)))"
"(if(*directory-exists?_102(car paths_111) dir_123)"
"(let-values(((cpath_124)(apply build-path dir_123 collection-path_94)))"
"(if(if(null? collection-path_94) #t(directory-exists? cpath_124))"
"(if file-name_91"
"(if(let-values(((or-part_125)"
"(file-exists?/maybe-compiled"
" cpath_124"
" file-name_91"
" check-compiled?_92)))"
"(if or-part_125"
" or-part_125"
"(let-values(((alt-file-name_126)"
"(let-values(((file-name_127)"
"(if(path? file-name_91)"
"(path->string file-name_91)"
" file-name_91)))"
"(let-values(((len_128)"
"(string-length file-name_127)))"
"(if(>= len_128 4)"
"(if(string=?"
"                                                                                 \".rkt\""
"(substring"
" file-name_127"
"(- len_128 4)))"
"(string-append"
"(substring file-name_127 0(- len_128 4))"
"                                                                               \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_126"
"(file-exists?/maybe-compiled"
" cpath_124"
" alt-file-name_126"
" check-compiled?_92)"
" #f))))"
"(done_100 cpath_124)"
"(cloop_110"
"(cdr paths_111)"
"(let-values(((or-part_129) found-col_112))"
"(if or-part_129 or-part_129 cpath_124))))"
"(done_100 cpath_124))"
"(cloop_110(cdr paths_111) found-col_112)))"
"(cloop_110(cdr paths_111) found-col_112)))))))"
" cloop_110)"
" all-paths_95"
" #f)))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_130 path_131 check-compiled?_132)"
"(let-values(((or-part_133)(file-exists?(build-path dir_130 path_131))))"
"(if or-part_133"
" or-part_133"
"(if check-compiled?_132"
"          (let-values (((try-path_134) (path-add-extension path_131 #\".zo\"))"
"((modes_135)(use-compiled-file-paths))"
"((roots_136)(current-compiled-file-roots)))"
"(ormap"
"(lambda(d_137)"
"(ormap"
"(lambda(mode_138)"
"(file-exists?"
"(let-values(((p_139)(build-path dir_130 mode_138 try-path_134)))"
"(if(eq? d_137 'same)"
"(let-values() p_139)"
"(if(relative-path? d_137)"
"(let-values()(build-path p_139 d_137))"
"(let-values()(reroot-path p_139 d_137)))))))"
" modes_135))"
" roots_136))"
" #f)))))"
"(define-values"
"(find-library-collection-paths)"
"(case-lambda"
"(()(find-library-collection-paths null null))"
"((extra-collects-dirs_140)(find-library-collection-paths extra-collects-dirs_140 null))"
"((extra-collects-dirs_141 post-collects-dirs_142)"
"(let-values(((user-too?_143)(use-user-specific-search-paths))"
"((cons-if_144)(lambda(f_146 r_147)(if f_146(cons f_146 r_147) r_147)))"
"((config-table_145)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_143"
"         (let-values (((c_148) (environment-variables-ref (current-environment-variables) #\"PLTCOLLECTS\")))"
"           (if c_148 (bytes->string/locale c_148 '#\\?) \"\"))"
"         \"\")"
"(add-config-search"
" config-table_145"
" 'collects-search-dirs"
"(cons-if_144"
"(if user-too?_143"
"           (build-path (find-system-path 'addon-dir) (get-installation-name config-table_145) \"collects\")"
" #f)"
"((letrec-values(((loop_149)"
"(lambda(l_150)"
"(if(null? l_150)"
" null"
"(let-values(((collects-path_151)(car l_150)))"
"(let-values(((v_152)(exe-relative-path->complete-path collects-path_151)))"
"(if v_152"
"(cons"
"(simplify-path(path->complete-path v_152(current-directory)))"
"(loop_149(cdr l_150)))"
"(loop_149(cdr l_150)))))))))"
" loop_149)"
"(append extra-collects-dirs_141(list(find-system-path 'collects-dir)) post-collects-dirs_142)))))))))"
"(define-values(load/use-compiled)(lambda(f_1)((current-load/use-compiled) f_1 #f)))"
"(define-values"
"(embedded-load)"
"(lambda(start_2 end_3 str_4)"
"(let-values(((s_5)"
"(if str_4"
" str_4"
"(let-values(((sp_6)(find-system-path 'exec-file)))"
"(let-values(((exe_7)(find-executable-path sp_6 #f)))"
"(let-values(((start_8)"
"(let-values(((or-part_9)(string->number start_2)))(if or-part_9 or-part_9 0))))"
"(let-values(((end_10)"
"(let-values(((or-part_11)(string->number end_3)))"
"(if or-part_11 or-part_11 0))))"
"(with-input-from-file"
" exe_7"
"(lambda()"
"(begin"
"(file-position(current-input-port) start_8)"
"(read-bytes(max 0(- end_10 start_8)))))))))))))"
"(let-values(((p_12)(open-input-bytes s_5)))"
"((letrec-values(((loop_13)"
"(lambda()"
"(let-values(((e_14)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(read p_12)))))"
"(if(eof-object? e_14)(void)(let-values()(begin((current-eval) e_14)(loop_13))))))))"
" loop_13))))))"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_1534)"
"(if(keyword-impersonator? v_1534)(let-values()((keyword-impersonator-ref v_1534) v_1534))(let-values() #f))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:checked-procedure #t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" #f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-checker)(make-struct-field-accessor keyword-procedure-ref 0))"
"(define-values(keyword-procedure-proc)(make-struct-field-accessor keyword-procedure-ref 1))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref 2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref 3))"
"(define-values"
"(struct:keyword-method make-km keyword-method? km-ref km-set!)"
"(make-struct-type 'procedure struct:keyword-procedure 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(generate-arity-string)"
"(lambda(proc_1535)"
"(let-values(((req_1536 allowed_1537)(procedure-keywords proc_1535))"
"((a_1538)(procedure-arity proc_1535))"
"((keywords-desc_1539)"
"(lambda(opt_1541 req_1542)"
"(format"
"                     \"~a with keyword~a~a\""
"                     (if (null? (cdr req_1542)) (format \"an ~aargument\" opt_1541) (format \"~aarguments\" opt_1541))"
"                     (if (null? (cdr req_1542)) \"\" \"s\")"
"(let-values(((tmp_1543)(length req_1542)))"
"(if(equal? tmp_1543 1)"
"                         (let-values () (format \" ~a\" (car req_1542)))"
"(if(equal? tmp_1543 2)"
"                           (let-values () (format \" ~a and ~a\" (car req_1542) (cadr req_1542)))"
"(let-values()"
"((letrec-values(((loop_1544)"
"(lambda(req_1545)"
"(if(null?(cdr req_1545))"
"                                                   (format \" and ~a\" (car req_1545))"
"                                                   (format \" ~a,~a\" (car req_1545) (loop_1544 (cdr req_1545)))))))"
" loop_1544)"
" req_1542))))))))"
"((method-adjust_1540)"
"(lambda(a_1546)"
"(if(let-values(((or-part_1547)(okm? proc_1535)))"
"(if or-part_1547 or-part_1547(keyword-method? proc_1535)))"
"(if(zero? a_1546) 0(sub1 a_1546))"
" a_1546))))"
"(string-append"
"(if(number? a_1538)"
"         (let-values () (let-values (((a_1548) (method-adjust_1540 a_1538))) (format \"~a\" a_1548)))"
"(if(arity-at-least? a_1538)"
"(let-values()"
"             (let-values (((a_1549) (method-adjust_1540 (arity-at-least-value a_1538)))) (format \"at least ~a\" a_1549)))"
"           (let-values () \"a different number\")))"
"       (if (null? req_1536) \"\" (format \" plus ~a\" (keywords-desc_1539 \"\" req_1536)))"
"(if allowed_1537"
"(let-values(((others_1550)"
"((letrec-values(((loop_1551)"
"(lambda(req_1552 allowed_1553)"
"(if(null? req_1552)"
"(let-values() allowed_1553)"
"(if(eq?(car req_1552)(car allowed_1553))"
"(let-values()(loop_1551(cdr req_1552)(cdr allowed_1553)))"
"(let-values()"
"(cons(car allowed_1553)(loop_1551 req_1552(cdr allowed_1553)))))))))"
" loop_1551)"
" req_1536"
" allowed_1537)))"
"           (if (null? others_1550) \"\" (format \" plus ~a\" (keywords-desc_1539 \"optional \" others_1550))))"
"         \" plus arbitrary keyword arguments\")))))"
"(define-values"
"(struct:okp make-optional-keyword-procedure okp? okp-ref okp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:arity-string generate-arity-string))"
"(current-inspector)"
" 0))"
"(define-values"
"(struct:okm make-optional-keyword-method okm? okm-ref okm-set!)"
"(make-struct-type 'procedure struct:okp 0 0 #f(list(cons prop:method-arity-error #t))))"
"(define-values"
"(prop:named-keyword-procedure named-keyword-procedure? keyword-procedure-name+fail)"
"(make-struct-type-property 'named-keyword-procedure))"
"(define-values"
"(make-required)"
"(lambda(name_1554 fail-proc_1555 method?_1556 impersonator?_1557)"
"(let-values(((s:_1558 mk_1559 ?_1560 -ref_1561 -set!_1562)"
"(make-struct-type"
"(let-values(((or-part_1563) name_1554))(if or-part_1563 or-part_1563 'unknown))"
"(if impersonator?_1557"
"(if method?_1556 struct:keyword-method-impersonator struct:keyword-procedure-impersonator)"
"(if method?_1556 struct:keyword-method struct:keyword-procedure))"
" 0"
" 0"
" #f"
"(list"
"(cons prop:arity-string generate-arity-string)"
"(cons prop:named-keyword-procedure(cons name_1554 fail-proc_1555))"
"(cons prop:incomplete-arity #t))"
"(current-inspector)"
" fail-proc_1555)))"
" mk_1559)))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_1564 info-l_1565)"
"(if(exact-integer? v_1564)(make-struct-field-accessor(list-ref info-l_1565 3) v_1564) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property 'procedure #f(list(cons prop:procedure values)(cons prop:procedure-accessor values))))"
"(define-values"
"(struct:keyword-procedure-impersonator make-kpp keyword-procedure-impersonator? kpp-ref kpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-procedure"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1566)(kpp-ref v_1566 0))))))"
"(define-values"
"(struct:keyword-method-impersonator make-kmp keyword-method-impersonator? kmp-ref kmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:keyword-method"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1567)(kmp-ref v_1567 0))))))"
"(define-values"
"(struct:okpp make-optional-keyword-procedure-impersonator okpp? okpp-ref okpp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1568)(okpp-ref v_1568 0))))))"
"(define-values"
"(struct:okmp make-optional-keyword-method-impersonator okmp? okmp-ref okmp-set!)"
"(make-struct-type"
" 'procedure"
" struct:okp"
" 1"
" 0"
" #f"
"(list(cons prop:keyword-impersonator(lambda(v_1569)(okmp-ref v_1569 0))))))"
"(define-values"
"(make-keyword-procedure)"
"(case-lambda"
"((proc_1570)(make-keyword-procedure proc_1570(lambda args_1571(apply proc_1570 null null args_1571))))"
"((proc_1572 plain-proc_1573)"
"(make-optional-keyword-procedure"
"(make-keyword-checker null #f(procedure-arity proc_1572))"
" proc_1572"
" null"
" #f"
" plain-proc_1573))))"
"(define-values"
"(keyword-apply)"
"(lambda(proc_1574 kws_1575 kw-vals_1576 normal-args_1577 . normal-argss_1578)"
"(let-values(((type-error_1579)"
"(lambda(what_1580 which_1581)"
"(apply"
" raise-argument-error"
" 'keyword-apply"
" what_1580"
" which_1581"
" proc_1574"
" kws_1575"
" kw-vals_1576"
" normal-args_1577"
" normal-argss_1578))))"
"(begin"
"        (if (procedure? proc_1574) (void) (let-values () (type-error_1579 \"procedure?\" 0)))"
"((letrec-values(((loop_1582)"
"(lambda(ks_1583)"
"(if(null? ks_1583)"
"(let-values()(void))"
"(if(let-values(((or-part_1584)(not(pair? ks_1583))))"
"(if or-part_1584 or-part_1584(not(keyword?(car ks_1583)))))"
"                                (let-values () (type-error_1579 \"(listof keyword?)\" 1))"
"(if(null?(cdr ks_1583))"
"(let-values()(void))"
"(if(let-values(((or-part_1585)(not(pair?(cdr ks_1583)))))"
"(if or-part_1585 or-part_1585(not(keyword?(cadr ks_1583)))))"
"(let-values()(loop_1582(cdr ks_1583)))"
"(if(keyword<?(car ks_1583)(cadr ks_1583))"
"(let-values()(loop_1582(cdr ks_1583)))"
"(let-values()"
"                                        (type-error_1579 \"(and/c (listof? keyword?) sorted? distinct?)\" 1))))))))))"
" loop_1582)"
" kws_1575)"
"        (if (list? kw-vals_1576) (void) (let-values () (type-error_1579 \"list?\" 2)))"
"(if(=(length kws_1575)(length kw-vals_1576))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'keyword-apply"
"             \"keyword list length does not match value list length\""
"             \"keyword list length\""
"(length kws_1575)"
"             \"value list length\""
"(length kw-vals_1576)"
"             \"keyword list\""
" kws_1575"
"             \"value list\""
" kw-vals_1576)))"
"(let-values(((normal-args_1586)"
"((letrec-values(((loop_1587)"
"(lambda(normal-argss_1588 pos_1589)"
"(if(null?(cdr normal-argss_1588))"
"(let-values(((l_1590)(car normal-argss_1588)))"
"                                              (if (list? l_1590) l_1590 (type-error_1579 \"list?\" pos_1589)))"
"(cons"
"(car normal-argss_1588)"
"(loop_1587(cdr normal-argss_1588)(add1 pos_1589)))))))"
" loop_1587)"
"(cons normal-args_1577 normal-argss_1578)"
" 3)))"
"(if(null? kws_1575)"
"(apply proc_1574 normal-args_1586)"
"(apply"
"(keyword-procedure-extract/method kws_1575(+ 2(length normal-args_1586)) proc_1574 0)"
" kws_1575"
" kw-vals_1576"
" normal-args_1586)))))))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_1591)"
"(if(keyword-procedure? p_1591)"
"(let-values()(values(keyword-procedure-required p_1591)(keyword-procedure-allowed p_1591)))"
"(if(procedure? p_1591)"
"(let-values()"
"(if(new-procedure? p_1591)"
"(let-values(((v_1592)(new-procedure-ref p_1591)))"
"(if(procedure? v_1592)"
"(procedure-keywords v_1592)"
"(let-values(((a_1593)(procedure-accessor-ref p_1591)))"
"(if a_1593(procedure-keywords(a_1593 p_1591))(values null null)))))"
"(values null null)))"
"        (let-values () (raise-argument-error 'procedure-keywords \"procedure?\" p_1591))))))"
"(define-values"
"(missing-kw)"
"(lambda(proc_1594 . args_1595)(apply(keyword-procedure-extract/method null 0 proc_1594 0) null null args_1595)))"
"(define-values"
"(check-kw-args)"
"(lambda(p_1596 kws_1597)"
"((letrec-values(((loop_1598)"
"(lambda(kws_1599 required_1600 allowed_1601)"
"(if(null? kws_1599)"
"(let-values()(if(null? required_1600)(values #f #f)(values(car required_1600) #f)))"
"(if(if(pair? required_1600)(eq?(car required_1600)(car kws_1599)) #f)"
"(let-values()"
"(loop_1598(cdr kws_1599)(cdr required_1600)(if allowed_1601(cdr allowed_1601) #f)))"
"(if(not allowed_1601)"
"(let-values()(loop_1598(cdr kws_1599) required_1600 #f))"
"(if(pair? allowed_1601)"
"(let-values()"
"(if(eq?(car allowed_1601)(car kws_1599))"
"(loop_1598(cdr kws_1599) required_1600(cdr allowed_1601))"
"(loop_1598 kws_1599 required_1600(cdr allowed_1601))))"
"(let-values()(values #f(car kws_1599))))))))))"
" loop_1598)"
" kws_1597"
"(keyword-procedure-required p_1596)"
"(keyword-procedure-allowed p_1596))))"
"(define-values"
"(make-keyword-checker)"
"(lambda(req-kws_1602 allowed-kws_1603 arity_1604)"
"(if(not allowed-kws_1603)"
"(let-values()"
"(if(null? req-kws_1602)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1615 a_1616)(if #t(= a_1616 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1617)(arity-at-least-value arity_1604)))"
"(lambda(kws_1618 a_1619)(if #t(>= a_1619 arity_1617) #f))))"
"(let-values()(lambda(kws_1620 a_1621)(if #t(arity-includes? arity_1604 a_1621) #f))))))"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1622 a_1623)(if(subset? req-kws_1602 kws_1622)(= a_1623 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1624)(arity-at-least-value arity_1604)))"
"(lambda(kws_1625 a_1626)(if(subset? req-kws_1602 kws_1625)(>= a_1626 arity_1624) #f))))"
"(let-values()"
"(lambda(kws_1627 a_1628)"
"(if(subset? req-kws_1602 kws_1627)(arity-includes? arity_1604 a_1628) #f))))))))"
"(if(null? allowed-kws_1603)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()(lambda(kws_1629 a_1630)(if(null? kws_1629)(= a_1630 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1631)(arity-at-least-value arity_1604)))"
"(lambda(kws_1632 a_1633)(if(null? kws_1632)(>= a_1633 arity_1631) #f))))"
"(let-values()(lambda(kws_1634 a_1635)(if(null? kws_1634)(arity-includes? arity_1604 a_1635) #f))))))"
"(let-values()"
"(if(null? req-kws_1602)"
"(let-values()"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1636 a_1637)(if(subset? kws_1636 allowed-kws_1603)(= a_1637 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1638)(arity-at-least-value arity_1604)))"
"(lambda(kws_1639 a_1640)(if(subset? kws_1639 allowed-kws_1603)(>= a_1640 arity_1638) #f))))"
"(let-values()"
"(lambda(kws_1641 a_1642)"
"(if(subset? kws_1641 allowed-kws_1603)(arity-includes? arity_1604 a_1642) #f))))))"
"(let-values()"
"(if(equal? req-kws_1602 allowed-kws_1603)"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1643 a_1644)"
"(if((letrec-values(((loop_1645)"
"(lambda(kws_1646 req-kws_1647)"
"(if(null? req-kws_1647)"
"(null? kws_1646)"
"(if(null? kws_1646)"
" #f"
"(if(eq?(car kws_1646)(car req-kws_1647))"
"(loop_1645(cdr kws_1646)(cdr req-kws_1647))"
" #f))))))"
" loop_1645)"
" kws_1643"
" req-kws_1602)"
"(= a_1644 arity_1604)"
" #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1648)(arity-at-least-value arity_1604)))"
"(lambda(kws_1649 a_1650)"
"(if((letrec-values(((loop_1651)"
"(lambda(kws_1652 req-kws_1653)"
"(if(null? req-kws_1653)"
"(null? kws_1652)"
"(if(null? kws_1652)"
" #f"
"(if(eq?(car kws_1652)(car req-kws_1653))"
"(loop_1651(cdr kws_1652)(cdr req-kws_1653))"
" #f))))))"
" loop_1651)"
" kws_1649"
" req-kws_1602)"
"(>= a_1650 arity_1648)"
" #f))))"
"(let-values()"
"(lambda(kws_1654 a_1655)"
"(if((letrec-values(((loop_1656)"
"(lambda(kws_1657 req-kws_1658)"
"(if(null? req-kws_1658)"
"(null? kws_1657)"
"(if(null? kws_1657)"
" #f"
"(if(eq?(car kws_1657)(car req-kws_1658))"
"(loop_1656(cdr kws_1657)(cdr req-kws_1658))"
" #f))))))"
" loop_1656)"
" kws_1654"
" req-kws_1602)"
"(arity-includes? arity_1604 a_1655)"
" #f)))))"
"(if(integer? arity_1604)"
"(let-values()"
"(lambda(kws_1659 a_1660)"
"(if(subsets? req-kws_1602 kws_1659 allowed-kws_1603)(= a_1660 arity_1604) #f)))"
"(if(arity-at-least? arity_1604)"
"(let-values()"
"(let-values(((arity_1661)(arity-at-least-value arity_1604)))"
"(lambda(kws_1662 a_1663)"
"(if(subsets? req-kws_1602 kws_1662 allowed-kws_1603)(>= a_1663 arity_1661) #f))))"
"(let-values()"
"(lambda(kws_1664 a_1665)"
"(if(subsets? req-kws_1602 kws_1664 allowed-kws_1603)"
"(arity-includes? arity_1604 a_1665)"
" #f)))))))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(arity_1666 a_1667)"
"(if(integer? arity_1666)"
"(let-values()(= arity_1666 a_1667))"
"(if(arity-at-least? arity_1666)"
"(let-values()(>= a_1667(arity-at-least-value a_1667)))"
"(let-values()(ormap(lambda(ar_1668)(arity-includes? ar_1668 a_1667)) arity_1666))))))"
"(define-values"
"(subset?)"
"(lambda(l1_1669 l2_1670)"
"(if(null? l1_1669)"
"(let-values() #t)"
"(if(null? l2_1670)"
"(let-values() #f)"
"(if(eq?(car l1_1669)(car l2_1670))"
"(let-values()(subset?(cdr l1_1669)(cdr l2_1670)))"
"(let-values()(subset? l1_1669(cdr l2_1670))))))))"
"(define-values"
"(subsets?)"
"(lambda(l1_1671 l2_1672 l3_1673)"
"(if(null? l1_1671)"
"(let-values()(subset? l2_1672 l3_1673))"
"(if(null? l2_1672)"
"(let-values() #f)"
"(if(null? l3_1673)"
"(let-values() #f)"
"(let-values()"
"(let-values(((v2_1674)(car l2_1672)))"
"(if(eq?(car l1_1671) v2_1674)"
"(let-values()(subsets?(cdr l1_1671)(cdr l2_1672)(cdr l3_1673)))"
"(if(eq? v2_1674(car l3_1673))"
"(let-values()(subsets? l1_1671(cdr l2_1672)(cdr l3_1673)))"
"(let-values()(subsets? l1_1671 l2_1672(cdr l3_1673))))))))))))"
"(define-values"
"(keyword-procedure-extract/method)"
"(lambda(kws_1675 n_1676 p_1677 method-n_1678)"
"(if(if(keyword-procedure? p_1677)((keyword-procedure-checker p_1677) kws_1675 n_1676) #f)"
"(keyword-procedure-proc p_1677)"
"(let-values(((p2_1679)"
"(if(not(keyword-procedure? p_1677))"
"(if(procedure? p_1677)"
"(let-values(((or-part_1680)"
"(if(new-procedure? p_1677)"
"(let-values(((a_1681)(procedure-accessor-ref p_1677)))"
"(if a_1681(a_1681 p_1677) #f))"
" #f)))"
"(if or-part_1680"
" or-part_1680"
"(let-values(((or-part_1682)(procedure-extract-target p_1677)))"
"(if or-part_1682 or-part_1682(if(new-procedure? p_1677) 'method #f)))))"
" #f)"
" #f)))"
"(if p2_1679"
"(if(eq? p2_1679 'method)"
"(let-values(((p3_1683)"
"(keyword-procedure-extract/method"
" kws_1675"
"(add1 n_1676)"
"(new-procedure-ref p_1677)"
"(add1 method-n_1678))))"
"(lambda(kws_1684 kw-args_1685 . args_1686)"
"(apply p3_1683 kws_1684 kw-args_1685(cons p_1677 args_1686))))"
"(keyword-procedure-extract/method kws_1675 n_1676 p2_1679 method-n_1678))"
"(lambda(kws_1687 kw-args_1688 . args_1689)"
"(let-values(((missing-kw_1690 extra-kw_1691)"
"(if(keyword-procedure? p_1677)(check-kw-args p_1677 kws_1687)(values #f(car kws_1687)))))"
"(let-values(((n_1692)"
"(let-values(((method-n_1695)"
"(+"
" method-n_1678"
"(if(let-values(((or-part_1696)(keyword-method? p_1677)))"
"(if or-part_1696 or-part_1696(okm? p_1677)))"
" 1"
" 0))))"
"(if(>= n_1676 method-n_1695)(- n_1676 method-n_1695) n_1676)))"
"((args-str_1693)"
"(if(if(null? args_1689)(null? kws_1687) #f)"
"                              \"\""
"(apply"
" string-append"
"                               \"\\n  arguments...:\""
"(append"
"                                (map (lambda (v_1697) (format \"\\n   ~e\" v_1697)) args_1689)"
"(map"
"                                 (lambda (kw_1698 kw-arg_1699) (format \"\\n   ~a ~e\" kw_1698 kw-arg_1699))"
" kws_1687"
" kw-args_1688)))))"
"((proc-name_1694)"
"(lambda(p_1700)"
"(let-values(((or-part_1701)"
"(if(named-keyword-procedure? p_1700)"
"(car(keyword-procedure-name+fail p_1700))"
" #f)))"
"(if or-part_1701"
" or-part_1701"
"(let-values(((or-part_1702)(object-name p_1700)))"
"(if or-part_1702 or-part_1702 p_1700)))))))"
"(raise"
"(exn:fail:contract"
"(if extra-kw_1691"
"(if(keyword-procedure? p_1677)"
"(format"
"(string-append"
"                        \"application: procedure does not expect an argument with given keyword\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  given keyword: ~a\""
"                        \"~a\")"
"(proc-name_1694 p_1677)"
" extra-kw_1691"
" args-str_1693)"
"(if(procedure? p_1677)"
"(format"
"(string-append"
"                          \"application: procedure does not accept keyword arguments\\n\""
"                          \"  procedure: ~a\""
"                          \"~a\")"
"(proc-name_1694 p_1677)"
" args-str_1693)"
"(format"
"(string-append"
"                          \"application: not a procedure;\\n\""
"                          \" expected a procedure that can be applied to arguments\\n\""
"                          \"  given: ~e\""
"                          \"~a\")"
" p_1677"
" args-str_1693)))"
"(if missing-kw_1690"
"(format"
"(string-append"
"                        \"application: required keyword argument not supplied\\n\""
"                        \"  procedure: ~a\\n\""
"                        \"  required keyword: ~a\""
"                        \"~a\")"
"(proc-name_1694 p_1677)"
" missing-kw_1690"
" args-str_1693)"
"(format"
"(string-append"
"                        \"application: no case matching ~a non-keyword argument~a\\n\""
"                        \"  procedure: ~a\""
"                        \"~a\")"
"(- n_1692 2)"
"                       (if (= 1 (- n_1692 2)) \"\" \"s\")"
"(proc-name_1694 p_1677)"
" args-str_1693)))"
"(current-continuation-marks)))))))))))"
"(define-values"
"(keyword-procedure-extract)"
"(lambda(p_1703 kws_1704 n_1705)(keyword-procedure-extract/method kws_1704 n_1705 p_1703 0)))"
"(define-values"
"(procedure-reduce-keyword-arity)"
"(lambda(proc_1706 arity_1707 req-kw_1708 allowed-kw_1709)"
"(let-values(((plain-proc_1710)"
"(procedure-reduce-arity(if(okp? proc_1706)(okp-ref proc_1706 0) proc_1706) arity_1707)))"
"(let-values(((sorted?_1711)"
"(lambda(kws_1712)"
"((letrec-values(((loop_1713)"
"(lambda(kws_1714)"
"(if(null? kws_1714)"
"(let-values() #t)"
"(if(null?(cdr kws_1714))"
"(let-values() #t)"
"(if(keyword<?(car kws_1714)(cadr kws_1714))"
"(let-values()(loop_1713(cdr kws_1714)))"
"(let-values() #f)))))))"
" loop_1713)"
" kws_1712))))"
"(begin"
"(if(if(list? req-kw_1708)(if(andmap keyword? req-kw_1708)(sorted?_1711 req-kw_1708) #f) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'procedure-reduce-keyword-arity"
"               \"(and/c (listof? keyword?) sorted? distinct?)\""
" 2"
" proc_1706"
" arity_1707"
" req-kw_1708"
" allowed-kw_1709)))"
"(if allowed-kw_1709"
"(let-values()"
"(begin"
"(if(if(list? allowed-kw_1709)"
"(if(andmap keyword? allowed-kw_1709)(sorted?_1711 allowed-kw_1709) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'procedure-reduce-keyword-arity"
"                     \"(or/c (and/c (listof? keyword?) sorted? distinct?) #f)\""
" 3"
" proc_1706"
" arity_1707"
" req-kw_1708"
" allowed-kw_1709)))"
"(if(subset? req-kw_1708 allowed-kw_1709)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'procedure-reduce-keyword-arity"
"                     \"allowed-keyword list does not include all required keywords\""
"                     \"allowed-keyword list\""
" allowed-kw_1709"
"                     \"required keywords\""
" req-kw_1708)))))"
"(void))"
"(let-values(((old-req_1715 old-allowed_1716)(procedure-keywords proc_1706)))"
"(begin"
"(if(subset? old-req_1715 req-kw_1708)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'procedure-reduce-keyword-arity"
"                   \"cannot reduce required keyword set\""
"                   \"required keywords\""
" old-req_1715"
"                   \"requested required keywords\""
" req-kw_1708)))"
"(if old-allowed_1716"
"(let-values()"
"(begin"
"(if(subset? req-kw_1708 old-allowed_1716)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'procedure-reduce-keyword-arity"
"                         \"cannot require keywords not in original allowed set\""
"                         \"original allowed keywords\""
" old-allowed_1716"
"                         \"requested required keywords\""
" req-kw_1708)))"
"(if(let-values(((or-part_1717)(not allowed-kw_1709)))"
"(if or-part_1717 or-part_1717(subset? allowed-kw_1709 old-allowed_1716)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'procedure-reduce-keyword-arity"
"                         \"cannot allow keywords not in original allowed set\""
"                         \"original allowed keywords\""
" old-allowed_1716"
"                         \"requested allowed keywords\""
" allowed-kw_1709)))))"
"(void))))"
"(if(null? allowed-kw_1709)"
" plain-proc_1710"
"(let-values(((inc-arity_1718)"
"(lambda(arity_1719 delta_1720)"
"((letrec-values(((loop_1721)"
"(lambda(a_1722)"
"(if(integer? a_1722)"
"(let-values()(+ a_1722 delta_1720))"
"(if(arity-at-least? a_1722)"
"(let-values()"
"(arity-at-least(+(arity-at-least-value a_1722) delta_1720)))"
"(let-values()(map loop_1721 a_1722)))))))"
" loop_1721)"
" arity_1719))))"
"(let-values(((new-arity_1723)(inc-arity_1718 arity_1707 2)))"
"(let-values(((kw-checker_1724)(make-keyword-checker req-kw_1708 allowed-kw_1709 new-arity_1723)))"
"(let-values(((proc_1725)(normalize-proc proc_1706)))"
"(let-values(((new-kw-proc_1726)"
"(procedure-reduce-arity(keyword-procedure-proc proc_1725) new-arity_1723)))"
"(if(null? req-kw_1708)"
"((if(okm? proc_1725) make-optional-keyword-method make-optional-keyword-procedure)"
" kw-checker_1724"
" new-kw-proc_1726"
" req-kw_1708"
" allowed-kw_1709"
" plain-proc_1710)"
"((make-required"
"(let-values(((or-part_1727)"
"(if(named-keyword-procedure? proc_1725)"
"(car(keyword-procedure-name+fail proc_1725))"
" #f)))"
"(if or-part_1727 or-part_1727(object-name proc_1725)))"
"(procedure-reduce-arity missing-kw(inc-arity_1718 arity_1707 1))"
"(let-values(((or-part_1728)(okm? proc_1725)))"
"(if or-part_1728 or-part_1728(keyword-method? proc_1725)))"
" #f)"
" kw-checker_1724"
" new-kw-proc_1726"
" req-kw_1708"
" allowed-kw_1709)))))))))))))"
"(define-values"
"(new:procedure-reduce-arity)"
"(let-values(((procedure-reduce-arity_1729)"
"(lambda(proc_1730 arity_1731)"
"(if(if(procedure? proc_1730)"
"(if(let-values(((req_1732 allows_1733)(procedure-keywords proc_1730)))(pair? req_1732))"
"(not(null? arity_1731))"
" #f)"
" #f)"
"(raise-arguments-error"
" 'procedure-reduce-arity"
"                     \"procedure has required keyword arguments\""
"                     \"procedure\""
" proc_1730)"
"(procedure-reduce-arity"
"(if(okm? proc_1730)(procedure->method proc_1730) proc_1730)"
" arity_1731)))))"
" procedure-reduce-arity_1729))"
"(define-values"
"(new:procedure->method)"
"(let-values(((procedure->method_1734)"
"(lambda(proc_1735)"
"(let-values(((proc_1736)(normalize-proc proc_1735)))"
"(if(keyword-procedure? proc_1736)"
"(if(okm? proc_1736)"
"(let-values() proc_1736)"
"(if(keyword-method? proc_1736)"
"(let-values() proc_1736)"
"(if(okp? proc_1736)"
"(let-values()"
"(make-optional-keyword-method"
"(keyword-procedure-checker proc_1736)"
"(keyword-procedure-proc proc_1736)"
"(keyword-procedure-required proc_1736)"
"(keyword-procedure-allowed proc_1736)"
"(okp-ref proc_1736 0)))"
"(let-values()"
"(let-values(((name+fail_1737)(keyword-procedure-name+fail proc_1736)))"
"(let-values(((mk_1738)"
"(make-required(car name+fail_1737)(cdr name+fail_1737) #t #f)))"
"(mk_1738"
"(keyword-procedure-checker proc_1736)"
"(keyword-procedure-proc proc_1736)"
"(keyword-procedure-required proc_1736)"
"(keyword-procedure-allowed proc_1736))))))))"
"(procedure->method proc_1736))))))"
" procedure->method_1734))"
"(define-values"
"(new:procedure-rename)"
"(let-values(((procedure-rename_1739)"
"(lambda(proc_1740 name_1741)"
"(if(not(if(keyword-procedure? proc_1740)(symbol? name_1741) #f))"
"(procedure-rename proc_1740 name_1741)"
"(if(okp? proc_1740)"
"(let-values()"
"((if(okm? proc_1740) make-optional-keyword-procedure make-optional-keyword-method)"
"(keyword-procedure-checker proc_1740)"
"(keyword-procedure-proc proc_1740)"
"(keyword-procedure-required proc_1740)"
"(keyword-procedure-allowed proc_1740)"
"(procedure-rename(okp-ref proc_1740 0) name_1741)))"
"(let-values()"
"(let-values(((name+fail_1742)(keyword-procedure-name+fail proc_1740)))"
"(let-values(((mk_1743)"
"(make-required name_1741(cdr name+fail_1742)(keyword-method? proc_1740) #f)))"
"(mk_1743"
"(keyword-procedure-checker proc_1740)"
"(keyword-procedure-proc proc_1740)"
"(keyword-procedure-required proc_1740)"
"(keyword-procedure-allowed proc_1740))))))))))"
" procedure-rename_1739))"
"(define-values"
"(new:chaperone-procedure)"
"(let-values(((chaperone-procedure_1744)"
"(lambda(proc_1745 wrap-proc_1746 . props_1747)"
"(do-chaperone-procedure"
" #f"
" #f"
" chaperone-procedure"
" 'chaperone-procedure"
" proc_1745"
" wrap-proc_1746"
" props_1747))))"
" chaperone-procedure_1744))"
"(define-values"
"(new:unsafe-chaperone-procedure)"
"(let-values(((unsafe-chaperone-procedure_1748)"
"(lambda(proc_1749 wrap-proc_1750 . props_1751)"
"(do-unsafe-chaperone-procedure"
" unsafe-chaperone-procedure"
" 'unsafe-chaperone-procedure"
" proc_1749"
" wrap-proc_1750"
" props_1751))))"
" unsafe-chaperone-procedure_1748))"
"(define-values"
"(new:impersonate-procedure)"
"(let-values(((impersonate-procedure_1752)"
"(lambda(proc_1753 wrap-proc_1754 . props_1755)"
"(do-chaperone-procedure"
" #t"
" #f"
" impersonate-procedure"
" 'impersonate-procedure"
" proc_1753"
" wrap-proc_1754"
" props_1755))))"
" impersonate-procedure_1752))"
"(define-values"
"(new:unsafe-impersonate-procedure)"
"(let-values(((unsafe-impersonate-procedure_1756)"
"(lambda(proc_1757 wrap-proc_1758 . props_1759)"
"(do-unsafe-chaperone-procedure"
" unsafe-impersonate-procedure"
" 'unsafe-impersonate-procedure"
" proc_1757"
" wrap-proc_1758"
" props_1759))))"
" unsafe-impersonate-procedure_1756))"
"(define-values"
"(new:chaperone-procedure*)"
"(let-values(((chaperone-procedure*_1760)"
"(lambda(proc_1761 wrap-proc_1762 . props_1763)"
"(do-chaperone-procedure"
" #f"
" #t"
" chaperone-procedure*"
" 'chaperone-procedure"
" proc_1761"
" wrap-proc_1762"
" props_1763))))"
" chaperone-procedure*_1760))"
"(define-values"
"(new:impersonate-procedure*)"
"(let-values(((impersonate-procedure*_1764)"
"(lambda(proc_1765 wrap-proc_1766 . props_1767)"
"(do-chaperone-procedure"
" #t"
" #t"
" impersonate-procedure*"
" 'impersonate-procedure"
" proc_1765"
" wrap-proc_1766"
" props_1767))))"
" impersonate-procedure*_1764))"
"(define-values"
"(do-chaperone-procedure)"
"(lambda(is-impersonator?_1768 self-arg?_1769 chaperone-procedure_1770 name_1771 proc_1772 wrap-proc_1773 props_1774)"
"(let-values(((n-proc_1775)(normalize-proc proc_1772))((n-wrap-proc_1776)(normalize-proc wrap-proc_1773)))"
"(if(let-values(((or-part_1777)(not(keyword-procedure? n-proc_1775))))"
"(if or-part_1777"
" or-part_1777"
"(let-values(((or-part_1778)(not(procedure? wrap-proc_1773))))"
"(if or-part_1778 or-part_1778(bad-props? props_1774)))))"
"(apply chaperone-procedure_1770 proc_1772 wrap-proc_1773 props_1774)"
"(begin"
"(chaperone-arity-match-checking self-arg?_1769 name_1771 proc_1772 wrap-proc_1773 props_1774)"
"(let-values(((kw-chaperone_1779)"
"(let-values(((p_1780)(keyword-procedure-proc n-wrap-proc_1776)))"
"(if self-arg?_1769"
"(case-lambda"
"((self-proc_1791 kws_1792 args_1793 . rest_1794)"
"(call-with-values"
"(lambda()(apply p_1780 kws_1792 args_1793 self-proc_1791 rest_1794))"
"(lambda results_1795"
"(let-values(((len_1796)(length results_1795)))"
"(let-values(((alen_1797)(length rest_1794)))"
"(begin"
"(if(< len_1796(+ alen_1797 1))"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
"                                            \"wrong number of results from wrapper procedure\""
"                                            \"expected minimum number of results\""
"(+ alen_1797 1)"
"                                            \"received number of results\""
" len_1796"
"                                            \"wrapper procedure\""
" wrap-proc_1773))"
"(void))"
"(let-values(((num-extra_1798)(- len_1796(+ alen_1797 1))))"
"(begin"
"(let-values(((new-args_1799)(list-ref results_1795 num-extra_1798)))"
"(begin"
"(if(if(list? new-args_1799)"
"(=(length new-args_1799)(length args_1793))"
" #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
"(format"
"                                                     \"expected a list of keyword-argument values as first result~a from wrapper procedure\""
"(if(= len_1796 alen_1797)"
"                                                       \"\""
"                                                       \" (after the result-wrapper procedure or mark specifications)\"))"
"                                                    \"first result\""
" new-args_1799"
"                                                    \"wrapper procedure\""
" wrap-proc_1773)))"
"(for-each"
"(lambda(kw_1800 new-arg_1801 arg_1802)"
"(if is-impersonator?_1768"
"(void)"
"(let-values()"
"(if(chaperone-of? new-arg_1801 arg_1802)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
"(format"
"                                                            \"~a keyword result is not a chaperone of original argument from chaperoning procedure\""
" kw_1800)"
"                                                           \"result\""
" new-arg_1801"
"                                                           \"wrapper procedure\""
" wrap-proc_1773))))))"
" kws_1792"
" new-args_1799"
" args_1793)))"
"(let-values(((tmp_1803) num-extra_1798))"
"(if(equal? tmp_1803 0)"
"(let-values()(apply values kws_1792 results_1795))"
"(if(equal? tmp_1803 1)"
"(let-values()"
"(apply values(car results_1795) kws_1792(cdr results_1795)))"
"(let-values()"
"(apply"
" values"
"((letrec-values(((loop_1804)"
"(lambda(results_1805 c_1806)"
"(if(zero? c_1806)"
"(cons kws_1792 results_1805)"
"(cons"
"(car results_1805)"
"(loop_1804"
"(cdr results_1805)"
"(sub1 c_1806)))))))"
" loop_1804)"
" results_1795"
" num-extra_1798))))))))))))))"
"                             (other_1807 (error \"shouldn't get here\")))"
"(case-lambda"
"((kws_1808 args_1809 . rest_1810)"
"(call-with-values"
"(lambda()(apply p_1780 kws_1808 args_1809 rest_1810))"
"(lambda results_1811"
"(let-values(((len_1812)(length results_1811)))"
"(let-values(((alen_1813)(length rest_1810)))"
"(begin"
"(if(< len_1812(+ alen_1813 1))"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
"                                            \"wrong number of results from wrapper procedure\""
"                                            \"expected minimum number of results\""
"(+ alen_1813 1)"
"                                            \"received number of results\""
" len_1812"
"                                            \"wrapper procedure\""
" wrap-proc_1773))"
"(void))"
"(let-values(((num-extra_1814)(- len_1812(+ alen_1813 1))))"
"(begin"
"(let-values(((new-args_1815)(list-ref results_1811 num-extra_1814)))"
"(begin"
"(if(if(list? new-args_1815)"
"(=(length new-args_1815)(length args_1809))"
" #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
"(format"
"                                                     \"expected a list of keyword-argument values as first result~a from wrapper procedure\""
"(if(= len_1812 alen_1813)"
"                                                       \"\""
"                                                       \" (after the result-wrapper procedure or mark specifications)\"))"
"                                                    \"first result\""
" new-args_1815"
"                                                    \"wrapper procedure\""
" wrap-proc_1773)))"
"(for-each"
"(lambda(kw_1816 new-arg_1817 arg_1818)"
"(if is-impersonator?_1768"
"(void)"
"(let-values()"
"(if(chaperone-of? new-arg_1817 arg_1818)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" '|keyword procedure chaperone|"
"(format"
"                                                            \"~a keyword result is not a chaperone of original argument from chaperoning procedure\""
" kw_1816)"
"                                                           \"result\""
" new-arg_1817"
"                                                           \"wrapper procedure\""
" wrap-proc_1773))))))"
" kws_1808"
" new-args_1815"
" args_1809)))"
"(let-values(((tmp_1819) num-extra_1814))"
"(if(equal? tmp_1819 0)"
"(let-values()(apply values kws_1808 results_1811))"
"(if(equal? tmp_1819 1)"
"(let-values()"
"(apply values(car results_1811) kws_1808(cdr results_1811)))"
"(let-values()"
"(apply"
" values"
"((letrec-values(((loop_1820)"
"(lambda(results_1821 c_1822)"
"(if(zero? c_1822)"
"(cons kws_1808 results_1821)"
"(cons"
"(car results_1821)"
"(loop_1820"
"(cdr results_1821)"
"(sub1 c_1822)))))))"
" loop_1820)"
" results_1811"
" num-extra_1814))))))))))))))"
"                             (other_1823 (error \"shouldn't get here\")))))))"
"(let-values(((new-proc_1824 chap-accessor_1825)"
"((letrec-values(((wrap_1826)"
"(lambda(proc_1827 n-proc_1828)"
"(if(if(not(eq? n-proc_1828 proc_1827))(new-procedure? proc_1827) #f)"
"(let-values()"
"(let-values(((v_1829)(new-procedure-ref proc_1827)))"
"(if(exact-integer? v_1829)"
"(let-values()"
"(let-values(((acc_1830)(procedure-accessor-ref proc_1827)))"
"(values"
"(chaperone-struct"
" proc_1827"
" acc_1830"
"(lambda(self_1831 sub-proc_1832)"
"(let-values(((f_1833 acc_1834)"
"(wrap_1826"
" sub-proc_1832"
"(normalize-proc sub-proc_1832))))"
" f_1833)))"
" acc_1830)))"
"(let-values()"
"(values"
"(chaperone-struct"
" proc_1827"
" new-procedure-ref"
"(lambda(self_1835 proc_1836)"
"(chaperone-procedure_1770"
" proc_1836"
"(make-keyword-procedure"
"(let-values()"
"(if self-arg?_1769"
"(lambda(proc-self_1847"
" kws_1848"
" kw-args_1849"
" self_1850"
" ."
" args_1851)"
"(let-values(((len_1852)(length args_1851)))"
"(call-with-values"
"(lambda()"
"(apply"
" kw-chaperone_1779"
" proc-self_1847"
" kws_1848"
" kw-args_1849"
" args_1851))"
"(lambda results_1853"
"(if(=(length results_1853)(add1 len_1852))"
"(apply"
" values"
"(car results_1853)"
" self_1850"
"(cdr results_1853))"
"(apply"
" values"
"(car results_1853)"
"(cadr results_1853)"
" self_1850"
"(cddr results_1853)))))))"
"(lambda(kws_1854 kw-args_1855 self_1856 . args_1857)"
"(let-values(((len_1858)(length args_1857)))"
"(call-with-values"
"(lambda()"
"(apply"
" kw-chaperone_1779"
" kws_1854"
" kw-args_1855"
" args_1857))"
"(lambda results_1859"
"(if(=(length results_1859)(add1 len_1858))"
"(apply"
" values"
"(car results_1859)"
" self_1856"
"(cdr results_1859))"
"(apply"
" values"
"(car results_1859)"
"(cadr results_1859)"
" self_1856"
"(cddr results_1859)))))))))))))"
" new-procedure-ref)))))"
"(if(okp? n-proc_1828)"
"(let-values()"
"(values"
"(if is-impersonator?_1768"
"((if(okm? n-proc_1828)"
" make-optional-keyword-method-impersonator"
" make-optional-keyword-procedure-impersonator)"
"(keyword-procedure-checker n-proc_1828)"
"(chaperone-procedure_1770"
"(keyword-procedure-proc n-proc_1828)"
" kw-chaperone_1779)"
"(keyword-procedure-required n-proc_1828)"
"(keyword-procedure-allowed n-proc_1828)"
"(chaperone-procedure_1770"
"(okp-ref n-proc_1828 0)"
"(okp-ref n-wrap-proc_1776 0))"
" n-proc_1828)"
"(chaperone-struct"
" proc_1827"
" keyword-procedure-proc"
"(lambda(self_1860 proc_1861)"
"(chaperone-procedure_1770 proc_1861 kw-chaperone_1779))"
"(make-struct-field-accessor okp-ref 0)"
"(lambda(self_1862 proc_1863)"
"(chaperone-procedure_1770"
" proc_1863"
"(okp-ref n-wrap-proc_1776 0)))))"
" keyword-procedure-proc))"
"(let-values()"
"(values"
"(if is-impersonator?_1768"
"(let-values(((name+fail_1864)"
"(keyword-procedure-name+fail n-proc_1828)))"
"(let-values(((mk_1865)"
"(make-required"
"(car name+fail_1864)"
"(cdr name+fail_1864)"
"(keyword-method? n-proc_1828)"
" #t)))"
"(mk_1865"
"(keyword-procedure-checker n-proc_1828)"
"(chaperone-procedure_1770"
"(keyword-procedure-proc n-proc_1828)"
" kw-chaperone_1779)"
"(keyword-procedure-required n-proc_1828)"
"(keyword-procedure-allowed n-proc_1828)"
" n-proc_1828)))"
"(chaperone-struct"
" n-proc_1828"
" keyword-procedure-proc"
"(lambda(self_1866 proc_1867)"
"(chaperone-procedure_1770 proc_1867 kw-chaperone_1779))))"
" keyword-procedure-proc)))))))"
" wrap_1826)"
" proc_1772"
" n-proc_1775)))"
"(if(null? props_1774)"
" new-proc_1824"
"(apply chaperone-struct new-proc_1824 chap-accessor_1825 #f props_1774)))))))))"
"(define-values"
"(do-unsafe-chaperone-procedure)"
"(lambda(unsafe-chaperone-procedure_1868 name_1869 proc_1870 wrap-proc_1871 props_1872)"
"(let-values(((n-proc_1873)(normalize-proc proc_1870))((n-wrap-proc_1874)(normalize-proc wrap-proc_1871)))"
"(if(let-values(((or-part_1875)(not(keyword-procedure? n-proc_1873))))"
"(if or-part_1875"
" or-part_1875"
"(let-values(((or-part_1876)(not(procedure? wrap-proc_1871))))"
"(if or-part_1876 or-part_1876(bad-props? props_1872)))))"
"(apply unsafe-chaperone-procedure_1868 proc_1870 wrap-proc_1871 props_1872)"
"(begin"
"(chaperone-arity-match-checking #f name_1869 proc_1870 wrap-proc_1871 props_1872)"
"(apply unsafe-chaperone-procedure_1868 proc_1870 wrap-proc_1871 props_1872))))))"
"(define-values"
"(bad-props?)"
"(lambda(props_1877)"
"((letrec-values(((loop_1878)"
"(lambda(props_1879)"
"(if(null? props_1879)"
"(let-values() #f)"
"(if(impersonator-property?(car props_1879))"
"(let-values()"
"(let-values(((props_1880)(cdr props_1879)))"
"(let-values(((or-part_1881)(null? props_1880)))"
"(if or-part_1881 or-part_1881(loop_1878(cdr props_1880))))))"
"(let-values() #t))))))"
" loop_1878)"
" props_1877)))"
"(define-values"
"(chaperone-arity-match-checking)"
"(lambda(self-arg?_1882 name_1883 proc_1884 wrap-proc_1885 props_1886)"
"(let-values(((a_1887)(procedure-arity proc_1884))"
"((b_1888)(procedure-arity wrap-proc_1885))"
"((d_1889)(if self-arg?_1882 1 0))"
"((a-req_1890 a-allow_1891)(procedure-keywords proc_1884))"
"((b-req_1892 b-allow_1893)(procedure-keywords wrap-proc_1885)))"
"(letrec-values(((includes?_1894)"
"(lambda(a_1895 b_1896)"
"(if(number? b_1896)"
"(let-values()"
"(if(number? a_1895)"
"(let-values()(= b_1896(+ a_1895 d_1889)))"
"(if(arity-at-least? a_1895)"
"(let-values()(>= b_1896(+(arity-at-least-value a_1895) d_1889)))"
"(let-values()(ormap(lambda(a_1897)(includes?_1894 a_1897 b_1896)) a_1895)))))"
"(if(arity-at-least? b_1896)"
"(let-values()"
"(if(number? a_1895)"
"(let-values() #f)"
"(if(arity-at-least? a_1895)"
"(let-values()"
"(>=(arity-at-least-value b_1896)(+(arity-at-least-value a_1895) d_1889)))"
"(let-values()(ormap(lambda(a_1898)(includes?_1894 b_1896 a_1898)) a_1895)))))"
"(let-values()(andmap(lambda(b_1899)(includes?_1894 a_1895 b_1899)) b_1896)))))))"
"(begin"
"(if(includes?_1894 b_1888 a_1887)"
"(void)"
"(let-values()(apply chaperone-procedure proc_1884 wrap-proc_1885 props_1886)))"
"(if(subset? b-req_1892 a-req_1890)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" name_1883"
"               \"wrapper procedure requires more keywords than original procedure\""
"               \"wrapper procedure\""
" wrap-proc_1885"
"               \"original procedure\""
" proc_1884)))"
"(if(let-values(((or-part_1900)(not b-allow_1893)))"
"(if or-part_1900 or-part_1900(if a-allow_1891(subset? a-allow_1891 b-allow_1893) #f)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" name_1883"
"               \"wrapper procedure does not accept all keywords of original procedure\""
"               \"wrapper procedure\""
" wrap-proc_1885"
"               \"original procedure\""
" proc_1884)))"
"(void))))))"
"(define-values"
"(normalize-proc)"
"(lambda(proc_1901)"
"(if(keyword-procedure? proc_1901)"
"(let-values() proc_1901)"
"(if(new-procedure? proc_1901)"
"(let-values()"
"(let-values(((req-kws_1902 allowed-kws_1903)(procedure-keywords proc_1901)))"
"(if(null? allowed-kws_1903)"
" proc_1901"
"(make-optional-keyword-procedure"
"(lambda(given-kws_1904 given-argc_1905)"
"(if(procedure-arity-includes? proc_1901(- given-argc_1905 2) #t)"
"(if(let-values(((or-part_1906)(not allowed-kws_1903)))"
"(if or-part_1906 or-part_1906(subset? given-kws_1904 allowed-kws_1903)))"
"(subset? req-kws_1902 given-kws_1904)"
" #f)"
" #f))"
"(lambda(kws_1907 kw-args_1908 . vals_1909)(keyword-apply proc_1901 kws_1907 kw-args_1908 vals_1909))"
" req-kws_1902"
" allowed-kws_1903"
" proc_1901))))"
"(let-values() proc_1901)))))"
"(define-values(print-values)(lambda vs_3(begin(for-each(current-print) vs_3)(apply values vs_3))))"
"(define-values"
"(alt-reverse)"
"(if(eval-jit-enabled)"
"(let-values(((reverse_1)"
"(lambda(l_2)"
"(begin"
"                      (if (list? l_2) (void) (raise-argument-error 'reverse \"list?\" l_2))"
"(letrec-values(((loop_3)"
"(lambda(a_4 l_5)(if(null? l_5) a_4(loop_3(cons(car l_5) a_4)(cdr l_5))))))"
"(loop_3 null l_2))))))"
" reverse_1)"
" reverse))"
"(define-values"
"(struct:do-sequence make-do-sequence do-sequence? do-sequence-ref do-sequence-set!)"
"(make-struct-type 'sequence #f 1 0 #f))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_2558 si_2559)"
"(begin"
"(if(if(vector? v_2558)"
"(if(= 3(vector-length v_2558))"
"(if(procedure?(vector-ref v_2558 0))"
"(if(procedure-arity-includes?(vector-ref v_2558 0) 1)"
"(if(procedure?(vector-ref v_2558 1))"
"(if(procedure-arity-includes?(vector-ref v_2558 1) 1)"
"(if(procedure?(vector-ref v_2558 2))(procedure-arity-includes?(vector-ref v_2558 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_2558)))"
"(vector->immutable-vector v_2558)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2560 si_2561)"
"(begin"
"(if(if(procedure? v_2560)(procedure-arity-includes? v_2560 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_2560)))"
" v_2560))))"
"(define-values"
"(prop:sequence :sequence? :sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_2562 sinfo_2563)"
"(begin"
"(if(if(procedure? v_2562)(procedure-arity-includes? v_2562 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'sequence-property-guard \"(procedure-arity-includes/c 1)\" v_2562)))"
"(lambda(self_2564)"
"(let-values(((s_2565)(v_2562 self_2564)))"
"(begin"
"(if(sequence? s_2565)"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'sequence-generate"
"                  \"procedure (value of prop:sequence) produced a non-sequence: \""
" s_2565)))"
" s_2565)))))))"
"(define-values"
"(stream?)"
"(lambda(v_2566)"
"(let-values(((or-part_2567)(list? v_2566)))(if or-part_2567 or-part_2567(stream-via-prop? v_2566)))))"
"(define-values"
"(unsafe-stream-not-empty?)"
"(lambda(v_2568)"
"(if(null? v_2568)"
" #f"
"(let-values(((or-part_2569)(pair? v_2568)))"
"(if or-part_2569 or-part_2569(not((unsafe-vector-ref(stream-ref v_2568) 0) v_2568)))))))"
"(define-values"
"(stream-empty?)"
"(lambda(v_2570)"
"(let-values(((or-part_2571)(null? v_2570)))"
"(if or-part_2571"
" or-part_2571"
"(if(stream? v_2570)"
"(if(pair? v_2570) #f((unsafe-vector-ref(stream-ref v_2570) 0) v_2570))"
"          (raise-argument-error 'stream-empty? \"stream?\" v_2570))))))"
"(define-values"
"(unsafe-stream-first)"
"(lambda(v_2572)"
"(if(pair? v_2572)"
"(let-values()(car v_2572))"
"(let-values()((unsafe-vector-ref(stream-ref v_2572) 1) v_2572)))))"
"(define-values"
"(stream-first)"
"(lambda(v_2573)"
"(if(if(stream? v_2573)(not(stream-empty? v_2573)) #f)"
"(unsafe-stream-first v_2573)"
"      (raise-argument-error 'stream-first \"(and/c stream? (not/c stream-empty?))\" v_2573))))"
"(define-values"
"(unsafe-stream-rest)"
"(lambda(v_2574)"
"(if(pair? v_2574)"
"(let-values()(cdr v_2574))"
"(let-values()"
"(let-values(((r_2575)((unsafe-vector-ref(stream-ref v_2574) 2) v_2574)))"
"(begin"
"(if(stream? r_2575)"
"(void)"
"              (let-values () (raise-mismatch-error 'stream-rest-guard \"result is not a stream: \" r_2575)))"
" r_2575))))))"
"(define-values"
"(stream-rest)"
"(lambda(v_2576)"
"(if(if(stream? v_2576)(not(stream-empty? v_2576)) #f)"
"(unsafe-stream-rest v_2576)"
"      (raise-argument-error 'stream-rest \"(and/c stream? (not/c stream-empty?))\" v_2576))))"
"(define-values"
"(sequence?)"
"(lambda(v_2577)"
"(let-values(((or-part_2578)(exact-nonnegative-integer? v_2577)))"
"(if or-part_2578"
" or-part_2578"
"(let-values(((or-part_2579)(do-sequence? v_2577)))"
"(if or-part_2579"
" or-part_2579"
"(let-values(((or-part_2580)(sequence-via-prop? v_2577)))"
"(if or-part_2580"
" or-part_2580"
"(let-values(((or-part_2581)(stream? v_2577)))"
"(if or-part_2581"
" or-part_2581"
"(let-values(((or-part_2582)(mpair? v_2577)))"
"(if or-part_2582"
" or-part_2582"
"(let-values(((or-part_2583)(vector? v_2577)))"
"(if or-part_2583"
" or-part_2583"
"(let-values(((or-part_2584)(flvector? v_2577)))"
"(if or-part_2584"
" or-part_2584"
"(let-values(((or-part_2585)(fxvector? v_2577)))"
"(if or-part_2585"
" or-part_2585"
"(let-values(((or-part_2586)(string? v_2577)))"
"(if or-part_2586"
" or-part_2586"
"(let-values(((or-part_2587)(bytes? v_2577)))"
"(if or-part_2587"
" or-part_2587"
"(let-values(((or-part_2588)(input-port? v_2577)))"
"(if or-part_2588"
" or-part_2588"
"(let-values(((or-part_2589)(hash? v_2577)))"
"(if or-part_2589"
" or-part_2589"
"(if(:sequence? v_2577)"
"(not(struct-type? v_2577))"
" #f)))))))))))))))))))))))))))"
"(define-values"
"(make-sequence)"
"(lambda(who_2590 v_2591)"
"(if(exact-nonnegative-integer? v_2591)"
"(let-values()(:integer-gen v_2591))"
"(if(do-sequence? v_2591)"
"(let-values()((do-sequence-ref v_2591 0)))"
"(if(mpair? v_2591)"
"(let-values()(:mlist-gen v_2591))"
"(if(list? v_2591)"
"(let-values()(:list-gen v_2591))"
"(if(vector? v_2591)"
"(let-values()(:vector-gen v_2591 0(vector-length v_2591) 1))"
"(if(flvector? v_2591)"
"(let-values()(:flvector-gen v_2591 0(flvector-length v_2591) 1))"
"(if(fxvector? v_2591)"
"(let-values()(:fxvector-gen v_2591 0(fxvector-length v_2591) 1))"
"(if(string? v_2591)"
"(let-values()(:string-gen v_2591 0(string-length v_2591) 1))"
"(if(bytes? v_2591)"
"(let-values()(:bytes-gen v_2591 0(bytes-length v_2591) 1))"
"(if(input-port? v_2591)"
"(let-values()(:input-port-gen v_2591))"
"(if(hash? v_2591)"
"(let-values()(:hash-gen v_2591 hash-iterate-key+value hash-iterate-first hash-iterate-next))"
"(if(sequence-via-prop? v_2591)"
"(let-values()((sequence-ref v_2591) v_2591))"
"(if(:sequence? v_2591)"
"(let-values()(make-sequence who_2590((:sequence-ref v_2591) v_2591)))"
"(if(stream? v_2591)"
"(let-values()(:stream-gen v_2591))"
"(let-values()"
"(raise"
"(exn:fail:contract"
"(format"
"                                     \"for: expected a sequence for ~a, got something else: ~v\""
"(if(= 1(length who_2590))(car who_2590) who_2590)"
" v_2591)"
"(current-continuation-marks))))))))))))))))))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2592)"
"(let-values(((cont?_2593)(range-ref v_2592 2)))(if cont?_2593(not(cont?_2593(range-ref v_2592 0))) #f)))"
"(lambda(v_2594)(range-ref v_2594 0))"
"(lambda(v_2595)"
"(make-range((range-ref v_2595 1)(range-ref v_2595 0))(range-ref v_2595 1)(range-ref v_2595 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_2596)(values values(range-ref v_2596 1)(range-ref v_2596 0)(range-ref v_2596 2) #f #f))))))"
"(define-values"
"(in-range)"
"(case-lambda"
"((b_2597)(in-range 0 b_2597 1))"
"((a_2598 b_2599)(in-range a_2598 b_2599 1))"
"((a_2600 b_2601 step_2602)"
"(begin"
"      (if (real? a_2600) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_2600)))"
"      (if (real? b_2601) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_2601)))"
"      (if (real? step_2602) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_2602)))"
"(let-values(((cont?_2603)"
"(if(>= step_2602 0)(lambda(x_2604)(< x_2604 b_2601))(lambda(x_2605)(> x_2605 b_2601)))))"
"(let-values(((inc_2606)(lambda(x_2607)(+ x_2607 step_2602))))(make-range a_2600 inc_2606 cont?_2603)))))))"
"(define-values(:integer-gen)(lambda(v_2608)(values values add1 0(lambda(i_2609)(< i_2609 v_2608)) #f #f)))"
"(define-values"
"(in-naturals)"
"(case-lambda"
"(()(in-naturals 0))"
"((n_2610)"
"(begin"
"(if(if(integer? n_2610)(if(exact? n_2610)(>= n_2610 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_2610)))"
"(make-range n_2610 add1 #f)))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2611)(not(pair?(list-stream-ref v_2611 0))))"
"(lambda(v_2612)(car(list-stream-ref v_2612 0)))"
"(lambda(v_2613)(make-list-stream(cdr(list-stream-ref v_2613 0))))))"
"(cons prop:gen-sequence(lambda(v_2614)(values car cdr(list-stream-ref v_2614 0) pair? #f #f))))))"
"(define-values"
"(in-list)"
"(lambda(l_2615)"
"(begin"
"      (if (list? l_2615) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_2615)))"
"(make-list-stream l_2615))))"
"(define-values(:list-gen)(lambda(l_2616)(values car cdr l_2616 pair? #f #f)))"
"(define-values"
"(in-mlist)"
"(lambda(l_2617)"
"(begin"
"      (if (mpair? l_2617) (void) (let-values () (raise-argument-error 'in-mlist \"mpair?\" l_2617)))"
"(make-do-sequence(lambda()(:mlist-gen l_2617))))))"
"(define-values(:mlist-gen)(lambda(l_2618)(values mcar mcdr l_2618 mpair? #f #f)))"
"(define-values"
"(in-input-port-bytes)"
"(lambda(p_2619)"
"(begin"
"      (if (input-port? p_2619) (void) (let-values () (raise-argument-error 'in-input-port-bytes \"input-port?\" p_2619)))"
"(make-do-sequence(lambda()(:input-port-gen p_2619))))))"
"(define-values"
"(:input-port-gen)"
"(lambda(p_2620)(values read-byte values p_2620 #f(lambda(x_2621)(not(eof-object? x_2621))) #f)))"
"(define-values"
"(in-input-port-chars)"
"(lambda(p_2622)"
"(begin"
"      (if (input-port? p_2622) (void) (let-values () (raise-argument-error 'in-input-port-chars \"input-port?\" p_2622)))"
"(in-producer(lambda()(read-char p_2622)) eof))))"
"(define-values"
"(check-in-port)"
"(lambda(r_2623 p_2624)"
"(begin"
"(if(if(procedure? r_2623)(procedure-arity-includes? r_2623 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-port \"(procedure-arity-includes/c 1)\" r_2623)))"
"      (if (input-port? p_2624) (void) (let-values () (raise-argument-error 'in-port \"input-port?\" p_2624))))))"
"(define-values"
"(in-port)"
"(case-lambda"
"(()(in-port read(current-input-port)))"
"((r_2625)(in-port r_2625(current-input-port)))"
"((r_2626 p_2627)(begin(check-in-port r_2626 p_2627)(in-producer(lambda()(r_2626 p_2627)) eof)))))"
"(define-values"
"(check-in-lines)"
"(lambda(p_2628 mode_2629)"
"(begin"
"      (if (input-port? p_2628) (void) (let-values () (raise-argument-error 'in-lines \"input-port?\" p_2628)))"
"(if(memq mode_2629 '(linefeed return return-linefeed any any-one))"
"(void)"
"(let-values()"
"          (raise-argument-error 'in-lines \"(or/c 'linefeed 'return 'return-linefeed 'any 'any-one)\" mode_2629))))))"
"(define-values"
"(in-lines)"
"(case-lambda"
"(()(in-lines(current-input-port) 'any))"
"((p_2630)(in-lines p_2630 'any))"
"((p_2631 mode_2632)"
"(begin(check-in-lines p_2631 mode_2632)(in-producer(lambda()(read-line p_2631 mode_2632)) eof)))))"
"(define-values"
"(check-in-bytes-lines)"
"(lambda(p_2633 mode_2634)"
"(begin"
"      (if (input-port? p_2633) (void) (let-values () (raise-argument-error 'in-bytes-lines \"input-port\" p_2633)))"
"(if(memq mode_2634 '(linefeed return return-linefeed any any-one))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'in-bytes-lines"
"           \"(or/c 'linefeed 'return 'return-linefeed 'any 'any-one)\""
" mode_2634))))))"
"(define-values"
"(in-bytes-lines)"
"(case-lambda"
"(()(in-bytes-lines(current-input-port) 'any))"
"((p_2635)(in-bytes-lines p_2635 'any))"
"((p_2636 mode_2637)"
"(begin(check-in-bytes-lines p_2636 mode_2637)(in-producer(lambda()(read-bytes-line p_2636 mode_2637)) eof)))))"
"(define-values"
"(in-stream)"
"(lambda(l_2638)"
"(begin"
"      (if (stream? l_2638) (void) (let-values () (raise-argument-error 'in-stream \"stream?\" l_2638)))"
"(make-do-sequence(lambda()(:stream-gen l_2638))))))"
"(define-values"
"(:stream-gen)"
"(lambda(l_2639)(values unsafe-stream-first unsafe-stream-rest l_2639 unsafe-stream-not-empty? #f #f)))"
"(define-values"
"(:hash-gen)"
"(lambda(ht_2640 -get_2641 -first_2642 -next_2643)"
"(values"
"(lambda(pos_2644)(-get_2641 ht_2640 pos_2644))"
"(lambda(pos_2645)(-next_2643 ht_2640 pos_2645))"
"(-first_2642 ht_2640)"
"(lambda(pos_2646) pos_2646)"
" #f"
" #f)))"
"(define-values(mutable?)(lambda(ht_2647)(not(immutable? ht_2647))))"
"(define-values(not-weak?)(lambda(ht_2648)(not(hash-weak? ht_2648))))"
"(define-values"
"(default-in-hash)"
"(lambda(ht_2649)"
"(begin"
"(if((lambda(ht_2650)(hash? ht_2650)) ht_2649)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash \"hash?\" ht_2649)))"
"(make-do-sequence(lambda()(:hash-gen ht_2649 hash-iterate-key+value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-mutable-hash)"
"(lambda(ht_2651)"
"(begin"
"(if((lambda(ht_2652)(if(hash? ht_2652)(if(mutable? ht_2652)(not-weak? ht_2652) #f) #f)) ht_2651)"
"(void)"
"        (let-values () (raise-argument-error 'in-mutable-hash \"(and/c hash? mutable? not-weak?)\" ht_2651)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2651"
" unsafe-mutable-hash-iterate-key+value"
" unsafe-mutable-hash-iterate-first"
" unsafe-mutable-hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash)"
"(lambda(ht_2653)"
"(begin"
"(if((lambda(ht_2654)(if(hash? ht_2654)(immutable? ht_2654) #f)) ht_2653)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_2653)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2653"
" unsafe-immutable-hash-iterate-key+value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-weak-hash)"
"(lambda(ht_2655)"
"(begin"
"(if((lambda(ht_2656)(if(hash? ht_2656)(hash-weak? ht_2656) #f)) ht_2655)"
"(void)"
"        (let-values () (raise-argument-error 'in-weak-hash \"(and/c hash? hash-weak?)\" ht_2655)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2655"
" unsafe-weak-hash-iterate-key+value"
" unsafe-weak-hash-iterate-first"
" unsafe-weak-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-keys)"
"(lambda(ht_2657)"
"(begin"
"(if((lambda(ht_2658)(hash? ht_2658)) ht_2657)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_2657)))"
"(make-do-sequence(lambda()(:hash-gen ht_2657 hash-iterate-key hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-mutable-hash-keys)"
"(lambda(ht_2659)"
"(begin"
"(if((lambda(ht_2660)(if(hash? ht_2660)(if(mutable? ht_2660)(not-weak? ht_2660) #f) #f)) ht_2659)"
"(void)"
"        (let-values () (raise-argument-error 'in-mutable-hash-keys \"(and/c hash? mutable? not-weak?)\" ht_2659)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2659"
" unsafe-mutable-hash-iterate-key"
" unsafe-mutable-hash-iterate-first"
" unsafe-mutable-hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-keys)"
"(lambda(ht_2661)"
"(begin"
"(if((lambda(ht_2662)(if(hash? ht_2662)(immutable? ht_2662) #f)) ht_2661)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_2661)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2661"
" unsafe-immutable-hash-iterate-key"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-weak-hash-keys)"
"(lambda(ht_2663)"
"(begin"
"(if((lambda(ht_2664)(if(hash? ht_2664)(hash-weak? ht_2664) #f)) ht_2663)"
"(void)"
"        (let-values () (raise-argument-error 'in-weak-hash-keys \"(and/c hash? hash-weak?)\" ht_2663)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2663"
" unsafe-weak-hash-iterate-key"
" unsafe-weak-hash-iterate-first"
" unsafe-weak-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-values)"
"(lambda(ht_2665)"
"(begin"
"(if((lambda(ht_2666)(hash? ht_2666)) ht_2665)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_2665)))"
"(make-do-sequence(lambda()(:hash-gen ht_2665 hash-iterate-value hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-mutable-hash-values)"
"(lambda(ht_2667)"
"(begin"
"(if((lambda(ht_2668)(if(hash? ht_2668)(if(mutable? ht_2668)(not-weak? ht_2668) #f) #f)) ht_2667)"
"(void)"
"        (let-values () (raise-argument-error 'in-mutable-hash-values \"(and/c hash? mutable? not-weak?)\" ht_2667)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2667"
" unsafe-mutable-hash-iterate-value"
" unsafe-mutable-hash-iterate-first"
" unsafe-mutable-hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-values)"
"(lambda(ht_2669)"
"(begin"
"(if((lambda(ht_2670)(if(hash? ht_2670)(immutable? ht_2670) #f)) ht_2669)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-values \"(and/c hash? immutable?)\" ht_2669)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2669"
" unsafe-immutable-hash-iterate-value"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-weak-hash-values)"
"(lambda(ht_2671)"
"(begin"
"(if((lambda(ht_2672)(if(hash? ht_2672)(hash-weak? ht_2672) #f)) ht_2671)"
"(void)"
"        (let-values () (raise-argument-error 'in-weak-hash-values \"(and/c hash? hash-weak?)\" ht_2671)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2671"
" unsafe-weak-hash-iterate-value"
" unsafe-weak-hash-iterate-first"
" unsafe-weak-hash-iterate-next))))))"
"(define-values"
"(default-in-hash-pairs)"
"(lambda(ht_2673)"
"(begin"
"(if((lambda(ht_2674)(hash? ht_2674)) ht_2673)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-pairs \"hash?\" ht_2673)))"
"(make-do-sequence(lambda()(:hash-gen ht_2673 hash-iterate-pair hash-iterate-first hash-iterate-next))))))"
"(define-values"
"(default-in-mutable-hash-pairs)"
"(lambda(ht_2675)"
"(begin"
"(if((lambda(ht_2676)(if(hash? ht_2676)(if(mutable? ht_2676)(not-weak? ht_2676) #f) #f)) ht_2675)"
"(void)"
"        (let-values () (raise-argument-error 'in-mutable-hash-pairs \"(and/c hash? mutable? not-weak?)\" ht_2675)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2675"
" unsafe-mutable-hash-iterate-pair"
" unsafe-mutable-hash-iterate-first"
" unsafe-mutable-hash-iterate-next))))))"
"(define-values"
"(default-in-immutable-hash-pairs)"
"(lambda(ht_2677)"
"(begin"
"(if((lambda(ht_2678)(if(hash? ht_2678)(immutable? ht_2678) #f)) ht_2677)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-pairs \"(and/c hash? immutable?)\" ht_2677)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2677"
" unsafe-immutable-hash-iterate-pair"
" unsafe-immutable-hash-iterate-first"
" unsafe-immutable-hash-iterate-next))))))"
"(define-values"
"(default-in-weak-hash-pairs)"
"(lambda(ht_2679)"
"(begin"
"(if((lambda(ht_2680)(if(hash? ht_2680)(hash-weak? ht_2680) #f)) ht_2679)"
"(void)"
"        (let-values () (raise-argument-error 'in-weak-hash-pairs \"(and/c hash? hash-weak?)\" ht_2679)))"
"(make-do-sequence"
"(lambda()"
"(:hash-gen"
" ht_2679"
" unsafe-weak-hash-iterate-pair"
" unsafe-weak-hash-iterate-first"
" unsafe-weak-hash-iterate-next))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_2681 vec_2682 start_2683 stop_2684 step_2685 len_2686)"
"(begin"
"(if(if(exact-nonnegative-integer? start_2683)"
"(let-values(((or-part_2687)(< start_2683 len_2686)))"
"(if or-part_2687 or-part_2687(= len_2686 start_2683 stop_2684)))"
" #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"starting \" start_2683 vec_2682 0 (sub1 len_2686))))"
"(if(if(exact-integer? stop_2684)(if(<= -1 stop_2684)(<= stop_2684 len_2686) #f) #f)"
"(void)"
"        (let-values () (raise-range-error who_2681 \"vector\" \"stopping \" stop_2684 vec_2682 -1 len_2686)))"
"(if(if(exact-integer? step_2685)(not(zero? step_2685)) #f)"
"(void)"
"        (let-values () (raise-argument-error who_2681 \"(and/c exact-integer? (not/c zero?))\" step_2685)))"
"(if(if(< start_2683 stop_2684)(< step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index less than stopping index, but given a negative step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void))"
"(if(if(< stop_2684 start_2683)(> step_2685 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_2681"
"           \"starting index more than stopping index, but given a positive step\""
"           \"starting index\""
" start_2683"
"           \"stopping index\""
" stop_2684"
"           \"step\""
" step_2685))"
"(void)))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_2688 type-name_2689 vector?_2690 unsafe-vector-length_2691 vec_2692 start_2693 stop_2694 step_2695)"
"(begin"
"(if(vector?_2690 vec_2692)(void)(let-values()(raise-argument-error who_2688 type-name_2689 vec_2692)))"
"(let-values(((len_2696)(unsafe-vector-length_2691 vec_2692)))"
"(let-values(((stop*_2697)(if stop_2694 stop_2694 len_2696)))"
"(begin"
"(check-ranges who_2688 vec_2692 start_2693 stop*_2697 step_2695 len_2696)"
"(values vec_2692 start_2693 stop*_2697 step_2695)))))))"
"(define-values"
"(:vector-gen)"
"(lambda(v_2698 start_2699 stop_2700 step_2701)"
"(values"
"(lambda(i_2702)(unsafe-vector-ref v_2698 i_2702))"
"(if(= step_2701 1) add1(lambda(i_2703)(+ i_2703 step_2701)))"
" start_2699"
"(if(> step_2701 0)(lambda(i_2704)(< i_2704 stop_2700))(lambda(i_2705)(> i_2705 stop_2700)))"
" #f"
" #f)))"
"(define-values"
"(in-vector)"
"(case-lambda"
"((v_2706)(in-vector v_2706 0 #f 1))"
"((v_2707 start_2708)(in-vector v_2707 start_2708 #f 1))"
"((v_2709 start_2710 stop_2711)(in-vector v_2709 start_2710 stop_2711 1))"
"((v_2712 start_2713 stop_2714 step_2715)"
"(let-values(((v_2716 start_2717 stop_2718 step_2719)"
"                  (normalise-inputs 'in-vector \"vector\" vector? vector-length v_2712 start_2713 stop_2714 step_2715)))"
"(make-do-sequence(lambda()(:vector-gen v_2716 start_2717 stop_2718 step_2719)))))))"
"(define-values"
"(:string-gen)"
"(lambda(v_2720 start_2721 stop_2722 step_2723)"
"(values"
"(lambda(i_2724)(string-ref v_2720 i_2724))"
"(if(= step_2723 1) add1(lambda(i_2725)(+ i_2725 step_2723)))"
" start_2721"
"(if(> step_2723 0)(lambda(i_2726)(< i_2726 stop_2722))(lambda(i_2727)(> i_2727 stop_2722)))"
" #f"
" #f)))"
"(define-values"
"(in-string)"
"(case-lambda"
"((v_2728)(in-string v_2728 0 #f 1))"
"((v_2729 start_2730)(in-string v_2729 start_2730 #f 1))"
"((v_2731 start_2732 stop_2733)(in-string v_2731 start_2732 stop_2733 1))"
"((v_2734 start_2735 stop_2736 step_2737)"
"(let-values(((v_2738 start_2739 stop_2740 step_2741)"
"                  (normalise-inputs 'in-string \"string\" string? string-length v_2734 start_2735 stop_2736 step_2737)))"
"(make-do-sequence(lambda()(:string-gen v_2738 start_2739 stop_2740 step_2741)))))))"
"(define-values"
"(:bytes-gen)"
"(lambda(v_2742 start_2743 stop_2744 step_2745)"
"(values"
"(lambda(i_2746)(unsafe-bytes-ref v_2742 i_2746))"
"(if(= step_2745 1) add1(lambda(i_2747)(+ i_2747 step_2745)))"
" start_2743"
"(if(> step_2745 0)(lambda(i_2748)(< i_2748 stop_2744))(lambda(i_2749)(> i_2749 stop_2744)))"
" #f"
" #f)))"
"(define-values"
"(in-bytes)"
"(case-lambda"
"((v_2750)(in-bytes v_2750 0 #f 1))"
"((v_2751 start_2752)(in-bytes v_2751 start_2752 #f 1))"
"((v_2753 start_2754 stop_2755)(in-bytes v_2753 start_2754 stop_2755 1))"
"((v_2756 start_2757 stop_2758 step_2759)"
"(let-values(((v_2760 start_2761 stop_2762 step_2763)"
"                  (normalise-inputs 'in-bytes \"bytes\" bytes? bytes-length v_2756 start_2757 stop_2758 step_2759)))"
"(make-do-sequence(lambda()(:bytes-gen v_2760 start_2761 stop_2762 step_2763)))))))"
"(define-values"
"(:flvector-gen)"
"(lambda(v_2764 start_2765 stop_2766 step_2767)"
"(values"
"(lambda(i_2768)(unsafe-flvector-ref v_2764 i_2768))"
"(if(= step_2767 1) add1(lambda(i_2769)(+ i_2769 step_2767)))"
" start_2765"
"(if(> step_2767 0)(lambda(i_2770)(< i_2770 stop_2766))(lambda(i_2771)(> i_2771 stop_2766)))"
" #f"
" #f)))"
"(define-values"
"(:fxvector-gen)"
"(lambda(v_2772 start_2773 stop_2774 step_2775)"
"(values"
"(lambda(i_2776)(unsafe-fxvector-ref v_2772 i_2776))"
"(if(= step_2775 1) add1(lambda(i_2777)(+ i_2777 step_2775)))"
" start_2773"
"(if(> step_2775 0)(lambda(i_2778)(< i_2778 stop_2774))(lambda(i_2779)(> i_2779 stop_2774)))"
" #f"
" #f)))"
"(define-values"
"(stop-before)"
"(lambda(g_2780 pred_2781)"
"(begin"
"      (if (sequence? g_2780) (void) (let-values () (raise-argument-error 'stop-before \"sequence?\" g_2780)))"
"(if(if(procedure? pred_2781)(procedure-arity-includes? pred_2781 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'stop-before \"(procedure-arity-includes/c 1)\" pred_2781)))"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->val_2782 pos-next_2783 init_2784 pos-cont?_2785 pre-cont?_2786 post-cont?_2787)"
"(make-sequence #f g_2780)))"
"(values"
" pos->val_2782"
" pos-next_2783"
" init_2784"
" pos-cont?_2785"
"(case-lambda"
"((val_2788)(if(if pre-cont?_2786(pre-cont?_2786 val_2788) #t)(not(pred_2781 val_2788)) #f))"
"(vals_2789"
"(if(if pre-cont?_2786(apply pre-cont?_2786 vals_2789) #t)(not(apply pred_2781 vals_2789)) #f)))"
" post-cont?_2787)))))))"
"(define-values"
"(stop-after)"
"(lambda(g_2790 pred_2791)"
"(begin"
"      (if (sequence? g_2790) (void) (let-values () (raise-argument-error 'stop-after \"sequence?\" g_2790)))"
"(if(if(procedure? pred_2791)(procedure-arity-includes? pred_2791 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'stop-after \"(procedure-arity-includes/c 1)\" pred_2791)))"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->val_2792 pos-next_2793 init_2794 pos-cont?_2795 pre-cont?_2796 post-cont?_2797)"
"(make-sequence #f g_2790)))"
"(values"
" pos->val_2792"
" pos-next_2793"
" init_2794"
" pos-cont?_2795"
" pre-cont?_2796"
"(case-lambda"
"((pos_2798 val_2799)"
"(if(if post-cont?_2797(post-cont?_2797 pos_2798 val_2799) #t)(not(pred_2791 val_2799)) #f))"
"((pos_2800 . vals_2801)"
"(if(if post-cont?_2797(apply post-cont?_2797 pos_2800 vals_2801) #t)"
"(not(apply pred_2791 vals_2801))"
" #f))))))))))"
"(define-values"
"(in-indexed)"
"(lambda(g_2802)"
"(begin"
"      (if (sequence? g_2802) (void) (let-values () (raise-argument-error 'in-indexed \"sequence?\" g_2802)))"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->val_2803 pos-next_2804 init_2805 pos-cont?_2806 pre-cont?_2807 post-cont?_2808)"
"(make-sequence #f g_2802)))"
"(values"
"(lambda(pos_2809)(values(pos->val_2803(car pos_2809))(cdr pos_2809)))"
"(lambda(pos_2810)(cons(pos-next_2804(car pos_2810))(add1(cdr pos_2810))))"
"(cons init_2805 0)"
"(if pos-cont?_2806(lambda(pos_2811)(pos-cont?_2806(car pos_2811))) #f)"
"(if pre-cont?_2807(lambda(val_2812 idx_2813)(pre-cont?_2807 val_2812)) #f)"
"(if post-cont?_2808(lambda(pos_2814 val_2815 idx_2816)(post-cont?_2808 pos_2814 val_2815)) #f))))))))"
"(define-values"
"(in-value)"
"(lambda(v_2817)"
"(make-do-sequence"
"(lambda()(values(lambda(pos_2818) v_2817)(lambda(pos_2819) #f) #t(lambda(pos_2820) pos_2820) void void)))))"
"(define-values"
"(in-values-sequence)"
"(lambda(g_2821)"
"(begin"
"      (if (sequence? g_2821) (void) (let-values () (raise-argument-error 'in-values-sequence \"sequence?\" g_2821)))"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->val_2822 pos-next_2823 init_2824 pos-cont?_2825 pre-cont?_2826 post-cont?_2827)"
"(make-sequence #f g_2821)))"
"(values"
"(lambda(pos_2828)(call-with-values(lambda()(pos->val_2822 pos_2828)) list))"
" pos-next_2823"
" init_2824"
" pos-cont?_2825"
"(if pre-cont?_2826(lambda(vals_2829)(apply pre-cont?_2826 vals_2829)) #f)"
"(if post-cont?_2827(lambda(pos_2830 vals_2831)(apply post-cont?_2827 pos_2830 vals_2831)) #f))))))))"
"(define-values"
"(in-values*-sequence)"
"(lambda(g_2832)"
"(begin"
"      (if (sequence? g_2832) (void) (let-values () (raise-argument-error 'in-values-sequence \"sequence?\" g_2832)))"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->val_2833 pos-next_2834 init_2835 pos-cont?_2836 pre-cont?_2837 post-cont?_2838)"
"(make-sequence #f g_2832)))"
"(values"
"(lambda(pos_2839)"
"(call-with-values"
"(lambda()(pos->val_2833 pos_2839))"
"(case-lambda((v_2840)(if(list? v_2840)(list v_2840) v_2840))(vs_2841 vs_2841))))"
" pos-next_2834"
" init_2835"
" pos-cont?_2836"
"(if pre-cont?_2837"
"(lambda(vals_2842)(if(list? vals_2842)(apply pre-cont?_2837 vals_2842)(pre-cont?_2837 vals_2842)))"
" #f)"
"(if post-cont?_2838"
"(lambda(pos_2843 vals_2844)"
"(if(list? vals_2844)(apply post-cont?_2838 pos_2843 vals_2844)(post-cont?_2838 pos_2843 vals_2844)))"
" #f))))))))"
"(define-values"
"(append-sequences)"
"(lambda(sequences_2845 cyclic?_2846)"
"(letrec-values(((seqs->m+g+r_2847)"
"(lambda(seqs_2848)"
"(if(pair? seqs_2848)"
"(let-values(((more?_2849 get_2850)(sequence-generate(car seqs_2848)))"
"((seqs_2851)(cdr seqs_2848)))"
"(if(more?_2849)(list* more?_2849 get_2850 seqs_2851)(seqs->m+g+r_2847 seqs_2851)))"
"(if cyclic?_2846(seqs->m+g+r_2847 sequences_2845) #f)))))"
"(make-do-sequence"
"(lambda()"
"(values"
"(lambda(m+g+r_2852)((cadr m+g+r_2852)))"
"(lambda(m+g+r_2853)"
"(if(if(pair? m+g+r_2853)(not((car m+g+r_2853))) #f)(seqs->m+g+r_2847(cddr m+g+r_2853)) m+g+r_2853))"
"(seqs->m+g+r_2847 sequences_2845)"
" values"
" void"
" void))))))"
"(define-values"
"(check-sequences)"
"(lambda(who_2854 sequences_2855)"
"(for-each"
"     (lambda (g_2856) (if (sequence? g_2856) (void) (let-values () (raise-argument-error who_2854 \"sequence?\" g_2856))))"
" sequences_2855)))"
"(define-values"
"(in-sequences)"
"(lambda sequences_2857"
"(begin"
"(check-sequences 'in-sequences sequences_2857)"
"(if(if(pair? sequences_2857)(null?(cdr sequences_2857)) #f)"
"(car sequences_2857)"
"(append-sequences sequences_2857 #f)))))"
"(define-values"
"(in-cycle)"
"(lambda sequences_2858(begin(check-sequences 'in-cycle sequences_2858)(append-sequences sequences_2858 #t))))"
"(define-values"
"(in-parallel)"
"(lambda sequences_2859"
"(begin"
"(check-sequences 'in-parallel sequences_2859)"
"(if(= 1(length sequences_2859))"
"(car sequences_2859)"
"(make-do-sequence"
"(lambda()"
"(let-values(((pos->vals_2860 pos-nexts_2861 inits_2862 pos-cont?s_2863 pre-cont?s_2864 post-cont?s_2865)"
"(let-values(((p->v_2866 p-s_2867 i_2868 ps?_2869 pr?_2870 po?_2871)"
"(let-values(((pos->vals_2872"
" pos-next_2873"
" init_2874"
" pos-cont?_2875"
" val-cont?_2876"
" all-cont?_2877)"
"(make-sequence '(g) sequences_2859)))"
"(begin"
"(void)"
"((letrec-values(((for-loop_2878)"
"(lambda(p->v_2879"
" p-s_2880"
" i_2881"
" ps?_2882"
" pr?_2883"
" po?_2884"
" pos_2885)"
"(if(if pos-cont?_2875(pos-cont?_2875 pos_2885) #t)"
"(let-values(((g_2886)(pos->vals_2872 pos_2885)))"
"(if(if val-cont?_2876(val-cont?_2876 g_2886) #t)"
"(let-values(((p->v_2887"
" p-s_2888"
" i_2889"
" ps?_2890"
" pr?_2891"
" po?_2892)"
"(let-values(((p->v_2893) p->v_2879)"
"((p-s_2894) p-s_2880)"
"((i_2895) i_2881)"
"((ps?_2896) ps?_2882)"
"((pr?_2897) pr?_2883)"
"((po?_2898) po?_2884))"
"(let-values(((p->v_2899"
" p-s_2900"
" i_2901"
" ps?_2902"
" pr?_2903"
" po?_2904)"
"(let-values()"
"(let-values(((p->v1_2905"
" p-s2_2906"
" i3_2907"
" ps?4_2908"
" pr?5_2909"
" po?6_2910)"
"(let-values()"
"(make-sequence"
" #f"
" g_2886))))"
"(values"
"(cons"
" p->v1_2905"
" p->v_2893)"
"(cons"
" p-s2_2906"
" p-s_2894)"
"(cons"
" i3_2907"
" i_2895)"
"(cons"
" ps?4_2908"
" ps?_2896)"
"(cons"
" pr?5_2909"
" pr?_2897)"
"(cons"
" po?6_2910"
" po?_2898))))))"
"(values"
" p->v_2899"
" p-s_2900"
" i_2901"
" ps?_2902"
" pr?_2903"
" po?_2904)))))"
"(if(if all-cont?_2877"
"(all-cont?_2877 pos_2885 g_2886)"
" #t)"
"(for-loop_2878"
" p->v_2887"
" p-s_2888"
" i_2889"
" ps?_2890"
" pr?_2891"
" po?_2892"
"(pos-next_2873 pos_2885))"
"(values"
" p->v_2887"
" p-s_2888"
" i_2889"
" ps?_2890"
" pr?_2891"
" po?_2892)))"
"(values"
" p->v_2879"
" p-s_2880"
" i_2881"
" ps?_2882"
" pr?_2883"
" po?_2884)))"
"(values"
" p->v_2879"
" p-s_2880"
" i_2881"
" ps?_2882"
" pr?_2883"
" po?_2884)))))"
" for-loop_2878)"
" null"
" null"
" null"
" null"
" null"
" null"
" init_2874)))))"
"(values"
"(alt-reverse p->v_2866)"
"(alt-reverse p-s_2867)"
"(alt-reverse i_2868)"
"(alt-reverse ps?_2869)"
"(alt-reverse pr?_2870)"
"(alt-reverse po?_2871)))))"
"(values"
"(lambda(poses_2911)"
"(apply"
" values"
"(map(lambda(pos->val_2912 pos_2913)(pos->val_2912 pos_2913)) pos->vals_2860 poses_2911)))"
"(lambda(poses_2914)"
"(map(lambda(pos-next_2915 pos_2916)(pos-next_2915 pos_2916)) pos-nexts_2861 poses_2914))"
" inits_2862"
"(if(ormap values pos-cont?s_2863)"
"(lambda(poses_2917)"
"(andmap"
"(lambda(pos-cont?_2918 pos_2919)(if pos-cont?_2918(pos-cont?_2918 pos_2919) #t))"
" pos-cont?s_2863"
" poses_2917))"
" #f)"
"(if(ormap values pre-cont?s_2864)"
"(lambda vals_2920"
"(andmap"
"(lambda(pre-cont?_2921 val_2922)(if pre-cont?_2921(pre-cont?_2921 val_2922) #t))"
" pre-cont?s_2864"
" vals_2920))"
" #f)"
"(if(ormap values post-cont?s_2865)"
"(lambda(poses_2923 . vals_2924)"
"(andmap"
"(lambda(post-cont?_2925 pos_2926 val_2927)"
"(if post-cont?_2925(post-cont?_2925 pos_2926 val_2927) #t))"
" post-cont?s_2865"
" poses_2923"
" vals_2924))"
" #f)))))))))"
"(define-values"
"(in-producer)"
"(case-lambda"
"((producer_2928)(make-do-sequence(lambda()(values(lambda __2929(producer_2928)) void(void) #f #f #f))))"
"((producer_2930 stop_2931 . more_2932)"
"(let-values(((produce!_2933)"
"(if(null? more_2932)"
"(lambda(__2935)(producer_2930))"
"(lambda(__2936)(apply producer_2930 more_2932)))))"
"(let-values(((stop?_2934)"
"(if(not(procedure? stop_2931))"
"(let-values()(lambda(x_2937)(not(eq? x_2937 stop_2931))))"
"(if(equal? 1(procedure-arity stop_2931))"
"(let-values()(lambda(x_2938)(not(stop_2931 x_2938))))"
"(let-values()(lambda xs_2939(not(apply stop_2931 xs_2939))))))))"
"(make-do-sequence(lambda()(values produce!_2933 void(void) #f stop?_2934 #f))))))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_2940)((do-stream-ref v_2940 0)))"
"(lambda(v_2941)((do-stream-ref v_2941 1)))"
"(lambda(v_2942)((do-stream-ref v_2942 2))))))))"
"(define-values(empty-stream)(make-do-stream(lambda() #t) void void))"
"(define-values"
"(sequence->stream)"
"(lambda(s_2943)"
"(begin"
"      (if (sequence? s_2943) (void) (let-values () (raise-argument-error 'sequence-generate \"sequence?\" s_2943)))"
"(if(stream? s_2943)"
"(let-values() s_2943)"
"(let-values()"
"(let-values(((pos->val_2944 pos-next_2945 init_2946 pos-cont?_2947 pre-cont?_2948 post-cont?_2949)"
"(make-sequence #f s_2943)))"
"(letrec-values(((gen-stream_2950)"
"(lambda(pos_2951)"
"(let-values(((done?_2952) #f)((vals_2953) #f)((empty?_2954) #f)((next_2955) #f))"
"(let-values(((force!_2956)"
"(lambda()"
"(if done?_2952"
"(void)"
"(let-values()"
"(begin"
"(if(if pos-cont?_2947(pos-cont?_2947 pos_2951) #t)"
"(begin"
"(set! vals_2953"
"(call-with-values"
"(lambda()(pos->val_2944 pos_2951))"
" list))"
"(if(if pre-cont?_2948(apply pre-cont?_2948 vals_2953) #t)"
"(void)"
"(let-values()"
"(begin(set! vals_2953 #f)(set! empty?_2954 #t)))))"
"(set! empty?_2954 #t))"
"(set! done?_2952 #t)))))))"
"(make-do-stream"
"(lambda()(begin(force!_2956) empty?_2954))"
"(lambda()(begin(force!_2956)(apply values vals_2953)))"
"(lambda()"
"(begin"
"(force!_2956)"
"(if next_2955"
" next_2955"
"(begin"
"(if(if post-cont?_2949(apply post-cont?_2949 pos_2951 vals_2953) #t)"
"(set! next_2955(gen-stream_2950(pos-next_2945 pos_2951)))"
"(set! next_2955 empty-stream))"
" next_2955))))))))))"
"(gen-stream_2950 init_2946))))))))"
"(define-values"
"(no-more)"
"  (lambda () (raise (exn:fail:contract \"sequence has no more values\" (current-continuation-marks)))))"
"(define-values"
"(sequence-generate)"
"(lambda(g_2957)"
"(begin"
"      (if (sequence? g_2957) (void) (let-values () (raise-argument-error 'sequence-generate \"sequence?\" g_2957)))"
"(let-values(((pos->val_2958 pos-next_2959 init_2960 pos-cont?_2961 pre-cont?_2962 post-cont?_2963)"
"(make-sequence #f g_2957)))"
"(let-values(((pos_2964) init_2960))"
"(letrec-values(((more?_2965) #f)((prep-val!_2966) #f)((next_2967) #f))"
"(letrec-values(((init-more?_2968)(lambda()(begin(prep-val!_2966)(more?_2965))))"
"((init-next_2969)(lambda()(begin(prep-val!_2966)(next_2967))))"
"((init-prep-val!_2970)"
"(lambda()"
"(if(if pos-cont?_2961(pos-cont?_2961 pos_2964) #t)"
"(call-with-values"
"(lambda()(pos->val_2958 pos_2964))"
"(lambda vals_2971"
"(if(if pre-cont?_2962(apply pre-cont?_2962 vals_2971) #t)"
"(begin"
"(set! more?_2965(lambda() #t))"
"(set! next_2967"
"(lambda()"
"(let-values(((v_2972) vals_2971))"
"(begin"
"(set! prep-val!_2966"
"(lambda()"
"(if(if post-cont?_2963"
"(apply post-cont?_2963 pos_2964 vals_2971)"
" #t)"
"(begin"
"(set! pos_2964(pos-next_2959 pos_2964))"
"(set! prep-val!_2966 init-prep-val!_2970)"
"(prep-val!_2966))"
"(begin"
"(set! more?_2965(lambda() #f))"
"(set! next_2967 no-more)))))"
"(set! more?_2965 init-more?_2968)"
"(set! next_2967 init-next_2969)"
"(apply values v_2972)))))"
"(set! prep-val!_2966 void)"
"(apply values vals_2971))"
"(begin(set! more?_2965(lambda() #f))(set! next_2967 no-more)))))"
"(begin(set! more?_2965(lambda() #f))(set! next_2967 no-more))))))"
"(begin"
"(set! more?_2965 init-more?_2968)"
"(set! prep-val!_2966 init-prep-val!_2970)"
"(set! next_2967 init-next_2969)"
"(let-values(((sequence-more?_2973)(lambda()(more?_2965)))"
"((sequence-next_2974)(lambda()(next_2967))))"
"(values sequence-more?_2973 sequence-next_2974))))))))))"
"(define-values"
"(sequence-generate*)"
"(lambda(g_2975)"
"(begin"
"      (if (sequence? g_2975) (void) (let-values () (raise-argument-error 'sequence-generate* \"sequence?\" g_2975)))"
"(let-values(((pos->val_2976 pos-next_2977 init_2978 pos-cont?_2979 pre-cont?_2980 post-cont?_2981)"
"(make-sequence #f g_2975)))"
"(letrec-values(((next!_2982)"
"(lambda(pos_2983)"
"(if(if pos-cont?_2979(pos-cont?_2979 pos_2983) #t)"
"(call-with-values"
"(lambda()(pos->val_2976 pos_2983))"
"(lambda vals_2984"
"(if(if pre-cont?_2980(apply pre-cont?_2980 vals_2984) #t)"
"(values"
" vals_2984"
"(lambda()"
"(if(if post-cont?_2981(apply post-cont?_2981 pos_2983 vals_2984) #t)"
"(next!_2982(pos-next_2977 pos_2983))"
"(values #f no-more))))"
"(values #f no-more))))"
"(values #f no-more)))))"
"(next!_2982 init_2978))))))"
"(define-values"
"(grow-vector)"
"(lambda(vec_2985)"
"(let-values(((n_2986)(vector-length vec_2985)))"
"(let-values(((new-vec_2987)(make-vector(* 2 n_2986))))"
"(begin(vector-copy! new-vec_2987 0 vec_2985 0 n_2986) new-vec_2987)))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_2988 i_2989)"
"(let-values(((new-vec_2990)(make-vector i_2989)))"
"(begin(vector-copy! new-vec_2990 0 vec_2988 0 i_2989) new-vec_2990))))"
"(define-values"
"(dir-list)"
"(lambda(full-d_2991 d_2992 acc_2993)"
"(let-values(((pos->vals_2994 pos-next_2995 init_2996 pos-cont?_2997 val-cont?_2998 all-cont?_2999)"
"(make-sequence '(f)(in-list(reverse(directory-list full-d_2991))))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_3000)"
"(lambda(acc_3001 pos_3002)"
"(if(if pos-cont?_2997(pos-cont?_2997 pos_3002) #t)"
"(let-values(((f_3003)(pos->vals_2994 pos_3002)))"
"(if(if val-cont?_2998(val-cont?_2998 f_3003) #t)"
"(let-values(((acc_3004)"
"(let-values(((acc_3005) acc_3001))"
"(let-values(((acc_3006)"
"(let-values()"
"(cons(build-path d_2992 f_3003) acc_3005))))"
"(values acc_3006)))))"
"(if(if all-cont?_2999(all-cont?_2999 pos_3002 f_3003) #t)"
"(for-loop_3000 acc_3004(pos-next_2995 pos_3002))"
" acc_3004))"
" acc_3001))"
" acc_3001))))"
" for-loop_3000)"
" acc_2993"
" init_2996)))))"
"(define-values"
"(next-body)"
"(lambda(l_3007 d_3008 init-dir_3009 use-dir?_3010)"
"(let-values(((full-d_3011)(path->complete-path d_3008 init-dir_3009)))"
"(if(if(directory-exists? full-d_3011)(use-dir?_3010 full-d_3011) #f)"
"(dir-list full-d_3011 d_3008(cdr l_3007))"
"(cdr l_3007)))))"
"(define-values"
"(initial-state)"
"(lambda(orig-dir_3012 init-dir_3013)"
"(if orig-dir_3012"
"(dir-list(path->complete-path orig-dir_3012 init-dir_3013) orig-dir_3012 null)"
"(directory-list init-dir_3013))))"
"(define-values"
"(*in-directory)"
"(case-lambda"
"(()(*in-directory #f(lambda(d_3014) #t)))"
"((orig-dir_3015)(*in-directory orig-dir_3015(lambda(d_3016) #t)))"
"((orig-dir_3017 use-dir?_3018)"
"(let-values(((init-dir_3019)(current-directory)))"
"(let-values(((next_3020)"
"(lambda(l_3021)"
"(let-values(((d_3022)(car l_3021)))(next-body l_3021 d_3022 init-dir_3019 use-dir?_3018)))))"
"(make-do-sequence"
"(lambda()(values car next_3020(initial-state orig-dir_3017 init-dir_3019) pair? #f #f))))))))"
"(define-values"
"(map2)"
"(let-values(((map_1)"
"(case-lambda"
"((f_2 l_3)"
"(if(if(procedure? f_2)(if(procedure-arity-includes? f_2 1)(list? l_3) #f) #f)"
"((letrec-values(((loop_4)"
"(lambda(l_5)"
"(if(null? l_5)"
"(let-values() null)"
"(let-values()(cons(f_2(car l_5))(loop_4(cdr l_5))))))))"
" loop_4)"
" l_3)"
"(map f_2 l_3)))"
"((f_6 l1_7 l2_8)"
"(if(if(procedure? f_6)"
"(if(procedure-arity-includes? f_6 2)"
"(if(list? l1_7)(if(list? l2_8)(=(length l1_7)(length l2_8)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_9)"
"(lambda(l1_10 l2_11)"
"(if(null? l1_10)"
"(let-values() null)"
"(let-values()"
"(cons(f_6(car l1_10)(car l2_11))(loop_9(cdr l1_10)(cdr l2_11))))))))"
" loop_9)"
" l1_7"
" l2_8)"
"(map f_6 l1_7 l2_8)))"
"((f_12 l_13 . args_14)(apply map f_12 l_13 args_14)))))"
" map_1))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_15)"
"(case-lambda"
"((f_16 l_17)"
"(if(if(procedure? f_16)(if(procedure-arity-includes? f_16 1)(list? l_17) #f) #f)"
"((letrec-values(((loop_18)"
"(lambda(l_19)"
"(if(null? l_19)"
"(let-values()(void))"
"(let-values()(begin(f_16(car l_19))(loop_18(cdr l_19))))))))"
" loop_18)"
" l_17)"
"(for-each f_16 l_17)))"
"((f_20 l1_21 l2_22)"
"(if(if(procedure? f_20)"
"(if(procedure-arity-includes? f_20 2)"
"(if(list? l1_21)(if(list? l2_22)(=(length l1_21)(length l2_22)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_23)"
"(lambda(l1_24 l2_25)"
"(if(null? l1_24)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(f_20(car l1_24)(car l2_25))"
"(loop_23(cdr l1_24)(cdr l2_25))))))))"
" loop_23)"
" l1_21"
" l2_22)"
"(for-each f_20 l1_21 l2_22)))"
"((f_26 l_27 . args_28)(apply for-each f_26 l_27 args_28)))))"
" for-each_15))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_29)"
"(case-lambda"
"((f_30 l_31)"
"(if(if(procedure? f_30)(if(procedure-arity-includes? f_30 1)(list? l_31) #f) #f)"
"(if(null? l_31)"
" #t"
"((letrec-values(((loop_32)"
"(lambda(l_33)"
"(if(null?(cdr l_33))"
"(let-values()(f_30(car l_33)))"
"(let-values()(if(f_30(car l_33))(loop_32(cdr l_33)) #f))))))"
" loop_32)"
" l_31))"
"(andmap f_30 l_31)))"
"((f_34 l1_35 l2_36)"
"(if(if(procedure? f_34)"
"(if(procedure-arity-includes? f_34 2)"
"(if(list? l1_35)(if(list? l2_36)(=(length l1_35)(length l2_36)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_35)"
" #t"
"((letrec-values(((loop_37)"
"(lambda(l1_38 l2_39)"
"(if(null?(cdr l1_38))"
"(let-values()(f_34(car l1_38)(car l2_39)))"
"(let-values()"
"(if(f_34(car l1_38)(car l2_39))"
"(loop_37(cdr l1_38)(cdr l2_39))"
" #f))))))"
" loop_37)"
" l1_35"
" l2_36))"
"(andmap f_34 l1_35 l2_36)))"
"((f_40 l_41 . args_42)(apply andmap f_40 l_41 args_42)))))"
" andmap_29))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_43)"
"(case-lambda"
"((f_44 l_45)"
"(if(if(procedure? f_44)(if(procedure-arity-includes? f_44 1)(list? l_45) #f) #f)"
"(if(null? l_45)"
" #f"
"((letrec-values(((loop_46)"
"(lambda(l_47)"
"(if(null?(cdr l_47))"
"(let-values()(f_44(car l_47)))"
"(let-values()"
"(let-values(((or-part_48)(f_44(car l_47))))"
"(if or-part_48 or-part_48(loop_46(cdr l_47)))))))))"
" loop_46)"
" l_45))"
"(ormap f_44 l_45)))"
"((f_49 l1_50 l2_51)"
"(if(if(procedure? f_49)"
"(if(procedure-arity-includes? f_49 2)"
"(if(list? l1_50)(if(list? l2_51)(=(length l1_50)(length l2_51)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_50)"
" #f"
"((letrec-values(((loop_52)"
"(lambda(l1_53 l2_54)"
"(if(null?(cdr l1_53))"
"(let-values()(f_49(car l1_53)(car l2_54)))"
"(let-values()"
"(let-values(((or-part_55)(f_49(car l1_53)(car l2_54))))"
"(if or-part_55 or-part_55(loop_52(cdr l1_53)(cdr l2_54)))))))))"
" loop_52)"
" l1_50"
" l2_51))"
"(ormap f_49 l1_50 l2_51)))"
"((f_56 l_57 . args_58)(apply ormap f_56 l_57 args_58)))))"
" ormap_43))"
"(define-values"
"(sort)"
"(let-values()"
"(let-values(((sort-internals_29)(make-hasheq)))"
"(let-values(((__30)"
"(let-values()"
"(begin"
"(let-values(((proc_90)"
"(lambda(vec_91 n_92)"
"(let-values(((n/2-_93)(unsafe-fxrshift n_92 1)))"
"(let-values(((n/2+_94)(unsafe-fx- n_92 n/2-_93)))"
"(letrec-values(((copying-mergesort_169)"
"(lambda(Alo_170 Blo_171 n_172)"
"(if(unsafe-fx= n_172 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170)))"
"(if(unsafe-fx= n_172 2)"
"(let-values()"
"(let-values(((x_173)"
"(unsafe-vector-ref vec_91 Alo_170))"
"((y_174)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+ Alo_170 1))))"
"(if(if #f"
"(<(#f y_174)(#f x_173))"
"(< y_174 x_173))"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 y_174)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 1)"
" x_173))"
"(begin"
"(unsafe-vector-set! vec_91 Blo_171 x_173)"
"(unsafe-vector-set!"
" vec_91"
"(unsafe-fx+ Blo_171 1)"
" y_174)))))"
"(if(unsafe-fx< n_172 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" Blo_171"
"(unsafe-vector-ref vec_91 Alo_170))"
"((letrec-values(((iloop_175)"
"(lambda(i_176)"
"(if(unsafe-fx<"
" i_176"
" n_172)"
"(let-values()"
"(let-values(((ref-i_177)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx+"
" Alo_170"
" i_176))))"
"((letrec-values(((jloop_178)"
"(lambda(j_179)"
"(let-values(((ref-j-1_180)"
"(unsafe-vector-ref"
" vec_91"
"(unsafe-fx-"
" j_179"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_171"
" j_179)"
"(if #f"
"(<"
"(#f"
" ref-i_177)"
"(#f"
" ref-j-1_180))"
"(<"
" ref-i_177"
" ref-j-1_180))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-j-1_180)"
"(jloop_178"
"(unsafe-fx-"
" j_179"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" j_179"
" ref-i_177)"
"(iloop_175"
"(unsafe-fx+"
" i_176"
" 1))))))))"
" jloop_178)"
"(unsafe-fx+"
" Blo_171"
" i_176))))"
"(void)))))"
" iloop_175)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_181)"
"(unsafe-fxrshift n_172 1)))"
"(let-values(((n/2+_182)"
"(unsafe-fx- n_172 n/2-_181)))"
"(let-values(((Amid1_183)"
"(unsafe-fx+ Alo_170 n/2-_181))"
"((Amid2_184)"
"(unsafe-fx+ Alo_170 n/2+_182))"
"((Bmid1_185)"
"(unsafe-fx+ Blo_171 n/2-_181)))"
"(begin"
"(copying-mergesort_169"
" Amid1_183"
" Bmid1_185"
" n/2+_182)"
"(copying-mergesort_169"
" Alo_170"
" Amid2_184"
" n/2-_181)"
"(let-values(((b2_186)"
"(unsafe-fx+"
" Blo_171"
" n_172)))"
"((letrec-values(((loop_187)"
"(lambda(a1_188"
" b1_189"
" c1_190)"
"(let-values(((x_191)"
"(unsafe-vector-ref"
" vec_91"
" a1_188))"
"((y_192)"
"(unsafe-vector-ref"
" vec_91"
" b1_189)))"
"(if(if #t"
"(not"
"(if #f"
"(<"
"(#f"
" y_192)"
"(#f"
" x_191))"
"(<"
" y_192"
" x_191)))"
"(if #f"
"(<"
"(#f"
" x_191)"
"(#f"
" y_192))"
"(<"
" x_191"
" y_192)))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" x_191)"
"(let-values(((a1_193)"
"(unsafe-fx+"
" a1_188"
" 1))"
"((c1_194)"
"(unsafe-fx+"
" c1_190"
" 1)))"
"(if(unsafe-fx<"
" c1_194"
" b1_189)"
"(let-values()"
"(loop_187"
" a1_193"
" b1_189"
" c1_194))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_190"
" y_192)"
"(let-values(((b1_195)"
"(unsafe-fx+"
" b1_189"
" 1))"
"((c1_196)"
"(unsafe-fx+"
" c1_190"
" 1)))"
"(if(unsafe-fx<="
" b2_186"
" b1_195)"
"((letrec-values(((loop_197)"
"(lambda(a1_198"
" c1_199)"
"(if(unsafe-fx<"
" c1_199"
" b1_195)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_199"
"(unsafe-vector-ref"
" vec_91"
" a1_198))"
"(loop_197"
"(unsafe-fx+"
" a1_198"
" 1)"
"(unsafe-fx+"
" c1_199"
" 1))))"
"(void)))))"
" loop_197)"
" a1_188"
" c1_196)"
"(loop_187"
" a1_188"
" b1_195"
" c1_196)))))))))"
" loop_187)"
" Amid2_184"
" Bmid1_185"
" Blo_171)))))))))))))"
"(let-values(((Alo_200) 0)"
"((Amid1_201) n/2-_93)"
"((Amid2_202) n/2+_94)"
"((Ahi_203) n_92)"
"((B1lo_204) n_92))"
"(begin"
"(copying-mergesort_169 Amid1_201 B1lo_204 n/2+_94)"
"(if(zero? n/2-_93)"
"(void)"
"(let-values()(copying-mergesort_169 Alo_200 Amid2_202 n/2-_93)))"
"(let-values(((b2_205) Ahi_203))"
"((letrec-values(((loop_206)"
"(lambda(a1_207 b1_208 c1_209)"
"(let-values(((x_210)"
"(unsafe-vector-ref vec_91 a1_207))"
"((y_211)"
"(unsafe-vector-ref"
" vec_91"
" b1_208)))"
"(if(if #f"
"(not"
"(if #f"
"(<(#f y_211)(#f x_210))"
"(< y_211 x_210)))"
"(if #f"
"(<(#f x_210)(#f y_211))"
"(< x_210 y_211)))"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 x_210)"
"(let-values(((a1_212)"
"(unsafe-fx+ a1_207 1))"
"((c1_213)"
"(unsafe-fx+ c1_209 1)))"
"(if(unsafe-fx< c1_213 b1_208)"
"(let-values()"
"(loop_206 a1_212 b1_208 c1_213))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_91 c1_209 y_211)"
"(let-values(((b1_214)"
"(unsafe-fx+ b1_208 1))"
"((c1_215)"
"(unsafe-fx+ c1_209 1)))"
"(if(unsafe-fx<= b2_205 b1_214)"
"((letrec-values(((loop_216)"
"(lambda(a1_217"
" c1_218)"
"(if(unsafe-fx<"
" c1_218"
" b1_214)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_91"
" c1_218"
"(unsafe-vector-ref"
" vec_91"
" a1_217))"
"(loop_216"
"(unsafe-fx+"
" a1_217"
" 1)"
"(unsafe-fx+"
" c1_218"
" 1))))"
"(void)))))"
" loop_216)"
" a1_207"
" c1_215)"
"(loop_206"
" a1_207"
" b1_214"
" c1_215)))))))))"
" loop_206)"
" B1lo_204"
" Amid2_202"
" Alo_200))))))))))"
"(begin(hash-set! sort-internals_29 < proc_90)(hash-set! sort-internals_29 <= proc_90)))"
"(let-values(((proc_219)"
"(lambda(vec_220 n_221)"
"(let-values(((n/2-_222)(unsafe-fxrshift n_221 1)))"
"(let-values(((n/2+_223)(unsafe-fx- n_221 n/2-_222)))"
"(letrec-values(((copying-mergesort_298)"
"(lambda(Alo_299 Blo_300 n_301)"
"(if(unsafe-fx= n_301 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299)))"
"(if(unsafe-fx= n_301 2)"
"(let-values()"
"(let-values(((x_302)"
"(unsafe-vector-ref vec_220 Alo_299))"
"((y_303)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+ Alo_299 1))))"
"(if(if #f"
"(>(#f y_303)(#f x_302))"
"(> y_303 x_302))"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 y_303)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 1)"
" x_302))"
"(begin"
"(unsafe-vector-set! vec_220 Blo_300 x_302)"
"(unsafe-vector-set!"
" vec_220"
"(unsafe-fx+ Blo_300 1)"
" y_303)))))"
"(if(unsafe-fx< n_301 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" Blo_300"
"(unsafe-vector-ref vec_220 Alo_299))"
"((letrec-values(((iloop_304)"
"(lambda(i_305)"
"(if(unsafe-fx<"
" i_305"
" n_301)"
"(let-values()"
"(let-values(((ref-i_306)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx+"
" Alo_299"
" i_305))))"
"((letrec-values(((jloop_307)"
"(lambda(j_308)"
"(let-values(((ref-j-1_309)"
"(unsafe-vector-ref"
" vec_220"
"(unsafe-fx-"
" j_308"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_300"
" j_308)"
"(if #f"
"(>"
"(#f"
" ref-i_306)"
"(#f"
" ref-j-1_309))"
"(>"
" ref-i_306"
" ref-j-1_309))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-j-1_309)"
"(jloop_307"
"(unsafe-fx-"
" j_308"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" j_308"
" ref-i_306)"
"(iloop_304"
"(unsafe-fx+"
" i_305"
" 1))))))))"
" jloop_307)"
"(unsafe-fx+"
" Blo_300"
" i_305))))"
"(void)))))"
" iloop_304)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_310)"
"(unsafe-fxrshift n_301 1)))"
"(let-values(((n/2+_311)"
"(unsafe-fx- n_301 n/2-_310)))"
"(let-values(((Amid1_312)"
"(unsafe-fx+ Alo_299 n/2-_310))"
"((Amid2_313)"
"(unsafe-fx+ Alo_299 n/2+_311))"
"((Bmid1_314)"
"(unsafe-fx+ Blo_300 n/2-_310)))"
"(begin"
"(copying-mergesort_298"
" Amid1_312"
" Bmid1_314"
" n/2+_311)"
"(copying-mergesort_298"
" Alo_299"
" Amid2_313"
" n/2-_310)"
"(let-values(((b2_315)"
"(unsafe-fx+"
" Blo_300"
" n_301)))"
"((letrec-values(((loop_316)"
"(lambda(a1_317"
" b1_318"
" c1_319)"
"(let-values(((x_320)"
"(unsafe-vector-ref"
" vec_220"
" a1_317))"
"((y_321)"
"(unsafe-vector-ref"
" vec_220"
" b1_318)))"
"(if(if #t"
"(not"
"(if #f"
"(>"
"(#f"
" y_321)"
"(#f"
" x_320))"
"(>"
" y_321"
" x_320)))"
"(if #f"
"(>"
"(#f"
" x_320)"
"(#f"
" y_321))"
"(>"
" x_320"
" y_321)))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" x_320)"
"(let-values(((a1_322)"
"(unsafe-fx+"
" a1_317"
" 1))"
"((c1_323)"
"(unsafe-fx+"
" c1_319"
" 1)))"
"(if(unsafe-fx<"
" c1_323"
" b1_318)"
"(let-values()"
"(loop_316"
" a1_322"
" b1_318"
" c1_323))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_319"
" y_321)"
"(let-values(((b1_324)"
"(unsafe-fx+"
" b1_318"
" 1))"
"((c1_325)"
"(unsafe-fx+"
" c1_319"
" 1)))"
"(if(unsafe-fx<="
" b2_315"
" b1_324)"
"((letrec-values(((loop_326)"
"(lambda(a1_327"
" c1_328)"
"(if(unsafe-fx<"
" c1_328"
" b1_324)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_328"
"(unsafe-vector-ref"
" vec_220"
" a1_327))"
"(loop_326"
"(unsafe-fx+"
" a1_327"
" 1)"
"(unsafe-fx+"
" c1_328"
" 1))))"
"(void)))))"
" loop_326)"
" a1_317"
" c1_325)"
"(loop_316"
" a1_317"
" b1_324"
" c1_325)))))))))"
" loop_316)"
" Amid2_313"
" Bmid1_314"
" Blo_300)))))))))))))"
"(let-values(((Alo_329) 0)"
"((Amid1_330) n/2-_222)"
"((Amid2_331) n/2+_223)"
"((Ahi_332) n_221)"
"((B1lo_333) n_221))"
"(begin"
"(copying-mergesort_298 Amid1_330 B1lo_333 n/2+_223)"
"(if(zero? n/2-_222)"
"(void)"
"(let-values()(copying-mergesort_298 Alo_329 Amid2_331 n/2-_222)))"
"(let-values(((b2_334) Ahi_332))"
"((letrec-values(((loop_335)"
"(lambda(a1_336 b1_337 c1_338)"
"(let-values(((x_339)"
"(unsafe-vector-ref"
" vec_220"
" a1_336))"
"((y_340)"
"(unsafe-vector-ref"
" vec_220"
" b1_337)))"
"(if(if #f"
"(not"
"(if #f"
"(>(#f y_340)(#f x_339))"
"(> y_340 x_339)))"
"(if #f"
"(>(#f x_339)(#f y_340))"
"(> x_339 y_340)))"
"(begin"
"(unsafe-vector-set! vec_220 c1_338 x_339)"
"(let-values(((a1_341)"
"(unsafe-fx+ a1_336 1))"
"((c1_342)"
"(unsafe-fx+ c1_338 1)))"
"(if(unsafe-fx< c1_342 b1_337)"
"(let-values()"
"(loop_335 a1_341 b1_337 c1_342))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_220 c1_338 y_340)"
"(let-values(((b1_343)"
"(unsafe-fx+ b1_337 1))"
"((c1_344)"
"(unsafe-fx+ c1_338 1)))"
"(if(unsafe-fx<= b2_334 b1_343)"
"((letrec-values(((loop_345)"
"(lambda(a1_346"
" c1_347)"
"(if(unsafe-fx<"
" c1_347"
" b1_343)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_220"
" c1_347"
"(unsafe-vector-ref"
" vec_220"
" a1_346))"
"(loop_345"
"(unsafe-fx+"
" a1_346"
" 1)"
"(unsafe-fx+"
" c1_347"
" 1))))"
"(void)))))"
" loop_345)"
" a1_336"
" c1_344)"
"(loop_335"
" a1_336"
" b1_343"
" c1_344)))))))))"
" loop_335)"
" B1lo_333"
" Amid2_331"
" Alo_329))))))))))"
"(begin(hash-set! sort-internals_29 > proc_219)(hash-set! sort-internals_29 >= proc_219)))"
"(let-values(((proc_348)"
"(lambda(vec_349 n_350)"
"(let-values(((n/2-_351)(unsafe-fxrshift n_350 1)))"
"(let-values(((n/2+_352)(unsafe-fx- n_350 n/2-_351)))"
"(letrec-values(((copying-mergesort_427)"
"(lambda(Alo_428 Blo_429 n_430)"
"(if(unsafe-fx= n_430 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428)))"
"(if(unsafe-fx= n_430 2)"
"(let-values()"
"(let-values(((x_431)"
"(unsafe-vector-ref vec_349 Alo_428))"
"((y_432)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+ Alo_428 1))))"
"(if(if #f"
"(string<?(#f y_432)(#f x_431))"
"(string<? y_432 x_431))"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 y_432)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 1)"
" x_431))"
"(begin"
"(unsafe-vector-set! vec_349 Blo_429 x_431)"
"(unsafe-vector-set!"
" vec_349"
"(unsafe-fx+ Blo_429 1)"
" y_432)))))"
"(if(unsafe-fx< n_430 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" Blo_429"
"(unsafe-vector-ref vec_349 Alo_428))"
"((letrec-values(((iloop_433)"
"(lambda(i_434)"
"(if(unsafe-fx<"
" i_434"
" n_430)"
"(let-values()"
"(let-values(((ref-i_435)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx+"
" Alo_428"
" i_434))))"
"((letrec-values(((jloop_436)"
"(lambda(j_437)"
"(let-values(((ref-j-1_438)"
"(unsafe-vector-ref"
" vec_349"
"(unsafe-fx-"
" j_437"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_429"
" j_437)"
"(if #f"
"(string<?"
"(#f"
" ref-i_435)"
"(#f"
" ref-j-1_438))"
"(string<?"
" ref-i_435"
" ref-j-1_438))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-j-1_438)"
"(jloop_436"
"(unsafe-fx-"
" j_437"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" j_437"
" ref-i_435)"
"(iloop_433"
"(unsafe-fx+"
" i_434"
" 1))))))))"
" jloop_436)"
"(unsafe-fx+"
" Blo_429"
" i_434))))"
"(void)))))"
" iloop_433)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_439)"
"(unsafe-fxrshift n_430 1)))"
"(let-values(((n/2+_440)"
"(unsafe-fx- n_430 n/2-_439)))"
"(let-values(((Amid1_441)"
"(unsafe-fx+ Alo_428 n/2-_439))"
"((Amid2_442)"
"(unsafe-fx+ Alo_428 n/2+_440))"
"((Bmid1_443)"
"(unsafe-fx+ Blo_429 n/2-_439)))"
"(begin"
"(copying-mergesort_427"
" Amid1_441"
" Bmid1_443"
" n/2+_440)"
"(copying-mergesort_427"
" Alo_428"
" Amid2_442"
" n/2-_439)"
"(let-values(((b2_444)"
"(unsafe-fx+"
" Blo_429"
" n_430)))"
"((letrec-values(((loop_445)"
"(lambda(a1_446"
" b1_447"
" c1_448)"
"(let-values(((x_449)"
"(unsafe-vector-ref"
" vec_349"
" a1_446))"
"((y_450)"
"(unsafe-vector-ref"
" vec_349"
" b1_447)))"
"(if(if #t"
"(not"
"(if #f"
"(string<?"
"(#f"
" y_450)"
"(#f"
" x_449))"
"(string<?"
" y_450"
" x_449)))"
"(if #f"
"(string<?"
"(#f"
" x_449)"
"(#f"
" y_450))"
"(string<?"
" x_449"
" y_450)))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" x_449)"
"(let-values(((a1_451)"
"(unsafe-fx+"
" a1_446"
" 1))"
"((c1_452)"
"(unsafe-fx+"
" c1_448"
" 1)))"
"(if(unsafe-fx<"
" c1_452"
" b1_447)"
"(let-values()"
"(loop_445"
" a1_451"
" b1_447"
" c1_452))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_448"
" y_450)"
"(let-values(((b1_453)"
"(unsafe-fx+"
" b1_447"
" 1))"
"((c1_454)"
"(unsafe-fx+"
" c1_448"
" 1)))"
"(if(unsafe-fx<="
" b2_444"
" b1_453)"
"((letrec-values(((loop_455)"
"(lambda(a1_456"
" c1_457)"
"(if(unsafe-fx<"
" c1_457"
" b1_453)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_457"
"(unsafe-vector-ref"
" vec_349"
" a1_456))"
"(loop_455"
"(unsafe-fx+"
" a1_456"
" 1)"
"(unsafe-fx+"
" c1_457"
" 1))))"
"(void)))))"
" loop_455)"
" a1_446"
" c1_454)"
"(loop_445"
" a1_446"
" b1_453"
" c1_454)))))))))"
" loop_445)"
" Amid2_442"
" Bmid1_443"
" Blo_429)))))))))))))"
"(let-values(((Alo_458) 0)"
"((Amid1_459) n/2-_351)"
"((Amid2_460) n/2+_352)"
"((Ahi_461) n_350)"
"((B1lo_462) n_350))"
"(begin"
"(copying-mergesort_427 Amid1_459 B1lo_462 n/2+_352)"
"(if(zero? n/2-_351)"
"(void)"
"(let-values()(copying-mergesort_427 Alo_458 Amid2_460 n/2-_351)))"
"(let-values(((b2_463) Ahi_461))"
"((letrec-values(((loop_464)"
"(lambda(a1_465 b1_466 c1_467)"
"(let-values(((x_468)"
"(unsafe-vector-ref"
" vec_349"
" a1_465))"
"((y_469)"
"(unsafe-vector-ref"
" vec_349"
" b1_466)))"
"(if(if #f"
"(not"
"(if #f"
"(string<?(#f y_469)(#f x_468))"
"(string<? y_469 x_468)))"
"(if #f"
"(string<?(#f x_468)(#f y_469))"
"(string<? x_468 y_469)))"
"(begin"
"(unsafe-vector-set! vec_349 c1_467 x_468)"
"(let-values(((a1_470)"
"(unsafe-fx+ a1_465 1))"
"((c1_471)"
"(unsafe-fx+ c1_467 1)))"
"(if(unsafe-fx< c1_471 b1_466)"
"(let-values()"
"(loop_464 a1_470 b1_466 c1_471))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_349 c1_467 y_469)"
"(let-values(((b1_472)"
"(unsafe-fx+ b1_466 1))"
"((c1_473)"
"(unsafe-fx+ c1_467 1)))"
"(if(unsafe-fx<= b2_463 b1_472)"
"((letrec-values(((loop_474)"
"(lambda(a1_475"
" c1_476)"
"(if(unsafe-fx<"
" c1_476"
" b1_472)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_349"
" c1_476"
"(unsafe-vector-ref"
" vec_349"
" a1_475))"
"(loop_474"
"(unsafe-fx+"
" a1_475"
" 1)"
"(unsafe-fx+"
" c1_476"
" 1))))"
"(void)))))"
" loop_474)"
" a1_465"
" c1_473)"
"(loop_464"
" a1_465"
" b1_472"
" c1_473)))))))))"
" loop_464)"
" B1lo_462"
" Amid2_460"
" Alo_458))))))))))"
"(begin"
"(hash-set! sort-internals_29 string<? proc_348)"
"(hash-set! sort-internals_29 string<=? proc_348)))"
"(let-values(((proc_477)"
"(lambda(vec_478 n_479)"
"(let-values(((n/2-_480)(unsafe-fxrshift n_479 1)))"
"(let-values(((n/2+_481)(unsafe-fx- n_479 n/2-_480)))"
"(letrec-values(((copying-mergesort_556)"
"(lambda(Alo_557 Blo_558 n_559)"
"(if(unsafe-fx= n_559 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557)))"
"(if(unsafe-fx= n_559 2)"
"(let-values()"
"(let-values(((x_560)"
"(unsafe-vector-ref vec_478 Alo_557))"
"((y_561)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+ Alo_557 1))))"
"(if(if #f"
"(string-ci<?(#f y_561)(#f x_560))"
"(string-ci<? y_561 x_560))"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 y_561)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 1)"
" x_560))"
"(begin"
"(unsafe-vector-set! vec_478 Blo_558 x_560)"
"(unsafe-vector-set!"
" vec_478"
"(unsafe-fx+ Blo_558 1)"
" y_561)))))"
"(if(unsafe-fx< n_559 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" Blo_558"
"(unsafe-vector-ref vec_478 Alo_557))"
"((letrec-values(((iloop_562)"
"(lambda(i_563)"
"(if(unsafe-fx<"
" i_563"
" n_559)"
"(let-values()"
"(let-values(((ref-i_564)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx+"
" Alo_557"
" i_563))))"
"((letrec-values(((jloop_565)"
"(lambda(j_566)"
"(let-values(((ref-j-1_567)"
"(unsafe-vector-ref"
" vec_478"
"(unsafe-fx-"
" j_566"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_558"
" j_566)"
"(if #f"
"(string-ci<?"
"(#f"
" ref-i_564)"
"(#f"
" ref-j-1_567))"
"(string-ci<?"
" ref-i_564"
" ref-j-1_567))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-j-1_567)"
"(jloop_565"
"(unsafe-fx-"
" j_566"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" j_566"
" ref-i_564)"
"(iloop_562"
"(unsafe-fx+"
" i_563"
" 1))))))))"
" jloop_565)"
"(unsafe-fx+"
" Blo_558"
" i_563))))"
"(void)))))"
" iloop_562)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_568)"
"(unsafe-fxrshift n_559 1)))"
"(let-values(((n/2+_569)"
"(unsafe-fx- n_559 n/2-_568)))"
"(let-values(((Amid1_570)"
"(unsafe-fx+ Alo_557 n/2-_568))"
"((Amid2_571)"
"(unsafe-fx+ Alo_557 n/2+_569))"
"((Bmid1_572)"
"(unsafe-fx+ Blo_558 n/2-_568)))"
"(begin"
"(copying-mergesort_556"
" Amid1_570"
" Bmid1_572"
" n/2+_569)"
"(copying-mergesort_556"
" Alo_557"
" Amid2_571"
" n/2-_568)"
"(let-values(((b2_573)"
"(unsafe-fx+"
" Blo_558"
" n_559)))"
"((letrec-values(((loop_574)"
"(lambda(a1_575"
" b1_576"
" c1_577)"
"(let-values(((x_578)"
"(unsafe-vector-ref"
" vec_478"
" a1_575))"
"((y_579)"
"(unsafe-vector-ref"
" vec_478"
" b1_576)))"
"(if(if #t"
"(not"
"(if #f"
"(string-ci<?"
"(#f"
" y_579)"
"(#f"
" x_578))"
"(string-ci<?"
" y_579"
" x_578)))"
"(if #f"
"(string-ci<?"
"(#f"
" x_578)"
"(#f"
" y_579))"
"(string-ci<?"
" x_578"
" y_579)))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" x_578)"
"(let-values(((a1_580)"
"(unsafe-fx+"
" a1_575"
" 1))"
"((c1_581)"
"(unsafe-fx+"
" c1_577"
" 1)))"
"(if(unsafe-fx<"
" c1_581"
" b1_576)"
"(let-values()"
"(loop_574"
" a1_580"
" b1_576"
" c1_581))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_577"
" y_579)"
"(let-values(((b1_582)"
"(unsafe-fx+"
" b1_576"
" 1))"
"((c1_583)"
"(unsafe-fx+"
" c1_577"
" 1)))"
"(if(unsafe-fx<="
" b2_573"
" b1_582)"
"((letrec-values(((loop_584)"
"(lambda(a1_585"
" c1_586)"
"(if(unsafe-fx<"
" c1_586"
" b1_582)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_586"
"(unsafe-vector-ref"
" vec_478"
" a1_585))"
"(loop_584"
"(unsafe-fx+"
" a1_585"
" 1)"
"(unsafe-fx+"
" c1_586"
" 1))))"
"(void)))))"
" loop_584)"
" a1_575"
" c1_583)"
"(loop_574"
" a1_575"
" b1_582"
" c1_583)))))))))"
" loop_574)"
" Amid2_571"
" Bmid1_572"
" Blo_558)))))))))))))"
"(let-values(((Alo_587) 0)"
"((Amid1_588) n/2-_480)"
"((Amid2_589) n/2+_481)"
"((Ahi_590) n_479)"
"((B1lo_591) n_479))"
"(begin"
"(copying-mergesort_556 Amid1_588 B1lo_591 n/2+_481)"
"(if(zero? n/2-_480)"
"(void)"
"(let-values()(copying-mergesort_556 Alo_587 Amid2_589 n/2-_480)))"
"(let-values(((b2_592) Ahi_590))"
"((letrec-values(((loop_593)"
"(lambda(a1_594 b1_595 c1_596)"
"(let-values(((x_597)"
"(unsafe-vector-ref"
" vec_478"
" a1_594))"
"((y_598)"
"(unsafe-vector-ref"
" vec_478"
" b1_595)))"
"(if(if #f"
"(not"
"(if #f"
"(string-ci<?(#f y_598)(#f x_597))"
"(string-ci<? y_598 x_597)))"
"(if #f"
"(string-ci<?(#f x_597)(#f y_598))"
"(string-ci<? x_597 y_598)))"
"(begin"
"(unsafe-vector-set! vec_478 c1_596 x_597)"
"(let-values(((a1_599)"
"(unsafe-fx+ a1_594 1))"
"((c1_600)"
"(unsafe-fx+ c1_596 1)))"
"(if(unsafe-fx< c1_600 b1_595)"
"(let-values()"
"(loop_593 a1_599 b1_595 c1_600))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_478 c1_596 y_598)"
"(let-values(((b1_601)"
"(unsafe-fx+ b1_595 1))"
"((c1_602)"
"(unsafe-fx+ c1_596 1)))"
"(if(unsafe-fx<= b2_592 b1_601)"
"((letrec-values(((loop_603)"
"(lambda(a1_604"
" c1_605)"
"(if(unsafe-fx<"
" c1_605"
" b1_601)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_478"
" c1_605"
"(unsafe-vector-ref"
" vec_478"
" a1_604))"
"(loop_603"
"(unsafe-fx+"
" a1_604"
" 1)"
"(unsafe-fx+"
" c1_605"
" 1))))"
"(void)))))"
" loop_603)"
" a1_594"
" c1_602)"
"(loop_593"
" a1_594"
" b1_601"
" c1_602)))))))))"
" loop_593)"
" B1lo_591"
" Amid2_589"
" Alo_587))))))))))"
"(begin"
"(hash-set! sort-internals_29 string-ci<? proc_477)"
"(hash-set! sort-internals_29 string-ci<=? proc_477)))"
"(let-values(((proc_606)"
"(lambda(vec_607 n_608)"
"(let-values(((n/2-_609)(unsafe-fxrshift n_608 1)))"
"(let-values(((n/2+_610)(unsafe-fx- n_608 n/2-_609)))"
"(letrec-values(((copying-mergesort_685)"
"(lambda(Alo_686 Blo_687 n_688)"
"(if(unsafe-fx= n_688 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686)))"
"(if(unsafe-fx= n_688 2)"
"(let-values()"
"(let-values(((x_689)"
"(unsafe-vector-ref vec_607 Alo_686))"
"((y_690)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+ Alo_686 1))))"
"(if(if #f"
"(keyword<?(#f y_690)(#f x_689))"
"(keyword<? y_690 x_689))"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 y_690)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 1)"
" x_689))"
"(begin"
"(unsafe-vector-set! vec_607 Blo_687 x_689)"
"(unsafe-vector-set!"
" vec_607"
"(unsafe-fx+ Blo_687 1)"
" y_690)))))"
"(if(unsafe-fx< n_688 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" Blo_687"
"(unsafe-vector-ref vec_607 Alo_686))"
"((letrec-values(((iloop_691)"
"(lambda(i_692)"
"(if(unsafe-fx<"
" i_692"
" n_688)"
"(let-values()"
"(let-values(((ref-i_693)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx+"
" Alo_686"
" i_692))))"
"((letrec-values(((jloop_694)"
"(lambda(j_695)"
"(let-values(((ref-j-1_696)"
"(unsafe-vector-ref"
" vec_607"
"(unsafe-fx-"
" j_695"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_687"
" j_695)"
"(if #f"
"(keyword<?"
"(#f"
" ref-i_693)"
"(#f"
" ref-j-1_696))"
"(keyword<?"
" ref-i_693"
" ref-j-1_696))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-j-1_696)"
"(jloop_694"
"(unsafe-fx-"
" j_695"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" j_695"
" ref-i_693)"
"(iloop_691"
"(unsafe-fx+"
" i_692"
" 1))))))))"
" jloop_694)"
"(unsafe-fx+"
" Blo_687"
" i_692))))"
"(void)))))"
" iloop_691)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_697)"
"(unsafe-fxrshift n_688 1)))"
"(let-values(((n/2+_698)"
"(unsafe-fx- n_688 n/2-_697)))"
"(let-values(((Amid1_699)"
"(unsafe-fx+ Alo_686 n/2-_697))"
"((Amid2_700)"
"(unsafe-fx+ Alo_686 n/2+_698))"
"((Bmid1_701)"
"(unsafe-fx+ Blo_687 n/2-_697)))"
"(begin"
"(copying-mergesort_685"
" Amid1_699"
" Bmid1_701"
" n/2+_698)"
"(copying-mergesort_685"
" Alo_686"
" Amid2_700"
" n/2-_697)"
"(let-values(((b2_702)"
"(unsafe-fx+"
" Blo_687"
" n_688)))"
"((letrec-values(((loop_703)"
"(lambda(a1_704"
" b1_705"
" c1_706)"
"(let-values(((x_707)"
"(unsafe-vector-ref"
" vec_607"
" a1_704))"
"((y_708)"
"(unsafe-vector-ref"
" vec_607"
" b1_705)))"
"(if(if #t"
"(not"
"(if #f"
"(keyword<?"
"(#f"
" y_708)"
"(#f"
" x_707))"
"(keyword<?"
" y_708"
" x_707)))"
"(if #f"
"(keyword<?"
"(#f"
" x_707)"
"(#f"
" y_708))"
"(keyword<?"
" x_707"
" y_708)))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" x_707)"
"(let-values(((a1_709)"
"(unsafe-fx+"
" a1_704"
" 1))"
"((c1_710)"
"(unsafe-fx+"
" c1_706"
" 1)))"
"(if(unsafe-fx<"
" c1_710"
" b1_705)"
"(let-values()"
"(loop_703"
" a1_709"
" b1_705"
" c1_710))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_706"
" y_708)"
"(let-values(((b1_711)"
"(unsafe-fx+"
" b1_705"
" 1))"
"((c1_712)"
"(unsafe-fx+"
" c1_706"
" 1)))"
"(if(unsafe-fx<="
" b2_702"
" b1_711)"
"((letrec-values(((loop_713)"
"(lambda(a1_714"
" c1_715)"
"(if(unsafe-fx<"
" c1_715"
" b1_711)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_715"
"(unsafe-vector-ref"
" vec_607"
" a1_714))"
"(loop_713"
"(unsafe-fx+"
" a1_714"
" 1)"
"(unsafe-fx+"
" c1_715"
" 1))))"
"(void)))))"
" loop_713)"
" a1_704"
" c1_712)"
"(loop_703"
" a1_704"
" b1_711"
" c1_712)))))))))"
" loop_703)"
" Amid2_700"
" Bmid1_701"
" Blo_687)))))))))))))"
"(let-values(((Alo_716) 0)"
"((Amid1_717) n/2-_609)"
"((Amid2_718) n/2+_610)"
"((Ahi_719) n_608)"
"((B1lo_720) n_608))"
"(begin"
"(copying-mergesort_685 Amid1_717 B1lo_720 n/2+_610)"
"(if(zero? n/2-_609)"
"(void)"
"(let-values()(copying-mergesort_685 Alo_716 Amid2_718 n/2-_609)))"
"(let-values(((b2_721) Ahi_719))"
"((letrec-values(((loop_722)"
"(lambda(a1_723 b1_724 c1_725)"
"(let-values(((x_726)"
"(unsafe-vector-ref"
" vec_607"
" a1_723))"
"((y_727)"
"(unsafe-vector-ref"
" vec_607"
" b1_724)))"
"(if(if #f"
"(not"
"(if #f"
"(keyword<?(#f y_727)(#f x_726))"
"(keyword<? y_727 x_726)))"
"(if #f"
"(keyword<?(#f x_726)(#f y_727))"
"(keyword<? x_726 y_727)))"
"(begin"
"(unsafe-vector-set! vec_607 c1_725 x_726)"
"(let-values(((a1_728)"
"(unsafe-fx+ a1_723 1))"
"((c1_729)"
"(unsafe-fx+ c1_725 1)))"
"(if(unsafe-fx< c1_729 b1_724)"
"(let-values()"
"(loop_722 a1_728 b1_724 c1_729))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_607 c1_725 y_727)"
"(let-values(((b1_730)"
"(unsafe-fx+ b1_724 1))"
"((c1_731)"
"(unsafe-fx+ c1_725 1)))"
"(if(unsafe-fx<= b2_721 b1_730)"
"((letrec-values(((loop_732)"
"(lambda(a1_733"
" c1_734)"
"(if(unsafe-fx<"
" c1_734"
" b1_730)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_607"
" c1_734"
"(unsafe-vector-ref"
" vec_607"
" a1_733))"
"(loop_732"
"(unsafe-fx+"
" a1_733"
" 1)"
"(unsafe-fx+"
" c1_734"
" 1))))"
"(void)))))"
" loop_732)"
" a1_723"
" c1_731)"
"(loop_722"
" a1_723"
" b1_730"
" c1_731)))))))))"
" loop_722)"
" B1lo_720"
" Amid2_718"
" Alo_716))))))))))"
"(hash-set! sort-internals_29 keyword<? proc_606))))))"
"(case-lambda"
"((lst_735 <?_736)"
"(let-values(((n_737)(length lst_735)))"
"(if(= n_737 0)"
"(let-values() lst_735)"
"(if #f"
"(let-values()"
"(let-values(((vec_752)(make-vector(+ n_737(ceiling(/ n_737 2))))))"
"(begin"
"((letrec-values(((loop_753)"
"(lambda(i_754 lst_755)"
"(if(pair? lst_755)"
"(let-values()"
"(let-values(((x_756)(car lst_755)))"
"(begin"
"(vector-set! vec_752 i_754(cons(#f x_756) x_756))"
"(loop_753(add1 i_754)(cdr lst_755)))))"
"(void)))))"
" loop_753)"
" 0"
" lst_735)"
"(let-values()"
"(let-values(((n/2-_757)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_758)(unsafe-fx- n_737 n/2-_757)))"
"(letrec-values(((copying-mergesort_833)"
"(lambda(Alo_834 Blo_835 n_836)"
"(if(unsafe-fx= n_836 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_752"
" Blo_835"
"(unsafe-vector-ref vec_752 Alo_834)))"
"(if(unsafe-fx= n_836 2)"
"(let-values()"
"(let-values(((x_837)(unsafe-vector-ref vec_752 Alo_834))"
"((y_838)"
"(unsafe-vector-ref vec_752(unsafe-fx+ Alo_834 1))))"
"(if(if #t(<?_736(car y_838)(car x_837))(<?_736 y_838 x_837))"
"(begin"
"(unsafe-vector-set! vec_752 Blo_835 y_838)"
"(unsafe-vector-set! vec_752(unsafe-fx+ Blo_835 1) x_837))"
"(begin"
"(unsafe-vector-set! vec_752 Blo_835 x_837)"
"(unsafe-vector-set! vec_752(unsafe-fx+ Blo_835 1) y_838)))))"
"(if(unsafe-fx< n_836 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" Blo_835"
"(unsafe-vector-ref vec_752 Alo_834))"
"((letrec-values(((iloop_839)"
"(lambda(i_840)"
"(if(unsafe-fx< i_840 n_836)"
"(let-values()"
"(let-values(((ref-i_841)"
"(unsafe-vector-ref"
" vec_752"
"(unsafe-fx+"
" Alo_834"
" i_840))))"
"((letrec-values(((jloop_842)"
"(lambda(j_843)"
"(let-values(((ref-j-1_844)"
"(unsafe-vector-ref"
" vec_752"
"(unsafe-fx-"
" j_843"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_835"
" j_843)"
"(if #t"
"(<?_736"
"(car"
" ref-i_841)"
"(car"
" ref-j-1_844))"
"(<?_736"
" ref-i_841"
" ref-j-1_844))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" j_843"
" ref-j-1_844)"
"(jloop_842"
"(unsafe-fx-"
" j_843"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" j_843"
" ref-i_841)"
"(iloop_839"
"(unsafe-fx+"
" i_840"
" 1))))))))"
" jloop_842)"
"(unsafe-fx+ Blo_835 i_840))))"
"(void)))))"
" iloop_839)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_845)(unsafe-fxrshift n_836 1)))"
"(let-values(((n/2+_846)(unsafe-fx- n_836 n/2-_845)))"
"(let-values(((Amid1_847)(unsafe-fx+ Alo_834 n/2-_845))"
"((Amid2_848)(unsafe-fx+ Alo_834 n/2+_846))"
"((Bmid1_849)(unsafe-fx+ Blo_835 n/2-_845)))"
"(begin"
"(copying-mergesort_833 Amid1_847 Bmid1_849 n/2+_846)"
"(copying-mergesort_833 Alo_834 Amid2_848 n/2-_845)"
"(let-values(((b2_850)(unsafe-fx+ Blo_835 n_836)))"
"((letrec-values(((loop_851)"
"(lambda(a1_852 b1_853 c1_854)"
"(let-values(((x_855)"
"(unsafe-vector-ref"
" vec_752"
" a1_852))"
"((y_856)"
"(unsafe-vector-ref"
" vec_752"
" b1_853)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_736"
"(car y_856)"
"(car x_855))"
"(<?_736 y_856 x_855)))"
"(if #t"
"(<?_736"
"(car x_855)"
"(car y_856))"
"(<?_736 x_855 y_856)))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_854"
" x_855)"
"(let-values(((a1_857)"
"(unsafe-fx+"
" a1_852"
" 1))"
"((c1_858)"
"(unsafe-fx+"
" c1_854"
" 1)))"
"(if(unsafe-fx<"
" c1_858"
" b1_853)"
"(let-values()"
"(loop_851"
" a1_857"
" b1_853"
" c1_858))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_854"
" y_856)"
"(let-values(((b1_859)"
"(unsafe-fx+"
" b1_853"
" 1))"
"((c1_860)"
"(unsafe-fx+"
" c1_854"
" 1)))"
"(if(unsafe-fx<="
" b2_850"
" b1_859)"
"((letrec-values(((loop_861)"
"(lambda(a1_862"
" c1_863)"
"(if(unsafe-fx<"
" c1_863"
" b1_859)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_863"
"(unsafe-vector-ref"
" vec_752"
" a1_862))"
"(loop_861"
"(unsafe-fx+"
" a1_862"
" 1)"
"(unsafe-fx+"
" c1_863"
" 1))))"
"(void)))))"
" loop_861)"
" a1_852"
" c1_860)"
"(loop_851"
" a1_852"
" b1_859"
" c1_860)))))))))"
" loop_851)"
" Amid2_848"
" Bmid1_849"
" Blo_835)))))))))))))"
"(let-values(((Alo_864) 0)"
"((Amid1_865) n/2-_757)"
"((Amid2_866) n/2+_758)"
"((Ahi_867) n_737)"
"((B1lo_868) n_737))"
"(begin"
"(copying-mergesort_833 Amid1_865 B1lo_868 n/2+_758)"
"(if(zero? n/2-_757)"
"(void)"
"(let-values()(copying-mergesort_833 Alo_864 Amid2_866 n/2-_757)))"
"(let-values(((b2_869) Ahi_867))"
"((letrec-values(((loop_870)"
"(lambda(a1_871 b1_872 c1_873)"
"(let-values(((x_874)(unsafe-vector-ref vec_752 a1_871))"
"((y_875)(unsafe-vector-ref vec_752 b1_872)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_736(car y_875)(car x_874))"
"(<?_736 y_875 x_874)))"
"(if #t"
"(<?_736(car x_874)(car y_875))"
"(<?_736 x_874 y_875)))"
"(begin"
"(unsafe-vector-set! vec_752 c1_873 x_874)"
"(let-values(((a1_876)(unsafe-fx+ a1_871 1))"
"((c1_877)(unsafe-fx+ c1_873 1)))"
"(if(unsafe-fx< c1_877 b1_872)"
"(let-values()(loop_870 a1_876 b1_872 c1_877))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_752 c1_873 y_875)"
"(let-values(((b1_878)(unsafe-fx+ b1_872 1))"
"((c1_879)(unsafe-fx+ c1_873 1)))"
"(if(unsafe-fx<= b2_869 b1_878)"
"((letrec-values(((loop_880)"
"(lambda(a1_881 c1_882)"
"(if(unsafe-fx< c1_882 b1_878)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_752"
" c1_882"
"(unsafe-vector-ref"
" vec_752"
" a1_881))"
"(loop_880"
"(unsafe-fx+ a1_881 1)"
"(unsafe-fx+ c1_882 1))))"
"(void)))))"
" loop_880)"
" a1_871"
" c1_879)"
"(loop_870 a1_871 b1_878 c1_879)))))))))"
" loop_870)"
" B1lo_868"
" Amid2_866"
" Alo_864))))))))"
"((letrec-values(((loop_883)"
"(lambda(i_884 r_885)"
"(let-values(((i_886)(sub1 i_884)))"
"(if(< i_886 0)"
" r_885"
"(loop_883 i_886(cons(cdr(vector-ref vec_752 i_886)) r_885)))))))"
" loop_883)"
" n_737"
" '()))))"
"(if(< n_737 2)"
"(let-values() lst_735)"
"(if((letrec-values(((loop_887)"
"(lambda(last_888 next_889)"
"(let-values(((or-part_890)(null? next_889)))"
"(if or-part_890"
" or-part_890"
"(if(not"
"(if #f"
"(<?_736(#f(car next_889))(#f last_888))"
"(<?_736(car next_889) last_888)))"
"(loop_887(car next_889)(cdr next_889))"
" #f))))))"
" loop_887)"
"(car lst_735)"
"(cdr lst_735))"
"(let-values() lst_735)"
"(if(<= n_737 3)"
"(let-values()"
"(if(= n_737 2)"
"(list(cadr lst_735)(car lst_735))"
"(let-values(((a_891)(car lst_735))((b_892)(cadr lst_735))((c_893)(caddr lst_735)))"
"(let-values(((a_894)(car lst_735))((b_895)(cadr lst_735))((c_896)(caddr lst_735)))"
"(if(if #f(<?_736(#f b_895)(#f a_894))(<?_736 b_895 a_894))"
"(if(if #f(<?_736(#f c_896)(#f b_895))(<?_736 c_896 b_895))"
"(list c_896 b_895 a_894)"
"(if(if #f(<?_736(#f c_896)(#f a_894))(<?_736 c_896 a_894))"
"(list b_895 c_896 a_894)"
"(list b_895 a_894 c_896)))"
"(if(if #f(<?_736(#f c_896)(#f a_894))(<?_736 c_896 a_894))"
"(list c_896 a_894 b_895)"
"(list a_894 c_896 b_895)))))))"
"(let-values()"
"(let-values(((vec_897)(make-vector(+ n_737(ceiling(/ n_737 2))))))"
"(begin"
"((letrec-values(((loop_898)"
"(lambda(i_899 lst_900)"
"(if(pair? lst_900)"
"(let-values()"
"(begin"
"(vector-set! vec_897 i_899(car lst_900))"
"(loop_898(add1 i_899)(cdr lst_900))))"
"(void)))))"
" loop_898)"
" 0"
" lst_735)"
"(if #f"
"(let-values()"
"(let-values(((n/2-_901)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_902)(unsafe-fx- n_737 n/2-_901)))"
"(letrec-values(((copying-mergesort_977)"
"(lambda(Alo_978 Blo_979 n_980)"
"(if(unsafe-fx= n_980 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_897"
" Blo_979"
"(unsafe-vector-ref vec_897 Alo_978)))"
"(if(unsafe-fx= n_980 2)"
"(let-values()"
"(let-values(((x_981)(unsafe-vector-ref vec_897 Alo_978))"
"((y_982)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+ Alo_978 1))))"
"(if(if #t"
"(<?_736(#f y_982)(#f x_981))"
"(<?_736 y_982 x_981))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_979 y_982)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_979 1)"
" x_981))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_979 x_981)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_979 1)"
" y_982)))))"
"(if(unsafe-fx< n_980 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" Blo_979"
"(unsafe-vector-ref vec_897 Alo_978))"
"((letrec-values(((iloop_983)"
"(lambda(i_984)"
"(if(unsafe-fx< i_984 n_980)"
"(let-values()"
"(let-values(((ref-i_985)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+"
" Alo_978"
" i_984))))"
"((letrec-values(((jloop_986)"
"(lambda(j_987)"
"(let-values(((ref-j-1_988)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx-"
" j_987"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_979"
" j_987)"
"(if #t"
"(<?_736"
"(#f"
" ref-i_985)"
"(#f"
" ref-j-1_988))"
"(<?_736"
" ref-i_985"
" ref-j-1_988))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_987"
" ref-j-1_988)"
"(jloop_986"
"(unsafe-fx-"
" j_987"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_987"
" ref-i_985)"
"(iloop_983"
"(unsafe-fx+"
" i_984"
" 1))))))))"
" jloop_986)"
"(unsafe-fx+"
" Blo_979"
" i_984))))"
"(void)))))"
" iloop_983)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_989)(unsafe-fxrshift n_980 1)))"
"(let-values(((n/2+_990)(unsafe-fx- n_980 n/2-_989)))"
"(let-values(((Amid1_991)"
"(unsafe-fx+ Alo_978 n/2-_989))"
"((Amid2_992)"
"(unsafe-fx+ Alo_978 n/2+_990))"
"((Bmid1_993)"
"(unsafe-fx+ Blo_979 n/2-_989)))"
"(begin"
"(copying-mergesort_977"
" Amid1_991"
" Bmid1_993"
" n/2+_990)"
"(copying-mergesort_977"
" Alo_978"
" Amid2_992"
" n/2-_989)"
"(let-values(((b2_994)"
"(unsafe-fx+ Blo_979 n_980)))"
"((letrec-values(((loop_995)"
"(lambda(a1_996"
" b1_997"
" c1_998)"
"(let-values(((x_999)"
"(unsafe-vector-ref"
" vec_897"
" a1_996))"
"((y_1000)"
"(unsafe-vector-ref"
" vec_897"
" b1_997)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_736"
"(#f y_1000)"
"(#f x_999))"
"(<?_736"
" y_1000"
" x_999)))"
"(if #t"
"(<?_736"
"(#f x_999)"
"(#f y_1000))"
"(<?_736"
" x_999"
" y_1000)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_998"
" x_999)"
"(let-values(((a1_1001)"
"(unsafe-fx+"
" a1_996"
" 1))"
"((c1_1002)"
"(unsafe-fx+"
" c1_998"
" 1)))"
"(if(unsafe-fx<"
" c1_1002"
" b1_997)"
"(let-values()"
"(loop_995"
" a1_1001"
" b1_997"
" c1_1002))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_998"
" y_1000)"
"(let-values(((b1_1003)"
"(unsafe-fx+"
" b1_997"
" 1))"
"((c1_1004)"
"(unsafe-fx+"
" c1_998"
" 1)))"
"(if(unsafe-fx<="
" b2_994"
" b1_1003)"
"((letrec-values(((loop_1005)"
"(lambda(a1_1006"
" c1_1007)"
"(if(unsafe-fx<"
" c1_1007"
" b1_1003)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1007"
"(unsafe-vector-ref"
" vec_897"
" a1_1006))"
"(loop_1005"
"(unsafe-fx+"
" a1_1006"
" 1)"
"(unsafe-fx+"
" c1_1007"
" 1))))"
"(void)))))"
" loop_1005)"
" a1_996"
" c1_1004)"
"(loop_995"
" a1_996"
" b1_1003"
" c1_1004)))))))))"
" loop_995)"
" Amid2_992"
" Bmid1_993"
" Blo_979)))))))))))))"
"(let-values(((Alo_1008) 0)"
"((Amid1_1009) n/2-_901)"
"((Amid2_1010) n/2+_902)"
"((Ahi_1011) n_737)"
"((B1lo_1012) n_737))"
"(begin"
"(copying-mergesort_977 Amid1_1009 B1lo_1012 n/2+_902)"
"(if(zero? n/2-_901)"
"(void)"
"(let-values()(copying-mergesort_977 Alo_1008 Amid2_1010 n/2-_901)))"
"(let-values(((b2_1013) Ahi_1011))"
"((letrec-values(((loop_1014)"
"(lambda(a1_1015 b1_1016 c1_1017)"
"(let-values(((x_1018)"
"(unsafe-vector-ref vec_897 a1_1015))"
"((y_1019)"
"(unsafe-vector-ref vec_897 b1_1016)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_736(#f y_1019)(#f x_1018))"
"(<?_736 y_1019 x_1018)))"
"(if #t"
"(<?_736(#f x_1018)(#f y_1019))"
"(<?_736 x_1018 y_1019)))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1017 x_1018)"
"(let-values(((a1_1020)(unsafe-fx+ a1_1015 1))"
"((c1_1021)(unsafe-fx+ c1_1017 1)))"
"(if(unsafe-fx< c1_1021 b1_1016)"
"(let-values()"
"(loop_1014 a1_1020 b1_1016 c1_1021))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1017 y_1019)"
"(let-values(((b1_1022)(unsafe-fx+ b1_1016 1))"
"((c1_1023)(unsafe-fx+ c1_1017 1)))"
"(if(unsafe-fx<= b2_1013 b1_1022)"
"((letrec-values(((loop_1024)"
"(lambda(a1_1025 c1_1026)"
"(if(unsafe-fx<"
" c1_1026"
" b1_1022)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1026"
"(unsafe-vector-ref"
" vec_897"
" a1_1025))"
"(loop_1024"
"(unsafe-fx+"
" a1_1025"
" 1)"
"(unsafe-fx+"
" c1_1026"
" 1))))"
"(void)))))"
" loop_1024)"
" a1_1015"
" c1_1023)"
"(loop_1014 a1_1015 b1_1022 c1_1023)))))))))"
" loop_1014)"
" B1lo_1012"
" Amid2_1010"
" Alo_1008))))))))"
"(let-values(((si_1027)(hash-ref sort-internals_29 <?_736 #f)))"
"(if si_1027"
"(si_1027 vec_897 n_737)"
"(let-values()"
"(let-values(((n/2-_1028)(unsafe-fxrshift n_737 1)))"
"(let-values(((n/2+_1029)(unsafe-fx- n_737 n/2-_1028)))"
"(letrec-values(((copying-mergesort_1104)"
"(lambda(Alo_1105 Blo_1106 n_1107)"
"(if(unsafe-fx= n_1107 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105)))"
"(if(unsafe-fx= n_1107 2)"
"(let-values()"
"(let-values(((x_1108)"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((y_1109)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+ Alo_1105 1))))"
"(if(if #f"
"(<?_736(#f y_1109)(#f x_1108))"
"(<?_736 y_1109 x_1108))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 y_1109)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 1)"
" x_1108))"
"(begin"
"(unsafe-vector-set! vec_897 Blo_1106 x_1108)"
"(unsafe-vector-set!"
" vec_897"
"(unsafe-fx+ Blo_1106 1)"
" y_1109)))))"
"(if(unsafe-fx< n_1107 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" Blo_1106"
"(unsafe-vector-ref vec_897 Alo_1105))"
"((letrec-values(((iloop_1110)"
"(lambda(i_1111)"
"(if(unsafe-fx< i_1111 n_1107)"
"(let-values()"
"(let-values(((ref-i_1112)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx+"
" Alo_1105"
" i_1111))))"
"((letrec-values(((jloop_1113)"
"(lambda(j_1114)"
"(let-values(((ref-j-1_1115)"
"(unsafe-vector-ref"
" vec_897"
"(unsafe-fx-"
" j_1114"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1106"
" j_1114)"
"(if #f"
"(<?_736"
"(#f"
" ref-i_1112)"
"(#f"
" ref-j-1_1115))"
"(<?_736"
" ref-i_1112"
" ref-j-1_1115))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-j-1_1115)"
"(jloop_1113"
"(unsafe-fx-"
" j_1114"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" j_1114"
" ref-i_1112)"
"(iloop_1110"
"(unsafe-fx+"
" i_1111"
" 1))))))))"
" jloop_1113)"
"(unsafe-fx+"
" Blo_1106"
" i_1111))))"
"(void)))))"
" iloop_1110)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1116)"
"(unsafe-fxrshift n_1107 1)))"
"(let-values(((n/2+_1117)"
"(unsafe-fx- n_1107 n/2-_1116)))"
"(let-values(((Amid1_1118)"
"(unsafe-fx+ Alo_1105 n/2-_1116))"
"((Amid2_1119)"
"(unsafe-fx+ Alo_1105 n/2+_1117))"
"((Bmid1_1120)"
"(unsafe-fx+ Blo_1106 n/2-_1116)))"
"(begin"
"(copying-mergesort_1104"
" Amid1_1118"
" Bmid1_1120"
" n/2+_1117)"
"(copying-mergesort_1104"
" Alo_1105"
" Amid2_1119"
" n/2-_1116)"
"(let-values(((b2_1121)"
"(unsafe-fx+ Blo_1106 n_1107)))"
"((letrec-values(((loop_1122)"
"(lambda(a1_1123"
" b1_1124"
" c1_1125)"
"(let-values(((x_1126)"
"(unsafe-vector-ref"
" vec_897"
" a1_1123))"
"((y_1127)"
"(unsafe-vector-ref"
" vec_897"
" b1_1124)))"
"(if(if #t"
"(not"
"(if #f"
"(<?_736"
"(#f y_1127)"
"(#f"
" x_1126))"
"(<?_736"
" y_1127"
" x_1126)))"
"(if #f"
"(<?_736"
"(#f x_1126)"
"(#f y_1127))"
"(<?_736"
" x_1126"
" y_1127)))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" x_1126)"
"(let-values(((a1_1128)"
"(unsafe-fx+"
" a1_1123"
" 1))"
"((c1_1129)"
"(unsafe-fx+"
" c1_1125"
" 1)))"
"(if(unsafe-fx<"
" c1_1129"
" b1_1124)"
"(let-values()"
"(loop_1122"
" a1_1128"
" b1_1124"
" c1_1129))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1125"
" y_1127)"
"(let-values(((b1_1130)"
"(unsafe-fx+"
" b1_1124"
" 1))"
"((c1_1131)"
"(unsafe-fx+"
" c1_1125"
" 1)))"
"(if(unsafe-fx<="
" b2_1121"
" b1_1130)"
"((letrec-values(((loop_1132)"
"(lambda(a1_1133"
" c1_1134)"
"(if(unsafe-fx<"
" c1_1134"
" b1_1130)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1134"
"(unsafe-vector-ref"
" vec_897"
" a1_1133))"
"(loop_1132"
"(unsafe-fx+"
" a1_1133"
" 1)"
"(unsafe-fx+"
" c1_1134"
" 1))))"
"(void)))))"
" loop_1132)"
" a1_1123"
" c1_1131)"
"(loop_1122"
" a1_1123"
" b1_1130"
" c1_1131)))))))))"
" loop_1122)"
" Amid2_1119"
" Bmid1_1120"
" Blo_1106)))))))))))))"
"(let-values(((Alo_1135) 0)"
"((Amid1_1136) n/2-_1028)"
"((Amid2_1137) n/2+_1029)"
"((Ahi_1138) n_737)"
"((B1lo_1139) n_737))"
"(begin"
"(copying-mergesort_1104 Amid1_1136 B1lo_1139 n/2+_1029)"
"(if(zero? n/2-_1028)"
"(void)"
"(let-values()(copying-mergesort_1104 Alo_1135 Amid2_1137 n/2-_1028)))"
"(let-values(((b2_1140) Ahi_1138))"
"((letrec-values(((loop_1141)"
"(lambda(a1_1142 b1_1143 c1_1144)"
"(let-values(((x_1145)"
"(unsafe-vector-ref vec_897 a1_1142))"
"((y_1146)"
"(unsafe-vector-ref vec_897 b1_1143)))"
"(if(if #f"
"(not"
"(if #f"
"(<?_736(#f y_1146)(#f x_1145))"
"(<?_736 y_1146 x_1145)))"
"(if #f"
"(<?_736(#f x_1145)(#f y_1146))"
"(<?_736 x_1145 y_1146)))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 x_1145)"
"(let-values(((a1_1147)"
"(unsafe-fx+ a1_1142 1))"
"((c1_1148)"
"(unsafe-fx+ c1_1144 1)))"
"(if(unsafe-fx< c1_1148 b1_1143)"
"(let-values()"
"(loop_1141 a1_1147 b1_1143 c1_1148))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_897 c1_1144 y_1146)"
"(let-values(((b1_1149)"
"(unsafe-fx+ b1_1143 1))"
"((c1_1150)"
"(unsafe-fx+ c1_1144 1)))"
"(if(unsafe-fx<= b2_1140 b1_1149)"
"((letrec-values(((loop_1151)"
"(lambda(a1_1152"
" c1_1153)"
"(if(unsafe-fx<"
" c1_1153"
" b1_1149)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_897"
" c1_1153"
"(unsafe-vector-ref"
" vec_897"
" a1_1152))"
"(loop_1151"
"(unsafe-fx+"
" a1_1152"
" 1)"
"(unsafe-fx+"
" c1_1153"
" 1))))"
"(void)))))"
" loop_1151)"
" a1_1142"
" c1_1150)"
"(loop_1141"
" a1_1142"
" b1_1149"
" c1_1150)))))))))"
" loop_1141)"
" B1lo_1139"
" Amid2_1137"
" Alo_1135)))))))))))"
"((letrec-values(((loop_1154)"
"(lambda(i_1155 r_1156)"
"(let-values(((i_1157)(sub1 i_1155)))"
"(if(< i_1157 0)"
" r_1156"
"(loop_1154 i_1157(cons(vector-ref vec_897 i_1157) r_1156)))))))"
" loop_1154)"
" n_737"
" '())))))))))))"
"((lst_1158 <?_1159 getkey_1160)"
"(if(if getkey_1160(not(eq? values getkey_1160)) #f)"
"(sort lst_1158 <?_1159 getkey_1160 #f)"
"(sort lst_1158 <?_1159)))"
"((lst_1161 <?_1162 getkey_1163 cache-keys?_1164)"
"(if(if getkey_1163(not(eq? values getkey_1163)) #f)"
"(let-values(((n_1165)(length lst_1161)))"
"(if(= n_1165 0)"
"(let-values() lst_1161)"
"(if cache-keys?_1164"
"(let-values()"
"(let-values(((vec_1180)(make-vector(+ n_1165(ceiling(/ n_1165 2))))))"
"(begin"
"((letrec-values(((loop_1181)"
"(lambda(i_1182 lst_1183)"
"(if(pair? lst_1183)"
"(let-values()"
"(let-values(((x_1184)(car lst_1183)))"
"(begin"
"(vector-set! vec_1180 i_1182(cons(getkey_1163 x_1184) x_1184))"
"(loop_1181(add1 i_1182)(cdr lst_1183)))))"
"(void)))))"
" loop_1181)"
" 0"
" lst_1161)"
"(let-values()"
"(let-values(((n/2-_1185)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1186)(unsafe-fx- n_1165 n/2-_1185)))"
"(letrec-values(((copying-mergesort_1261)"
"(lambda(Alo_1262 Blo_1263 n_1264)"
"(if(unsafe-fx= n_1264 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262)))"
"(if(unsafe-fx= n_1264 2)"
"(let-values()"
"(let-values(((x_1265)(unsafe-vector-ref vec_1180 Alo_1262))"
"((y_1266)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+ Alo_1262 1))))"
"(if(if #t"
"(<?_1162(car y_1266)(car x_1265))"
"(<?_1162 y_1266 x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 y_1266)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 1)"
" x_1265))"
"(begin"
"(unsafe-vector-set! vec_1180 Blo_1263 x_1265)"
"(unsafe-vector-set!"
" vec_1180"
"(unsafe-fx+ Blo_1263 1)"
" y_1266)))))"
"(if(unsafe-fx< n_1264 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" Blo_1263"
"(unsafe-vector-ref vec_1180 Alo_1262))"
"((letrec-values(((iloop_1267)"
"(lambda(i_1268)"
"(if(unsafe-fx< i_1268 n_1264)"
"(let-values()"
"(let-values(((ref-i_1269)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx+"
" Alo_1262"
" i_1268))))"
"((letrec-values(((jloop_1270)"
"(lambda(j_1271)"
"(let-values(((ref-j-1_1272)"
"(unsafe-vector-ref"
" vec_1180"
"(unsafe-fx-"
" j_1271"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1263"
" j_1271)"
"(if #t"
"(<?_1162"
"(car"
" ref-i_1269)"
"(car"
" ref-j-1_1272))"
"(<?_1162"
" ref-i_1269"
" ref-j-1_1272))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-j-1_1272)"
"(jloop_1270"
"(unsafe-fx-"
" j_1271"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" j_1271"
" ref-i_1269)"
"(iloop_1267"
"(unsafe-fx+"
" i_1268"
" 1))))))))"
" jloop_1270)"
"(unsafe-fx+ Blo_1263 i_1268))))"
"(void)))))"
" iloop_1267)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1273)(unsafe-fxrshift n_1264 1)))"
"(let-values(((n/2+_1274)(unsafe-fx- n_1264 n/2-_1273)))"
"(let-values(((Amid1_1275)(unsafe-fx+ Alo_1262 n/2-_1273))"
"((Amid2_1276)(unsafe-fx+ Alo_1262 n/2+_1274))"
"((Bmid1_1277)"
"(unsafe-fx+ Blo_1263 n/2-_1273)))"
"(begin"
"(copying-mergesort_1261"
" Amid1_1275"
" Bmid1_1277"
" n/2+_1274)"
"(copying-mergesort_1261 Alo_1262 Amid2_1276 n/2-_1273)"
"(let-values(((b2_1278)(unsafe-fx+ Blo_1263 n_1264)))"
"((letrec-values(((loop_1279)"
"(lambda(a1_1280 b1_1281 c1_1282)"
"(let-values(((x_1283)"
"(unsafe-vector-ref"
" vec_1180"
" a1_1280))"
"((y_1284)"
"(unsafe-vector-ref"
" vec_1180"
" b1_1281)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_1162"
"(car y_1284)"
"(car x_1283))"
"(<?_1162"
" y_1284"
" x_1283)))"
"(if #t"
"(<?_1162"
"(car x_1283)"
"(car y_1284))"
"(<?_1162"
" x_1283"
" y_1284)))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" x_1283)"
"(let-values(((a1_1285)"
"(unsafe-fx+"
" a1_1280"
" 1))"
"((c1_1286)"
"(unsafe-fx+"
" c1_1282"
" 1)))"
"(if(unsafe-fx<"
" c1_1286"
" b1_1281)"
"(let-values()"
"(loop_1279"
" a1_1285"
" b1_1281"
" c1_1286))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1282"
" y_1284)"
"(let-values(((b1_1287)"
"(unsafe-fx+"
" b1_1281"
" 1))"
"((c1_1288)"
"(unsafe-fx+"
" c1_1282"
" 1)))"
"(if(unsafe-fx<="
" b2_1278"
" b1_1287)"
"((letrec-values(((loop_1289)"
"(lambda(a1_1290"
" c1_1291)"
"(if(unsafe-fx<"
" c1_1291"
" b1_1287)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1291"
"(unsafe-vector-ref"
" vec_1180"
" a1_1290))"
"(loop_1289"
"(unsafe-fx+"
" a1_1290"
" 1)"
"(unsafe-fx+"
" c1_1291"
" 1))))"
"(void)))))"
" loop_1289)"
" a1_1280"
" c1_1288)"
"(loop_1279"
" a1_1280"
" b1_1287"
" c1_1288)))))))))"
" loop_1279)"
" Amid2_1276"
" Bmid1_1277"
" Blo_1263)))))))))))))"
"(let-values(((Alo_1292) 0)"
"((Amid1_1293) n/2-_1185)"
"((Amid2_1294) n/2+_1186)"
"((Ahi_1295) n_1165)"
"((B1lo_1296) n_1165))"
"(begin"
"(copying-mergesort_1261 Amid1_1293 B1lo_1296 n/2+_1186)"
"(if(zero? n/2-_1185)"
"(void)"
"(let-values()(copying-mergesort_1261 Alo_1292 Amid2_1294 n/2-_1185)))"
"(let-values(((b2_1297) Ahi_1295))"
"((letrec-values(((loop_1298)"
"(lambda(a1_1299 b1_1300 c1_1301)"
"(let-values(((x_1302)(unsafe-vector-ref vec_1180 a1_1299))"
"((y_1303)(unsafe-vector-ref vec_1180 b1_1300)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_1162(car y_1303)(car x_1302))"
"(<?_1162 y_1303 x_1302)))"
"(if #t"
"(<?_1162(car x_1302)(car y_1303))"
"(<?_1162 x_1302 y_1303)))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 x_1302)"
"(let-values(((a1_1304)(unsafe-fx+ a1_1299 1))"
"((c1_1305)(unsafe-fx+ c1_1301 1)))"
"(if(unsafe-fx< c1_1305 b1_1300)"
"(let-values()(loop_1298 a1_1304 b1_1300 c1_1305))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1180 c1_1301 y_1303)"
"(let-values(((b1_1306)(unsafe-fx+ b1_1300 1))"
"((c1_1307)(unsafe-fx+ c1_1301 1)))"
"(if(unsafe-fx<= b2_1297 b1_1306)"
"((letrec-values(((loop_1308)"
"(lambda(a1_1309 c1_1310)"
"(if(unsafe-fx< c1_1310 b1_1306)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1180"
" c1_1310"
"(unsafe-vector-ref"
" vec_1180"
" a1_1309))"
"(loop_1308"
"(unsafe-fx+ a1_1309 1)"
"(unsafe-fx+ c1_1310 1))))"
"(void)))))"
" loop_1308)"
" a1_1299"
" c1_1307)"
"(loop_1298 a1_1299 b1_1306 c1_1307)))))))))"
" loop_1298)"
" B1lo_1296"
" Amid2_1294"
" Alo_1292))))))))"
"((letrec-values(((loop_1311)"
"(lambda(i_1312 r_1313)"
"(let-values(((i_1314)(sub1 i_1312)))"
"(if(< i_1314 0)"
" r_1313"
"(loop_1311 i_1314(cons(cdr(vector-ref vec_1180 i_1314)) r_1313)))))))"
" loop_1311)"
" n_1165"
" '()))))"
"(if(< n_1165 2)"
"(let-values() lst_1161)"
"(if((letrec-values(((loop_1315)"
"(lambda(last_1316 next_1317)"
"(let-values(((or-part_1318)(null? next_1317)))"
"(if or-part_1318"
" or-part_1318"
"(if(not"
"(if #t"
"(<?_1162(getkey_1163(car next_1317))(getkey_1163 last_1316))"
"(<?_1162(car next_1317) last_1316)))"
"(loop_1315(car next_1317)(cdr next_1317))"
" #f))))))"
" loop_1315)"
"(car lst_1161)"
"(cdr lst_1161))"
"(let-values() lst_1161)"
"(if(<= n_1165 3)"
"(let-values()"
"(if(= n_1165 2)"
"(list(cadr lst_1161)(car lst_1161))"
"(let-values(((a_1319)(car lst_1161))"
"((b_1320)(cadr lst_1161))"
"((c_1321)(caddr lst_1161)))"
"(let-values(((a_1322)(car lst_1161))"
"((b_1323)(cadr lst_1161))"
"((c_1324)(caddr lst_1161)))"
"(if(if #t(<?_1162(getkey_1163 b_1323)(getkey_1163 a_1322))(<?_1162 b_1323 a_1322))"
"(if(if #t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 b_1323))"
"(<?_1162 c_1324 b_1323))"
"(list c_1324 b_1323 a_1322)"
"(if(if #t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(<?_1162 c_1324 a_1322))"
"(list b_1323 c_1324 a_1322)"
"(list b_1323 a_1322 c_1324)))"
"(if(if #t"
"(<?_1162(getkey_1163 c_1324)(getkey_1163 a_1322))"
"(<?_1162 c_1324 a_1322))"
"(list c_1324 a_1322 b_1323)"
"(list a_1322 c_1324 b_1323)))))))"
"(let-values()"
"(let-values(((vec_1325)(make-vector(+ n_1165(ceiling(/ n_1165 2))))))"
"(begin"
"((letrec-values(((loop_1326)"
"(lambda(i_1327 lst_1328)"
"(if(pair? lst_1328)"
"(let-values()"
"(begin"
"(vector-set! vec_1325 i_1327(car lst_1328))"
"(loop_1326(add1 i_1327)(cdr lst_1328))))"
"(void)))))"
" loop_1326)"
" 0"
" lst_1161)"
"(if getkey_1163"
"(let-values()"
"(let-values(((n/2-_1329)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1330)(unsafe-fx- n_1165 n/2-_1329)))"
"(letrec-values(((copying-mergesort_1405)"
"(lambda(Alo_1406 Blo_1407 n_1408)"
"(if(unsafe-fx= n_1408 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406)))"
"(if(unsafe-fx= n_1408 2)"
"(let-values()"
"(let-values(((x_1409)"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((y_1410)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1406 1))))"
"(if(if #t"
"(<?_1162"
"(getkey_1163 y_1410)"
"(getkey_1163 x_1409))"
"(<?_1162 y_1410 x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 y_1410)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 1)"
" x_1409))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1407 x_1409)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1407 1)"
" y_1410)))))"
"(if(unsafe-fx< n_1408 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1407"
"(unsafe-vector-ref vec_1325 Alo_1406))"
"((letrec-values(((iloop_1411)"
"(lambda(i_1412)"
"(if(unsafe-fx< i_1412 n_1408)"
"(let-values()"
"(let-values(((ref-i_1413)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1406"
" i_1412))))"
"((letrec-values(((jloop_1414)"
"(lambda(j_1415)"
"(let-values(((ref-j-1_1416)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1415"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1407"
" j_1415)"
"(if #t"
"(<?_1162"
"(getkey_1163"
" ref-i_1413)"
"(getkey_1163"
" ref-j-1_1416))"
"(<?_1162"
" ref-i_1413"
" ref-j-1_1416))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-j-1_1416)"
"(jloop_1414"
"(unsafe-fx-"
" j_1415"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1415"
" ref-i_1413)"
"(iloop_1411"
"(unsafe-fx+"
" i_1412"
" 1))))))))"
" jloop_1414)"
"(unsafe-fx+"
" Blo_1407"
" i_1412))))"
"(void)))))"
" iloop_1411)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1417)(unsafe-fxrshift n_1408 1)))"
"(let-values(((n/2+_1418)"
"(unsafe-fx- n_1408 n/2-_1417)))"
"(let-values(((Amid1_1419)"
"(unsafe-fx+ Alo_1406 n/2-_1417))"
"((Amid2_1420)"
"(unsafe-fx+ Alo_1406 n/2+_1418))"
"((Bmid1_1421)"
"(unsafe-fx+ Blo_1407 n/2-_1417)))"
"(begin"
"(copying-mergesort_1405"
" Amid1_1419"
" Bmid1_1421"
" n/2+_1418)"
"(copying-mergesort_1405"
" Alo_1406"
" Amid2_1420"
" n/2-_1417)"
"(let-values(((b2_1422)"
"(unsafe-fx+ Blo_1407 n_1408)))"
"((letrec-values(((loop_1423)"
"(lambda(a1_1424"
" b1_1425"
" c1_1426)"
"(let-values(((x_1427)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1424))"
"((y_1428)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1425)))"
"(if(if #t"
"(not"
"(if #t"
"(<?_1162"
"(getkey_1163"
" y_1428)"
"(getkey_1163"
" x_1427))"
"(<?_1162"
" y_1428"
" x_1427)))"
"(if #t"
"(<?_1162"
"(getkey_1163"
" x_1427)"
"(getkey_1163"
" y_1428))"
"(<?_1162"
" x_1427"
" y_1428)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" x_1427)"
"(let-values(((a1_1429)"
"(unsafe-fx+"
" a1_1424"
" 1))"
"((c1_1430)"
"(unsafe-fx+"
" c1_1426"
" 1)))"
"(if(unsafe-fx<"
" c1_1430"
" b1_1425)"
"(let-values()"
"(loop_1423"
" a1_1429"
" b1_1425"
" c1_1430))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1426"
" y_1428)"
"(let-values(((b1_1431)"
"(unsafe-fx+"
" b1_1425"
" 1))"
"((c1_1432)"
"(unsafe-fx+"
" c1_1426"
" 1)))"
"(if(unsafe-fx<="
" b2_1422"
" b1_1431)"
"((letrec-values(((loop_1433)"
"(lambda(a1_1434"
" c1_1435)"
"(if(unsafe-fx<"
" c1_1435"
" b1_1431)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1435"
"(unsafe-vector-ref"
" vec_1325"
" a1_1434))"
"(loop_1433"
"(unsafe-fx+"
" a1_1434"
" 1)"
"(unsafe-fx+"
" c1_1435"
" 1))))"
"(void)))))"
" loop_1433)"
" a1_1424"
" c1_1432)"
"(loop_1423"
" a1_1424"
" b1_1431"
" c1_1432)))))))))"
" loop_1423)"
" Amid2_1420"
" Bmid1_1421"
" Blo_1407)))))))))))))"
"(let-values(((Alo_1436) 0)"
"((Amid1_1437) n/2-_1329)"
"((Amid2_1438) n/2+_1330)"
"((Ahi_1439) n_1165)"
"((B1lo_1440) n_1165))"
"(begin"
"(copying-mergesort_1405 Amid1_1437 B1lo_1440 n/2+_1330)"
"(if(zero? n/2-_1329)"
"(void)"
"(let-values()(copying-mergesort_1405 Alo_1436 Amid2_1438 n/2-_1329)))"
"(let-values(((b2_1441) Ahi_1439))"
"((letrec-values(((loop_1442)"
"(lambda(a1_1443 b1_1444 c1_1445)"
"(let-values(((x_1446)"
"(unsafe-vector-ref vec_1325 a1_1443))"
"((y_1447)"
"(unsafe-vector-ref vec_1325 b1_1444)))"
"(if(if #f"
"(not"
"(if #t"
"(<?_1162"
"(getkey_1163 y_1447)"
"(getkey_1163 x_1446))"
"(<?_1162 y_1447 x_1446)))"
"(if #t"
"(<?_1162"
"(getkey_1163 x_1446)"
"(getkey_1163 y_1447))"
"(<?_1162 x_1446 y_1447)))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 x_1446)"
"(let-values(((a1_1448)(unsafe-fx+ a1_1443 1))"
"((c1_1449)(unsafe-fx+ c1_1445 1)))"
"(if(unsafe-fx< c1_1449 b1_1444)"
"(let-values()"
"(loop_1442 a1_1448 b1_1444 c1_1449))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1445 y_1447)"
"(let-values(((b1_1450)(unsafe-fx+ b1_1444 1))"
"((c1_1451)(unsafe-fx+ c1_1445 1)))"
"(if(unsafe-fx<= b2_1441 b1_1450)"
"((letrec-values(((loop_1452)"
"(lambda(a1_1453 c1_1454)"
"(if(unsafe-fx<"
" c1_1454"
" b1_1450)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1454"
"(unsafe-vector-ref"
" vec_1325"
" a1_1453))"
"(loop_1452"
"(unsafe-fx+"
" a1_1453"
" 1)"
"(unsafe-fx+"
" c1_1454"
" 1))))"
"(void)))))"
" loop_1452)"
" a1_1443"
" c1_1451)"
"(loop_1442 a1_1443 b1_1450 c1_1451)))))))))"
" loop_1442)"
" B1lo_1440"
" Amid2_1438"
" Alo_1436))))))))"
"(let-values(((si_1455)(hash-ref sort-internals_29 <?_1162 #f)))"
"(if si_1455"
"(si_1455 vec_1325 n_1165)"
"(let-values()"
"(let-values(((n/2-_1456)(unsafe-fxrshift n_1165 1)))"
"(let-values(((n/2+_1457)(unsafe-fx- n_1165 n/2-_1456)))"
"(letrec-values(((copying-mergesort_1532)"
"(lambda(Alo_1533 Blo_1534 n_1535)"
"(if(unsafe-fx= n_1535 1)"
"(let-values()"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533)))"
"(if(unsafe-fx= n_1535 2)"
"(let-values()"
"(let-values(((x_1536)"
"(unsafe-vector-ref vec_1325 Alo_1533))"
"((y_1537)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+ Alo_1533 1))))"
"(if(if #f"
"(<?_1162(#f y_1537)(#f x_1536))"
"(<?_1162 y_1537 x_1536))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 y_1537)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 1)"
" x_1536))"
"(begin"
"(unsafe-vector-set! vec_1325 Blo_1534 x_1536)"
"(unsafe-vector-set!"
" vec_1325"
"(unsafe-fx+ Blo_1534 1)"
" y_1537)))))"
"(if(unsafe-fx< n_1535 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" Blo_1534"
"(unsafe-vector-ref vec_1325 Alo_1533))"
"((letrec-values(((iloop_1538)"
"(lambda(i_1539)"
"(if(unsafe-fx<"
" i_1539"
" n_1535)"
"(let-values()"
"(let-values(((ref-i_1540)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx+"
" Alo_1533"
" i_1539))))"
"((letrec-values(((jloop_1541)"
"(lambda(j_1542)"
"(let-values(((ref-j-1_1543)"
"(unsafe-vector-ref"
" vec_1325"
"(unsafe-fx-"
" j_1542"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1534"
" j_1542)"
"(if #f"
"(<?_1162"
"(#f"
" ref-i_1540)"
"(#f"
" ref-j-1_1543))"
"(<?_1162"
" ref-i_1540"
" ref-j-1_1543))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-j-1_1543)"
"(jloop_1541"
"(unsafe-fx-"
" j_1542"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" j_1542"
" ref-i_1540)"
"(iloop_1538"
"(unsafe-fx+"
" i_1539"
" 1))))))))"
" jloop_1541)"
"(unsafe-fx+"
" Blo_1534"
" i_1539))))"
"(void)))))"
" iloop_1538)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1544)"
"(unsafe-fxrshift n_1535 1)))"
"(let-values(((n/2+_1545)"
"(unsafe-fx- n_1535 n/2-_1544)))"
"(let-values(((Amid1_1546)"
"(unsafe-fx+ Alo_1533 n/2-_1544))"
"((Amid2_1547)"
"(unsafe-fx+ Alo_1533 n/2+_1545))"
"((Bmid1_1548)"
"(unsafe-fx+ Blo_1534 n/2-_1544)))"
"(begin"
"(copying-mergesort_1532"
" Amid1_1546"
" Bmid1_1548"
" n/2+_1545)"
"(copying-mergesort_1532"
" Alo_1533"
" Amid2_1547"
" n/2-_1544)"
"(let-values(((b2_1549)"
"(unsafe-fx+"
" Blo_1534"
" n_1535)))"
"((letrec-values(((loop_1550)"
"(lambda(a1_1551"
" b1_1552"
" c1_1553)"
"(let-values(((x_1554)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1551))"
"((y_1555)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1552)))"
"(if(if #t"
"(not"
"(if #f"
"(<?_1162"
"(#f"
" y_1555)"
"(#f"
" x_1554))"
"(<?_1162"
" y_1555"
" x_1554)))"
"(if #f"
"(<?_1162"
"(#f"
" x_1554)"
"(#f"
" y_1555))"
"(<?_1162"
" x_1554"
" y_1555)))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" x_1554)"
"(let-values(((a1_1556)"
"(unsafe-fx+"
" a1_1551"
" 1))"
"((c1_1557)"
"(unsafe-fx+"
" c1_1553"
" 1)))"
"(if(unsafe-fx<"
" c1_1557"
" b1_1552)"
"(let-values()"
"(loop_1550"
" a1_1556"
" b1_1552"
" c1_1557))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1553"
" y_1555)"
"(let-values(((b1_1558)"
"(unsafe-fx+"
" b1_1552"
" 1))"
"((c1_1559)"
"(unsafe-fx+"
" c1_1553"
" 1)))"
"(if(unsafe-fx<="
" b2_1549"
" b1_1558)"
"((letrec-values(((loop_1560)"
"(lambda(a1_1561"
" c1_1562)"
"(if(unsafe-fx<"
" c1_1562"
" b1_1558)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1562"
"(unsafe-vector-ref"
" vec_1325"
" a1_1561))"
"(loop_1560"
"(unsafe-fx+"
" a1_1561"
" 1)"
"(unsafe-fx+"
" c1_1562"
" 1))))"
"(void)))))"
" loop_1560)"
" a1_1551"
" c1_1559)"
"(loop_1550"
" a1_1551"
" b1_1558"
" c1_1559)))))))))"
" loop_1550)"
" Amid2_1547"
" Bmid1_1548"
" Blo_1534)))))))))))))"
"(let-values(((Alo_1563) 0)"
"((Amid1_1564) n/2-_1456)"
"((Amid2_1565) n/2+_1457)"
"((Ahi_1566) n_1165)"
"((B1lo_1567) n_1165))"
"(begin"
"(copying-mergesort_1532 Amid1_1564 B1lo_1567 n/2+_1457)"
"(if(zero? n/2-_1456)"
"(void)"
"(let-values()"
"(copying-mergesort_1532 Alo_1563 Amid2_1565 n/2-_1456)))"
"(let-values(((b2_1568) Ahi_1566))"
"((letrec-values(((loop_1569)"
"(lambda(a1_1570 b1_1571 c1_1572)"
"(let-values(((x_1573)"
"(unsafe-vector-ref"
" vec_1325"
" a1_1570))"
"((y_1574)"
"(unsafe-vector-ref"
" vec_1325"
" b1_1571)))"
"(if(if #f"
"(not"
"(if #f"
"(<?_1162(#f y_1574)(#f x_1573))"
"(<?_1162 y_1574 x_1573)))"
"(if #f"
"(<?_1162(#f x_1573)(#f y_1574))"
"(<?_1162 x_1573 y_1574)))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1572 x_1573)"
"(let-values(((a1_1575)"
"(unsafe-fx+ a1_1570 1))"
"((c1_1576)"
"(unsafe-fx+ c1_1572 1)))"
"(if(unsafe-fx< c1_1576 b1_1571)"
"(let-values()"
"(loop_1569 a1_1575 b1_1571 c1_1576))"
"(void))))"
"(begin"
"(unsafe-vector-set! vec_1325 c1_1572 y_1574)"
"(let-values(((b1_1577)"
"(unsafe-fx+ b1_1571 1))"
"((c1_1578)"
"(unsafe-fx+ c1_1572 1)))"
"(if(unsafe-fx<= b2_1568 b1_1577)"
"((letrec-values(((loop_1579)"
"(lambda(a1_1580"
" c1_1581)"
"(if(unsafe-fx<"
" c1_1581"
" b1_1577)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" vec_1325"
" c1_1581"
"(unsafe-vector-ref"
" vec_1325"
" a1_1580))"
"(loop_1579"
"(unsafe-fx+"
" a1_1580"
" 1)"
"(unsafe-fx+"
" c1_1581"
" 1))))"
"(void)))))"
" loop_1579)"
" a1_1570"
" c1_1578)"
"(loop_1569"
" a1_1570"
" b1_1577"
" c1_1578)))))))))"
" loop_1569)"
" B1lo_1567"
" Amid2_1565"
" Alo_1563)))))))))))"
"((letrec-values(((loop_1582)"
"(lambda(i_1583 r_1584)"
"(let-values(((i_1585)(sub1 i_1583)))"
"(if(< i_1585 0)"
" r_1584"
"(loop_1582 i_1585(cons(vector-ref vec_1325 i_1585) r_1584)))))))"
" loop_1582)"
" n_1165"
" '()))))))))))"
"(sort lst_1161 <?_1162))))))))"
"(define-values"
"(norm:procedure-arity)"
"(let-values(((procedure-arity_1)(lambda(p_2)(normalize-arity(procedure-arity p_2))))) procedure-arity_1))"
"(define-values"
"(norm:raise-arity-error)"
"(let-values(((raise-arity-error_3)"
"(lambda(name_4 arity-v_5 . arg-vs_6)"
"(if(let-values(((or-part_7)(exact-nonnegative-integer? arity-v_5)))"
"(if or-part_7"
" or-part_7"
"(let-values(((or-part_8)(arity-at-least? arity-v_5)))"
"(if or-part_8"
" or-part_8"
"(if(list? arity-v_5)"
"(andmap"
"(lambda(x_9)"
"(let-values(((or-part_10)(exact-nonnegative-integer? x_9)))"
"(if or-part_10 or-part_10(arity-at-least? x_9))))"
" arity-v_5)"
" #f)))))"
"(apply raise-arity-error name_4(normalize-arity arity-v_5) arg-vs_6)"
"(apply raise-arity-error name_4 arity-v_5 arg-vs_6)))))"
" raise-arity-error_3))"
"(define-values"
"(normalize-arity)"
"(lambda(arity_11)"
"(begin"
"(if(procedure-arity? arity_11)"
"(void)"
"        (let-values () (raise-argument-error 'normalize-arity \"procedure-arity?\" arity_11)))"
"(if(pair? arity_11)"
"(let-values(((reversed_12)(reverse-sort-arity arity_11)))"
"(let-values(((normalized_13)(normalize-reversed-arity reversed_12 '())))"
"(let-values(((simplified_14)(normalize-singleton-arity normalized_13))) simplified_14)))"
" arity_11))))"
"(define-values"
"(normalize-singleton-arity)"
"(lambda(arity_15)(if(if(pair? arity_15)(null?(cdr arity_15)) #f)(car arity_15) arity_15)))"
"(define-values"
"(normalize-reversed-arity)"
"(lambda(arity_16 tail_17)"
"(if(pair? arity_16)(normalize-reversed-arity(cdr arity_16)(arity-insert(car arity_16) tail_17)) tail_17)))"
"(define-values"
"(arity-insert)"
"(lambda(elem_18 arity_19)"
"(if(pair? arity_19)"
"(let-values(((next_20)(car arity_19)))"
"(if(arity-at-least? next_20)"
"(let-values(((next-value_21)(arity-at-least-value next_20)))"
"(if(arity-at-least? elem_18)"
"(let-values(((elem-value_22)(arity-at-least-value elem_18)))"
"(if(< elem-value_22 next-value_21)(cons elem_18(cdr arity_19)) arity_19))"
"(if(< elem_18(- next-value_21 1))"
"(cons elem_18 arity_19)"
"(if(= elem_18(- next-value_21 1))(cons(arity-at-least elem_18)(cdr arity_19)) arity_19))))"
"(if(< elem_18 next_20)(cons elem_18 arity_19) arity_19)))"
"(cons elem_18 arity_19))))"
"(define-values(reverse-sort-arity)(lambda(arity_23)(sort arity_23 arity>?)))"
"(define-values"
"(arity>?)"
"(lambda(a_24 b_25)"
"(if(arity-at-least? a_24)"
"(if(arity-at-least? b_25)(>(arity-at-least-value a_24)(arity-at-least-value b_25)) #t)"
"(if(arity-at-least? b_25) #f(> a_24 b_25)))))"
"(define-values"
"(new-apply-proc)"
"(make-keyword-procedure"
"(lambda(kws_21 kw-args_22 proc_23 args_24 . rest_25)"
"(keyword-apply proc_23 kws_21 kw-args_22(apply list* args_24 rest_25)))"
" apply))"
"(define-values"
"(new-keyword-apply)"
"(make-keyword-procedure"
"(lambda(kws_26 kw-args_27 proc_28 orig-kws_29 orig-kw-args_30 args_31 . rest_32)"
"(let-values(((kws_33 kw-args_34)"
"((letrec-values(((loop_35)"
"(lambda(kws_36 kw-args_37 kws2_38 kw-args2_39 swapped?_40)"
"(if(null? kws_36)"
"(let-values()(values kws2_38 kw-args2_39))"
"(if(null? kws2_38)"
"(let-values()(values kws_36 kw-args_37))"
"(if(keyword<?(car kws_36)(car kws2_38))"
"(let-values()"
"(let-values(((res-kws_41 res-kw-args_42)"
"(loop_35"
"(cdr kws_36)"
"(cdr kw-args_37)"
" kws2_38"
" kw-args2_39"
" #f)))"
"(values"
"(cons(car kws_36) res-kws_41)"
"(cons(car kw-args_37) res-kw-args_42))))"
"(if swapped?_40"
"(let-values()"
"(raise-mismatch-error"
" 'keyword-apply"
"                                                  \"keyword duplicated in list and direct keyword arguments: \""
"(car kws_36)))"
"(let-values()(loop_35 kws2_38 kw-args2_39 kws_36 kw-args_37 #t)))))))))"
" loop_35)"
" kws_26"
" kw-args_27"
" orig-kws_29"
" orig-kw-args_30"
" #f)))"
"(keyword-apply proc_28 kws_33 kw-args_34(apply list* args_31 rest_32))))"
" keyword-apply))"
"(define-values(double-flonum?)(lambda(x_43)(flonum? x_43)))"
"(define-values"
"(enforce-random-int-range)"
"(lambda(x_44)"
"(if(if(exact-positive-integer? x_44)(<= x_44 4294967087) #f)"
"(void)"
"      (let-values () (raise-argument-error 'random \"(integer-in 1 4294967087)\" x_44)))))"
"(define-values"
"(enforce-greater)"
"(lambda(x_45 y_46)"
"(if(> y_46 x_45)"
"(void)"
"(let-values()"
"        (raise-argument-error 'random (string-append \"integer greater than \" (number->string x_45)) y_46)))))"
"(define-values"
"(-random)"
"(let-values(((random_47)"
"(case-lambda"
"(()(random))"
"((x_48)(random x_48))"
"((x_49 y_50)"
"(if(exact-positive-integer? y_50)"
"(let-values()"
"(begin"
"(enforce-random-int-range x_49)"
"(enforce-random-int-range y_50)"
"(enforce-greater x_49 y_50)"
"(+ x_49(random(- y_50 x_49)))))"
"(if(pseudo-random-generator? y_50)"
"(let-values()(begin(enforce-random-int-range x_49)(random x_49 y_50)))"
"(let-values()"
"(raise-argument-error"
" 'random"
"                         \"(or/c (integer-in 1 4294967087) pseudo-random-generator?)\""
" y_50)))))"
"((min_51 max_52 prng_53)"
"(begin"
"(enforce-random-int-range min_51)"
"(enforce-random-int-range max_52)"
"(enforce-greater min_51 max_52)"
"(if(pseudo-random-generator? prng_53)"
"(void)"
"                      (let-values () (raise-argument-error 'random \"pseudo-random-generator?\" prng_53)))"
"(+ min_51(random(- max_52 min_51) prng_53)))))))"
" random_47))"
"(define-values"
"(new:collection-path)"
"(let-values(((collection-path_54)"
"(let-values(((core4_55)"
"(lambda(fail1_56 fail2_57 collection3_58 new-rest_59)"
"(let-values(((collection_60) collection3_58))"
"(let-values(((fail_61)"
"(if fail2_57"
" fail1_56"
"(lambda(s_62)"
"(raise"
"(exn:fail:filesystem"
"                                                      (string-append \"collection-path: \" s_62)"
"(current-continuation-marks)))))))"
"(let-values(((collections_63) new-rest_59))"
"(collection-path fail_61 collection_60 collections_63)))))))"
"(let-values(((unpack5_64)"
"(lambda(given-kws_65 given-args_66 collection3_67 new-rest_68)"
"(let-values(((fail2_69)(pair? given-kws_65)))"
"(let-values(((fail1_70)(if fail2_69(car given-args_66)(void))))"
"(core4_55 fail1_70 fail2_69 collection3_67 new-rest_68))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_71 given-argc_72)"
"(if(>= given-argc_72 3)"
"(let-values(((l1_73) given-kws_71))"
"(let-values(((l1_74)"
"(if(null? l1_73) l1_73(if(eq?(car l1_73) '#:fail)(cdr l1_73) l1_73))))"
"(null? l1_74)))"
" #f))"
"(case-lambda"
"((given-kws_75 given-args_76 collection_77 . collections_78)"
"(unpack5_64 given-kws_75 given-args_76 collection_77 collections_78)))"
" null"
" '(#:fail)"
"(let-values(((collection-path_79)"
"(case-lambda"
"((collection_80 . collections_81)"
"(unpack5_64 null null collection_80 collections_81)))))"
" collection-path_79))))))"
" collection-path_54))"
"(define-values"
"(new:collection-file-path)"
"(let-values(((collection-file-path_82)"
"(let-values(((core12_83)"
"(lambda(check-compiled?6_84"
" check-compiled?8_85"
" fail7_86"
" fail9_87"
" file-name10_88"
" collection11_89"
" new-rest_90)"
"(let-values(((file-name_91) file-name10_88))"
"(let-values(((collection_92) collection11_89))"
"(let-values(((check-compiled?_93)"
"(if check-compiled?8_85"
" check-compiled?6_84"
"(if(path-string? file-name_91)"
"                                                      (regexp-match? '#rx\".[.]rkt$\" file-name_91)"
" #f))))"
"(let-values(((fail_94)"
"(if fail9_87"
" fail7_86"
"(lambda(s_95)"
"(raise"
"(exn:fail:filesystem"
"                                                          (string-append \"collection-file-path: \" s_95)"
"(current-continuation-marks)))))))"
"(let-values(((collections_96) new-rest_90))"
"(collection-file-path"
" fail_94"
" check-compiled?_93"
" file-name_91"
" collection_92"
" collections_96)))))))))"
"(let-values(((unpack13_97)"
"(lambda(given-kws_98 given-args_99 file-name10_100 collection11_101 new-rest_102)"
"(let-values(((check-compiled?8_103)"
"(if(pair? given-kws_98)"
"(eq? '#:check-compiled?(car given-kws_98))"
" #f)))"
"(let-values(((check-compiled?6_104)"
"(if check-compiled?8_103(car given-args_99)(void)))"
"((given-kws_105)"
"(if check-compiled?8_103(cdr given-kws_98) given-kws_98))"
"((given-args_106)"
"(if check-compiled?8_103(cdr given-args_99) given-args_99)))"
"(let-values(((fail9_107)(pair? given-kws_105)))"
"(let-values(((fail7_108)(if fail9_107(car given-args_106)(void))))"
"(core12_83"
" check-compiled?6_104"
" check-compiled?8_103"
" fail7_108"
" fail9_107"
" file-name10_100"
" collection11_101"
" new-rest_102))))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_109 given-argc_110)"
"(if(>= given-argc_110 4)"
"(let-values(((l1_111) given-kws_109))"
"(let-values(((l1_112)"
"(if(null? l1_111)"
" l1_111"
"(if(eq?(car l1_111) '#:check-compiled?)(cdr l1_111) l1_111))))"
"(let-values(((l1_113) l1_112))"
"(let-values(((l1_114)"
"(if(null? l1_113)"
" l1_113"
"(if(eq?(car l1_113) '#:fail)(cdr l1_113) l1_113))))"
"(null? l1_114)))))"
" #f))"
"(case-lambda"
"((given-kws_115 given-args_116 file-name_117 collection_118 . collections_119)"
"(unpack13_97 given-kws_115 given-args_116 file-name_117 collection_118 collections_119)))"
" null"
" '(#:check-compiled? #:fail)"
"(let-values(((collection-file-path_120)"
"(case-lambda"
"((file-name_121 collection_122 . collections_123)"
"(unpack13_97 null null file-name_121 collection_122 collections_123)))))"
" collection-file-path_120))))))"
" collection-file-path_82))"
"(define-values"
"(hash-keys)"
"(lambda(h_1)"
"((letrec-values(((loop_2)"
"(lambda(pos_3)"
"(if pos_3(cons(hash-iterate-key h_1 pos_3)(loop_2(hash-iterate-next h_1 pos_3))) null))))"
" loop_2)"
"(hash-iterate-first h_1))))"
"(define-values"
"(hash-values)"
"(lambda(table_4)"
"(begin"
"      (if (hash? table_4) (void) (let-values () (raise-argument-error 'hash-values \"hash?\" table_4)))"
"(hash-map table_4(lambda(k_5 v_6) v_6)))))"
"(define-values"
"(hash->list)"
"(lambda(table_7)"
"(begin"
"      (if (hash? table_7) (void) (let-values () (raise-argument-error 'hash->list \"hash?\" table_7)))"
"(hash-map table_7 cons))))"
"(define-values"
"(paired-fold)"
"(lambda(who_8 pairs0_9 init_10 proc_11)"
"((letrec-values(((loop_12)"
"(lambda(value_13 pairs_14)"
"(if(null? pairs_14)"
"(let-values() value_13)"
"(if(null?(cdr pairs_14))"
"(let-values()"
"(raise-arguments-error"
" who_8"
"(format"
"                                \"expected ~a, but received ~a\""
"                                \"an even number of association elements\""
"                                \"an odd number of association elements\")"
"                               \"association elements\""
" pairs0_9))"
"(let-values()"
"(loop_12(proc_11 value_13(car pairs_14)(cadr pairs_14))(cddr pairs_14))))))))"
" loop_12)"
" init_10"
" pairs0_9)))"
"(define-values"
"(hash-set*)"
"(lambda(table_15 . pairs_16)"
"(begin"
"(if(if(hash? table_15)(immutable? table_15) #f)"
"(void)"
"        (let-values () (raise-argument-error 'hash-set* \"(and/c hash? immutable?)\" table_15)))"
"(paired-fold 'hash-set* pairs_16 table_15 hash-set))))"
"(define-values"
"(hash-set*!)"
"(lambda(table_17 . pairs_18)"
"(begin"
"(if(if(hash? table_17)(not(immutable? table_17)) #f)"
"(void)"
"        (let-values () (raise-argument-error 'hash-set*! \"(and/c hash? (not/c immutable?))\" table_17)))"
"(paired-fold 'hash-set*! pairs_18(void)(lambda(x_19 k_20 v_21)(hash-set! table_17 k_20 v_21))))))"
"(define-values"
"(hash-copy-clear)"
"(lambda(table_22)"
"(begin"
"      (if (hash? table_22) (void) (let-values () (raise-argument-error 'hash-copy-clear \"hash?\" table_22)))"
"(if(immutable? table_22)"
"(let-values()"
"(if(hash-equal? table_22)"
"(let-values()(hash))"
"(if(hash-eqv? table_22)"
"(let-values()(hasheqv))"
"(if(hash-eq? table_22)(let-values()(hasheq))(void)))))"
"(if(hash-weak? table_22)"
"(let-values()"
"(if(hash-equal? table_22)"
"(let-values()(make-weak-hash))"
"(if(hash-eqv? table_22)"
"(let-values()(make-weak-hasheqv))"
"(if(hash-eq? table_22)(let-values()(make-weak-hasheq))(void)))))"
"(let-values()"
"(if(hash-equal? table_22)"
"(let-values()(make-hash))"
"(if(hash-eqv? table_22)"
"(let-values()(make-hasheqv))"
"(if(hash-eq? table_22)(let-values()(make-hasheq))(void))))))))))"
"(define-values"
"(hash-empty?)"
"(lambda(table_23)"
"(begin"
"      (if (hash? table_23) (void) (let-values () (raise-argument-error 'hash-empty? \"hash?\" table_23)))"
"(zero?(hash-count table_23)))))"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_1 cache-keys?4_2 key1_3 key3_4 lst5_5 less?6_6)"
"(let-values(((lst_7) lst5_5))"
"(let-values(((less?_8) less?6_6))"
"(let-values(((getkey_9)(if key3_4 key1_3 #f)))"
"(let-values(((cache-keys?_10)(if cache-keys?4_2 cache-keys?2_1 #f)))"
"(let-values()"
"(begin"
"                (if (list? lst_7) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_7)))"
"(if(if(procedure? less?_8)(procedure-arity-includes? less?_8 2) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_8)))"
"(if(if getkey_9(not(if(procedure? getkey_9)(procedure-arity-includes? getkey_9 1) #f)) #f)"
"                  (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_9))"
"(void))"
"(if getkey_9(sort lst_7 less?_8 getkey_9 cache-keys?_10)(sort lst_7 less?_8))))))))))"
"(define-values"
"(unpack8.1)"
"(lambda(given-kws_11 given-args_12 lst5_13 less?6_14)"
"(let-values(((cache-keys?4_15)(if(pair? given-kws_11)(eq? '#:cache-keys?(car given-kws_11)) #f)))"
"(let-values(((cache-keys?2_16)(if cache-keys?4_15(car given-args_12)(void)))"
"((given-kws_17)(if cache-keys?4_15(cdr given-kws_11) given-kws_11))"
"((given-args_18)(if cache-keys?4_15(cdr given-args_12) given-args_12)))"
"(let-values(((key3_19)(pair? given-kws_17)))"
"(let-values(((key1_20)(if key3_19(car given-args_18)(void))))"
"(sort7.1 cache-keys?2_16 cache-keys?4_15 key1_20 key3_19 lst5_13 less?6_14)))))))"
"(define-values"
"(sort9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_21 given-argc_22)"
"(if(= given-argc_22 4)"
"(let-values(((l1_23) given-kws_21))"
"(let-values(((l1_24)(if(null? l1_23) l1_23(if(eq?(car l1_23) '#:cache-keys?)(cdr l1_23) l1_23))))"
"(let-values(((l1_25) l1_24))"
"(let-values(((l1_26)(if(null? l1_25) l1_25(if(eq?(car l1_25) '#:key)(cdr l1_25) l1_25))))"
"(null? l1_26)))))"
" #f))"
"(case-lambda((given-kws_27 given-args_28 lst_29 less?_30)(unpack8.1 given-kws_27 given-args_28 lst_29 less?_30)))"
" null"
" '(#:cache-keys? #:key)"
"(let-values(((sort_31)(case-lambda((lst_32 less?_33)(unpack8.1 null null lst_32 less?_33))))) sort_31)))"
"(define-values"
"(do-remove)"
"(lambda(who_34 item_35 list_36 equal?_37)"
"(begin"
"      (if (list? list_36) (void) (let-values () (raise-argument-error who_34 \"list?\" list_36)))"
"((letrec-values(((loop_38)"
"(lambda(list_39)"
"(if(null? list_39)"
"(let-values() null)"
"(if(equal?_37 item_35(car list_39))"
"(let-values()(cdr list_39))"
"(let-values()(cons(car list_39)(loop_38(cdr list_39)))))))))"
" loop_38)"
" list_36))))"
"(define-values"
"(remove)"
"(case-lambda"
"((item_40 list_41)(do-remove 'remove item_40 list_41 equal?))"
"((item_42 list_43 equal?_44)"
"(begin"
"(if(if(procedure? equal?_44)(procedure-arity-includes? equal?_44 2) #f)"
"(void)"
"        (let-values () (raise-argument-error 'remove \"(any/c any/c . -> . any/c)\" equal?_44)))"
"(do-remove 'remove item_42 list_43 equal?_44)))))"
"(define-values(remq)(lambda(item_45 list_46)(do-remove 'remq item_45 list_46 eq?)))"
"(define-values(remv)(lambda(item_47 list_48)(do-remove 'remv item_47 list_48 eqv?)))"
"(define-values"
"(do-remove*)"
"(lambda(who_49 l_50 r_51 equal?_52)"
"(begin"
"      (if (list? l_50) (void) (let-values () (raise-argument-error who_49 \"list?\" l_50)))"
"      (if (list? r_51) (void) (let-values () (raise-argument-error who_49 \"list?\" r_51)))"
"((letrec-values(((rloop_53)"
"(lambda(r_54)"
"(if(null? r_54)"
"(let-values() null)"
"(let-values()"
"(let-values(((first-r_55)(car r_54)))"
"((letrec-values(((loop_56)"
"(lambda(l-rest_57)"
"(if(null? l-rest_57)"
"(let-values()(cons first-r_55(rloop_53(cdr r_54))))"
"(if(equal?_52(car l-rest_57) first-r_55)"
"(let-values()(rloop_53(cdr r_54)))"
"(let-values()(loop_56(cdr l-rest_57))))))))"
" loop_56)"
" l_50)))))))"
" rloop_53)"
" r_51))))"
"(define-values"
"(remove*)"
"(case-lambda"
"((l_58 r_59)(do-remove* 'remove* l_58 r_59 equal?))"
"((l_60 r_61 equal?_62)"
"(begin"
"(if(if(procedure? equal?_62)(procedure-arity-includes? equal?_62 2) #f)"
"(void)"
"        (let-values () (raise-argument-error 'remove* \"(any/c any/c . -> . any/c)\" equal?_62)))"
"(do-remove* 'remove* l_60 r_61 equal?_62)))))"
"(define-values(remq*)(lambda(l_63 r_64)(do-remove* 'remq* l_63 r_64 eq?)))"
"(define-values(remv*)(lambda(l_65 r_66)(do-remove* 'remv* l_65 r_66 eqv?)))"
"(define-values"
"(memf)"
"(lambda(f_67 list_68)"
"(begin"
"(if(if(procedure? f_67)(procedure-arity-includes? f_67 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'memf \"(any/c . -> any/c)\" f_67)))"
"((letrec-values(((loop_69)"
"(lambda(l_70)"
"(if(null? l_70)"
"(let-values() #f)"
"(if(not(pair? l_70))"
"                              (let-values () (raise-mismatch-error 'memf \"not a proper list: \" list_68))"
"(let-values()(if(f_67(car l_70)) l_70(loop_69(cdr l_70)))))))))"
" loop_69)"
" list_68))))"
"(define-values"
"(findf)"
"(lambda(f_71 list_72)"
"(begin"
"(if(if(procedure? f_71)(procedure-arity-includes? f_71 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'findf \"(any/c . -> . any/c)\" f_71)))"
"((letrec-values(((loop_73)"
"(lambda(l_74)"
"(if(null? l_74)"
"(let-values() #f)"
"(if(not(pair? l_74))"
"                              (let-values () (raise-mismatch-error 'findf \"not a proper list: \" list_72))"
"(let-values()"
"(let-values(((a_75)(car l_74)))(if(f_71 a_75) a_75(loop_73(cdr l_74))))))))))"
" loop_73)"
" list_72))))"
" (define-values (bad-list) (lambda (who_76 orig-l_77) (raise-mismatch-error who_76 \"not a proper list: \" orig-l_77)))"
"(define-values"
"(bad-item)"
"  (lambda (who_78 a_79 orig-l_80) (raise-mismatch-error who_78 \"non-pair found in list: \" a_79 \" in \" orig-l_80)))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values(((assq_97)"
"(lambda(x_101 l_102)"
"((letrec-values(((loop_103)"
"(lambda(l_104 t_105)"
"(if(pair? l_104)"
"(let-values()"
"(let-values(((a_106)(unsafe-car l_104)))"
"(if(pair? a_106)"
"(if(eq? x_101(unsafe-car a_106))"
" a_106"
"(let-values(((l_107)(unsafe-cdr l_104)))"
"(if(pair? l_107)"
"(let-values()"
"(let-values(((a_108)(unsafe-car l_107)))"
"(if(pair? a_108)"
"(if(eq? x_101(unsafe-car a_108))"
" a_108"
"(let-values(((t_109)(unsafe-cdr t_105))"
"((l_110)(unsafe-cdr l_107)))"
"(if(eq? l_110 t_109)"
"(bad-list 'assq l_102)"
"(loop_103 l_110 t_109))))"
"(bad-item 'assq a_108 l_102))))"
"(if(null? l_107)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102))))))"
"(bad-item 'assq a_106 l_102))))"
"(if(null? l_104)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_102)))))))"
" loop_103)"
" l_102"
" l_102)))"
"((assv_98)"
"(lambda(x_111 l_112)"
"((letrec-values(((loop_113)"
"(lambda(l_114 t_115)"
"(if(pair? l_114)"
"(let-values()"
"(let-values(((a_116)(unsafe-car l_114)))"
"(if(pair? a_116)"
"(if(eqv? x_111(unsafe-car a_116))"
" a_116"
"(let-values(((l_117)(unsafe-cdr l_114)))"
"(if(pair? l_117)"
"(let-values()"
"(let-values(((a_118)(unsafe-car l_117)))"
"(if(pair? a_118)"
"(if(eqv? x_111(unsafe-car a_118))"
" a_118"
"(let-values(((t_119)(unsafe-cdr t_115))"
"((l_120)(unsafe-cdr l_117)))"
"(if(eq? l_120 t_119)"
"(bad-list 'assv l_112)"
"(loop_113 l_120 t_119))))"
"(bad-item 'assv a_118 l_112))))"
"(if(null? l_117)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112))))))"
"(bad-item 'assv a_116 l_112))))"
"(if(null? l_114)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_112)))))))"
" loop_113)"
" l_112"
" l_112)))"
"((assoc_99)"
"(case-lambda"
"((x_121 l_122)"
"((letrec-values(((loop_123)"
"(lambda(l_124 t_125)"
"(if(pair? l_124)"
"(let-values()"
"(let-values(((a_126)(unsafe-car l_124)))"
"(if(pair? a_126)"
"(if(equal? x_121(unsafe-car a_126))"
" a_126"
"(let-values(((l_127)(unsafe-cdr l_124)))"
"(if(pair? l_127)"
"(let-values()"
"(let-values(((a_128)(unsafe-car l_127)))"
"(if(pair? a_128)"
"(if(equal? x_121(unsafe-car a_128))"
" a_128"
"(let-values(((t_129)(unsafe-cdr t_125))"
"((l_130)(unsafe-cdr l_127)))"
"(if(eq? l_130 t_129)"
"(bad-list 'assoc l_122)"
"(loop_123 l_130 t_129))))"
"(bad-item 'assoc a_128 l_122))))"
"(if(null? l_127)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122))))))"
"(bad-item 'assoc a_126 l_122))))"
"(if(null? l_124)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_122)))))))"
" loop_123)"
" l_122"
" l_122))"
"((x_131 l_132 is-equal?_133)"
"(begin"
"(if(if(procedure? is-equal?_133)(procedure-arity-includes? is-equal?_133 2) #f)"
"(void)"
"                        (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_133)))"
"((letrec-values(((loop_134)"
"(lambda(l_135 t_136)"
"(if(pair? l_135)"
"(let-values()"
"(let-values(((a_137)(unsafe-car l_135)))"
"(if(pair? a_137)"
"(if(is-equal?_133 x_131(unsafe-car a_137))"
" a_137"
"(let-values(((l_138)(unsafe-cdr l_135)))"
"(if(pair? l_138)"
"(let-values()"
"(let-values(((a_139)(unsafe-car l_138)))"
"(if(pair? a_139)"
"(if(is-equal?_133 x_131(unsafe-car a_139))"
" a_139"
"(let-values(((t_140)(unsafe-cdr t_136))"
"((l_141)(unsafe-cdr l_138)))"
"(if(eq? l_141 t_140)"
"(bad-list 'assoc l_132)"
"(loop_134 l_141 t_140))))"
"(bad-item 'assoc a_139 l_132))))"
"(if(null? l_138)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132))))))"
"(bad-item 'assoc a_137 l_132))))"
"(if(null? l_135)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_132)))))))"
" loop_134)"
" l_132"
" l_132)))))"
"((assf_100)"
"(lambda(f_142 l_143)"
"(begin"
"(if(if(procedure? f_142)(procedure-arity-includes? f_142 1) #f)"
"(void)"
"                        (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_142)))"
"((letrec-values(((loop_144)"
"(lambda(l_145 t_146)"
"(if(pair? l_145)"
"(let-values()"
"(let-values(((a_147)(unsafe-car l_145)))"
"(if(pair? a_147)"
"(if((lambda(__148 a_149)(f_142 a_149)) #f(unsafe-car a_147))"
" a_147"
"(let-values(((l_150)(unsafe-cdr l_145)))"
"(if(pair? l_150)"
"(let-values()"
"(let-values(((a_151)(unsafe-car l_150)))"
"(if(pair? a_151)"
"(if((lambda(__152 a_153)(f_142 a_153))"
" #f"
"(unsafe-car a_151))"
" a_151"
"(let-values(((t_154)(unsafe-cdr t_146))"
"((l_155)(unsafe-cdr l_150)))"
"(if(eq? l_155 t_154)"
"(bad-list 'assf l_143)"
"(loop_144 l_155 t_154))))"
"(bad-item 'assf a_151 l_143))))"
"(if(null? l_150)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143))))))"
"(bad-item 'assf a_147 l_143))))"
"(if(null? l_145)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_143)))))))"
" loop_144)"
" l_143"
" l_143)))))"
"(values assq_97 assv_98 assoc_99 assf_100))))"
"(define-values"
"(mapadd)"
"(lambda(f_156 l_157 last_158)"
"((letrec-values(((loop_159)"
"(lambda(l_160)"
"(if(null? l_160)(list last_158)(cons(f_156(car l_160))(loop_159(cdr l_160)))))))"
" loop_159)"
" l_157)))"
"(define-values"
"(check-fold)"
"(lambda(name_161 proc_162 init_163 l_164 more_165)"
"(begin"
"(if(procedure? proc_162)"
"(void)"
"        (let-values () (apply raise-argument-error name_161 \"procedure?\" 0 proc_162 init_163 l_164 more_165)))"
"(if(list? l_164)"
"(void)"
"        (let-values () (apply raise-argument-error name_161 \"list?\" 2 proc_162 init_163 l_164 more_165)))"
"(if(null? more_165)"
"(if(procedure-arity-includes? proc_162 2)"
"(void)"
"          (let-values () (raise-mismatch-error name_161 \"given procedure does not accept 2 arguments: \" proc_162)))"
"(let-values(((len_166)(length l_164)))"
"(begin"
"((letrec-values(((loop_167)"
"(lambda(more_168 n_169)"
"(if(null? more_168)"
"(void)"
"(let-values()"
"(begin"
"(if(list?(car more_168))"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" name_161"
"                                           \"list?\""
" n_169"
" proc_162"
" init_163"
" l_164"
" more_168)))"
"(if(= len_166(length(car more_168)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" name_161"
"                                           \"given list does not have the same size as the first list: \""
"(car more_168))))"
"(loop_167(cdr more_168)(add1 n_169))))))))"
" loop_167)"
" more_165"
" 3)"
"(if(procedure-arity-includes? proc_162(+ 2(length more_165)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" name_161"
"                 (format \"given procedure does not accept ~a arguments: \" (+ 2 (length more_165)))"
" proc_162)))))))))"
"(define-values"
"(foldl)"
"(case-lambda"
"((f_170 init_171 l_172)"
"(begin"
"(check-fold 'foldl f_170 init_171 l_172 null)"
"((letrec-values(((loop_173)"
"(lambda(init_174 l_175)"
"(if(null? l_175) init_174(loop_173(f_170(car l_175) init_174)(cdr l_175))))))"
" loop_173)"
" init_171"
" l_172)))"
"((f_176 init_177 l_178 . ls_179)"
"(begin"
"(check-fold 'foldl f_176 init_177 l_178 ls_179)"
"((letrec-values(((loop_180)"
"(lambda(init_181 ls_182)"
"(if(pair?(car ls_182))"
"(loop_180(apply f_176(mapadd car ls_182 init_181))(map2 cdr ls_182))"
" init_181))))"
" loop_180)"
" init_177"
"(cons l_178 ls_179))))))"
"(define-values"
"(foldr)"
"(case-lambda"
"((f_183 init_184 l_185)"
"(begin"
"(check-fold 'foldr f_183 init_184 l_185 null)"
"((letrec-values(((loop_186)"
"(lambda(init_187 l_188)"
"(if(null? l_188) init_187(f_183(car l_188)(loop_186 init_187(cdr l_188)))))))"
" loop_186)"
" init_184"
" l_185)))"
"((f_189 init_190 l_191 . ls_192)"
"(begin"
"(check-fold 'foldr f_189 init_190 l_191 ls_192)"
"((letrec-values(((loop_193)"
"(lambda(ls_194)"
"(if(pair?(car ls_194))"
"(apply f_189(mapadd car ls_194(loop_193(map2 cdr ls_194))))"
" init_190))))"
" loop_193)"
"(cons l_191 ls_192))))))"
"(define-values"
"(filter)"
"(lambda(f_195 list_196)"
"(begin"
"(if(if(procedure? f_195)(procedure-arity-includes? f_195 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'filter \"(any/c . -> . any/c)\" f_195)))"
"      (if (list? list_196) (void) (let-values () (raise-argument-error 'filter \"list?\" list_196)))"
"((letrec-values(((loop_197)"
"(lambda(l_198 result_199)"
"(if(null? l_198)"
"(alt-reverse result_199)"
"(loop_197(cdr l_198)(if(f_195(car l_198))(cons(car l_198) result_199) result_199))))))"
" loop_197)"
" list_196"
" null))))"
"(define-values"
"(build-vector)"
"(lambda(n_200 fcn_201)"
"(begin"
"(if(exact-nonnegative-integer? n_200)"
"(void)"
"        (let-values () (raise-argument-error 'build-vector \"exact-nonnegative-integer?\" n_200)))"
"(if(if(procedure? fcn_201)(procedure-arity-includes? fcn_201 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'build-vector \"(exact-nonnegative-integer? . -> . any/c)\" fcn_201)))"
"(let-values(((vec_202)(make-vector n_200)))"
"((letrec-values(((loop_203)"
"(lambda(i_204)"
"(if(= i_204 n_200)"
" vec_202"
"(begin(vector-set! vec_202 i_204(fcn_201 i_204))(loop_203(add1 i_204)))))))"
" loop_203)"
" 0)))))"
"(define-values"
"(build-string)"
"(lambda(n_205 fcn_206)"
"(begin"
"(if(exact-nonnegative-integer? n_205)"
"(void)"
"        (let-values () (raise-argument-error 'build-string \"exact-nonnegative-integer?\" n_205)))"
"(if(if(procedure? fcn_206)(procedure-arity-includes? fcn_206 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'build-string \"(exact-nonnegative-integer? . -> . char?)\" fcn_206)))"
"(let-values(((str_207)(make-string n_205)))"
"((letrec-values(((loop_208)"
"(lambda(i_209)"
"(if(= i_209 n_205)"
" str_207"
"(begin(string-set! str_207 i_209(fcn_206 i_209))(loop_208(add1 i_209)))))))"
" loop_208)"
" 0)))))"
"(define-values"
"(build-list)"
"(lambda(n_210 fcn_211)"
"(begin"
"(if(exact-nonnegative-integer? n_210)"
"(void)"
"        (let-values () (raise-argument-error 'build-list \"exact-nonnegative-integer?\" n_210)))"
"(if(if(procedure? fcn_211)(procedure-arity-includes? fcn_211 1) #f)"
"(void)"
"        (let-values () (raise-argument-error 'build-list \"(exact-nonnegative-integer? . -> . any/c)\" fcn_211)))"
"((letrec-values(((recr_212)"
"(lambda(j_213 i_214)"
"(if(zero? i_214)"
"(let-values() null)"
"(let-values()(cons(fcn_211 j_213)(recr_212(add1 j_213)(sub1 i_214))))))))"
" recr_212)"
" 0"
" n_210))))"
"(define-values"
"(compose1 compose)"
"(let-values()"
"(let-values(((pipeline1_302)"
"(lambda(f_324 rfuns_325)"
"(lambda(x_326)"
"((letrec-values(((loop_327)"
"(lambda(x_328 f_329 rfuns_330)"
"(if(null? rfuns_330)"
"(f_329 x_328)"
"(loop_327(f_329 x_328)(car rfuns_330)(cdr rfuns_330))))))"
" loop_327)"
" x_326"
" f_324"
" rfuns_325)))))"
"(let-values(((pipeline*_303)"
"(lambda(f_331 rfuns_332)"
"(if(eqv? 1(norm:procedure-arity f_331))"
"((letrec-values(((loop_333)"
"(lambda(f_334 rfuns_335)"
"(if(null? rfuns_335)"
" f_334"
"(loop_333"
"(let-values(((fst_336)(car rfuns_335)))"
"(if(eqv? 1(norm:procedure-arity fst_336))"
"(lambda(x_337)(fst_336(f_334 x_337)))"
"(lambda(x_338)"
"(call-with-values(lambda()(f_334 x_338)) fst_336))))"
"(cdr rfuns_335))))))"
" loop_333)"
" f_331"
" rfuns_332)"
"(let-values(((funs_339)(alt-reverse(cons f_331 rfuns_332))))"
"((letrec-values(((loop_340)"
"(lambda(f_341 funs_342)"
"(if(null? funs_342)"
" f_341"
"(loop_340"
"(let-values(((fst_343)(car funs_342)))"
"(if(eqv? 1(norm:procedure-arity f_341))"
"(if(eqv? 1(norm:procedure-arity fst_343))"
"(lambda(x_344)(f_341(fst_343 x_344)))"
"(lambda xs_345(f_341(apply fst_343 xs_345))))"
"(if(eqv? 1(norm:procedure-arity fst_343))"
"(lambda(x_346)"
"(call-with-values(lambda()(fst_343 x_346)) f_341))"
"(lambda xs_347"
"(call-with-values(lambda()(apply fst_343 xs_347)) f_341)))))"
"(cdr funs_342))))))"
" loop_340)"
"(car funs_339)"
"(cdr funs_339)))))))"
"(let-values(((compose1_322)"
"(let-values(((simple-compose_348)"
"(lambda(f_349 g_350)"
"(let-values(((arity_351)(norm:procedure-arity g_350)))"
"(let-values(((required-kwds_352 allowed-kwds_353)(procedure-keywords g_350)))"
"(let-values(((composed_354)"
"(if(eq? 1 arity_351)"
"(lambda(x_355)(f_349(g_350 x_355)))"
"(case-lambda"
"((x_356)(f_349(g_350 x_356)))"
"((x_357 y_358)(f_349(g_350 x_357 y_358)))"
"(args_359(f_349(apply g_350 args_359)))))))"
"(if(null? allowed-kwds_353)"
" composed_354"
"(make-keyword-procedure"
"(lambda(kws_360 kw-args_361 . xs_362)"
"(f_349(new-keyword-apply g_350 kws_360 kw-args_361 xs_362)))"
" composed_354))))))))"
"(case-lambda"
"                         ((f_363) (if (procedure? f_363) f_363 (raise-argument-error 'compose1 \"procedure?\" 0 f_363)))"
"((f_364 g_365)"
"(begin"
"(if(procedure? f_364)"
"(void)"
"                              (let-values () (raise-argument-error 'compose1 \"procedure?\" 0 f_364 g_365)))"
"(if(procedure? g_365)"
"(void)"
"                              (let-values () (raise-argument-error 'compose1 \"procedure?\" 1 f_364 g_365)))"
"(if(procedure-arity-includes? f_364 1)"
"(void)"
"                              (let-values () (apply raise-argument-error 'compose1 \"(any/c . -> . any/c)\" 0 f_364 '())))"
"(if(null?(let-values(((req_366 __367)(procedure-keywords f_364))) req_366))"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose1"
"                                 \"procedure-with-no-required-keywords?\""
" 0"
" f_364"
" '())))"
"(simple-compose_348 f_364 g_365)))"
"(() values)"
"((f0_368 . fs0_369)"
"((letrec-values(((loop_370)"
"(lambda(f_371 fs_372 i_373 rfuns_374)"
"(begin"
"(if(procedure? f_371)"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose1"
"                                                     \"procedure?\""
" i_373"
" f0_368"
" fs0_369)))"
"(if(pair? fs_372)"
"(begin"
"(begin"
"(if(procedure-arity-includes? f_371 1)"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose1"
"                                                           \"(any/c . -> . any/c)\""
" i_373"
" f0_368"
" fs0_369)))"
"(if(null?"
"(let-values(((req_375 __376)(procedure-keywords f_371)))"
" req_375))"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose1"
"                                                           \"procedure-with-no-required-keywords?\""
" i_373"
" f0_368"
" fs0_369))))"
"(loop_370"
"(car fs_372)"
"(cdr fs_372)"
"(add1 i_373)"
"(cons f_371 rfuns_374)))"
"(simple-compose_348"
"(pipeline1_302(car rfuns_374)(cdr rfuns_374))"
" f_371))))))"
" loop_370)"
" f0_368"
" fs0_369"
" 0"
" '()))))))"
"(let-values(((compose_323)"
"(let-values(((simple-compose_377)"
"(lambda(f_378 g_379)"
"(if(eqv? 1(norm:procedure-arity f_378))"
"(let-values(((arity_380)(norm:procedure-arity g_379)))"
"(let-values(((required-kwds_381 allowed-kwds_382)"
"(procedure-keywords g_379)))"
"(let-values(((composed_383)"
"(if(eq? 1 arity_380)"
"(lambda(x_384)(f_378(g_379 x_384)))"
"(case-lambda"
"((x_385)(f_378(g_379 x_385)))"
"((x_386 y_387)(f_378(g_379 x_386 y_387)))"
"(args_388(f_378(apply g_379 args_388)))))))"
"(if(null? allowed-kwds_382)"
" composed_383"
"(make-keyword-procedure"
"(lambda(kws_389 kw-args_390 . xs_391)"
"(f_378(new-keyword-apply g_379 kws_389 kw-args_390 xs_391)))"
" composed_383)))))"
"(let-values(((arity_392)(norm:procedure-arity g_379)))"
"(let-values(((required-kwds_393 allowed-kwds_394)"
"(procedure-keywords g_379)))"
"(let-values(((composed_395)"
"(if(eq? 1 arity_392)"
"(lambda(x_396)"
"(call-with-values(lambda()(g_379 x_396)) f_378))"
"(case-lambda"
"((x_397)"
"(call-with-values(lambda()(g_379 x_397)) f_378))"
"((x_398 y_399)"
"(call-with-values"
"(lambda()(g_379 x_398 y_399))"
" f_378))"
"(args_400"
"(call-with-values"
"(lambda()(apply g_379 args_400))"
" f_378))))))"
"(if(null? allowed-kwds_394)"
" composed_395"
"(make-keyword-procedure"
"(lambda(kws_401 kw-args_402 . xs_403)"
"(call-with-values"
"(lambda()(new-keyword-apply g_379 kws_401 kw-args_402 xs_403))"
" f_378))"
" composed_395)))))))))"
"(case-lambda"
"                           ((f_404) (if (procedure? f_404) f_404 (raise-argument-error 'compose \"procedure?\" 0 f_404)))"
"((f_405 g_406)"
"(begin"
"(if(procedure? f_405)"
"(void)"
"                                (let-values () (raise-argument-error 'compose \"procedure?\" 0 f_405 g_406)))"
"(if(procedure? g_406)"
"(void)"
"                                (let-values () (raise-argument-error 'compose \"procedure?\" 1 f_405 g_406)))"
"(if(null?(let-values(((req_407 __408)(procedure-keywords f_405))) req_407))"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose"
"                                   \"procedure-with-no-required-keywords?\""
" 0"
" f_405"
" '())))"
"(simple-compose_377 f_405 g_406)))"
"(() values)"
"((f0_409 . fs0_410)"
"((letrec-values(((loop_411)"
"(lambda(f_412 fs_413 i_414 rfuns_415)"
"(begin"
"(if(procedure? f_412)"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose"
"                                                       \"procedure?\""
" i_414"
" f0_409"
" fs0_410)))"
"(if(pair? fs_413)"
"(begin"
"(if(null?"
"(let-values(((req_416 __417)(procedure-keywords f_412)))"
" req_416))"
"(void)"
"(let-values()"
"(apply"
" raise-argument-error"
" 'compose"
"                                                           \"procedure-with-no-required-keywords?\""
" i_414"
" f0_409"
" fs0_410)))"
"(loop_411"
"(car fs_413)"
"(cdr fs_413)"
"(add1 i_414)"
"(cons f_412 rfuns_415)))"
"(simple-compose_377"
"(pipeline*_303(car rfuns_415)(cdr rfuns_415))"
" f_412))))))"
" loop_411)"
" f0_409"
" fs0_410"
" 0"
" '()))))))"
"(values compose1_322 compose_323)))))))"
"(define-values"
"(real->decimal-string)"
"(let-values(((real->decimal-string4_36)"
"(lambda(n3_37 digits1_38 digits2_39)"
"(let-values(((n_40) n3_37))"
"(let-values(((digits_41)(if digits2_39 digits1_38 2)))"
"(let-values()"
"(begin"
"(if(exact-nonnegative-integer? digits_41)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'real->decimal-string \"exact-nonnegative-integer?\" digits_41)))"
"(let-values(((e_42)(expt 10 digits_41)))"
"(let-values(((num_43)(round(abs(* e_42(inexact->exact n_40))))))"
"(format"
"                               \"~a~a.~a\""
"(if(let-values(((or-part_44)(negative? n_40)))"
"(if or-part_44 or-part_44(equal? n_40 -0.0)))"
"                                 \"-\""
"                                 \"\")"
"(quotient num_43 e_42)"
"(if(zero? digits_41)"
"                                 \"\""
"(let-values(((s_45)(number->string(remainder num_43 e_42))))"
"(if(=(string-length s_45) digits_41)"
" s_45"
"(string-append"
"(make-string(- digits_41(string-length s_45)) '#\\0)"
" s_45))))))))))))))"
"(case-lambda"
"((n_46)(real->decimal-string4_36 n_46 #f #f))"
"((n_47 digits1_48)(real->decimal-string4_36 n_47 digits1_48 #t)))))"
" (define-values (regexp-quote-chars:s) '#rx\"[][.*?+|(){}\\\\$^]\")"
" (define-values (regexp-quote-chars:b) '#rx#\"[][.*?+|(){}\\\\$^]\")"
"(define-values"
"(regexp-quote)"
"(let-values(((regexp-quote9_49)"
"(lambda(s8_50 case-sens?6_51 case-sens?7_52)"
"(let-values(((s_53) s8_50))"
"(let-values(((case-sens?_54)(if case-sens?7_52 case-sens?6_51 #t)))"
"(let-values()"
"(let-values(((b?_55)"
"(if(bytes? s_53)"
"(let-values() #t)"
"(if(string? s_53)"
"(let-values() #f)"
"(let-values()"
"                                            (raise-argument-error 'regexp-quote \"(or/c string? bytes?)\" s_53))))))"
"(let-values(((s_56)"
"(if b?_55"
"                                          (regexp-replace* regexp-quote-chars:b s_53 #\"\\\\\\\\&\")"
"                                          (regexp-replace* regexp-quote-chars:s s_53 \"\\\\\\\\&\"))))"
"(if case-sens?_54"
"(let-values() s_56)"
"(if b?_55"
"                                (let-values () (bytes-append #\"(?i:\" s_56 #\")\"))"
"                                (let-values () (string-append \"(?i:\" s_56 \")\"))))))))))))"
"(case-lambda"
"((s_57)(regexp-quote9_49 s_57 #f #f))"
"((s_58 case-sens?6_59)(regexp-quote9_49 s_58 case-sens?6_59 #t)))))"
"(define-values"
"(regexp-replace-quote)"
"(lambda(s_60)"
"(if(bytes? s_60)"
"      (let-values () (regexp-replace* '#rx#\"[&\\\\]\" s_60 #\"\\\\\\\\&\"))"
"(if(string? s_60)"
"        (let-values () (regexp-replace* '#rx\"[&\\\\]\" s_60 \"\\\\\\\\&\"))"
"        (let-values () (raise-argument-error 'regexp-replace-quote \"(or/c string? bytes?)\" s_60))))))"
"(define-values"
"(make-regexp-tweaker)"
"(lambda(tweaker_61)"
"(let-values(((t_62)(make-hash)))"
"(lambda(rx_63 n_64)"
"(let-values(((run-tweak_110)"
"(lambda()"
"(if(pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_111)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_112)(regexp? tweaked_111)))"
"(if or-part_112 or-part_112(byte-regexp? tweaked_111)))"
" tweaked_111"
"(pregexp(if(bytes? tweaked_111)(bytes->string/utf-8 tweaked_111) tweaked_111)))))"
"(if(regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_113)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_114)(regexp? tweaked_113)))"
"(if or-part_114 or-part_114(byte-regexp? tweaked_113)))"
" tweaked_113"
"(regexp(if(bytes? tweaked_113)(bytes->string/utf-8 tweaked_113) tweaked_113)))))"
"(if(byte-pregexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_115)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_116)(regexp? tweaked_115)))"
"(if or-part_116 or-part_116(byte-regexp? tweaked_115)))"
" tweaked_115"
"(byte-pregexp"
"(if(bytes? tweaked_115) tweaked_115(string->bytes/utf-8 tweaked_115))))))"
"(if(byte-regexp? rx_63)"
"(let-values()"
"(let-values(((tweaked_117)(tweaker_61(object-name rx_63) n_64)))"
"(if(let-values(((or-part_118)(regexp? tweaked_117)))"
"(if or-part_118 or-part_118(byte-regexp? tweaked_117)))"
" tweaked_117"
"(byte-regexp"
"(if(bytes? tweaked_117) tweaked_117(string->bytes/utf-8 tweaked_117))))))"
"(if(string? rx_63)"
"(let-values()"
"(let-values(((tweaked_119)(tweaker_61((lambda(x_120) x_120) rx_63) n_64)))"
"(if(let-values(((or-part_121)(regexp? tweaked_119)))"
"(if or-part_121 or-part_121(byte-regexp? tweaked_119)))"
" tweaked_119"
"(regexp"
"(if(bytes? tweaked_119)(bytes->string/utf-8 tweaked_119) tweaked_119)))))"
"(if(bytes? rx_63)"
"(let-values()"
"(let-values(((tweaked_122)(tweaker_61((lambda(x_123) x_123) rx_63) n_64)))"
"(if(let-values(((or-part_124)(regexp? tweaked_122)))"
"(if or-part_124 or-part_124(byte-regexp? tweaked_122)))"
" tweaked_122"
"(byte-regexp"
"(if(bytes? tweaked_122) tweaked_122(string->bytes/utf-8 tweaked_122))))))"
"(let-values()"
"(raise-argument-error"
" 'regexp-tweaker"
"                                       \"(or/c regexp? byte-regexp? string? bytes?)\""
" rx_63)))))))))))"
"(let-values(((key_125)(cons n_64 rx_63)))"
"(let-values(((or-part_126)(hash-ref t_62 key_125 #f)))"
"(if or-part_126"
" or-part_126"
"(let-values(((rx*_127)(run-tweak_110)))(begin(hash-set! t_62 key_125 rx*_127) rx*_127))))))))))"
"(define-values"
"(regexp-try-match)"
"(let-values(((regexp-try-match21_128)"
"(lambda(pattern19_129"
" input-port20_130"
" start-k11_131"
" end-k12_132"
" out13_133"
" prefix14_134"
" start-k15_135"
" end-k16_136"
" out17_137"
" prefix18_138)"
"(let-values(((pattern_139) pattern19_129))"
"(let-values(((input-port_140) input-port20_130))"
"(let-values(((start-k_141)(if start-k15_135 start-k11_131 0)))"
"(let-values(((end-k_142)(if end-k16_136 end-k12_132 #f)))"
"(let-values(((out_143)(if out17_137 out13_133 #f)))"
"                            (let-values (((prefix_144) (if prefix18_138 prefix14_134 #\"\")))"
"(let-values()"
"(begin"
"(if(input-port? input-port_140)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-try-match \"input-port?\" input-port_140)))"
"(if(let-values(((or-part_145)(not out_143)))"
"(if or-part_145 or-part_145(output-port? out_143)))"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-try-match \"(or/c output-port? #f)\" out_143)))"
"(let-values(((m_146)"
"(regexp-match-peek-positions"
" pattern_139"
" input-port_140"
" start-k_141"
" end-k_142"
" #f"
" prefix_144)))"
"(if m_146"
"(let-values(((drop_147)(caar m_146)))"
"(begin"
"(let-values(((s_148)(read-bytes drop_147 input-port_140)))"
"(if out_143(let-values()(write-bytes s_148 out_143))(void)))"
"(let-values(((s_149)(read-bytes(-(cdar m_146) drop_147) input-port_140)))"
"(cons"
" s_149"
"(map2"
"(lambda(p_150)"
"(if p_150"
"(subbytes s_149(-(car p_150) drop_147)(-(cdr p_150) drop_147))"
" #f))"
"(cdr m_146))))))"
" #f)))))))))))))"
"(case-lambda"
"((pattern_151 input-port_152)(regexp-try-match21_128 pattern_151 input-port_152 #f #f #f #f #f #f #f #f))"
"((pattern_153 input-port_154 start-k_155 end-k_156 out_157 prefix14_158)"
"(regexp-try-match21_128 pattern_153 input-port_154 start-k_155 end-k_156 out_157 prefix14_158 #t #t #t #t))"
"((pattern_159 input-port_160 start-k_161 end-k_162 out13_163)"
"(regexp-try-match21_128 pattern_159 input-port_160 start-k_161 end-k_162 out13_163 #f #t #t #t #f))"
"((pattern_164 input-port_165 start-k_166 end-k12_167)"
"(regexp-try-match21_128 pattern_164 input-port_165 start-k_166 end-k12_167 #f #f #t #t #f #f))"
"((pattern_168 input-port_169 start-k11_170)"
"(regexp-try-match21_128 pattern_168 input-port_169 start-k11_170 #f #f #f #t #f #f #f)))))"
"(define-values(bstring-length)(lambda(s_171)(if(bytes? s_171)(bytes-length s_171)(string-length s_171))))"
"(define-values"
"(no-empty-edge-matches)"
"(make-regexp-tweaker"
"(lambda(rx_172 n_173)"
"(if(bytes? rx_172)"
"       (bytes-append #\"(?:\" rx_172 #\")(?<=\" (make-bytes n_173 (char->integer '#\\.)) #\")\")"
"       (format \"(?:~a)(?<=~a)\" rx_172 (make-bytes n_173 (char->integer '#\\.)))))))"
"(define-values"
"(regexp-match-positions*33.1)"
"(lambda(match-select23_174"
" match-select24_175"
" pattern31_176"
" string32_177"
" start25_178"
" end26_179"
" ipre27_180"
" start28_181"
" end29_182"
" ipre30_183)"
"(let-values(((pattern_184) pattern31_176))"
"(let-values(((string_185) string32_177))"
"(let-values(((start_186)(if start28_181 start25_178 0)))"
"(let-values(((end_187)(if end29_182 end26_179 #f)))"
"            (let-values (((ipre_188) (if ipre30_183 ipre27_180 #\"\")))"
"(let-values(((match-select_189)(if match-select24_175 match-select23_174 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_189)"
"(void)"
"                      (let-values () (raise-argument-error 'regexp-match-positions* \"procedure?\" match-select_189)))"
"(if(eq? match-select_189 car)"
"(let-values(((string_190)"
"(if(path? string_185)"
"(if(let-values(((or-part_191)(string? pattern_184)))"
"(if or-part_191 or-part_191(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_192)"
"(if(string? string_190)"
"(let-values()(string-length string_190))"
"(if(bytes? string_190)"
"(let-values()(bytes-length string_190))"
"(let-values() #f)))))"
"(let-values(((orig-rx_193)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_194)(regexp-max-lookbehind orig-rx_193)))"
"(begin"
"(if #f"
"(if(input-port? string_190)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-positions* \"input-port?\" string_190)))"
"(if(let-values(((or-part_195) len_192))"
"(if or-part_195 or-part_195(input-port? string_190)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_190))))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_196)(not end_187)))"
"(if or-part_196"
" or-part_196"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
"                                  (let-values () (raise-argument-error 'regexp-match-positions* \"bytes?\" ipre_188)))"
"(if(let-values(((or-part_197)(input-port? string_190)))"
"(if or-part_197 or-part_197(if len_192(<= start_186 len_192) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_192)"
" start_186)))"
"(if(let-values(((or-part_198)(not end_187)))"
"(if or-part_198"
" or-part_198"
"(if(<= start_186 end_187)"
"(let-values(((or-part_199)(input-port? string_190)))"
"(if or-part_199 or-part_199(if len_192(<= end_187 len_192) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_186 len_192)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_200)"
"(lambda(acc_201 start_202 end_203 ipre_204 0-ok?_205)"
"(let-values(((rx_206)"
"(if 0-ok?_205"
" orig-rx_193"
"(no-empty-edge-matches"
" orig-rx_193"
"(add1(bytes-length ipre_204))))))"
"(if(if #f(input-port? string_190) #f)"
"(let-values(((__207)"
"(if(positive? start_202)"
"(let-values()"
"(let-values(((s_208)(make-bytes 4096)))"
"((letrec-values(((loop_209)"
"(lambda(n_210)"
"(if(= n_210 start_202)"
"(void)"
"(let-values()"
"(let-values(((m_211)"
"(read-bytes-avail!"
" s_208"
" string_190"
" 0"
"(min"
"(-"
" start_202"
" n_210)"
" 4096))))"
"(if(eof-object?"
" m_211)"
"(void)"
"(let-values()"
"(loop_209"
"(+"
" n_210"
" m_211))))))))))"
" loop_209)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_212)(if #f #f 0)))"
"(let-values(((spitout_213)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_214"
" start_215"
" end_216"
" flush?_217"
" breakable?_218)"
"(let-values(((c_219)"
"(- end_216 start_215)))"
"(begin"
"(set! discarded/leftovers_212"
"(+ c_219 discarded/leftovers_212))"
" c_219)))"
" void))))"
"(let-values(((end_220)"
"(if end_203(- end_203 start_202) #f)))"
"(let-values(((ms_221 ipre_222)"
"(regexp-match/end"
" rx_206"
" string_190"
" 0"
" end_220"
" spitout_213"
" ipre_204"
" max-lookbehind_194)))"
"(let-values(((m_223)(if ms_221(car ms_221) #f)))"
"(let-values(((discarded/leftovers_224)"
"(if #f"
"(get-output-bytes spitout_213)"
" discarded/leftovers_212)))"
"(let-values(((skipped_225)"
"(if #f"
"(bstring-length"
" discarded/leftovers_224)"
" discarded/leftovers_224)))"
"(let-values(((got_226)"
"(if m_223"
"(bstring-length m_223)"
" #f)))"
"(let-values(((end_227)"
"(if end_220"
"(if m_223"
"(-"
" end_220"
" skipped_225"
" got_226)"
" #f)"
" #f)))"
"(if m_223"
"(let-values(((0-ok?_228)"
"(not(zero? got_226))))"
"(loop_200"
"(#f"
" discarded/leftovers_224"
" ms_221"
" acc_201)"
" 0"
" end_227"
" ipre_222"
" 0-ok?_228))"
"(#f"
" acc_201"
" discarded/leftovers_224))))))))))))"
"(let-values(((m_229 ipre_230)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_206"
" string_190"
" start_202"
" end_203"
" #f"
" ipre_204"
" max-lookbehind_194)"
"(regexp-match-positions/end"
" rx_206"
" string_190"
" start_202"
" end_203"
" #f"
" ipre_204"
" max-lookbehind_194))))"
"(if(not m_229)"
"((lambda(acc_231 start_232 end_233) acc_231)"
" acc_201"
" start_202"
" end_203)"
"(let-values(((mstart_234)(caar m_229)))"
"(let-values(((mend_235)(cdar m_229)))"
"(let-values(((0-ok?_236)"
"(not(= mstart_234 mend_235))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mstart)(#%app caar ms))"
"((mend)(#%app cdar ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app + mend(#%app cdr p))))"
"(#%app"
" loop"
" '()"
" '0"
"(if end(#%app - end mend) '#f)))"
"(#%app cons(#%app car ms) acc))))"
"(input-port? string_190)"
" #f)"
"((lambda(loop_245"
" acc_246"
" start_247"
" end_248"
" ms_249)"
"(let-values(((mstart_250)(caar ms_249))"
"((mend_251)(cdar ms_249)))"
"(append"
"(map2"
"(lambda(p_252)"
"(cons"
"(+ mend_251(car p_252))"
"(+ mend_251(cdr p_252))))"
"(loop_245"
" '()"
" 0"
"(if end_248(- end_248 mend_251) #f)))"
"(cons(car ms_249) acc_246))))"
"(lambda(acc_253 new-start_254 new-end_255)"
"(loop_200"
" acc_253"
" new-start_254"
" new-end_255"
" ipre_230"
" 0-ok?_236))"
" acc_201"
" start_202"
" end_203"
" m_229)"
"(loop_200"
"((lambda(start_256 ms_257 acc_258)"
"(cons(car ms_257) acc_258))"
" start_202"
" m_229"
" acc_201)"
" mend_235"
" end_203"
" ipre_230"
" 0-ok?_236))))))))))))"
" loop_200)"
" '()"
" start_186"
" end_187"
" ipre_188"
" #t)))))))"
"(let-values(((string_259)"
"(if(path? string_185)"
"(if(let-values(((or-part_260)(string? pattern_184)))"
"(if or-part_260 or-part_260(regexp? pattern_184)))"
"(path->string string_185)"
"(path->bytes string_185))"
" string_185)))"
"(let-values(((len_261)"
"(if(string? string_259)"
"(let-values()(string-length string_259))"
"(if(bytes? string_259)"
"(let-values()(bytes-length string_259))"
"(let-values() #f)))))"
"(let-values(((orig-rx_262)"
"(if(bytes? pattern_184)"
"(let-values()(byte-regexp pattern_184))"
"(if(string? pattern_184)"
"(let-values()(regexp pattern_184))"
"(if(regexp? pattern_184)"
"(let-values() pattern_184)"
"(if(byte-regexp? pattern_184)"
"(let-values() pattern_184)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_184))))))))"
"(let-values(((max-lookbehind_263)(regexp-max-lookbehind orig-rx_262)))"
"(begin"
"(if #f"
"(if(input-port? string_259)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-positions* \"input-port?\" string_259)))"
"(if(let-values(((or-part_264) len_261))"
"(if or-part_264 or-part_264(input-port? string_259)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_259))))"
"(if(if(number? start_186)"
"(if(exact? start_186)(if(integer? start_186)(>= start_186 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_186)))"
"(if(let-values(((or-part_265)(not end_187)))"
"(if or-part_265"
" or-part_265"
"(if(number? end_187)"
"(if(exact? end_187)(if(integer? end_187)(>= end_187 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_187)))"
"(if(bytes? ipre_188)"
"(void)"
"                                  (let-values () (raise-argument-error 'regexp-match-positions* \"bytes?\" ipre_188)))"
"(if(let-values(((or-part_266)(input-port? string_259)))"
"(if or-part_266 or-part_266(if len_261(<= start_186 len_261) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_261)"
" start_186)))"
"(if(let-values(((or-part_267)(not end_187)))"
"(if or-part_267"
" or-part_267"
"(if(<= start_186 end_187)"
"(let-values(((or-part_268)(input-port? string_259)))"
"(if or-part_268 or-part_268(if len_261(<= end_187 len_261) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_186 len_261)"
" end_187)))"
"(reverse"
"((letrec-values(((loop_269)"
"(lambda(acc_270 start_271 end_272 ipre_273 0-ok?_274)"
"(let-values(((rx_275)"
"(if 0-ok?_274"
" orig-rx_262"
"(no-empty-edge-matches"
" orig-rx_262"
"(add1(bytes-length ipre_273))))))"
"(if(if #f(input-port? string_259) #f)"
"(let-values(((__276)"
"(if(positive? start_271)"
"(let-values()"
"(let-values(((s_277)(make-bytes 4096)))"
"((letrec-values(((loop_278)"
"(lambda(n_279)"
"(if(= n_279 start_271)"
"(void)"
"(let-values()"
"(let-values(((m_280)"
"(read-bytes-avail!"
" s_277"
" string_259"
" 0"
"(min"
"(-"
" start_271"
" n_279)"
" 4096))))"
"(if(eof-object?"
" m_280)"
"(void)"
"(let-values()"
"(loop_278"
"(+"
" n_279"
" m_280))))))))))"
" loop_278)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_281)(if #f #f 0)))"
"(let-values(((spitout_282)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_283"
" start_284"
" end_285"
" flush?_286"
" breakable?_287)"
"(let-values(((c_288)"
"(- end_285 start_284)))"
"(begin"
"(set! discarded/leftovers_281"
"(+ c_288 discarded/leftovers_281))"
" c_288)))"
" void))))"
"(let-values(((end_289)"
"(if end_272(- end_272 start_271) #f)))"
"(let-values(((ms_290 ipre_291)"
"(regexp-match/end"
" rx_275"
" string_259"
" 0"
" end_289"
" spitout_282"
" ipre_273"
" max-lookbehind_263)))"
"(let-values(((m_292)(if ms_290(car ms_290) #f)))"
"(let-values(((discarded/leftovers_293)"
"(if #f"
"(get-output-bytes spitout_282)"
" discarded/leftovers_281)))"
"(let-values(((skipped_294)"
"(if #f"
"(bstring-length"
" discarded/leftovers_293)"
" discarded/leftovers_293)))"
"(let-values(((got_295)"
"(if m_292"
"(bstring-length m_292)"
" #f)))"
"(let-values(((end_296)"
"(if end_289"
"(if m_292"
"(-"
" end_289"
" skipped_294"
" got_295)"
" #f)"
" #f)))"
"(if m_292"
"(let-values(((0-ok?_297)"
"(not(zero? got_295))))"
"(loop_269"
"(#f"
" discarded/leftovers_293"
" ms_290"
" acc_270)"
" 0"
" end_296"
" ipre_291"
" 0-ok?_297))"
"(#f"
" acc_270"
" discarded/leftovers_293))))))))))))"
"(let-values(((m_298 ipre_299)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_275"
" string_259"
" start_271"
" end_272"
" #f"
" ipre_273"
" max-lookbehind_263)"
"(regexp-match-positions/end"
" rx_275"
" string_259"
" start_271"
" end_272"
" #f"
" ipre_273"
" max-lookbehind_263))))"
"(if(not m_298)"
"((lambda(acc_300 start_301 end_302) acc_300)"
" acc_270"
" start_271"
" end_272)"
"(let-values(((mstart_303)(caar m_298)))"
"(let-values(((mend_304)(cdar m_298)))"
"(let-values(((0-ok?_305)"
"(not(= mstart_303 mend_304))))"
"(if(if '(lambda(loop acc start end ms)"
"(let-values(((mend)(#%app cdar ms)))"
"(let-values(((rest)"
"(#%app"
" loop"
" '()"
" '0"
"(if end"
"(#%app - end mend)"
" '#f))))"
"(let-values(((s)"
"(#%app"
" match-select"
" ms)))"
"(#%app"
" append"
"(#%app"
" map"
"(if(let-values(((or-part)"
"(if(#%app"
" pair?"
" s)"
"(#%app"
" exact-integer?"
"(#%app"
" car"
" s))"
" '#f)))"
"(if or-part"
" or-part"
"(#%app not s)))"
"(lambda(p)"
"(#%app"
" cons"
"(#%app + mend(#%app car p))"
"(#%app"
" +"
" mend"
"(#%app cdr p))))"
"(lambda(ps)"
"(#%app"
" map"
"(lambda(p)"
"(if p"
"(#%app"
" cons"
"(#%app"
" +"
" mend"
"(#%app car p))"
"(#%app"
" +"
" mend"
"(#%app cdr p)))"
" '#f))"
" ps)))"
" rest)"
"(#%app cons s acc))))))"
"(input-port? string_259)"
" #f)"
"((lambda(loop_318"
" acc_319"
" start_320"
" end_321"
" ms_322)"
"(let-values(((mend_323)(cdar ms_322)))"
"(let-values(((rest_324)"
"(loop_318"
" '()"
" 0"
"(if end_321"
"(- end_321 mend_323)"
" #f))))"
"(let-values(((s_325)"
"(match-select_189 ms_322)))"
"(append"
"(map2"
"(if(let-values(((or-part_326)"
"(if(pair? s_325)"
"(exact-integer?"
"(car s_325))"
" #f)))"
"(if or-part_326"
" or-part_326"
"(not s_325)))"
"(lambda(p_327)"
"(cons"
"(+ mend_323(car p_327))"
"(+ mend_323(cdr p_327))))"
"(lambda(ps_328)"
"(map2"
"(lambda(p_329)"
"(if p_329"
"(cons"
"(+ mend_323(car p_329))"
"(+ mend_323(cdr p_329)))"
" #f))"
" ps_328)))"
" rest_324)"
"(cons s_325 acc_319))))))"
"(lambda(acc_330 new-start_331 new-end_332)"
"(loop_269"
" acc_330"
" new-start_331"
" new-end_332"
" ipre_299"
" 0-ok?_305))"
" acc_270"
" start_271"
" end_272"
" m_298)"
"(loop_269"
"((lambda(start_333 ms_334 acc_335)"
"(cons(match-select_189 ms_334) acc_335))"
" start_271"
" m_298"
" acc_270)"
" mend_304"
" end_272"
" ipre_299"
" 0-ok?_305))))))))))))"
" loop_269)"
" '()"
" start_186"
" end_187"
" ipre_188"
" #t))))))))))))))))))"
"(define-values"
"(unpack34.1$1)"
"(lambda(given-kws_336"
" given-args_337"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)"
"(let-values(((match-select24_346)(pair? given-kws_336)))"
"(let-values(((match-select23_347)(if match-select24_346(car given-args_337)(void))))"
"(regexp-match-positions*33.1"
" match-select23_347"
" match-select24_346"
" pattern31_338"
" string32_339"
" start25_340"
" end26_341"
" ipre27_342"
" start28_343"
" end29_344"
" ipre30_345)))))"
"(define-values"
"(regexp-match-positions*35.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_348 given-argc_349)"
"(if(if(>= given-argc_349 4)(<= given-argc_349 7) #f)"
"(let-values(((l1_350) given-kws_348))"
"(let-values(((l1_351)(if(null? l1_350) l1_350(if(eq?(car l1_350) '#:match-select)(cdr l1_350) l1_350))))"
"(null? l1_351)))"
" #f))"
"(case-lambda"
"((given-kws_352 given-args_353 pattern_354 string_355)"
"(unpack34.1$1 given-kws_352 given-args_353 pattern_354 string_355 #f #f #f #f #f #f))"
"((given-kws_356 given-args_357 pattern_358 string_359 start_360 end_361 ipre27_362)"
"(unpack34.1$1 given-kws_356 given-args_357 pattern_358 string_359 start_360 end_361 ipre27_362 #t #t #t))"
"((given-kws_363 given-args_364 pattern_365 string_366 start_367 end26_368)"
"(unpack34.1$1 given-kws_363 given-args_364 pattern_365 string_366 start_367 end26_368 #f #t #t #f))"
"((given-kws_369 given-args_370 pattern_371 string_372 start25_373)"
"(unpack34.1$1 given-kws_369 given-args_370 pattern_371 string_372 start25_373 #f #f #t #f #f)))"
" null"
" '(#:match-select)"
"(let-values(((regexp-match-positions*_374)"
"(case-lambda"
"((pattern_375 string_376)(unpack34.1$1 null null pattern_375 string_376 #f #f #f #f #f #f))"
"((pattern_377 string_378 start_379 end_380 ipre27_381)"
"(unpack34.1$1 null null pattern_377 string_378 start_379 end_380 ipre27_381 #t #t #t))"
"((pattern_382 string_383 start_384 end26_385)"
"(unpack34.1$1 null null pattern_382 string_383 start_384 end26_385 #f #t #t #f))"
"((pattern_386 string_387 start25_388)"
"(unpack34.1$1 null null pattern_386 string_387 start25_388 #f #f #t #f #f)))))"
" regexp-match-positions*_374)))"
"(define-values"
"(regexp-match-peek-positions*46.1)"
"(lambda(match-select36_389"
" match-select37_390"
" pattern44_391"
" string45_392"
" start38_393"
" end39_394"
" ipre40_395"
" start41_396"
" end42_397"
" ipre43_398)"
"(let-values(((pattern_399) pattern44_391))"
"(let-values(((string_400) string45_392))"
"(let-values(((start_401)(if start41_396 start38_393 0)))"
"(let-values(((end_402)(if end42_397 end39_394 #f)))"
"            (let-values (((ipre_403) (if ipre43_398 ipre40_395 #\"\")))"
"(let-values(((match-select_404)(if match-select37_390 match-select36_389 car)))"
"(let-values()"
"(begin"
"(if(procedure? match-select_404)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'regexp-match-peek-positions* \"procedure?\" match-select_404)))"
"(if(eq? match-select_404 car)"
"(let-values(((string_405)"
"(if(path? string_400)"
"(if(let-values(((or-part_406)(string? pattern_399)))"
"(if or-part_406 or-part_406(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_407)"
"(if(string? string_405)"
"(let-values()(string-length string_405))"
"(if(bytes? string_405)"
"(let-values()(bytes-length string_405))"
"(let-values() #f)))))"
"(let-values(((orig-rx_408)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_409)(regexp-max-lookbehind orig-rx_408)))"
"(begin"
"(if #t"
"(if(input-port? string_405)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-peek-positions* \"input-port?\" string_405)))"
"(if(let-values(((or-part_410) len_407))"
"(if or-part_410 or-part_410(input-port? string_405)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_405))))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_411)(not end_402)))"
"(if or-part_411"
" or-part_411"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"bytes?\" ipre_403)))"
"(if(let-values(((or-part_412)(input-port? string_405)))"
"(if or-part_412 or-part_412(if len_407(<= start_401 len_407) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_407)"
" start_401)))"
"(if(let-values(((or-part_413)(not end_402)))"
"(if or-part_413"
" or-part_413"
"(if(<= start_401 end_402)"
"(let-values(((or-part_414)(input-port? string_405)))"
"(if or-part_414 or-part_414(if len_407(<= end_402 len_407) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_401 len_407)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_415)"
"(lambda(acc_416 start_417 end_418 ipre_419 0-ok?_420)"
"(let-values(((rx_421)"
"(if 0-ok?_420"
" orig-rx_408"
"(no-empty-edge-matches"
" orig-rx_408"
"(add1(bytes-length ipre_419))))))"
"(if(if #f(input-port? string_405) #f)"
"(let-values(((__422)"
"(if(positive? start_417)"
"(let-values()"
"(let-values(((s_423)(make-bytes 4096)))"
"((letrec-values(((loop_424)"
"(lambda(n_425)"
"(if(= n_425 start_417)"
"(void)"
"(let-values()"
"(let-values(((m_426)"
"(read-bytes-avail!"
" s_423"
" string_405"
" 0"
"(min"
"(-"
" start_417"
" n_425)"
" 4096))))"
"(if(eof-object?"
" m_426)"
"(void)"
"(let-values()"
"(loop_424"
"(+"
" n_425"
" m_426))))))))))"
" loop_424)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_427)(if #f #f 0)))"
"(let-values(((spitout_428)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_429"
" start_430"
" end_431"
" flush?_432"
" breakable?_433)"
"(let-values(((c_434)"
"(- end_431 start_430)))"
"(begin"
"(set! discarded/leftovers_427"
"(+ c_434 discarded/leftovers_427))"
" c_434)))"
" void))))"
"(let-values(((end_435)"
"(if end_418(- end_418 start_417) #f)))"
"(let-values(((ms_436 ipre_437)"
"(regexp-match/end"
" rx_421"
" string_405"
" 0"
" end_435"
" spitout_428"
" ipre_419"
" max-lookbehind_409)))"
"(let-values(((m_438)(if ms_436(car ms_436) #f)))"
"(let-values(((discarded/leftovers_439)"
"(if #f"
"(get-output-bytes spitout_428)"
" discarded/leftovers_427)))"
"(let-values(((skipped_440)"
"(if #f"
"(bstring-length"
" discarded/leftovers_439)"
" discarded/leftovers_439)))"
"(let-values(((got_441)"
"(if m_438"
"(bstring-length m_438)"
" #f)))"
"(let-values(((end_442)"
"(if end_435"
"(if m_438"
"(-"
" end_435"
" skipped_440"
" got_441)"
" #f)"
" #f)))"
"(if m_438"
"(let-values(((0-ok?_443)"
"(not(zero? got_441))))"
"(loop_415"
"(#f"
" discarded/leftovers_439"
" ms_436"
" acc_416)"
" 0"
" end_442"
" ipre_437"
" 0-ok?_443))"
"(#f"
" acc_416"
" discarded/leftovers_439))))))))))))"
"(let-values(((m_444 ipre_445)"
"(if #t"
"(regexp-match-peek-positions/end"
" rx_421"
" string_405"
" start_417"
" end_418"
" #f"
" ipre_419"
" max-lookbehind_409)"
"(regexp-match-positions/end"
" rx_421"
" string_405"
" start_417"
" end_418"
" #f"
" ipre_419"
" max-lookbehind_409))))"
"(if(not m_444)"
"((lambda(acc_446 start_447 end_448) acc_446)"
" acc_416"
" start_417"
" end_418)"
"(let-values(((mstart_449)(caar m_444)))"
"(let-values(((mend_450)(cdar m_444)))"
"(let-values(((0-ok?_451)"
"(not(= mstart_449 mend_450))))"
"(if(if #f(input-port? string_405) #f)"
"(#f"
"(lambda(acc_452 new-start_453 new-end_454)"
"(loop_415"
" acc_452"
" new-start_453"
" new-end_454"
" ipre_445"
" 0-ok?_451))"
" acc_416"
" start_417"
" end_418"
" m_444)"
"(loop_415"
"((lambda(start_455 ms_456 acc_457)"
"(cons(car ms_456) acc_457))"
" start_417"
" m_444"
" acc_416)"
" mend_450"
" end_418"
" ipre_445"
" 0-ok?_451))))))))))))"
" loop_415)"
" '()"
" start_401"
" end_402"
" ipre_403"
" #t)))))))"
"(let-values(((string_458)"
"(if(path? string_400)"
"(if(let-values(((or-part_459)(string? pattern_399)))"
"(if or-part_459 or-part_459(regexp? pattern_399)))"
"(path->string string_400)"
"(path->bytes string_400))"
" string_400)))"
"(let-values(((len_460)"
"(if(string? string_458)"
"(let-values()(string-length string_458))"
"(if(bytes? string_458)"
"(let-values()(bytes-length string_458))"
"(let-values() #f)))))"
"(let-values(((orig-rx_461)"
"(if(bytes? pattern_399)"
"(let-values()(byte-regexp pattern_399))"
"(if(string? pattern_399)"
"(let-values()(regexp pattern_399))"
"(if(regexp? pattern_399)"
"(let-values() pattern_399)"
"(if(byte-regexp? pattern_399)"
"(let-values() pattern_399)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                                   \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_399))))))))"
"(let-values(((max-lookbehind_462)(regexp-max-lookbehind orig-rx_461)))"
"(begin"
"(if #t"
"(if(input-port? string_458)"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'regexp-match-peek-positions* \"input-port?\" string_458)))"
"(if(let-values(((or-part_463) len_460))"
"(if or-part_463 or-part_463(input-port? string_458)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                       \"(or/c string? bytes? path? input-port?)\""
" string_458))))"
"(if(if(number? start_401)"
"(if(exact? start_401)(if(integer? start_401)(>= start_401 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"exact-nonnegative-integer?\""
" start_401)))"
"(if(let-values(((or-part_464)(not end_402)))"
"(if or-part_464"
" or-part_464"
"(if(number? end_402)"
"(if(exact? end_402)(if(integer? end_402)(>= end_402 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match-peek-positions*"
"                                     \"(or/c exact-nonnegative-integer? #f)\""
" end_402)))"
"(if(bytes? ipre_403)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'regexp-match-peek-positions* \"bytes?\" ipre_403)))"
"(if(let-values(((or-part_465)(input-port? string_458)))"
"(if or-part_465 or-part_465(if len_460(<= start_401 len_460) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"starting offset index out of range [0,~a]: \" len_460)"
" start_401)))"
"(if(let-values(((or-part_466)(not end_402)))"
"(if or-part_466"
" or-part_466"
"(if(<= start_401 end_402)"
"(let-values(((or-part_467)(input-port? string_458)))"
"(if or-part_467 or-part_467(if len_460(<= end_402 len_460) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match-peek-positions*"
"                                     (format \"ending offset index out of range [~a,~a]: \" start_401 len_460)"
" end_402)))"
"(reverse"
"((letrec-values(((loop_468)"
"(lambda(acc_469 start_470 end_471 ipre_472 0-ok?_473)"
"(let-values(((rx_474)"
"(if 0-ok?_473"
" orig-rx_461"
"(no-empty-edge-matches"
" orig-rx_461"
"(add1(bytes-length ipre_472))))))"
"(if(if #f(input-port? string_458) #f)"
"(let-values(((__475)"
"(if(positive? start_470)"
"(let-values()"
"(let-values(((s_476)(make-bytes 4096)))"
"((letrec-values(((loop_477)"
"(lambda(n_478)"
"(if(= n_478 start_470)"
"(void)"
"(let-values()"
"(let-values(((m_479)"
"(read-bytes-avail!"
" s_476"
" string_458"
" 0"
"(min"
"(-"
" start_470"
" n_478)"
" 4096))))"
"(if(eof-object?"
" m_479)"
"(void)"
"(let-values()"
"(loop_477"
"(+"
" n_478"
" m_479))))))))))"
" loop_477)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_480)(if #f #f 0)))"
"(let-values(((spitout_481)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_482"
" start_483"
" end_484"
" flush?_485"
" breakable?_486)"
"(let-values(((c_487)"
"(- end_484 start_483)))"
"(begin"
"(set! discarded/leftovers_480"
"(+ c_487 discarded/leftovers_480))"
" c_487)))"
" void))))"
"(let-values(((end_488)"
"(if end_471(- end_471 start_470) #f)))"
"(let-values(((ms_489 ipre_490)"
"(regexp-match/end"
" rx_474"
" string_458"
" 0"
" end_488"
" spitout_481"
" ipre_472"
" max-lookbehind_462)))"
"(let-values(((m_491)(if ms_489(car ms_489) #f)))"
"(let-values(((discarded/leftovers_492)"
"(if #f"
"(get-output-bytes spitout_481)"
" discarded/leftovers_480)))"
"(let-values(((skipped_493)"
"(if #f"
"(bstring-length"
" discarded/leftovers_492)"
" discarded/leftovers_492)))"
"(let-values(((got_494)"
"(if m_491"
"(bstring-length m_491)"
" #f)))"
"(let-values(((end_495)"
"(if end_488"
"(if m_491"
"(-"
" end_488"
" skipped_493"
" got_494)"
" #f)"
" #f)))"
"(if m_491"
"(let-values(((0-ok?_496)"
"(not(zero? got_494))))"
"(loop_468"
"(#f"
" discarded/leftovers_492"
" ms_489"
" acc_469)"
" 0"
" end_495"
" ipre_490"
" 0-ok?_496))"
"(#f"
" acc_469"
" discarded/leftovers_492))))))))))))"
"(let-values(((m_497 ipre_498)"
"(if #t"
"(regexp-match-peek-positions/end"
" rx_474"
" string_458"
" start_470"
" end_471"
" #f"
" ipre_472"
" max-lookbehind_462)"
"(regexp-match-positions/end"
" rx_474"
" string_458"
" start_470"
" end_471"
" #f"
" ipre_472"
" max-lookbehind_462))))"
"(if(not m_497)"
"((lambda(acc_499 start_500 end_501) acc_499)"
" acc_469"
" start_470"
" end_471)"
"(let-values(((mstart_502)(caar m_497)))"
"(let-values(((mend_503)(cdar m_497)))"
"(let-values(((0-ok?_504)"
"(not(= mstart_502 mend_503))))"
"(if(if #f(input-port? string_458) #f)"
"(#f"
"(lambda(acc_505 new-start_506 new-end_507)"
"(loop_468"
" acc_505"
" new-start_506"
" new-end_507"
" ipre_498"
" 0-ok?_504))"
" acc_469"
" start_470"
" end_471"
" m_497)"
"(loop_468"
"((lambda(start_508 ms_509 acc_510)"
"(cons(match-select_404 ms_509) acc_510))"
" start_470"
" m_497"
" acc_469)"
" mend_503"
" end_471"
" ipre_498"
" 0-ok?_504))))))))))))"
" loop_468)"
" '()"
" start_401"
" end_402"
" ipre_403"
" #t))))))))))))))))))"
"(define-values"
"(unpack47.1)"
"(lambda(given-kws_511"
" given-args_512"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)"
"(let-values(((match-select37_521)(pair? given-kws_511)))"
"(let-values(((match-select36_522)(if match-select37_521(car given-args_512)(void))))"
"(regexp-match-peek-positions*46.1"
" match-select36_522"
" match-select37_521"
" pattern44_513"
" string45_514"
" start38_515"
" end39_516"
" ipre40_517"
" start41_518"
" end42_519"
" ipre43_520)))))"
"(define-values"
"(regexp-match-peek-positions*48.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_523 given-argc_524)"
"(if(if(>= given-argc_524 4)(<= given-argc_524 7) #f)"
"(let-values(((l1_525) given-kws_523))"
"(let-values(((l1_526)(if(null? l1_525) l1_525(if(eq?(car l1_525) '#:match-select)(cdr l1_525) l1_525))))"
"(null? l1_526)))"
" #f))"
"(case-lambda"
"((given-kws_527 given-args_528 pattern_529 string_530)"
"(unpack47.1 given-kws_527 given-args_528 pattern_529 string_530 #f #f #f #f #f #f))"
"((given-kws_531 given-args_532 pattern_533 string_534 start_535 end_536 ipre40_537)"
"(unpack47.1 given-kws_531 given-args_532 pattern_533 string_534 start_535 end_536 ipre40_537 #t #t #t))"
"((given-kws_538 given-args_539 pattern_540 string_541 start_542 end39_543)"
"(unpack47.1 given-kws_538 given-args_539 pattern_540 string_541 start_542 end39_543 #f #t #t #f))"
"((given-kws_544 given-args_545 pattern_546 string_547 start38_548)"
"(unpack47.1 given-kws_544 given-args_545 pattern_546 string_547 start38_548 #f #f #t #f #f)))"
" null"
" '(#:match-select)"
"(let-values(((regexp-match-peek-positions*_549)"
"(case-lambda"
"((pattern_550 string_551)(unpack47.1 null null pattern_550 string_551 #f #f #f #f #f #f))"
"((pattern_552 string_553 start_554 end_555 ipre40_556)"
"(unpack47.1 null null pattern_552 string_553 start_554 end_555 ipre40_556 #t #t #t))"
"((pattern_557 string_558 start_559 end39_560)"
"(unpack47.1 null null pattern_557 string_558 start_559 end39_560 #f #t #t #f))"
"((pattern_561 string_562 start38_563)"
"(unpack47.1 null null pattern_561 string_562 start38_563 #f #f #t #f #f)))))"
" regexp-match-peek-positions*_549)))"
"(define-values"
"(get-buf+sub)"
"(lambda(string_564 pattern_565)"
"(let-values(((buf_566)"
"(if(if(string? string_564)"
"(let-values(((or-part_567)(byte-regexp? pattern_565)))"
"(if or-part_567 or-part_567(bytes? pattern_565)))"
" #f)"
"(string->bytes/utf-8 string_564(char->integer '#\\?))"
" string_564)))"
"(values"
" buf_566"
"(if(let-values(((or-part_568)(bytes? buf_566)))"
"(if or-part_568"
" or-part_568"
"(if(path? string_564)"
"(let-values(((or-part_569)(bytes? pattern_565)))"
"(if or-part_569 or-part_569(byte-regexp? pattern_565)))"
" #f)))"
" subbytes"
" substring)))))"
"(define-values"
"(regexp-split)"
"(let-values(((regexp-split57_570)"
"(lambda(pattern55_571 string56_572 start49_573 end50_574 ipre51_575 start52_576 end53_577 ipre54_578)"
"(let-values(((pattern_579) pattern55_571))"
"(let-values(((string_580) string56_572))"
"(let-values(((start_581)(if start52_576 start49_573 0)))"
"(let-values(((end_582)(if end53_577 end50_574 #f)))"
"                          (let-values (((ipre_583) (if ipre54_578 ipre51_575 #\"\")))"
"(let-values()"
"(let-values(((buf_584 sub_585)(get-buf+sub string_580 pattern_579)))"
"(let-values(((buf_586)"
"(if(path? buf_584)"
"(if(let-values(((or-part_587)(string? pattern_579)))"
"(if or-part_587 or-part_587(regexp? pattern_579)))"
"(path->string buf_584)"
"(path->bytes buf_584))"
" buf_584)))"
"(let-values(((len_588)"
"(if(string? buf_586)"
"(let-values()(string-length buf_586))"
"(if(bytes? buf_586)"
"(let-values()(bytes-length buf_586))"
"(let-values() #f)))))"
"(let-values(((orig-rx_589)"
"(if(bytes? pattern_579)"
"(let-values()(byte-regexp pattern_579))"
"(if(string? pattern_579)"
"(let-values()(regexp pattern_579))"
"(if(regexp? pattern_579)"
"(let-values() pattern_579)"
"(if(byte-regexp? pattern_579)"
"(let-values() pattern_579)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                                             \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_579))))))))"
"(let-values(((max-lookbehind_590)(regexp-max-lookbehind orig-rx_589)))"
"(begin"
"(if #f"
"(if(input-port? buf_586)"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'regexp-split \"input-port?\" buf_586)))"
"(if(let-values(((or-part_591) len_588))"
"(if or-part_591 or-part_591(input-port? buf_586)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                                 \"(or/c string? bytes? path? input-port?)\""
" buf_586))))"
"(if(if(number? start_581)"
"(if(exact? start_581)(if(integer? start_581)(>= start_581 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"exact-nonnegative-integer?\""
" start_581)))"
"(if(let-values(((or-part_592)(not end_582)))"
"(if or-part_592"
" or-part_592"
"(if(number? end_582)"
"(if(exact? end_582)(if(integer? end_582)(>= end_582 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-split"
"                                               \"(or/c exact-nonnegative-integer? #f)\""
" end_582)))"
"(if(bytes? ipre_583)"
"(void)"
"                                            (let-values () (raise-argument-error 'regexp-split \"bytes?\" ipre_583)))"
"(if(let-values(((or-part_593)(input-port? buf_586)))"
"(if or-part_593 or-part_593(if len_588(<= start_581 len_588) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
"                                               (format \"starting offset index out of range [0,~a]: \" len_588)"
" start_581)))"
"(if(let-values(((or-part_594)(not end_582)))"
"(if or-part_594"
" or-part_594"
"(if(<= start_581 end_582)"
"(let-values(((or-part_595)(input-port? buf_586)))"
"(if or-part_595 or-part_595(if len_588(<= end_582 len_588) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-split"
"                                               (format \"ending offset index out of range [~a,~a]: \" start_581 len_588)"
" end_582)))"
"(reverse"
"((letrec-values(((loop_596)"
"(lambda(acc_597 start_598 end_599 ipre_600 0-ok?_601)"
"(let-values(((rx_602)"
"(if 0-ok?_601"
" orig-rx_589"
"(no-empty-edge-matches"
" orig-rx_589"
"(add1(bytes-length ipre_600))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons leftovers acc))"
"(input-port? buf_586)"
" #f)"
"(let-values(((__606)"
"(if(positive? start_598)"
"(let-values()"
"(let-values(((s_607)"
"(make-bytes 4096)))"
"((letrec-values(((loop_608)"
"(lambda(n_609)"
"(if(="
" n_609"
" start_598)"
"(void)"
"(let-values()"
"(let-values(((m_610)"
"(read-bytes-avail!"
" s_607"
" buf_586"
" 0"
"(min"
"(-"
" start_598"
" n_609)"
" 4096))))"
"(if(eof-object?"
" m_610)"
"(void)"
"(let-values()"
"(loop_608"
"(+"
" n_609"
" m_610))))))))))"
" loop_608)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_611)"
"(if #t #f 0)))"
"(let-values(((spitout_612)"
"(if #t"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_613"
" start_614"
" end_615"
" flush?_616"
" breakable?_617)"
"(let-values(((c_618)"
"(-"
" end_615"
" start_614)))"
"(begin"
"(set! discarded/leftovers_611"
"(+"
" c_618"
" discarded/leftovers_611))"
" c_618)))"
" void))))"
"(let-values(((end_619)"
"(if end_599"
"(- end_599 start_598)"
" #f)))"
"(let-values(((ms_620 ipre_621)"
"(regexp-match/end"
" rx_602"
" buf_586"
" 0"
" end_619"
" spitout_612"
" ipre_600"
" max-lookbehind_590)))"
"(let-values(((m_622)"
"(if ms_620(car ms_620) #f)))"
"(let-values(((discarded/leftovers_623)"
"(if #t"
"(get-output-bytes"
" spitout_612)"
" discarded/leftovers_611)))"
"(let-values(((skipped_624)"
"(if #t"
"(bstring-length"
" discarded/leftovers_623)"
" discarded/leftovers_623)))"
"(let-values(((got_625)"
"(if m_622"
"(bstring-length"
" m_622)"
" #f)))"
"(let-values(((end_626)"
"(if end_619"
"(if m_622"
"(-"
" end_619"
" skipped_624"
" got_625)"
" #f)"
" #f)))"
"(if m_622"
"(let-values(((0-ok?_627)"
"(not"
"(zero?"
" got_625))))"
"(loop_596"
"((lambda(leftovers_628"
" ms_629"
" acc_630)"
"(cons"
" leftovers_628"
" acc_630))"
" discarded/leftovers_623"
" ms_620"
" acc_597)"
" 0"
" end_626"
" ipre_621"
" 0-ok?_627))"
"((lambda(acc_631 leftover_632)"
"(if leftover_632"
"(cons"
" leftover_632"
" acc_631)"
" acc_631))"
" acc_597"
" discarded/leftovers_623))))))))))))"
"(let-values(((m_633 ipre_634)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_602"
" buf_586"
" start_598"
" end_599"
" #f"
" ipre_600"
" max-lookbehind_590)"
"(regexp-match-positions/end"
" rx_602"
" buf_586"
" start_598"
" end_599"
" #f"
" ipre_600"
" max-lookbehind_590))))"
"(if(not m_633)"
"((lambda(acc_635 start_636 end_637)"
"(cons"
"(if end_637"
"(sub_585 buf_586 start_636 end_637)"
"(sub_585 buf_586 start_636))"
" acc_635))"
" acc_597"
" start_598"
" end_599)"
"(let-values(((mstart_638)(caar m_633)))"
"(let-values(((mend_639)(cdar m_633)))"
"(let-values(((0-ok?_640)"
"(not(= mstart_638 mend_639))))"
"(if(if #f(input-port? buf_586) #f)"
"(#f"
"(lambda(acc_641"
" new-start_642"
" new-end_643)"
"(loop_596"
" acc_641"
" new-start_642"
" new-end_643"
" ipre_634"
" 0-ok?_640))"
" acc_597"
" start_598"
" end_599"
" m_633)"
"(loop_596"
"((lambda(start_644 ms_645 acc_646)"
"(cons"
"(sub_585"
" buf_586"
" start_644"
"(caar ms_645))"
" acc_646))"
" start_598"
" m_633"
" acc_597)"
" mend_639"
" end_599"
" ipre_634"
" 0-ok?_640))))))))))))"
" loop_596)"
" '()"
" start_581"
" end_582"
" ipre_583"
" #t)))))))))))))))))"
"(case-lambda"
"((pattern_647 string_648)(regexp-split57_570 pattern_647 string_648 #f #f #f #f #f #f))"
"((pattern_649 string_650 start_651 end_652 ipre51_653)"
"(regexp-split57_570 pattern_649 string_650 start_651 end_652 ipre51_653 #t #t #t))"
"((pattern_654 string_655 start_656 end50_657)"
"(regexp-split57_570 pattern_654 string_655 start_656 end50_657 #f #t #t #f))"
"((pattern_658 string_659 start49_660)(regexp-split57_570 pattern_658 string_659 start49_660 #f #f #t #f #f)))))"
"(define-values"
"(-regexp-replace*)"
"(let-values(((regexp-replace*_661)"
"(let-values(((core83_662)"
"(lambda(pattern80_663"
" string81_664"
" orig-replacement82_665"
" start74_666"
" end75_667"
" ipre76_668"
" start77_669"
" end78_670"
" ipre79_671)"
"(let-values(((pattern_672) pattern80_663))"
"(let-values(((string_673) string81_664))"
"(let-values(((orig-replacement_674) orig-replacement82_665))"
"(let-values(((start_675)(if start77_669 start74_666 0)))"
"(let-values(((end_676)(if end78_670 end75_667 #f)))"
"                                          (let-values (((ipre_677) (if ipre79_671 ipre76_668 #\"\")))"
"(let-values()"
"(let-values(((buf_678 sub_679)(get-buf+sub string_673 pattern_672)))"
"(let-values(((needs-string?_680)"
"(if(let-values(((or-part_686)(string? pattern_672)))"
"(if or-part_686 or-part_686(regexp? pattern_672)))"
"(string? string_673)"
" #f)))"
"(let-values(((replacement_681)"
"(if(if(not needs-string?_680)"
"(string? orig-replacement_674)"
" #f)"
"(string->bytes/utf-8 orig-replacement_674)"
" orig-replacement_674)))"
"(let-values(((check_682)"
"(lambda(proc_687 args_688)"
"(let-values(((v_689)(apply proc_687 args_688)))"
"(begin"
"(if(if needs-string?_680"
"(string? v_689)"
"(bytes? v_689))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" '|regexp-replace*(calling given filter procedure)|"
"(if needs-string?_680"
"                                                                               \"expected a string result: \""
"                                                                               \"expected a byte string result: \")"
" v_689)))"
" v_689)))))"
"(let-values(((need-replac?_683)"
"(if(not(procedure? replacement_681))"
"                                                                      (regexp-match? '#rx#\"[\\\\&]\" replacement_681)"
" #f)))"
"(let-values(((replac_684)"
"(lambda(ms_690 str_691)"
"(if need-replac?_683"
"((if(string? str_691)"
" bytes->string/utf-8"
" values)"
"(apply"
" bytes-append"
"(let-values(((str_692)"
"(if(string? str_691)"
"(string->bytes/utf-8"
" str_691)"
" str_691))"
"((get-match_693)"
"(lambda(n_694)"
"(if(<"
" n_694"
"(length ms_690))"
"(let-values(((p_695)"
"(list-ref"
" ms_690"
" n_694)))"
"(let-values(((s_696)"
"(if(pair?"
" p_695)"
"(sub_679"
" buf_678"
"(car"
" p_695)"
"(cdr"
" p_695))"
" p_695)))"
"(if(string? s_696)"
"(string->bytes/utf-8"
" s_696)"
" s_696)))"
"                                                                                              #\"\"))))"
"((letrec-values(((loop_697)"
"(lambda(pos_698)"
"(let-values(((m_699)"
"(regexp-match-positions"
"                                                                                                                 '#rx#\"[\\\\&]\""
" str_692"
" pos_698)))"
"(if m_699"
"(cons"
"(subbytes"
" str_692"
" pos_698"
"(caar m_699))"
"(if(equal?"
"(char->integer"
" '#\\&)"
"(bytes-ref"
" str_692"
"(caar"
" m_699)))"
"(let-values()"
"(cons"
"(get-match_693"
" 0)"
"(loop_697"
"(cdar"
" m_699))))"
"(if(="
"(cdar"
" m_699)"
"(bytes-length"
" str_692))"
"(let-values()"
"(list"
"(get-match_693"
" 0)))"
"(let-values(((c75796_700)"
"(let-values(((next_701)"
"(bytes-ref"
" str_692"
"(cdar"
" m_699))))"
"(let-values(((or-part_702)"
"(if(equal?"
"(char->integer"
" '#\\&)"
" next_701)"
"                                                                                                                                           #\"&\""
" #f)))"
"(if or-part_702"
" or-part_702"
"(let-values(((or-part_703)"
"(if(equal?"
"(char->integer"
" '#\\\\)"
" next_701)"
"                                                                                                                                               #\"\\\\\""
" #f)))"
"(if or-part_703"
" or-part_703"
"(if(equal?"
"(char->integer"
" '#\\$)"
" next_701)"
"                                                                                                                                     #\"\""
" #f))))))))"
"(if c75796_700"
"((lambda(s_704)"
"(cons"
" s_704"
"(loop_697"
"(add1"
"(cdar"
" m_699)))))"
" c75796_700)"
"(let-values()"
"(let-values(((n_705)"
"(regexp-match"
"                                                                                                                                '#rx#\"^[0-9]+\""
" str_692"
"(cdar"
" m_699))))"
"(if n_705"
"(cons"
"(get-match_693"
"(string->number"
"(bytes->string/utf-8"
"(car"
" n_705))))"
"(loop_697"
"(+"
"(cdar"
" m_699)"
"(bytes-length"
"(car"
" n_705)))))"
"(cons"
"(get-match_693"
" 0)"
"(loop_697"
"(cdar"
" m_699)))))))))))"
"(list"
"(subbytes"
" str_692"
" pos_698)))))))"
" loop_697)"
" 0))))"
" str_691))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_706)"
"(string? pattern_672)))"
"(if or-part_706"
" or-part_706"
"(let-values(((or-part_707)"
"(bytes? pattern_672)))"
"(if or-part_707"
" or-part_707"
"(let-values(((or-part_708)"
"(regexp?"
" pattern_672)))"
"(if or-part_708"
" or-part_708"
"(byte-regexp?"
" pattern_672)))))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_709)"
"(string? string_673)))"
"(if or-part_709"
" or-part_709"
"(bytes? string_673)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
"                                                                                     \"(or/c string? bytes?)\""
" string_673)))"
"(if(let-values(((or-part_710)"
"(string?"
" replacement_681)))"
"(if or-part_710"
" or-part_710"
"(let-values(((or-part_711)"
"(bytes?"
" replacement_681)))"
"(if or-part_711"
" or-part_711"
"(procedure?"
" replacement_681)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
"                                                                                     \"(or/c string? bytes? procedure?)\""
" replacement_681)))"
"(if(if needs-string?_680"
"(bytes? replacement_681)"
" #f)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-replace*"
"                                                                                     \"cannot replace a string with a byte string: \""
" replacement_681))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((r_685)"
"(let-values(((buf_712)"
"(if(path? buf_678)"
"(if(let-values(((or-part_713)"
"(string?"
" pattern_672)))"
"(if or-part_713"
" or-part_713"
"(regexp?"
" pattern_672)))"
"(path->string buf_678)"
"(path->bytes buf_678))"
" buf_678)))"
"(let-values(((len_714)"
"(if(string? buf_712)"
"(let-values()"
"(string-length buf_712))"
"(if(bytes? buf_712)"
"(let-values()"
"(bytes-length buf_712))"
"(let-values() #f)))))"
"(let-values(((orig-rx_715)"
"(if(bytes? pattern_672)"
"(let-values()"
"(byte-regexp"
" pattern_672))"
"(if(string? pattern_672)"
"(let-values()"
"(regexp pattern_672))"
"(if(regexp?"
" pattern_672)"
"(let-values()"
" pattern_672)"
"(if(byte-regexp?"
" pattern_672)"
"(let-values()"
" pattern_672)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
"                                                                                                       \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_672))))))))"
"(let-values(((max-lookbehind_716)"
"(regexp-max-lookbehind"
" orig-rx_715)))"
"(begin"
"(if #f"
"(if(input-port? buf_712)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
"                                                                                           \"input-port?\""
" buf_712)))"
"(if(let-values(((or-part_717)"
" len_714))"
"(if or-part_717"
" or-part_717"
"(input-port? buf_712)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
"                                                                                           \"(or/c string? bytes? path? input-port?)\""
" buf_712))))"
"(if(if(number? start_675)"
"(if(exact? start_675)"
"(if(integer? start_675)"
"(>= start_675 0)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
"                                                                                         \"exact-nonnegative-integer?\""
" start_675)))"
"(if(let-values(((or-part_718)"
"(not end_676)))"
"(if or-part_718"
" or-part_718"
"(if(number? end_676)"
"(if(exact? end_676)"
"(if(integer? end_676)"
"(>= end_676 0)"
" #f)"
" #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
"                                                                                         \"(or/c exact-nonnegative-integer? #f)\""
" end_676)))"
"(if(bytes? ipre_677)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-replace*"
"                                                                                         \"bytes?\""
" ipre_677)))"
"(if(let-values(((or-part_719)"
"(input-port?"
" buf_712)))"
"(if or-part_719"
" or-part_719"
"(if len_714"
"(<= start_675 len_714)"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-replace*"
"(format"
"                                                                                          \"starting offset index out of range [0,~a]: \""
" len_714)"
" start_675)))"
"(if(let-values(((or-part_720)"
"(not end_676)))"
"(if or-part_720"
" or-part_720"
"(if(<= start_675 end_676)"
"(let-values(((or-part_721)"
"(input-port?"
" buf_712)))"
"(if or-part_721"
" or-part_721"
"(if len_714"
"(<= end_676 len_714)"
" #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-replace*"
"(format"
"                                                                                          \"ending offset index out of range [~a,~a]: \""
" start_675"
" len_714)"
" end_676)))"
"(reverse"
"((letrec-values(((loop_722)"
"(lambda(acc_723"
" start_724"
" end_725"
" ipre_726"
" 0-ok?_727)"
"(let-values(((rx_728)"
"(if 0-ok?_727"
" orig-rx_715"
"(no-empty-edge-matches"
" orig-rx_715"
"(add1"
"(bytes-length"
" ipre_726))))))"
"(if(if #f"
"(input-port?"
" buf_712)"
" #f)"
"(let-values(((__729)"
"(if(positive?"
" start_724)"
"(let-values()"
"(let-values(((s_730)"
"(make-bytes"
" 4096)))"
"((letrec-values(((loop_731)"
"(lambda(n_732)"
"(if(="
" n_732"
" start_724)"
"(void)"
"(let-values()"
"(let-values(((m_733)"
"(read-bytes-avail!"
" s_730"
" buf_712"
" 0"
"(min"
"(-"
" start_724"
" n_732)"
" 4096))))"
"(if(eof-object?"
" m_733)"
"(void)"
"(let-values()"
"(loop_731"
"(+"
" n_732"
" m_733))))))))))"
" loop_731)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_734)"
"(if #t"
" #f"
" 0)))"
"(let-values(((spitout_735)"
"(if #t"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_736"
" start_737"
" end_738"
" flush?_739"
" breakable?_740)"
"(let-values(((c_741)"
"(-"
" end_738"
" start_737)))"
"(begin"
"(set! discarded/leftovers_734"
"(+"
" c_741"
" discarded/leftovers_734))"
" c_741)))"
" void))))"
"(let-values(((end_742)"
"(if end_725"
"(-"
" end_725"
" start_724)"
" #f)))"
"(let-values(((ms_743"
" ipre_744)"
"(regexp-match/end"
" rx_728"
" buf_712"
" 0"
" end_742"
" spitout_735"
" ipre_726"
" max-lookbehind_716)))"
"(let-values(((m_745)"
"(if ms_743"
"(car"
" ms_743)"
" #f)))"
"(let-values(((discarded/leftovers_746)"
"(if #t"
"(get-output-bytes"
" spitout_735)"
" discarded/leftovers_734)))"
"(let-values(((skipped_747)"
"(if #t"
"(bstring-length"
" discarded/leftovers_746)"
" discarded/leftovers_746)))"
"(let-values(((got_748)"
"(if m_745"
"(bstring-length"
" m_745)"
" #f)))"
"(let-values(((end_749)"
"(if end_742"
"(if m_745"
"(-"
" end_742"
" skipped_747"
" got_748)"
" #f)"
" #f)))"
"(if m_745"
"(let-values(((0-ok?_750)"
"(not"
"(zero?"
" got_748))))"
"(loop_722"
"(#f"
" discarded/leftovers_746"
" ms_743"
" acc_723)"
" 0"
" end_749"
" ipre_744"
" 0-ok?_750))"
"(#f"
" acc_723"
" discarded/leftovers_746))))))))))))"
"(let-values(((m_751"
" ipre_752)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_728"
" buf_712"
" start_724"
" end_725"
" #f"
" ipre_726"
" max-lookbehind_716)"
"(regexp-match-positions/end"
" rx_728"
" buf_712"
" start_724"
" end_725"
" #f"
" ipre_726"
" max-lookbehind_716))))"
"(if(not"
" m_751)"
"((lambda(acc_753"
" start_754"
" end_755)"
"(cons"
"(if end_755"
"(sub_679"
" buf_712"
" start_754"
" end_755)"
"(sub_679"
" buf_712"
" start_754))"
" acc_753))"
" acc_723"
" start_724"
" end_725)"
"(let-values(((mstart_756)"
"(caar"
" m_751)))"
"(let-values(((mend_757)"
"(cdar"
" m_751)))"
"(let-values(((0-ok?_758)"
"(not"
"(="
" mstart_756"
" mend_757))))"
"(if(if #f"
"(input-port?"
" buf_712)"
" #f)"
"(#f"
"(lambda(acc_759"
" new-start_760"
" new-end_761)"
"(loop_722"
" acc_759"
" new-start_760"
" new-end_761"
" ipre_752"
" 0-ok?_758))"
" acc_723"
" start_724"
" end_725"
" m_751)"
"(loop_722"
"((lambda(start_762"
" ms_763"
" acc_764)"
"(list*"
"(if(procedure?"
" replacement_681)"
"(check_682"
" replacement_681"
"(alt-reverse"
"(let-values(((pos->vals_765"
" pos-next_766"
" init_767"
" pos-cont?_768"
" val-cont?_769"
" all-cont?_770)"
"(make-sequence"
" '(m)"
" ms_763)))"
"(begin"
"(void)"
"((letrec-values(((for-loop_771)"
"(lambda(fold-var_772"
" pos_773)"
"(if(if pos-cont?_768"
"(pos-cont?_768"
" pos_773)"
" #t)"
"(let-values(((m_774)"
"(pos->vals_765"
" pos_773)))"
"(if(if val-cont?_769"
"(val-cont?_769"
" m_774)"
" #t)"
"(let-values(((fold-var_775)"
"(let-values(((fold-var_776)"
" fold-var_772))"
"(let-values(((fold-var_777)"
"(let-values()"
"(cons"
"(let-values()"
"(if m_774"
"(sub_679"
" buf_712"
"(car"
" m_774)"
"(cdr"
" m_774))"
" #f))"
" fold-var_776))))"
"(values"
" fold-var_777)))))"
"(if(if all-cont?_770"
"(all-cont?_770"
" pos_773"
" m_774)"
" #t)"
"(for-loop_771"
" fold-var_775"
"(pos-next_766"
" pos_773))"
" fold-var_775))"
" fold-var_772))"
" fold-var_772))))"
" for-loop_771)"
" null"
" init_767)))))"
"(replac_684"
" ms_763"
" replacement_681))"
"(sub_679"
" buf_712"
" start_762"
"(caar"
" ms_763))"
" acc_764))"
" start_724"
" m_751"
" acc_723)"
" mend_757"
" end_725"
" ipre_752"
" 0-ok?_758))))))))))))"
" loop_722)"
" '()"
" start_675"
" end_676"
" ipre_677"
" #t)))))))))"
"(apply"
"(if(bytes? buf_678) bytes-append string-append)"
"(if(if(= start_675 0)(not end_676) #f)"
"(let-values() r_685)"
"(if(not end_676)"
"(let-values()"
"(cons(sub_679 string_673 0 start_675) r_685))"
"(let-values()"
"(list*"
"(sub_679 string_673 0 start_675)"
"(qq-append"
" r_685"
"(list"
"(sub_679"
" string_673"
" end_676))))))))))))))))))))))))))"
"(case-lambda"
"((pattern_778 string_779 orig-replacement_780)"
"(core83_662 pattern_778 string_779 orig-replacement_780 #f #f #f #f #f #f))"
"((pattern_781 string_782 orig-replacement_783 start_784 end_785 ipre76_786)"
"(core83_662 pattern_781 string_782 orig-replacement_783 start_784 end_785 ipre76_786 #t #t #t))"
"((pattern_787 string_788 orig-replacement_789 start_790 end75_791)"
"(core83_662 pattern_787 string_788 orig-replacement_789 start_790 end75_791 #f #t #t #f))"
"((pattern_792 string_793 orig-replacement_794 start74_795)"
"(core83_662 pattern_792 string_793 orig-replacement_794 start74_795 #f #f #t #f #f))))))"
" regexp-replace*_661))"
"(define-values"
"(regexp-match*71.1)"
"(lambda(gap-select?60_796"
" gap-select?62_797"
" match-select59_798"
" match-select61_799"
" pattern69_800"
" string70_801"
" start63_802"
" end64_803"
" ipre65_804"
" start66_805"
" end67_806"
" ipre68_807)"
"(let-values(((pattern_808) pattern69_800))"
"(let-values(((string_809) string70_801))"
"(let-values(((start_810)(if start66_805 start63_802 0)))"
"(let-values(((end_811)(if end67_806 end64_803 #f)))"
"            (let-values (((ipre_812) (if ipre68_807 ipre65_804 #\"\")))"
"(let-values(((match-select_813)(if match-select61_799 match-select59_798 car)))"
"(let-values(((gap-select_814)(if gap-select?62_797 gap-select?60_796 #f)))"
"(let-values()"
"(if(if(not match-select_813)(not gap-select_814) #f)"
"(let-values()"
"(raise"
"(exn:fail:contract"
"                          \"regexp-match*: one of `match-select' or `gap-select' must be non-#f\""
"(current-continuation-marks))))"
"(if(not match-select_813)"
"(let-values()(regexp-split pattern_808 string_809 start_810 end_811 ipre_812))"
"(if(not(procedure? match-select_813))"
"                          (let-values () (raise-argument-error 'regexp-match* \"(or/c procedure? #f)\" match-select_813))"
"(if(not(eq? match-select_813 car))"
"(let-values()"
"(let-values(((buf_815 sub_816)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_817)"
"(if(path? buf_815)"
"(if(let-values(((or-part_818)(string? pattern_808)))"
"(if or-part_818 or-part_818(regexp? pattern_808)))"
"(path->string buf_815)"
"(path->bytes buf_815))"
" buf_815)))"
"(let-values(((len_819)"
"(if(string? buf_817)"
"(let-values()(string-length buf_817))"
"(if(bytes? buf_817)"
"(let-values()(bytes-length buf_817))"
"(let-values() #f)))))"
"(let-values(((orig-rx_820)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                             \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_821)(regexp-max-lookbehind orig-rx_820)))"
"(begin"
"(if #f"
"(if(input-port? buf_817)"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'regexp-explode \"input-port?\" buf_817)))"
"(if(let-values(((or-part_822) len_819))"
"(if or-part_822 or-part_822(input-port? buf_817)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"(or/c string? bytes? path? input-port?)\""
" buf_817))))"
"(if(if(number? start_810)"
"(if(exact? start_810)(if(integer? start_810)(>= start_810 0) #f) #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_823)(not end_811)))"
"(if or-part_823"
" or-part_823"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                               \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                            (let-values () (raise-argument-error 'regexp-explode \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_824)(input-port? buf_817)))"
"(if or-part_824 or-part_824(if len_819(<= start_810 len_819) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                               (format \"starting offset index out of range [0,~a]: \" len_819)"
" start_810)))"
"(if(let-values(((or-part_825)(not end_811)))"
"(if or-part_825"
" or-part_825"
"(if(<= start_810 end_811)"
"(let-values(((or-part_826)(input-port? buf_817)))"
"(if or-part_826 or-part_826(if len_819(<= end_811 len_819) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                               (format \"ending offset index out of range [~a,~a]: \" start_810 len_819)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_827)"
"(lambda(acc_828 start_829 end_830 ipre_831 0-ok?_832)"
"(let-values(((rx_833)"
"(if 0-ok?_832"
" orig-rx_820"
"(no-empty-edge-matches"
" orig-rx_820"
"(add1(bytes-length ipre_831))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app match-select ms)"
"(if gap-select"
"(#%app cons leftovers acc)"
" acc)))"
"(input-port? buf_817)"
" #f)"
"(let-values(((__837)"
"(if(positive? start_829)"
"(let-values()"
"(let-values(((s_838)"
"(make-bytes 4096)))"
"((letrec-values(((loop_839)"
"(lambda(n_840)"
"(if(="
" n_840"
" start_829)"
"(void)"
"(let-values()"
"(let-values(((m_841)"
"(read-bytes-avail!"
" s_838"
" buf_817"
" 0"
"(min"
"(-"
" start_829"
" n_840)"
" 4096))))"
"(if(eof-object?"
" m_841)"
"(void)"
"(let-values()"
"(loop_839"
"(+"
" n_840"
" m_841))))))))))"
" loop_839)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_842)"
"(if gap-select_814 #f 0)))"
"(let-values(((spitout_843)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_844"
" start_845"
" end_846"
" flush?_847"
" breakable?_848)"
"(let-values(((c_849)"
"(-"
" end_846"
" start_845)))"
"(begin"
"(set! discarded/leftovers_842"
"(+"
" c_849"
" discarded/leftovers_842))"
" c_849)))"
" void))))"
"(let-values(((end_850)"
"(if end_830"
"(- end_830 start_829)"
" #f)))"
"(let-values(((ms_851 ipre_852)"
"(regexp-match/end"
" rx_833"
" buf_817"
" 0"
" end_850"
" spitout_843"
" ipre_831"
" max-lookbehind_821)))"
"(let-values(((m_853)"
"(if ms_851(car ms_851) #f)))"
"(let-values(((discarded/leftovers_854)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_843)"
" discarded/leftovers_842)))"
"(let-values(((skipped_855)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_854)"
" discarded/leftovers_854)))"
"(let-values(((got_856)"
"(if m_853"
"(bstring-length"
" m_853)"
" #f)))"
"(let-values(((end_857)"
"(if end_850"
"(if m_853"
"(-"
" end_850"
" skipped_855"
" got_856)"
" #f)"
" #f)))"
"(if m_853"
"(let-values(((0-ok?_858)"
"(not"
"(zero?"
" got_856))))"
"(loop_827"
"((lambda(leftovers_859"
" ms_860"
" acc_861)"
"(cons"
"(match-select_813"
" ms_860)"
"(if gap-select_814"
"(cons"
" leftovers_859"
" acc_861)"
" acc_861)))"
" discarded/leftovers_854"
" ms_851"
" acc_828)"
" 0"
" end_857"
" ipre_852"
" 0-ok?_858))"
"((lambda(acc_862 leftover_863)"
"(if(if gap-select_814"
" leftover_863"
" #f)"
"(cons"
" leftover_863"
" acc_862)"
" acc_862))"
" acc_828"
" discarded/leftovers_854))))))))))))"
"(let-values(((m_864 ipre_865)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_833"
" buf_817"
" start_829"
" end_830"
" #f"
" ipre_831"
" max-lookbehind_821)"
"(regexp-match-positions/end"
" rx_833"
" buf_817"
" start_829"
" end_830"
" #f"
" ipre_831"
" max-lookbehind_821))))"
"(if(not m_864)"
"((lambda(acc_866 start_867 end_868)"
"(if gap-select_814"
"(cons"
"(if end_868"
"(sub_816 buf_817 start_867 end_868)"
"(sub_816 buf_817 start_867))"
" acc_866)"
" acc_866))"
" acc_828"
" start_829"
" end_830)"
"(let-values(((mstart_869)(caar m_864)))"
"(let-values(((mend_870)(cdar m_864)))"
"(let-values(((0-ok?_871)"
"(not(= mstart_869 mend_870))))"
"(if(if #f(input-port? buf_817) #f)"
"(#f"
"(lambda(acc_872"
" new-start_873"
" new-end_874)"
"(loop_827"
" acc_872"
" new-start_873"
" new-end_874"
" ipre_865"
" 0-ok?_871))"
" acc_828"
" start_829"
" end_830"
" m_864)"
"(loop_827"
"((lambda(start_875 ms_876 acc_877)"
"(cons"
"(let-values(((s_878)"
"(match-select_813"
" ms_876)))"
"(if(not(pair? s_878))"
"(let-values() s_878)"
"(if(integer?(car s_878))"
"(let-values()"
"(sub_816"
" buf_817"
"(car s_878)"
"(cdr s_878)))"
"(let-values()"
"(map2"
"(lambda(m_879)"
"(if m_879"
"(sub_816"
" buf_817"
"(car m_879)"
"(cdr m_879))"
" #f))"
" s_878)))))"
"(if gap-select_814"
"(cons"
"(sub_816"
" buf_817"
" start_875"
"(caar ms_876))"
" acc_877)"
" acc_877)))"
" start_829"
" m_864"
" acc_828)"
" mend_870"
" end_830"
" ipre_865"
" 0-ok?_871))))))))))))"
" loop_827)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t)))))))))"
"(if gap-select_814"
"(let-values()"
"(let-values(((buf_880 sub_881)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_882)"
"(if(path? buf_880)"
"(if(let-values(((or-part_883)(string? pattern_808)))"
"(if or-part_883 or-part_883(regexp? pattern_808)))"
"(path->string buf_880)"
"(path->bytes buf_880))"
" buf_880)))"
"(let-values(((len_884)"
"(if(string? buf_882)"
"(let-values()(string-length buf_882))"
"(if(bytes? buf_882)"
"(let-values()(bytes-length buf_882))"
"(let-values() #f)))))"
"(let-values(((orig-rx_885)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                               \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_886)(regexp-max-lookbehind orig-rx_885)))"
"(begin"
"(if #f"
"(if(input-port? buf_882)"
"(void)"
"(let-values()"
"                                                  (raise-argument-error 'regexp-explode \"input-port?\" buf_882)))"
"(if(let-values(((or-part_887) len_884))"
"(if or-part_887 or-part_887(input-port? buf_882)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                   \"(or/c string? bytes? path? input-port?)\""
" buf_882))))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 0) #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_888)(not end_811)))"
"(if or-part_888"
" or-part_888"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-explode"
"                                                 \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                              (let-values () (raise-argument-error 'regexp-explode \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_889)(input-port? buf_882)))"
"(if or-part_889 or-part_889(if len_884(<= start_810 len_884) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                                 (format \"starting offset index out of range [0,~a]: \" len_884)"
" start_810)))"
"(if(let-values(((or-part_890)(not end_811)))"
"(if or-part_890"
" or-part_890"
"(if(<= start_810 end_811)"
"(let-values(((or-part_891)(input-port? buf_882)))"
"(if or-part_891"
" or-part_891"
"(if len_884(<= end_811 len_884) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-explode"
"                                                 (format \"ending offset index out of range [~a,~a]: \" start_810 len_884)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_892)"
"(lambda(acc_893 start_894 end_895 ipre_896 0-ok?_897)"
"(let-values(((rx_898)"
"(if 0-ok?_897"
" orig-rx_885"
"(no-empty-edge-matches"
" orig-rx_885"
"(add1(bytes-length ipre_896))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app"
" cons"
"(#%app car ms)"
"(#%app cons leftovers acc)))"
"(input-port? buf_882)"
" #f)"
"(let-values(((__902)"
"(if(positive? start_894)"
"(let-values()"
"(let-values(((s_903)"
"(make-bytes 4096)))"
"((letrec-values(((loop_904)"
"(lambda(n_905)"
"(if(="
" n_905"
" start_894)"
"(void)"
"(let-values()"
"(let-values(((m_906)"
"(read-bytes-avail!"
" s_903"
" buf_882"
" 0"
"(min"
"(-"
" start_894"
" n_905)"
" 4096))))"
"(if(eof-object?"
" m_906)"
"(void)"
"(let-values()"
"(loop_904"
"(+"
" n_905"
" m_906))))))))))"
" loop_904)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_907)"
"(if gap-select_814 #f 0)))"
"(let-values(((spitout_908)"
"(if gap-select_814"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_909"
" start_910"
" end_911"
" flush?_912"
" breakable?_913)"
"(let-values(((c_914)"
"(-"
" end_911"
" start_910)))"
"(begin"
"(set! discarded/leftovers_907"
"(+"
" c_914"
" discarded/leftovers_907))"
" c_914)))"
" void))))"
"(let-values(((end_915)"
"(if end_895"
"(- end_895 start_894)"
" #f)))"
"(let-values(((ms_916 ipre_917)"
"(regexp-match/end"
" rx_898"
" buf_882"
" 0"
" end_915"
" spitout_908"
" ipre_896"
" max-lookbehind_886)))"
"(let-values(((m_918)"
"(if ms_916"
"(car ms_916)"
" #f)))"
"(let-values(((discarded/leftovers_919)"
"(if gap-select_814"
"(get-output-bytes"
" spitout_908)"
" discarded/leftovers_907)))"
"(let-values(((skipped_920)"
"(if gap-select_814"
"(bstring-length"
" discarded/leftovers_919)"
" discarded/leftovers_919)))"
"(let-values(((got_921)"
"(if m_918"
"(bstring-length"
" m_918)"
" #f)))"
"(let-values(((end_922)"
"(if end_915"
"(if m_918"
"(-"
" end_915"
" skipped_920"
" got_921)"
" #f)"
" #f)))"
"(if m_918"
"(let-values(((0-ok?_923)"
"(not"
"(zero?"
" got_921))))"
"(loop_892"
"((lambda(leftovers_924"
" ms_925"
" acc_926)"
"(cons"
"(car ms_925)"
"(cons"
" leftovers_924"
" acc_926)))"
" discarded/leftovers_919"
" ms_916"
" acc_893)"
" 0"
" end_922"
" ipre_917"
" 0-ok?_923))"
"((lambda(acc_927"
" leftover_928)"
"(if leftover_928"
"(cons"
" leftover_928"
" acc_927)"
" acc_927))"
" acc_893"
" discarded/leftovers_919))))))))))))"
"(let-values(((m_929 ipre_930)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_898"
" buf_882"
" start_894"
" end_895"
" #f"
" ipre_896"
" max-lookbehind_886)"
"(regexp-match-positions/end"
" rx_898"
" buf_882"
" start_894"
" end_895"
" #f"
" ipre_896"
" max-lookbehind_886))))"
"(if(not m_929)"
"((lambda(acc_931 start_932 end_933)"
"(cons"
"(if end_933"
"(sub_881 buf_882 start_932 end_933)"
"(sub_881 buf_882 start_932))"
" acc_931))"
" acc_893"
" start_894"
" end_895)"
"(let-values(((mstart_934)(caar m_929)))"
"(let-values(((mend_935)(cdar m_929)))"
"(let-values(((0-ok?_936)"
"(not"
"(= mstart_934 mend_935))))"
"(if(if #f(input-port? buf_882) #f)"
"(#f"
"(lambda(acc_937"
" new-start_938"
" new-end_939)"
"(loop_892"
" acc_937"
" new-start_938"
" new-end_939"
" ipre_930"
" 0-ok?_936))"
" acc_893"
" start_894"
" end_895"
" m_929)"
"(loop_892"
"((lambda(start_940 ms_941 acc_942)"
"(cons"
"(sub_881"
" buf_882"
"(caar ms_941)"
"(cdar ms_941))"
"(cons"
"(sub_881"
" buf_882"
" start_940"
"(caar ms_941))"
" acc_942)))"
" start_894"
" m_929"
" acc_893)"
" mend_935"
" end_895"
" ipre_930"
" 0-ok?_936))))))))))))"
" loop_892)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t)))))))))"
"(let-values()"
"(let-values(((buf_943 sub_944)(get-buf+sub string_809 pattern_808)))"
"(let-values(((buf_945)"
"(if(path? buf_943)"
"(if(let-values(((or-part_946)(string? pattern_808)))"
"(if or-part_946 or-part_946(regexp? pattern_808)))"
"(path->string buf_943)"
"(path->bytes buf_943))"
" buf_943)))"
"(let-values(((len_947)"
"(if(string? buf_945)"
"(let-values()(string-length buf_945))"
"(if(bytes? buf_945)"
"(let-values()(bytes-length buf_945))"
"(let-values() #f)))))"
"(let-values(((orig-rx_948)"
"(if(bytes? pattern_808)"
"(let-values()(byte-regexp pattern_808))"
"(if(string? pattern_808)"
"(let-values()(regexp pattern_808))"
"(if(regexp? pattern_808)"
"(let-values() pattern_808)"
"(if(byte-regexp? pattern_808)"
"(let-values() pattern_808)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                               \"(or/c regexp? byte-regexp? string? bytes?)\""
" pattern_808))))))))"
"(let-values(((max-lookbehind_949)(regexp-max-lookbehind orig-rx_948)))"
"(begin"
"(if #f"
"(if(input-port? buf_945)"
"(void)"
"(let-values()"
"                                                  (raise-argument-error 'regexp-match* \"input-port?\" buf_945)))"
"(if(let-values(((or-part_950) len_947))"
"(if or-part_950 or-part_950(input-port? buf_945)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                   \"(or/c string? bytes? path? input-port?)\""
" buf_945))))"
"(if(if(number? start_810)"
"(if(exact? start_810)"
"(if(integer? start_810)(>= start_810 0) #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"exact-nonnegative-integer?\""
" start_810)))"
"(if(let-values(((or-part_951)(not end_811)))"
"(if or-part_951"
" or-part_951"
"(if(number? end_811)"
"(if(exact? end_811)(if(integer? end_811)(>= end_811 0) #f) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'regexp-match*"
"                                                 \"(or/c exact-nonnegative-integer? #f)\""
" end_811)))"
"(if(bytes? ipre_812)"
"(void)"
"                                              (let-values () (raise-argument-error 'regexp-match* \"bytes?\" ipre_812)))"
"(if(let-values(((or-part_952)(input-port? buf_945)))"
"(if or-part_952 or-part_952(if len_947(<= start_810 len_947) #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"                                                 (format \"starting offset index out of range [0,~a]: \" len_947)"
" start_810)))"
"(if(let-values(((or-part_953)(not end_811)))"
"(if or-part_953"
" or-part_953"
"(if(<= start_810 end_811)"
"(let-values(((or-part_954)(input-port? buf_945)))"
"(if or-part_954"
" or-part_954"
"(if len_947(<= end_811 len_947) #f)))"
" #f)))"
"(void)"
"(let-values()"
"(raise-mismatch-error"
" 'regexp-match*"
"                                                 (format \"ending offset index out of range [~a,~a]: \" start_810 len_947)"
" end_811)))"
"(reverse"
"((letrec-values(((loop_955)"
"(lambda(acc_956 start_957 end_958 ipre_959 0-ok?_960)"
"(let-values(((rx_961)"
"(if 0-ok?_960"
" orig-rx_948"
"(no-empty-edge-matches"
" orig-rx_948"
"(add1(bytes-length ipre_959))))))"
"(if(if '(lambda(leftovers ms acc)"
"(#%app cons(#%app car ms) acc))"
"(input-port? buf_945)"
" #f)"
"(let-values(((__965)"
"(if(positive? start_957)"
"(let-values()"
"(let-values(((s_966)"
"(make-bytes 4096)))"
"((letrec-values(((loop_967)"
"(lambda(n_968)"
"(if(="
" n_968"
" start_957)"
"(void)"
"(let-values()"
"(let-values(((m_969)"
"(read-bytes-avail!"
" s_966"
" buf_945"
" 0"
"(min"
"(-"
" start_957"
" n_968)"
" 4096))))"
"(if(eof-object?"
" m_969)"
"(void)"
"(let-values()"
"(loop_967"
"(+"
" n_968"
" m_969))))))))))"
" loop_967)"
" 0)))"
"(void))))"
"(let-values(((discarded/leftovers_970)"
"(if #f #f 0)))"
"(let-values(((spitout_971)"
"(if #f"
"(open-output-bytes)"
"(make-output-port"
" 'counter"
" always-evt"
"(lambda(s_972"
" start_973"
" end_974"
" flush?_975"
" breakable?_976)"
"(let-values(((c_977)"
"(-"
" end_974"
" start_973)))"
"(begin"
"(set! discarded/leftovers_970"
"(+"
" c_977"
" discarded/leftovers_970))"
" c_977)))"
" void))))"
"(let-values(((end_978)"
"(if end_958"
"(- end_958 start_957)"
" #f)))"
"(let-values(((ms_979 ipre_980)"
"(regexp-match/end"
" rx_961"
" buf_945"
" 0"
" end_978"
" spitout_971"
" ipre_959"
" max-lookbehind_949)))"
"(let-values(((m_981)"
"(if ms_979"
"(car ms_979)"
" #f)))"
"(let-values(((discarded/leftovers_982)"
"(if #f"
"(get-output-bytes"
" spitout_971)"
" discarded/leftovers_970)))"
"(let-values(((skipped_983)"
"(if #f"
"(bstring-length"
" discarded/leftovers_982)"
" discarded/leftovers_982)))"
"(let-values(((got_984)"
"(if m_981"
"(bstring-length"
" m_981)"
" #f)))"
"(let-values(((end_985)"
"(if end_978"
"(if m_981"
"(-"
" end_978"
" skipped_983"
" got_984)"
" #f)"
" #f)))"
"(if m_981"
"(let-values(((0-ok?_986)"
"(not"
"(zero?"
" got_984))))"
"(loop_955"
"((lambda(leftovers_987"
" ms_988"
" acc_989)"
"(cons"
"(car ms_988)"
" acc_989))"
" discarded/leftovers_982"
" ms_979"
" acc_956)"
" 0"
" end_985"
" ipre_980"
" 0-ok?_986))"
"((lambda(acc_990"
" leftover_991)"
" acc_990)"
" acc_956"
" discarded/leftovers_982))))))))))))"
"(let-values(((m_992 ipre_993)"
"(if #f"
"(regexp-match-peek-positions/end"
" rx_961"
" buf_945"
" start_957"
" end_958"
" #f"
" ipre_959"
" max-lookbehind_949)"
"(regexp-match-positions/end"
" rx_961"
" buf_945"
" start_957"
" end_958"
" #f"
" ipre_959"
" max-lookbehind_949))))"
"(if(not m_992)"
"((lambda(acc_994 start_995 end_996) acc_994)"
" acc_956"
" start_957"
" end_958)"
"(let-values(((mstart_997)(caar m_992)))"
"(let-values(((mend_998)(cdar m_992)))"
"(let-values(((0-ok?_999)"
"(not"
"(= mstart_997 mend_998))))"
"(if(if #f(input-port? buf_945) #f)"
"(#f"
"(lambda(acc_1000"
" new-start_1001"
" new-end_1002)"
"(loop_955"
" acc_1000"
" new-start_1001"
" new-end_1002"
" ipre_993"
" 0-ok?_999))"
" acc_956"
" start_957"
" end_958"
" m_992)"
"(loop_955"
"((lambda(start_1003 ms_1004 acc_1005)"
"(cons"
"(sub_944"
" buf_945"
"(caar ms_1004)"
"(cdar ms_1004))"
" acc_1005))"
" start_957"
" m_992"
" acc_956)"
" mend_998"
" end_958"
" ipre_993"
" 0-ok?_999))))))))))))"
" loop_955)"
" '()"
" start_810"
" end_811"
" ipre_812"
" #t))))))))))))))))))))))))"
"(define-values"
"(unpack72.1)"
"(lambda(given-kws_1006"
" given-args_1007"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)"
"(let-values(((gap-select?62_1016)(if(pair? given-kws_1006)(eq? '#:gap-select?(car given-kws_1006)) #f)))"
"(let-values(((gap-select?60_1017)(if gap-select?62_1016(car given-args_1007)(void)))"
"((given-kws_1018)(if gap-select?62_1016(cdr given-kws_1006) given-kws_1006))"
"((given-args_1019)(if gap-select?62_1016(cdr given-args_1007) given-args_1007)))"
"(let-values(((match-select61_1020)(pair? given-kws_1018)))"
"(let-values(((match-select59_1021)(if match-select61_1020(car given-args_1019)(void))))"
"(regexp-match*71.1"
" gap-select?60_1017"
" gap-select?62_1016"
" match-select59_1021"
" match-select61_1020"
" pattern69_1008"
" string70_1009"
" start63_1010"
" end64_1011"
" ipre65_1012"
" start66_1013"
" end67_1014"
" ipre68_1015)))))))"
"(define-values"
"(regexp-match*73.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_1022 given-argc_1023)"
"(if(if(>= given-argc_1023 4)(<= given-argc_1023 7) #f)"
"(let-values(((l1_1024) given-kws_1022))"
"(let-values(((l1_1025)"
"(if(null? l1_1024) l1_1024(if(eq?(car l1_1024) '#:gap-select?)(cdr l1_1024) l1_1024))))"
"(let-values(((l1_1026) l1_1025))"
"(let-values(((l1_1027)"
"(if(null? l1_1026) l1_1026(if(eq?(car l1_1026) '#:match-select)(cdr l1_1026) l1_1026))))"
"(null? l1_1027)))))"
" #f))"
"(case-lambda"
"((given-kws_1028 given-args_1029 pattern_1030 string_1031)"
"(unpack72.1 given-kws_1028 given-args_1029 pattern_1030 string_1031 #f #f #f #f #f #f))"
"((given-kws_1032 given-args_1033 pattern_1034 string_1035 start_1036 end_1037 ipre65_1038)"
"(unpack72.1 given-kws_1032 given-args_1033 pattern_1034 string_1035 start_1036 end_1037 ipre65_1038 #t #t #t))"
"((given-kws_1039 given-args_1040 pattern_1041 string_1042 start_1043 end64_1044)"
"(unpack72.1 given-kws_1039 given-args_1040 pattern_1041 string_1042 start_1043 end64_1044 #f #t #t #f))"
"((given-kws_1045 given-args_1046 pattern_1047 string_1048 start63_1049)"
"(unpack72.1 given-kws_1045 given-args_1046 pattern_1047 string_1048 start63_1049 #f #f #t #f #f)))"
" null"
" '(#:gap-select? #:match-select)"
"(let-values(((regexp-match*_1050)"
"(case-lambda"
"((pattern_1051 string_1052)(unpack72.1 null null pattern_1051 string_1052 #f #f #f #f #f #f))"
"((pattern_1053 string_1054 start_1055 end_1056 ipre65_1057)"
"(unpack72.1 null null pattern_1053 string_1054 start_1055 end_1056 ipre65_1057 #t #t #t))"
"((pattern_1058 string_1059 start_1060 end64_1061)"
"(unpack72.1 null null pattern_1058 string_1059 start_1060 end64_1061 #f #t #t #f))"
"((pattern_1062 string_1063 start63_1064)"
"(unpack72.1 null null pattern_1062 string_1063 start63_1064 #f #f #t #f #f)))))"
" regexp-match*_1050)))"
"(define-values"
"(regexp-match-exact?)"
"(lambda(p_1065 s_1066)"
"(let-values(((m_1067)(regexp-match-positions p_1065 s_1066)))"
"(if m_1067"
"(if(zero?(caar m_1067))"
"(="
"(cdar m_1067)"
"(if(bytes? s_1066)"
"(let-values()(bytes-length s_1066))"
"(if(let-values(((or-part_1068)(byte-regexp? p_1065)))(if or-part_1068 or-part_1068(bytes? p_1065)))"
"(let-values()(if(path? s_1066)(bytes-length(path->bytes s_1066))(string-utf-8-length s_1066)))"
"(let-values()(if(path? s_1066)(string-length(path->string s_1066))(string-length s_1066))))))"
" #f)"
" #f))))"
"(define-values"
"(regexp-replaces)"
"(lambda(string_1069 replacements_1070)"
"((letrec-values(((loop_1071)"
"(lambda(str_1072 rs_1073)"
"(if(null? rs_1073)"
" str_1072"
"(loop_1071(regexp-replace*(caar rs_1073) str_1072(cadar rs_1073))(cdr rs_1073))))))"
" loop_1071)"
" string_1069"
" replacements_1070)))"
"(define-values(exists-syms) '(error append update can-update replace truncate must-truncate truncate/replace))"
"(define-values"
"(exists-desc)"
"  \"(or/c 'error 'append 'update 'can-update 'replace 'truncate 'must-truncate 'truncate/replace)\")"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_1 for-module?4_2 mode1_3 mode3_4 path5_5)"
"(let-values(((path_6) path5_5))"
"(let-values(((mode_7)(if mode3_4 mode1_3 'binary)))"
"(let-values(((for-module?_8)(if for-module?4_2 for-module?2_1 #f)))"
"(let-values()"
"(begin"
"(if(path-string? path_6)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_6)))"
"(if(memq mode_7 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_7)))"
"(open-input-file path_6 mode_7(if for-module?_8 'module 'none)))))))))"
"(define-values"
"(unpack7.1$5)"
"(lambda(given-kws_9 given-args_10 path5_11)"
"(let-values(((for-module?4_12)(if(pair? given-kws_9)(eq? '#:for-module?(car given-kws_9)) #f)))"
"(let-values(((for-module?2_13)(if for-module?4_12(car given-args_10)(void)))"
"((given-kws_14)(if for-module?4_12(cdr given-kws_9) given-kws_9))"
"((given-args_15)(if for-module?4_12(cdr given-args_10) given-args_10)))"
"(let-values(((mode3_16)(pair? given-kws_14)))"
"(let-values(((mode1_17)(if mode3_16(car given-args_15)(void))))"
"(open-input-file6.1 for-module?2_13 for-module?4_12 mode1_17 mode3_16 path5_11)))))))"
"(define-values"
"(open-input-file8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_18 given-argc_19)"
"(if(= given-argc_19 3)"
"(let-values(((l1_20) given-kws_18))"
"(let-values(((l1_21)(if(null? l1_20) l1_20(if(eq?(car l1_20) '#:for-module?)(cdr l1_20) l1_20))))"
"(let-values(((l1_22) l1_21))"
"(let-values(((l1_23)(if(null? l1_22) l1_22(if(eq?(car l1_22) '#:mode)(cdr l1_22) l1_22))))"
"(null? l1_23)))))"
" #f))"
"(case-lambda((given-kws_24 given-args_25 path_26)(unpack7.1$5 given-kws_24 given-args_25 path_26)))"
" null"
" '(#:for-module? #:mode)"
"(let-values(((open-input-file_27)(case-lambda((path_28)(unpack7.1$5 null null path_28))))) open-input-file_27)))"
"(define-values"
"(open-output-file14.1)"
"(lambda(exists10_29 exists12_30 mode9_31 mode11_32 path13_33)"
"(let-values(((path_34) path13_33))"
"(let-values(((mode_35)(if mode11_32 mode9_31 'binary)))"
"(let-values(((exists_36)(if exists12_30 exists10_29 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_34)"
"(void)"
"                (let-values () (raise-argument-error 'open-output-file \"path-string?\" path_34)))"
"(if(memq mode_35 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-output-file binary-or-text-desc mode_35)))"
"(if(memq exists_36 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-output-file exists-desc exists_36)))"
"(open-output-file path_34 mode_35 exists_36))))))))"
"(define-values"
"(unpack15.1$1)"
"(lambda(given-kws_37 given-args_38 path13_39)"
"(let-values(((exists12_40)(if(pair? given-kws_37)(eq? '#:exists(car given-kws_37)) #f)))"
"(let-values(((exists10_41)(if exists12_40(car given-args_38)(void)))"
"((given-kws_42)(if exists12_40(cdr given-kws_37) given-kws_37))"
"((given-args_43)(if exists12_40(cdr given-args_38) given-args_38)))"
"(let-values(((mode11_44)(pair? given-kws_42)))"
"(let-values(((mode9_45)(if mode11_44(car given-args_43)(void))))"
"(open-output-file14.1 exists10_41 exists12_40 mode9_45 mode11_44 path13_39)))))))"
"(define-values"
"(open-output-file16.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_46 given-argc_47)"
"(if(= given-argc_47 3)"
"(let-values(((l1_48) given-kws_46))"
"(let-values(((l1_49)(if(null? l1_48) l1_48(if(eq?(car l1_48) '#:exists)(cdr l1_48) l1_48))))"
"(let-values(((l1_50) l1_49))"
"(let-values(((l1_51)(if(null? l1_50) l1_50(if(eq?(car l1_50) '#:mode)(cdr l1_50) l1_50))))"
"(null? l1_51)))))"
" #f))"
"(case-lambda((given-kws_52 given-args_53 path_54)(unpack15.1$1 given-kws_52 given-args_53 path_54)))"
" null"
" '(#:exists #:mode)"
"(let-values(((open-output-file_55)(case-lambda((path_56)(unpack15.1$1 null null path_56)))))"
" open-output-file_55)))"
"(define-values"
"(open-input-output-file22.1)"
"(lambda(exists18_57 exists20_58 mode17_59 mode19_60 path21_61)"
"(let-values(((path_62) path21_61))"
"(let-values(((mode_63)(if mode19_60 mode17_59 'binary)))"
"(let-values(((exists_64)(if exists20_58 exists18_57 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_62)"
"(void)"
"                (let-values () (raise-argument-error 'open-input-output-file \"path-string?\" path_62)))"
"(if(memq mode_63 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file binary-or-text-desc mode_63)))"
"(if(memq exists_64 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'open-input-output-file exists-desc exists_64)))"
"(open-input-output-file path_62 mode_63 exists_64))))))))"
"(define-values"
"(unpack23.1)"
"(lambda(given-kws_65 given-args_66 path21_67)"
"(let-values(((exists20_68)(if(pair? given-kws_65)(eq? '#:exists(car given-kws_65)) #f)))"
"(let-values(((exists18_69)(if exists20_68(car given-args_66)(void)))"
"((given-kws_70)(if exists20_68(cdr given-kws_65) given-kws_65))"
"((given-args_71)(if exists20_68(cdr given-args_66) given-args_66)))"
"(let-values(((mode19_72)(pair? given-kws_70)))"
"(let-values(((mode17_73)(if mode19_72(car given-args_71)(void))))"
"(open-input-output-file22.1 exists18_69 exists20_68 mode17_73 mode19_72 path21_67)))))))"
"(define-values"
"(open-input-output-file24.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_74 given-argc_75)"
"(if(= given-argc_75 3)"
"(let-values(((l1_76) given-kws_74))"
"(let-values(((l1_77)(if(null? l1_76) l1_76(if(eq?(car l1_76) '#:exists)(cdr l1_76) l1_76))))"
"(let-values(((l1_78) l1_77))"
"(let-values(((l1_79)(if(null? l1_78) l1_78(if(eq?(car l1_78) '#:mode)(cdr l1_78) l1_78))))"
"(null? l1_79)))))"
" #f))"
"(case-lambda((given-kws_80 given-args_81 path_82)(unpack23.1 given-kws_80 given-args_81 path_82)))"
" null"
" '(#:exists #:mode)"
"(let-values(((open-input-output-file_83)(case-lambda((path_84)(unpack23.1 null null path_84)))))"
" open-input-output-file_83)))"
"(define-values"
"(call-with-input-file29.1)"
"(lambda(mode25_85 mode26_86 path27_87 proc28_88)"
"(let-values(((path_89) path27_87))"
"(let-values(((proc_90) proc28_88))"
"(let-values(((mode_91)(if mode26_86 mode25_85 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_89)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file \"path-string?\" path_89)))"
"(if(if(procedure? proc_90)(procedure-arity-includes? proc_90 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file \"(input-port? . -> . any)\" proc_90)))"
"(if(memq mode_91 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file binary-or-text-desc mode_91)))"
"(call-with-input-file path_89 proc_90 mode_91))))))))"
"(define-values"
"(unpack30.1)"
"(lambda(given-kws_92 given-args_93 path27_94 proc28_95)"
"(let-values(((mode26_96)(pair? given-kws_92)))"
"(let-values(((mode25_97)(if mode26_96(car given-args_93)(void))))"
"(call-with-input-file29.1 mode25_97 mode26_96 path27_94 proc28_95)))))"
"(define-values"
"(call-with-input-file31.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_98 given-argc_99)"
"(if(= given-argc_99 4)"
"(let-values(((l1_100) given-kws_98))"
"(let-values(((l1_101)(if(null? l1_100) l1_100(if(eq?(car l1_100) '#:mode)(cdr l1_100) l1_100))))"
"(null? l1_101)))"
" #f))"
"(case-lambda"
"((given-kws_102 given-args_103 path_104 proc_105)(unpack30.1 given-kws_102 given-args_103 path_104 proc_105)))"
" null"
" '(#:mode)"
"(let-values(((call-with-input-file_106)"
"(case-lambda((path_107 proc_108)(unpack30.1 null null path_107 proc_108)))))"
" call-with-input-file_106)))"
"(define-values"
"(call-with-output-file38.1)"
"(lambda(exists33_109 exists35_110 mode32_111 mode34_112 path36_113 proc37_114)"
"(let-values(((path_115) path36_113))"
"(let-values(((proc_116) proc37_114))"
"(let-values(((mode_117)(if mode34_112 mode32_111 'binary)))"
"(let-values(((exists_118)(if exists35_110 exists33_109 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_115)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file \"path-string?\" path_115)))"
"(if(if(procedure? proc_116)(procedure-arity-includes? proc_116 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file \"(output-port? . -> . any)\" proc_116)))"
"(if(memq mode_117 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file binary-or-text-desc mode_117)))"
"(if(memq exists_118 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file exists-desc exists_118)))"
"(call-with-output-file path_115 proc_116 mode_117 exists_118)))))))))"
"(define-values"
"(unpack39.1)"
"(lambda(given-kws_119 given-args_120 path36_121 proc37_122)"
"(let-values(((exists35_123)(if(pair? given-kws_119)(eq? '#:exists(car given-kws_119)) #f)))"
"(let-values(((exists33_124)(if exists35_123(car given-args_120)(void)))"
"((given-kws_125)(if exists35_123(cdr given-kws_119) given-kws_119))"
"((given-args_126)(if exists35_123(cdr given-args_120) given-args_120)))"
"(let-values(((mode34_127)(pair? given-kws_125)))"
"(let-values(((mode32_128)(if mode34_127(car given-args_126)(void))))"
"(call-with-output-file38.1 exists33_124 exists35_123 mode32_128 mode34_127 path36_121 proc37_122)))))))"
"(define-values"
"(call-with-output-file40.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_129 given-argc_130)"
"(if(= given-argc_130 4)"
"(let-values(((l1_131) given-kws_129))"
"(let-values(((l1_132)(if(null? l1_131) l1_131(if(eq?(car l1_131) '#:exists)(cdr l1_131) l1_131))))"
"(let-values(((l1_133) l1_132))"
"(let-values(((l1_134)(if(null? l1_133) l1_133(if(eq?(car l1_133) '#:mode)(cdr l1_133) l1_133))))"
"(null? l1_134)))))"
" #f))"
"(case-lambda"
"((given-kws_135 given-args_136 path_137 proc_138)(unpack39.1 given-kws_135 given-args_136 path_137 proc_138)))"
" null"
" '(#:exists #:mode)"
"(let-values(((call-with-output-file_139)"
"(case-lambda((path_140 proc_141)(unpack39.1 null null path_140 proc_141)))))"
" call-with-output-file_139)))"
"(define-values"
"(with-input-from-file45.1)"
"(lambda(mode41_142 mode42_143 path43_144 proc44_145)"
"(let-values(((path_146) path43_144))"
"(let-values(((proc_147) proc44_145))"
"(let-values(((mode_148)(if mode42_143 mode41_142 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_146)"
"(void)"
"                (let-values () (raise-argument-error 'with-input-from-file \"path-string?\" path_146)))"
"(if(if(procedure? proc_147)(procedure-arity-includes? proc_147 0) #f)"
"(void)"
"                (let-values () (raise-argument-error 'with-input-from-file \"(-> any)\" proc_147)))"
"(if(memq mode_148 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-input-from-file binary-or-text-desc mode_148)))"
"(with-input-from-file path_146 proc_147 mode_148))))))))"
"(define-values"
"(unpack46.1)"
"(lambda(given-kws_149 given-args_150 path43_151 proc44_152)"
"(let-values(((mode42_153)(pair? given-kws_149)))"
"(let-values(((mode41_154)(if mode42_153(car given-args_150)(void))))"
"(with-input-from-file45.1 mode41_154 mode42_153 path43_151 proc44_152)))))"
"(define-values"
"(with-input-from-file47.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_155 given-argc_156)"
"(if(= given-argc_156 4)"
"(let-values(((l1_157) given-kws_155))"
"(let-values(((l1_158)(if(null? l1_157) l1_157(if(eq?(car l1_157) '#:mode)(cdr l1_157) l1_157))))"
"(null? l1_158)))"
" #f))"
"(case-lambda"
"((given-kws_159 given-args_160 path_161 proc_162)(unpack46.1 given-kws_159 given-args_160 path_161 proc_162)))"
" null"
" '(#:mode)"
"(let-values(((with-input-from-file_163)"
"(case-lambda((path_164 proc_165)(unpack46.1 null null path_164 proc_165)))))"
" with-input-from-file_163)))"
"(define-values"
"(with-output-to-file54.1)"
"(lambda(exists49_166 exists51_167 mode48_168 mode50_169 path52_170 proc53_171)"
"(let-values(((path_172) path52_170))"
"(let-values(((proc_173) proc53_171))"
"(let-values(((mode_174)(if mode50_169 mode48_168 'binary)))"
"(let-values(((exists_175)(if exists51_167 exists49_166 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_172)"
"(void)"
"                  (let-values () (raise-argument-error 'with-output-to-file \"path-string?\" path_172)))"
"(if(if(procedure? proc_173)(procedure-arity-includes? proc_173 0) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'with-output-to-file \"(-> any)\" proc_173)))"
"(if(memq mode_174 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file binary-or-text-desc mode_174)))"
"(if(memq exists_175 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'with-output-to-file exists-desc exists_175)))"
"(with-output-to-file path_172 proc_173 mode_174 exists_175)))))))))"
"(define-values"
"(unpack55.1)"
"(lambda(given-kws_176 given-args_177 path52_178 proc53_179)"
"(let-values(((exists51_180)(if(pair? given-kws_176)(eq? '#:exists(car given-kws_176)) #f)))"
"(let-values(((exists49_181)(if exists51_180(car given-args_177)(void)))"
"((given-kws_182)(if exists51_180(cdr given-kws_176) given-kws_176))"
"((given-args_183)(if exists51_180(cdr given-args_177) given-args_177)))"
"(let-values(((mode50_184)(pair? given-kws_182)))"
"(let-values(((mode48_185)(if mode50_184(car given-args_183)(void))))"
"(with-output-to-file54.1 exists49_181 exists51_180 mode48_185 mode50_184 path52_178 proc53_179)))))))"
"(define-values"
"(with-output-to-file56.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_186 given-argc_187)"
"(if(= given-argc_187 4)"
"(let-values(((l1_188) given-kws_186))"
"(let-values(((l1_189)(if(null? l1_188) l1_188(if(eq?(car l1_188) '#:exists)(cdr l1_188) l1_188))))"
"(let-values(((l1_190) l1_189))"
"(let-values(((l1_191)(if(null? l1_190) l1_190(if(eq?(car l1_190) '#:mode)(cdr l1_190) l1_190))))"
"(null? l1_191)))))"
" #f))"
"(case-lambda"
"((given-kws_192 given-args_193 path_194 proc_195)(unpack55.1 given-kws_192 given-args_193 path_194 proc_195)))"
" null"
" '(#:exists #:mode)"
"(let-values(((with-output-to-file_196)"
"(case-lambda((path_197 proc_198)(unpack55.1 null null path_197 proc_198)))))"
" with-output-to-file_196)))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_199 mode58_200 path59_201 proc60_202)"
"(let-values(((path_203) path59_201))"
"(let-values(((proc_204) proc60_202))"
"(let-values(((mode_205)(if mode58_200 mode57_199 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_203)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_203)))"
"(if(if(procedure? proc_204)(procedure-arity-includes? proc_204 1) #f)"
"(void)"
"                (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_204)))"
"(if(memq mode_205 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_205)))"
"(let-values(((p_206)(open-input-file path_203 mode_205)))"
"(dynamic-wind void(lambda()(proc_204 p_206))(lambda()(close-input-port p_206)))))))))))"
"(define-values"
"(unpack62.1)"
"(lambda(given-kws_207 given-args_208 path59_209 proc60_210)"
"(let-values(((mode58_211)(pair? given-kws_207)))"
"(let-values(((mode57_212)(if mode58_211(car given-args_208)(void))))"
"(call-with-input-file*61.1 mode57_212 mode58_211 path59_209 proc60_210)))))"
"(define-values"
"(call-with-input-file*63.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_213 given-argc_214)"
"(if(= given-argc_214 4)"
"(let-values(((l1_215) given-kws_213))"
"(let-values(((l1_216)(if(null? l1_215) l1_215(if(eq?(car l1_215) '#:mode)(cdr l1_215) l1_215))))"
"(null? l1_216)))"
" #f))"
"(case-lambda"
"((given-kws_217 given-args_218 path_219 proc_220)(unpack62.1 given-kws_217 given-args_218 path_219 proc_220)))"
" null"
" '(#:mode)"
"(let-values(((call-with-input-file*_221)"
"(case-lambda((path_222 proc_223)(unpack62.1 null null path_222 proc_223)))))"
" call-with-input-file*_221)))"
"(define-values"
"(call-with-output-file*70.1)"
"(lambda(exists65_224 exists67_225 mode64_226 mode66_227 path68_228 proc69_229)"
"(let-values(((path_230) path68_228))"
"(let-values(((proc_231) proc69_229))"
"(let-values(((mode_232)(if mode66_227 mode64_226 'binary)))"
"(let-values(((exists_233)(if exists67_225 exists65_224 'error)))"
"(let-values()"
"(begin"
"(if(path-string? path_230)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file* \"path-string?\" path_230)))"
"(if(if(procedure? proc_231)(procedure-arity-includes? proc_231 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-output-file* \"(output-port? . -> . any)\" proc_231)))"
"(if(memq mode_232 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* binary-or-text-desc mode_232)))"
"(if(memq exists_233 exists-syms)"
"(void)"
"(let-values()(raise-argument-error 'call-with-output-file* exists-desc exists_233)))"
"(let-values(((p_234)(open-output-file path_230 mode_232 exists_233)))"
"(dynamic-wind void(lambda()(proc_231 p_234))(lambda()(close-output-port p_234))))))))))))"
"(define-values"
"(unpack71.1)"
"(lambda(given-kws_235 given-args_236 path68_237 proc69_238)"
"(let-values(((exists67_239)(if(pair? given-kws_235)(eq? '#:exists(car given-kws_235)) #f)))"
"(let-values(((exists65_240)(if exists67_239(car given-args_236)(void)))"
"((given-kws_241)(if exists67_239(cdr given-kws_235) given-kws_235))"
"((given-args_242)(if exists67_239(cdr given-args_236) given-args_236)))"
"(let-values(((mode66_243)(pair? given-kws_241)))"
"(let-values(((mode64_244)(if mode66_243(car given-args_242)(void))))"
"(call-with-output-file*70.1 exists65_240 exists67_239 mode64_244 mode66_243 path68_237 proc69_238)))))))"
"(define-values"
"(call-with-output-file*72.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_245 given-argc_246)"
"(if(= given-argc_246 4)"
"(let-values(((l1_247) given-kws_245))"
"(let-values(((l1_248)(if(null? l1_247) l1_247(if(eq?(car l1_247) '#:exists)(cdr l1_247) l1_247))))"
"(let-values(((l1_249) l1_248))"
"(let-values(((l1_250)(if(null? l1_249) l1_249(if(eq?(car l1_249) '#:mode)(cdr l1_249) l1_249))))"
"(null? l1_250)))))"
" #f))"
"(case-lambda"
"((given-kws_251 given-args_252 path_253 proc_254)(unpack71.1 given-kws_251 given-args_252 path_253 proc_254)))"
" null"
" '(#:exists #:mode)"
"(let-values(((call-with-output-file*_255)"
"(case-lambda((path_256 proc_257)(unpack71.1 null null path_256 proc_257)))))"
" call-with-output-file*_255)))"
"(define-values"
"(1/directory-list)"
"(let-values(((core77_258)"
"(lambda(build?73_259 build?74_260 dir75_261 dir76_262)"
"(let-values(((dir_263)(if dir76_262 dir75_261(current-directory))))"
"(let-values(((build?_264)(if build?74_260 build?73_259 #f)))"
"(let-values()"
"(begin"
"(if(path-string? dir_263)"
"(void)"
"                            (let-values () (raise-argument-error 'directory-list \"path-string?\" dir_263)))"
"(let-values(((content_265)(sort(directory-list dir_263) path<?)))"
"(if build?_264"
"(map2(lambda(i_266)(build-path dir_263 i_266)) content_265)"
" content_265)))))))))"
"(let-values(((unpack78_267)"
"(lambda(given-kws_268 given-args_269 dir75_270 dir76_271)"
"(let-values(((build?74_272)(pair? given-kws_268)))"
"(let-values(((build?73_273)(if build?74_272(car given-args_269)(void))))"
"(core77_258 build?73_273 build?74_272 dir75_270 dir76_271))))))"
"(make-optional-keyword-procedure"
"(lambda(given-kws_274 given-argc_275)"
"(if(if(>= given-argc_275 2)(<= given-argc_275 3) #f)"
"(let-values(((l1_276) given-kws_274))"
"(let-values(((l1_277)(if(null? l1_276) l1_276(if(eq?(car l1_276) '#:build?)(cdr l1_276) l1_276))))"
"(null? l1_277)))"
" #f))"
"(case-lambda"
"((given-kws_278 given-args_279)(unpack78_267 given-kws_278 given-args_279 #f #f))"
"((given-kws_280 given-args_281 dir75_282)(unpack78_267 given-kws_280 given-args_281 dir75_282 #t)))"
" null"
" '(#:build?)"
"(let-values(((directory-list_283)"
"(case-lambda"
"(()(unpack78_267 null null #f #f))"
"((dir75_284)(unpack78_267 null null dir75_284 #t)))))"
" directory-list_283)))))"
"(define-values"
"(prop:gen:equal+hash equal+hash? gen:equal+hash-acc)"
"(make-struct-type-property"
" 'prop:gen:equal+hash"
"(lambda(v_1 si_2)"
"(if(if(vector? v_1)"
"(if(= 3(vector-length v_1))"
"(if(procedure?(vector-ref v_1 0))"
"(if(procedure-arity-includes?(vector-ref v_1 0) 3)"
"(if(procedure?(vector-ref v_1 1))"
"(if(procedure-arity-includes?(vector-ref v_1 1) 2)"
"(if(procedure?(vector-ref v_1 2))(procedure-arity-includes?(vector-ref v_1 2) 2) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" v_1"
"(raise-argument-error"
" 'guard-for-prop:gen:equal+hash"
"(string-append"
"         \"(vector/c (procedure-arity-includes/c 3)\\n\""
"         \"          (procedure-arity-includes/c 2)\\n\""
"         \"          (procedure-arity-includes/c 2))\")"
" v_1)))"
"(list(cons prop:equal+hash vector->list))))"
"(define-values(equal-proc-impl)(lambda(a_3 b_4 e_5)(equal? a_3 b_4)))"
"(define-values(hash-proc-impl)(lambda(x_6 h_7)(equal-hash-code x_6)))"
"(define-values(hash2-proc-impl)(lambda(x_8 h_9)(equal-secondary-hash-code x_8)))"
"(define-values"
"(prop:gen:custom-write gen:custom-write? gen:custom-write-acc)"
"(make-struct-type-property"
" 'prop:gen:custom-write"
"(lambda(v_10 si_11)"
"(if(if(vector? v_10)"
"(if(= 1(vector-length v_10))"
"(if(procedure?(vector-ref v_10 0))(procedure-arity-includes?(vector-ref v_10 0) 3) #f)"
" #f)"
" #f)"
" v_10"
"       (raise-argument-error 'guard-for-prop:gen:custom-write \"(vector/c (procedure-arity-includes/c 3))\" v_10)))"
"(list(cons prop:custom-write(lambda(v_12)(vector-ref v_12 0))))))"
"(define-values"
"(write-proc-impl)"
"(lambda(v_13 p_14 w_15)"
"(let-values(((tmp_16) w_15))"
"(if(equal? tmp_16 #t)"
"(let-values()(write v_13 p_14))"
"(if(equal? tmp_16 #f)"
"(let-values()(display v_13 p_14))"
"(if(if(equal? tmp_16 0) #t(equal? tmp_16 1))"
"(let-values()(print v_13 p_14 w_15))"
"            (let-values () (error 'write-proc \"internal error; should not happen\"))))))))"
"(define-values"
"(set)"
"(case-lambda"
"(() '#hash())"
"(l_43"
"(let-values(((lst_44) l_43))"
"(begin"
"(if(list? lst_44)(void)(let-values()(in-list lst_44)))"
"((letrec-values(((for-loop_45)"
"(lambda(s_46 lst_47)"
"(if(pair? lst_47)"
"(let-values(((e_48)(unsafe-car lst_47)))"
"(if #t"
"(let-values(((s_49)"
"(let-values(((s_50) s_46))"
"(let-values(((s_51)(let-values()(hash-set s_50 e_48 #t))))"
"(values s_51)))))"
"(if #t(for-loop_45 s_49(unsafe-cdr lst_47)) s_49))"
" s_46))"
" s_46))))"
" for-loop_45)"
" '#hash()"
" lst_44))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(() '#hasheq())"
"(l_52"
"(let-values(((lst_53) l_52))"
"(begin"
"(if(list? lst_53)(void)(let-values()(in-list lst_53)))"
"((letrec-values(((for-loop_54)"
"(lambda(s_55 lst_56)"
"(if(pair? lst_56)"
"(let-values(((e_57)(unsafe-car lst_56)))"
"(if #t"
"(let-values(((s_58)"
"(let-values(((s_59) s_55))"
"(let-values(((s_60)(let-values()(hash-set s_59 e_57 #t))))"
"(values s_60)))))"
"(if #t(for-loop_54 s_58(unsafe-cdr lst_56)) s_58))"
" s_55))"
" s_55))))"
" for-loop_54)"
" '#hasheq()"
" lst_53))))))"
"(define-values(seteqv)(lambda() '#hasheqv()))"
"(define-values(set?)(lambda(s_61)(hash? s_61)))"
"(define-values(set-empty?)(lambda(s_62)(zero?(hash-count s_62))))"
"(define-values(set-member?)(lambda(s_63 e_64)(hash-ref s_63 e_64 #f)))"
"(define-values(set-count)(lambda(s_65)(hash-count s_65)))"
"(define-values(set-add)(lambda(s_66 e_67)(hash-set s_66 e_67 #t)))"
"(define-values(set-remove)(lambda(s_68 e_69)(hash-remove s_68 e_69)))"
"(define-values(set-first)(lambda(s_70)(hash-iterate-key s_70(hash-iterate-first s_70))))"
"(define-values(subset?$1)(lambda(s1_71 s2_72)(hash-keys-subset? s1_71 s2_72)))"
"(define-values"
"(set=?)"
"(lambda(s1_73 s2_74)(if(=(hash-count s1_73)(hash-count s2_74))(hash-keys-subset? s1_73 s2_74) #f)))"
"(define-values"
"(set-subtract)"
"(lambda(s1_75 s2_76)"
"(let-values(((ht_77) s2_76))"
"(begin"
"(if((lambda(ht_78)(if(hash? ht_78)(immutable? ht_78) #f)) ht_77)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_77)))"
"((letrec-values(((for-loop_79)"
"(lambda(s1_80 i_81)"
"(if i_81"
"(let-values(((k_82)(unsafe-immutable-hash-iterate-key ht_77 i_81)))"
"(if #t"
"(let-values(((s1_83)"
"(let-values(((s1_84) s1_80))"
"(let-values(((s1_85)(let-values()(hash-remove s1_84 k_82))))"
"(values s1_85)))))"
"(if #t(for-loop_79 s1_83(unsafe-immutable-hash-iterate-next ht_77 i_81)) s1_83))"
" s1_80))"
" s1_80))))"
" for-loop_79)"
" s1_75"
"(unsafe-immutable-hash-iterate-first ht_77))))))"
"(define-values"
"(set-union)"
"(lambda(s1_86 s2_87)"
"(if(<(set-count s1_86)(set-count s2_87))"
"(set-union s2_87 s1_86)"
"(let-values(((ht_88) s2_87))"
"(begin"
"(if((lambda(ht_89)(if(hash? ht_89)(immutable? ht_89) #f)) ht_88)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_88)))"
"((letrec-values(((for-loop_90)"
"(lambda(s1_91 i_92)"
"(if i_92"
"(let-values(((k_93)(unsafe-immutable-hash-iterate-key ht_88 i_92)))"
"(if #t"
"(let-values(((s1_94)"
"(let-values(((s1_95) s1_91))"
"(let-values(((s1_96)(let-values()(hash-set s1_95 k_93 #t))))"
"(values s1_96)))))"
"(if #t(for-loop_90 s1_94(unsafe-immutable-hash-iterate-next ht_88 i_92)) s1_94))"
" s1_91))"
" s1_91))))"
" for-loop_90)"
" s1_86"
"(unsafe-immutable-hash-iterate-first ht_88)))))))"
"(define-values"
"(set-partition)"
"(lambda(s_97 pred_98 empty-y-set_99 empty-n-set_100)"
"(let-values(((ht_101) s_97))"
"(begin"
"(if((lambda(ht_102)(if(hash? ht_102)(immutable? ht_102) #f)) ht_101)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_101)))"
"((letrec-values(((for-loop_103)"
"(lambda(y_104 n_105 i_106)"
"(if i_106"
"(let-values(((v_107)(unsafe-immutable-hash-iterate-key ht_101 i_106)))"
"(if #t"
"(let-values(((y_108 n_109)"
"(let-values(((y_110) y_104)((n_111) n_105))"
"(let-values(((y_112 n_113)"
"(let-values()"
"(if(pred_98 v_107)"
"(values(set-add y_110 v_107) n_111)"
"(values y_110(set-add n_111 v_107))))))"
"(values y_112 n_113)))))"
"(if #t"
"(for-loop_103 y_108 n_109(unsafe-immutable-hash-iterate-next ht_101 i_106))"
"(values y_108 n_109)))"
"(values y_104 n_105)))"
"(values y_104 n_105)))))"
" for-loop_103)"
" empty-y-set_99"
" empty-n-set_100"
"(unsafe-immutable-hash-iterate-first ht_101))))))"
"(define-values"
"(set->list)"
"(lambda(s_114)"
"(alt-reverse"
"(let-values(((ht_115) s_114))"
"(begin"
"(if((lambda(ht_116)(if(hash? ht_116)(immutable? ht_116) #f)) ht_115)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_115)))"
"((letrec-values(((for-loop_117)"
"(lambda(fold-var_118 i_119)"
"(if i_119"
"(let-values(((k_120)(unsafe-immutable-hash-iterate-key ht_115 i_119)))"
"(if #t"
"(let-values(((fold-var_121)"
"(let-values(((fold-var_122) fold-var_118))"
"(let-values(((fold-var_123)"
"(let-values()"
"(cons(let-values() k_120) fold-var_122))))"
"(values fold-var_123)))))"
"(if #t"
"(for-loop_117 fold-var_121(unsafe-immutable-hash-iterate-next ht_115 i_119))"
" fold-var_121))"
" fold-var_118))"
" fold-var_118))))"
" for-loop_117)"
" null"
"(unsafe-immutable-hash-iterate-first ht_115)))))))"
"(define-values"
"(list->set)"
"(lambda(l_124)"
"(let-values(((lst_125) l_124))"
"(begin"
"(if(list? lst_125)(void)(let-values()(in-list lst_125)))"
"((letrec-values(((for-loop_126)"
"(lambda(table_127 lst_128)"
"(if(pair? lst_128)"
"(let-values(((k_129)(unsafe-car lst_128)))"
"(if #t"
"(let-values(((table_130)"
"(let-values(((table_131) table_127))"
"(let-values(((table_132)"
"(let-values()"
"(let-values(((key_133 val_134)"
"(let-values()"
"(values(let-values() k_129) #t))))"
"(hash-set table_131 key_133 val_134)))))"
"(values table_132)))))"
"(if #t(for-loop_126 table_130(unsafe-cdr lst_128)) table_130))"
" table_127))"
" table_127))))"
" for-loop_126)"
" '#hash()"
" lst_125)))))"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(define-values"
"(1/module-path?)"
"(lambda(v_1)"
"(let-values(((or-part_2)(if(pair? v_1)(if(eq?(car v_1) 'submod)(submodule-module-path? v_1) #f) #f)))"
"(if or-part_2 or-part_2(root-module-path? v_1)))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_3)"
"(let-values(((or-part_4)(path? v_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(if(string? v_3)(string-module-path? v_3) #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(if(symbol? v_3)(symbol-module-path? v_3) #f)))"
"(if or-part_6"
" or-part_6"
"(if(pair? v_3)"
"(let-values(((tmp_7)(car v_3)))"
"(if(equal? tmp_7 'quote)"
"(let-values()(if(pair?(cdr v_3))(if(symbol?(cadr v_3))(null?(cddr v_3)) #f) #f))"
"(if(equal? tmp_7 'lib)"
"(let-values()(lib-module-path? v_3))"
"(if(equal? tmp_7 'file)"
"(let-values()"
"(if(pair?(cdr v_3))"
"(if(string?(cadr v_3))(if(path-string?(cadr v_3))(null?(cddr v_3)) #f) #f)"
" #f))"
"(if(equal? tmp_7 'planet)(let-values()(planet-module-path? v_3))(let-values() #f))))))"
" #f)))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_8)"
"(if(pair?(cdr v_8))"
"(if(list? v_8)"
"        (if (let-values (((or-part_9) (equal? (cadr v_8) \"..\")))"
"(if or-part_9"
" or-part_9"
"                (let-values (((or-part_10) (equal? (cadr v_8) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_8))))))"
"(let-values(((lst_11)(cddr v_8)))"
"(begin"
"(if(list? lst_11)(void)(let-values()(in-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_13 lst_14)"
"(if(pair? lst_14)"
"(let-values(((e_15)(unsafe-car lst_14)))"
"(if #t"
"(let-values(((result_16)"
"(let-values(((result_17) result_13))"
"(let-values(((result_18)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_19)"
"                                                                                        (equal? e_15 \"..\")))"
"(if or-part_19"
" or-part_19"
"(symbol? e_15)))))))"
"(values result_18)))))"
"(if(if #t(not((lambda x_20(not result_16)) e_15)) #f)"
"(for-loop_12 result_16(unsafe-cdr lst_14))"
" result_16))"
" result_13))"
" result_13))))"
" for-loop_12)"
" #t"
" lst_11)))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(string-module-path?)"
"(lambda(v_21)"
"(let-values(((...arse-module-path.rkt:44:2_22) module-path-string?12.1)"
"((v13_23) v_21)"
"((temp14_24) #t)"
"((temp15_25) #t)"
"((temp16_26) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 temp14_24 #t temp16_26 #t #f #f temp15_25 #t v13_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:44:2_22"
" keyword-procedure-extract"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:dots-dir-ok? #:file-end-ok? #:just-file-ok?)"
"(list temp14_24 temp16_26 temp15_25)"
" v13_23)))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_27)"
"(let-values(((temp17_28)(symbol->string v_27)))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f #f #f #f #f #f #f temp17_28)"
"(module-path-string?12.1 temp17_28)))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_29)"
"(if(list? v_29)"
"(if(pair?(cdr v_29))"
"((letrec-values(((loop_30)"
"(lambda(v_31 first?_32)"
"(let-values(((or-part_33)(null? v_31)))"
"(if or-part_33"
" or-part_33"
"(if(string?(car v_31))"
"(if(let-values(((...arse-module-path.rkt:55:18_34) module-path-string?12.1)"
"((temp18_35)(car v_31))"
"((first?19_36) first?_32)"
"((first?20_37) first?_32))"
"(if(variable-reference-constant?"
"(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f first?20_37 #t #f #f first?19_36 #t temp18_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:55:18_34"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list first?20_37 first?19_36)"
" temp18_35)))"
"(loop_30(cdr v_31) #f)"
" #f)"
" #f))))))"
" loop_30)"
"(cdr v_29)"
" #t)"
" #f)"
" #f)))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_38)"
"(if(list? v_38)"
"(let-values(((tmp_39)(length v_38)))"
"(if(equal? tmp_39 1)"
"(let-values() #f)"
"(if(equal? tmp_39 2)"
"(let-values()"
"(let-values(((e_40)(cadr v_38)))"
"(if(string? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:68:12_41) module-path-string?12.1)"
"((e21_42) e_40)"
"((temp22_43) #t)"
"((temp23_44) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f temp23_44 #t temp22_43 #t #f #f e21_42)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:68:12_41"
" keyword-procedure-extract"
" '(#:file-end-ok? #:for-planet?)"
" 3)"
" '(#:file-end-ok? #:for-planet?)"
"(list temp23_44 temp22_43)"
" e21_42))))"
"(if(symbol? e_40)"
"(let-values()"
"(let-values(((...arse-module-path.rkt:72:12_45) module-path-string?12.1)"
"((temp24_46)(symbol->string e_40))"
"((temp25_47) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f #f #f temp25_47 #t #f #f temp24_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:72:12_45"
" keyword-procedure-extract"
" '(#:for-planet?)"
" 3)"
" '(#:for-planet?)"
"(list temp25_47)"
" temp24_46))))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_48)(cadr v_38)))"
"(let-values(((pkg_49)(caddr v_38)))"
"(let-values(((subs_50)(cdddr v_38)))"
"(if file_48"
"(if(let-values(((...arse-module-path.rkt:80:15_51) module-path-string?12.1)"
"((file26_52) file_48)"
"((temp27_53) #t)"
"((temp28_54) #t))"
"(if(variable-reference-constant?(#%variable-reference module-path-string?12.1))"
"(module-path-string?10.1 #f #f temp28_54 #t #f #f temp27_53 #t file26_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...arse-module-path.rkt:80:15_51"
" keyword-procedure-extract"
" '(#:file-end-ok? #:just-file-ok?)"
" 3)"
" '(#:file-end-ok? #:just-file-ok?)"
"(list temp28_54 temp27_53)"
" file26_52)))"
"(if(if(list? pkg_49)"
"(if(<= 2(length pkg_49) 4)"
"(if(planet-user/pkg-string?(car pkg_49))"
"(if(planet-user/pkg-string?(cadr pkg_49))"
"(let-values(((or-part_55)(null?(cddr pkg_49))))"
"(if or-part_55"
" or-part_55"
"(let-values(((or-part_56)(planet-version-number?(caddr pkg_49))))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_57)(null?(cddr pkg_49))))"
"(if or-part_57"
" or-part_57"
"(planet-version-minor-spec?(cadddr pkg_49))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_58) subs_50))"
"(begin"
"(if(list? lst_58)(void)(let-values()(in-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_60 lst_61)"
"(if(pair? lst_61)"
"(let-values(((sub_62)(unsafe-car lst_61)))"
"(if #t"
"(let-values(((result_63)"
"(let-values(((result_64) result_60))"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_66)"
" sub_62))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path-string?12.1))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sub29_66)"
"(module-path-string?12.1"
" sub29_66)))))))"
"(values result_65)))))"
"(if(if #t(not((lambda x_67(not result_63)) sub_62)) #f)"
"(for-loop_59 result_63(unsafe-cdr lst_61))"
" result_63))"
" result_60))"
" result_60))))"
" for-loop_59)"
" #t"
" lst_58)))"
" #f)"
" #f)"
" #f))))))))"
" #f)))"
"(define-values(planet-version-number?)(lambda(v_68)(exact-nonnegative-integer? v_68)))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_69)"
"(let-values(((or-part_70)(planet-version-number? v_69)))"
"(if or-part_70"
" or-part_70"
"(if(pair? v_69)"
"(if(list? v_69)"
"(if(= 2(length v_69))"
"(let-values(((tmp_71)(car v_69)))"
"(if(if(equal? tmp_71 '=) #t(if(equal? tmp_71 '+) #t(equal? tmp_71 '-)))"
"(let-values()(planet-version-number?(cadr v_69)))"
"(let-values()(if(planet-version-number?(car v_69))(planet-version-number?(cadr v_69)) #f))))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_72"
" dots-dir-ok?6_73"
" file-end-ok?4_74"
" file-end-ok?8_75"
" for-planet?1_76"
" for-planet?5_77"
" just-file-ok?3_78"
" just-file-ok?7_79"
" v9_80)"
"(let-values(((v_81) v9_80))"
"(let-values(((for-planet?_82)(if for-planet?5_77 for-planet?1_76 #f)))"
"(let-values(((dots-dir-ok?_83)(if dots-dir-ok?6_73 dots-dir-ok?2_72 #f)))"
"(let-values(((just-file-ok?_84)(if just-file-ok?7_79 just-file-ok?3_78 #f)))"
"(let-values(((file-end-ok?_85)(if file-end-ok?8_75 file-end-ok?4_74 #f)))"
"(let-values()"
"(let-values(((len_86)(string-length v_81)))"
"(if(positive? len_86)"
"(if(not(char=? '#\\/(string-ref v_81 0)))"
"(if(not(char=? '#\\/(string-ref v_81(sub1 len_86))))"
"(let-values(((start-package-version-pos_87 end-package-version-pos_88)"
"(if for-planet?_82(check-planet-part v_81 len_86)(values 0 0))))"
"(if start-package-version-pos_87"
"((letrec-values(((loop_89)"
"(lambda(i_90 prev-was-slash?_91 saw-slash?_92 saw-dot?_93)"
"(if(not(zero? i_90))"
"(let-values()"
"(let-values(((c_94)(string-ref v_81 i_90)))"
"(if(char=? c_94 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_91)"
"(loop_89(sub1 i_90) #t #t saw-dot?_93)"
" #f))"
"(if(char=? c_94 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_90) len_86)"
"(if(not(char=?(string-ref v_81(add1 i_90)) '#\\/))"
"(not(char=?(string-ref v_81(add1 i_90)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_92)"
"(loop_89(sub1 i_90) #f saw-slash?_92 #t)"
" #f)"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93)))"
"(if(let-values(((or-part_95)(plain-char? c_94)))"
"(if or-part_95"
" or-part_95"
"(if(char=? c_94 '#\\%)"
"(if(<(+ i_90 2) len_86)"
"(hex-sequence? v_81(add1 i_90))"
" #f)"
" #f)))"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(if(if(>= i_90 start-package-version-pos_87)"
"(< i_90 end-package-version-pos_88)"
" #f)"
"(let-values()"
"(loop_89(sub1 i_90) #f saw-slash?_92 saw-dot?_93))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_84)"
"(if saw-dot?_93(not saw-slash?_92) #f)"
" #f))"
"(let-values(((or-part_96) dots-dir-ok?_83))"
"(if or-part_96"
" or-part_96"
"((letrec-values(((loop_97)"
"(lambda(i_98)"
"(if(= i_98 len_86)"
"(let-values() #t)"
"(if(char=?(string-ref v_81 i_98) '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_99)"
"(="
" len_86"
"(add1 i_98))))"
"(if or-part_99"
" or-part_99"
"(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_81"
"(add1 i_98))"
" '#\\.)"
"(let-values(((or-part_100)"
"(="
" len_86"
"(+"
" i_98"
" 2))))"
"(if or-part_100"
" or-part_100"
"(char=?"
"(string-ref"
" v_81"
"(+ i_98 2))"
" '#\\/)))"
" #f))"
"(loop_97"
"((letrec-values(((loop_101)"
"(lambda(i_102)"
"(if(char=?"
" '#\\."
"(string-ref"
" v_81"
" i_102))"
"(loop_101"
"(add1"
" i_102))"
" i_102))))"
" loop_101)"
" i_98))"
" #f)"
" #f))"
"(let-values()"
"(loop_97(add1 i_98))))))))"
" loop_97)"
" 0)))"
" #f))))))"
" loop_89)"
"(sub1 len_86)"
" #f"
"(not file-end-ok?_85)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f))))))))))"
"(define-values"
"(unpack11.1)"
"(lambda(given-kws_103 given-args_104 v9_105)"
"(let-values(((dots-dir-ok?6_106)(if(pair? given-kws_103)(eq? '#:dots-dir-ok?(car given-kws_103)) #f)))"
"(let-values(((dots-dir-ok?2_107)(if dots-dir-ok?6_106(car given-args_104)(void)))"
"((given-kws_108)(if dots-dir-ok?6_106(cdr given-kws_103) given-kws_103))"
"((given-args_109)(if dots-dir-ok?6_106(cdr given-args_104) given-args_104)))"
"(let-values(((file-end-ok?8_110)(if(pair? given-kws_108)(eq? '#:file-end-ok?(car given-kws_108)) #f)))"
"(let-values(((file-end-ok?4_111)(if file-end-ok?8_110(car given-args_109)(void)))"
"((given-kws_112)(if file-end-ok?8_110(cdr given-kws_108) given-kws_108))"
"((given-args_113)(if file-end-ok?8_110(cdr given-args_109) given-args_109)))"
"(let-values(((for-planet?5_114)(if(pair? given-kws_112)(eq? '#:for-planet?(car given-kws_112)) #f)))"
"(let-values(((for-planet?1_115)(if for-planet?5_114(car given-args_113)(void)))"
"((given-kws_116)(if for-planet?5_114(cdr given-kws_112) given-kws_112))"
"((given-args_117)(if for-planet?5_114(cdr given-args_113) given-args_113)))"
"(let-values(((just-file-ok?7_118)(pair? given-kws_116)))"
"(let-values(((just-file-ok?3_119)(if just-file-ok?7_118(car given-args_117)(void))))"
"(module-path-string?10.1"
" dots-dir-ok?2_107"
" dots-dir-ok?6_106"
" file-end-ok?4_111"
" file-end-ok?8_110"
" for-planet?1_115"
" for-planet?5_114"
" just-file-ok?3_119"
" just-file-ok?7_118"
" v9_105)))))))))))"
"(define-values"
"(module-path-string?12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_120 given-argc_121)"
"(if(= given-argc_121 3)"
"(let-values(((l1_122) given-kws_120))"
"(let-values(((l1_123)(if(null? l1_122) l1_122(if(eq?(car l1_122) '#:dots-dir-ok?)(cdr l1_122) l1_122))))"
"(let-values(((l1_124) l1_123))"
"(let-values(((l1_125)"
"(if(null? l1_124) l1_124(if(eq?(car l1_124) '#:file-end-ok?)(cdr l1_124) l1_124))))"
"(let-values(((l1_126) l1_125))"
"(let-values(((l1_127)"
"(if(null? l1_126) l1_126(if(eq?(car l1_126) '#:for-planet?)(cdr l1_126) l1_126))))"
"(let-values(((l1_128) l1_127))"
"(let-values(((l1_129)"
"(if(null? l1_128)"
" l1_128"
"(if(eq?(car l1_128) '#:just-file-ok?)(cdr l1_128) l1_128))))"
"(null? l1_129)))))))))"
" #f))"
"(case-lambda((given-kws_130 given-args_131 v_132)(unpack11.1 given-kws_130 given-args_131 v_132)))"
" null"
" '(#:dots-dir-ok? #:file-end-ok? #:for-planet? #:just-file-ok?)"
"(let-values(((module-path-string?_133)(case-lambda((v_134)(unpack11.1 null null v_134)))))"
" module-path-string?_133)))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_135)"
"(if(string? v_135)"
"(let-values(((len_136)(string-length v_135)))"
"(if(positive? len_136)"
"(let-values(((vec_137 len_138)"
"(let-values(((vec_140) v_135))"
"(begin"
"(if(string? vec_140)(void)(let-values()(in-string vec_140)))"
"(values vec_140(string-length vec_140)))))"
"((start_139) 0))"
"(begin"
" #f"
"(if(exact-nonnegative-integer? start_139)(void)(let-values()(in-naturals start_139)))"
"((letrec-values(((for-loop_141)"
"(lambda(result_142 pos_143 pos_144)"
"(if(if(unsafe-fx< pos_143 len_138) #t #f)"
"(let-values(((c_145)(string-ref vec_137 pos_143))((i_146) pos_144))"
"(if(if #t #t #f)"
"(let-values(((result_147)"
"(let-values(((result_148) result_142))"
"(let-values(((result_149)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_150)"
"(plain-char? c_145)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_151)"
"(char=? '#\\. c_145)))"
"(if or-part_151"
" or-part_151"
"(if(char=? '#\\% c_145)"
"(if(< i_146(- len_136 2))"
"(hex-sequence? v_135(add1 i_146))"
" #f)"
" #f)))))))))"
"(values result_149)))))"
"(if(if(if #t(not((lambda x_152(not result_147)) c_145)) #f)"
"(if #t(not((lambda x_153(not result_147)) i_146)) #f)"
" #f)"
"(for-loop_141 result_147(unsafe-fx+ 1 pos_143)(+ pos_144 1))"
" result_147))"
" result_142))"
" result_142))))"
" for-loop_141)"
" #t"
" 0"
" start_139)))"
" #f))"
" #f)))"
"(define-values"
"(plain-char?)"
"(lambda(c_154)"
"(let-values(((or-part_155)(char<=? '#\\a c_154 '#\\z)))"
"(if or-part_155"
" or-part_155"
"(let-values(((or-part_156)(char<=? '#\\A c_154 '#\\Z)))"
"(if or-part_156"
" or-part_156"
"(let-values(((or-part_157)(char<=? '#\\0 c_154 '#\\9)))"
"(if or-part_157"
" or-part_157"
"(let-values(((or-part_158)(char=? '#\\- c_154)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_159)(char=? '#\\_ c_154)))"
"(if or-part_159 or-part_159(char=? '#\\+ c_154)))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_160 i_161)"
"(let-values(((c1_162)(string-ref s_160 i_161)))"
"(let-values(((c2_163)(string-ref s_160(add1 i_161))))"
"(if(hex-char? c1_162)"
"(if(hex-char? c2_163)"
"(let-values(((c_164)(integer->char(+(*(hex-char->integer c1_162) 16)(hex-char->integer c2_163)))))"
"(not(plain-char? c_164)))"
" #f)"
" #f)))))"
"(define-values"
"(hex-char?)"
"(lambda(c_165)"
"(let-values(((or-part_166)(char<=? '#\\a c_165 '#\\f)))(if or-part_166 or-part_166(char<=? '#\\0 c_165 '#\\9)))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_167)"
"(if(char<=? '#\\a c_167 '#\\f)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_167 '#\\F)"
"(let-values()(-(char->integer c_167)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_167)(char->integer '#\\0)))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_168 len_169)"
"(let-values(((start-package-version-pos_170 end-package-version-pos_171 colon1-pos_172 colon2-pos_173)"
"((letrec-values(((loop_174)"
"(lambda(j_175"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179)"
"(if(= j_175 len_169)"
"(let-values()"
"(values"
" start-package-version-pos_176"
"(let-values(((or-part_180) end-package-version-pos_177))"
"(if or-part_180 or-part_180 j_175))"
" colon1-pos_178"
" colon2-pos_179))"
"(let-values()"
"(let-values(((tmp_181)(string-ref v_168 j_175)))"
"(if(equal? tmp_181 '#\\/)"
"(let-values()"
"(loop_174"
"(add1 j_175)"
"(let-values(((or-part_182) start-package-version-pos_176))"
"(if or-part_182 or-part_182(add1 j_175)))"
"(if start-package-version-pos_176"
"(let-values(((or-part_183) end-package-version-pos_177))"
"(if or-part_183 or-part_183 j_175))"
" #f)"
" colon1-pos_178"
" colon2-pos_179))"
"(if(equal? tmp_181 '#\\:)"
"(let-values()"
"(if colon2-pos_179"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_178"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" j_175))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" j_175"
" #f)))))"
"(let-values()"
"(loop_174"
"(add1 j_175)"
" start-package-version-pos_176"
" end-package-version-pos_177"
" colon1-pos_178"
" colon2-pos_179))))))))))"
" loop_174)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_170"
"(if(> end-package-version-pos_171 start-package-version-pos_170)"
"(let-values(((or-part_184)(not colon2-pos_173)))"
"(if or-part_184 or-part_184(<(add1 colon2-pos_173) end-package-version-pos_171)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_172"
"(let-values()"
"(let-values(((colon1-end_185)"
"(let-values(((or-part_186) colon2-pos_173))"
"(if or-part_186 or-part_186 end-package-version-pos_171))))"
"(if(if(integer-sequence? v_168(add1 colon1-pos_172) colon1-end_185)"
"(let-values(((or-part_187)(not colon2-pos_173)))"
"(if or-part_187"
" or-part_187"
"(let-values(((tmp_188)(string-ref v_168(add1 colon2-pos_173))))"
"(if(equal? tmp_188 '#\\=)"
"(let-values()(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))"
"(if(if(equal? tmp_188 '#\\>) #t(equal? tmp_188 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_173) end-package-version-pos_171)"
"(char=? '#\\=(string-ref v_168(+ colon2-pos_173 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_168(+ 3 colon2-pos_173) end-package-version-pos_171))"
"(let-values()"
"(integer-sequence? v_168(+ 2 colon2-pos_173) end-package-version-pos_171))))"
"(let-values()"
"(integer-range-sequence?"
" v_168"
"(add1 colon2-pos_173)"
" end-package-version-pos_171)))))))"
" #f)"
"(let-values()(values colon1-pos_172 end-package-version-pos_171))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_189 start_190 end_191)"
"(if(< start_190 end_191)"
"(let-values(((start_192) start_190)((end_193) end_191)((inc_194) 1))"
"(begin"
"(if(if(real? start_192)(if(real? end_193)(real? inc_194) #f) #f)"
"(void)"
"(let-values()(in-range start_192 end_193 inc_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(result_196 pos_197)"
"(if(< pos_197 end_193)"
"(let-values(((i_198) pos_197))"
"(if #t"
"(let-values(((result_199)"
"(let-values(((result_200) result_196))"
"(let-values(((result_201)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_189 i_198) '#\\9)))))"
"(values result_201)))))"
"(if(if #t(not((lambda x_202(not result_199)) i_198)) #f)"
"(for-loop_195 result_199(+ pos_197 inc_194))"
" result_199))"
" result_196))"
" result_196))))"
" for-loop_195)"
" #t"
" start_192)))"
" #f)))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_203 start_204 end_205)"
"(if(< start_204 end_205)"
"(if(let-values(((start_206) start_204)((end_207) end_205)((inc_208) 1))"
"(begin"
"(if(if(real? start_206)(if(real? end_207)(real? inc_208) #f) #f)"
"(void)"
"(let-values()(in-range start_206 end_207 inc_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(result_210 pos_211)"
"(if(< pos_211 end_207)"
"(let-values(((i_212) pos_211))"
"(if #t"
"(let-values(((result_213)"
"(let-values(((result_214) result_210))"
"(let-values(((result_215)"
"(let-values()"
"(let-values()"
"(let-values(((c_216)"
"(string-ref s_203 i_212)))"
"(let-values(((or-part_217)"
"(char=? c_216 '#\\-)))"
"(if or-part_217"
" or-part_217"
"(char<=? '#\\0 c_216 '#\\9))))))))"
"(values result_215)))))"
"(if(if #t(not((lambda x_218(not result_213)) i_212)) #f)"
"(for-loop_209 result_213(+ pos_211 inc_208))"
" result_213))"
" result_210))"
" result_210))))"
" for-loop_209)"
" #t"
" start_206)))"
"(>="
" 1"
"(let-values(((start_219) start_204)((end_220) end_205)((inc_221) 1))"
"(begin"
"(if(if(real? start_219)(if(real? end_220)(real? inc_221) #f) #f)"
"(void)"
"(let-values()(in-range start_219 end_220 inc_221)))"
"((letrec-values(((for-loop_222)"
"(lambda(result_223 pos_224)"
"(if(< pos_224 end_220)"
"(let-values(((i_225) pos_224))"
"(if #t"
"(let-values(((result_226)"
"(let-values(((result_227) result_223))"
"(let-values(((result_228)"
"(let-values()"
"(+"
" result_227"
"(let-values()"
"(if(char=?(string-ref s_203 i_225) '#\\-)"
" 1"
" 0))))))"
"(values result_228)))))"
"(if #t(for-loop_222 result_226(+ pos_224 inc_221)) result_226))"
" result_223))"
" result_223))))"
" for-loop_222)"
" 0"
" start_219))))"
" #f)"
" #f)))"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(r_22 ser_23 state_24)"
"(list 'deserialize-resolved-module-path(ser_23(1/resolved-module-path-name r_22)))))"
"(cons"
" prop:custom-write"
"(lambda(r_25 port_26 mode_27)"
"(begin"
"                       (if mode_27 (let-values () (write-string \"#<resolved-module-path:\" port_26)) (void))"
"                       (fprintf port_26 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_25)))"
"                       (if mode_27 (let-values () (write-string \">\" port_26)) (void))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'name))))"
"(define-values(deserialize-resolved-module-path)(lambda(n_28)(1/make-resolved-module-path n_28)))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_29)"
"(if(path? p_29)"
"      (let-values () (string-append \"\\\"\" (path->string p_29) \"\\\"\"))"
"(if(symbol? p_29)"
"        (let-values () (format \"'~s\" p_29))"
"(let-values()"
"(format"
"           \"(submod ~a~a)\""
"(format-resolved-module-path-name(car p_29))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((pos->vals_30 pos-next_31 init_32 pos-cont?_33 val-cont?_34 all-cont?_35)"
"(make-sequence '(i)(cdr p_29))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_36)"
"(lambda(fold-var_37 pos_38)"
"(if(if pos-cont?_33(pos-cont?_33 pos_38) #t)"
"(let-values(((i_39)(pos->vals_30 pos_38)))"
"(if(if val-cont?_34(val-cont?_34 i_39) #t)"
"(let-values(((fold-var_40)"
"(let-values(((fold-var_41) fold-var_37))"
"(let-values(((fold-var_42)"
"(let-values()"
"(cons"
"                                                                            (let-values () (format \" ~s\" i_39))"
" fold-var_41))))"
"(values fold-var_42)))))"
"(if(if all-cont?_35(all-cont?_35 pos_38 i_39) #t)"
"(for-loop_36 fold-var_40(pos-next_31 pos_38))"
" fold-var_40))"
" fold-var_37))"
" fold-var_37))))"
" for-loop_36)"
" null"
" init_32)))))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_43)"
"(let-values(((name_44)(1/resolved-module-path-name r_43)))(if(pair? name_44)(car name_44) name_44))))"
"(define-values(resolved-module-paths)(make-weak-hash))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_45)"
"(begin"
"(if(let-values(((or-part_46)(symbol? p_45)))"
"(if or-part_46"
" or-part_46"
"(let-values(((or-part_47)(if(path? p_45)(complete-path? p_45) #f)))"
"(if or-part_47"
" or-part_47"
"(if(pair? p_45)"
"(if(pair?(cdr p_45))"
"(if(list? p_45)"
"(if(let-values(((or-part_48)(symbol?(car p_45))))"
"(if or-part_48 or-part_48(if(path?(car p_45))(complete-path?(car p_45)) #f)))"
"(let-values(((lst_49)(cdr p_45)))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(result_51 lst_52)"
"(if(pair? lst_52)"
"(let-values(((s_53)(unsafe-car lst_52)))"
"(if #t"
"(let-values(((result_54)"
"(let-values(((result_55) result_51))"
"(let-values(((result_56)"
"(let-values()"
"(let-values()"
"(symbol? s_53)))))"
"(values result_56)))))"
"(if(if #t(not((lambda x_57(not result_54)) s_53)) #f)"
"(for-loop_50 result_54(unsafe-cdr lst_52))"
" result_54))"
" result_51))"
" result_51))))"
" for-loop_50)"
" #t"
" lst_49)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"            \"(or/c symbol?\\n\""
"            \"      (and/c path? complete-path?)\\n\""
"            \"      (cons/c (or/c symbol?\\n\""
"            \"                    (and/c path? complete-path?))\\n\""
"            \"              (non-empty-listof symbol?)))\")"
" p_45)))"
"(let-values(((or-part_58)"
"(let-values(((e_59)(hash-ref resolved-module-paths p_45 #f)))"
"(if e_59(ephemeron-value e_59) #f))))"
"(if or-part_58"
" or-part_58"
"(let-values(((r_60)(resolved-module-path1.1 p_45)))"
"(begin(hash-set! resolved-module-paths p_45(make-ephemeron p_45 r_60)) r_60)))))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_61)"
"(let-values(((name_62)(1/resolved-module-path-name r_61)))"
"(let-values(((root-name_63)(if(pair? name_62)(car name_62) name_62)))"
"(let-values(((root-mod-path_64)(if(path? root-name_63) root-name_63(list 'quote root-name_63))))"
"(if(pair? name_62)(list* 'submod root-mod-path_64(cdr name_62)) root-mod-path_64))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!)"
"(let-values(((struct:_65 make-_66 ?_67 -ref_68 -set!_69)"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(r_101 port_102 mode_103)"
"(begin"
"                       (write-string \"#<module-path-index\" port_102)"
"(if(top-level-module-path-index? r_101)"
"                         (let-values () (fprintf port_102 \":top-level\"))"
"(if(module-path-index-path r_101)"
"(let-values()"
"(let-values(((l_104)"
"((letrec-values(((loop_105)"
"(lambda(r_106)"
"(if(not r_106)"
"(let-values() null)"
"(if(module-path-index-path r_106)"
"(let-values()"
"(cons"
"                                                                      (format \"~.s\" (module-path-index-path r_106))"
"(loop_105(module-path-index-base r_106))))"
"(if(module-path-index-resolved r_106)"
"(let-values()"
"(list"
"                                                                        \"+\""
"(format"
"                                                                         \"~a\""
"(module-path-index-resolved r_106))))"
"(let-values() null)))))))"
" loop_105)"
" r_101)))"
"(fprintf"
" port_102"
"                                \":~.a\""
"(apply"
" string-append"
"(car l_104)"
"(alt-reverse"
"(let-values(((lst_107)(cdr l_104)))"
"(begin"
"(if(list? lst_107)(void)(let-values()(in-list lst_107)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_109 lst_110)"
"(if(pair? lst_110)"
"(let-values(((i_111)(unsafe-car lst_110)))"
"(if #t"
"(let-values(((fold-var_112)"
"(let-values(((fold-var_113)"
" fold-var_109))"
"(let-values(((fold-var_114)"
"(let-values()"
"(cons"
"(let-values()"
"                                                                                                   (format \" ~a\" i_111))"
" fold-var_113))))"
"(values fold-var_114)))))"
"(if #t"
"(for-loop_108 fold-var_112(unsafe-cdr lst_110))"
" fold-var_112))"
" fold-var_109))"
" fold-var_109))))"
" for-loop_108)"
" null"
" lst_107))))))))"
"(if(module-path-index-resolved r_101)"
"                             (let-values () (fprintf port_102 \"=~a\" (module-path-index-resolved r_101)))"
"(void))))"
"                       (write-string \">\" port_102))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_115 b_116 eql?_117)"
"(if(eql?_117(module-path-index-path a_115)(module-path-index-path b_116))"
"(eql?_117(module-path-index-base a_115)(module-path-index-base b_116))"
" #f))"
"(lambda(a_118 hash-code_119)"
"(+(hash-code_119(module-path-index-path a_118))(hash-code_119(module-path-index-base a_118))))"
"(lambda(a_120 hash-code_121)"
"(+"
"(hash-code_121(module-path-index-path a_120))"
"(hash-code_121(module-path-index-base a_120)))))))"
"(current-inspector)"
" #f"
" '(0 1 3)"
" #f"
" 'module-path-index)))"
"(values"
" struct:_65"
" make-_66"
" ?_67"
"(make-struct-field-accessor -ref_68 0 'path)"
"(make-struct-field-accessor -ref_68 1 'base)"
"(make-struct-field-accessor -ref_68 2 'resolved)"
"(make-struct-field-accessor -ref_68 3 'shift-cache)"
"(make-struct-field-mutator -set!_69 2 'resolved))))"
"(define-values"
"(1/deserialize-module-path-index)"
"(case-lambda"
"((path_122 base_123)(1/module-path-index-join path_122 base_123))"
"((name_124)(make-self-module-path-index(1/make-resolved-module-path name_124)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_125)"
"(lambda(mpi5_126 load?3_127 load?4_128)"
"(let-values(((mpi_129) mpi5_126))"
"(let-values(((load?_130)(if load?4_128 load?3_127 #f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_129)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_129)))"
"(let-values(((or-part_131)(module-path-index-resolved mpi_129)))"
"(if or-part_131"
" or-part_131"
"(let-values(((mod-name_132)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_129)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_129)"
" load?_130)"
" #f"
" load?_130)))"
"(begin"
"(if(1/resolved-module-path? mod-name_132)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                       \"current module name resolver's result is not a resolved module path\""
"                                       \"result\""
" mod-name_132)))"
"(set-module-path-index-resolved! mpi_129 mod-name_132)"
" mod-name_132)))))))))))"
"(case-lambda"
"((mpi_133)(module-path-index-resolve6_125 mpi_133 #f #f))"
"((mpi_134 load?3_135)(module-path-index-resolve6_125 mpi_134 load?3_135 #t)))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_136)"
"(lambda(mod-path10_137 base11_138 submod8_139 submod9_140)"
"(let-values(((mod-path_141) mod-path10_137))"
"(let-values(((base_142) base11_138))"
"(let-values(((submod_143)(if submod9_140 submod8_139 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_144)(not mod-path_141)))"
"(if or-part_144 or-part_144(1/module-path? mod-path_141)))"
"(void)"
"(let-values()"
"                                (raise-argument-error 'module-path-index-join \"(or/c #f module-path?)\" mod-path_141)))"
"(if(let-values(((or-part_145)(not base_142)))"
"(if or-part_145"
" or-part_145"
"(let-values(((or-part_146)(1/resolved-module-path? base_142)))"
"(if or-part_146 or-part_146(1/module-path-index? base_142)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f resolved-module-path? module-path-index?)\""
" base_142)))"
"(if(let-values(((or-part_147)(not submod_143)))"
"(if or-part_147"
" or-part_147"
"(if(pair? submod_143)(if(list? submod_143)(andmap2 symbol? submod_143) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                 \"(or/c #f (non-empty-listof symbol?))\""
" submod_143)))"
"(if(if(not mod-path_141) base_142 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f path with non-#f base\""
"                                 \"given base\""
" base_142))"
"(void))"
"(if(if submod_143 mod-path_141 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                 \"cannot combine #f submodule list with non-#f module path\""
"                                 \"given module path\""
" mod-path_141"
"                                 \"given submodule list\""
" submod_143))"
"(void))"
"(if submod_143"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_143))))"
"(let-values()"
"(let-values(((keep-base_148)"
"(if(path? mod-path_141)"
"(let-values() #f)"
"(if(if(pair? mod-path_141)(eq? 'quote(car mod-path_141)) #f)"
"(let-values() #f)"
"(if(symbol? mod-path_141)"
"(let-values() #f)"
"(let-values() base_142))))))"
"(module-path-index2.1 mod-path_141 keep-base_148 #f(make-shift-cache)))))))))))))"
"(case-lambda"
"((mod-path_149 base_150)(module-path-index-join12_136 mod-path_149 base_150 #f #f))"
"((mod-path_151 base_152 submod8_153)(module-path-index-join12_136 mod-path_151 base_152 submod8_153 #t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_154 load?_155)"
"(if(1/module-path-index? base_154)(1/module-path-index-resolve base_154 load?_155) base_154)))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_156)"
"(begin"
"(if(1/module-path-index? mpi_156)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_156)))"
"(values(module-path-index-path mpi_156)(module-path-index-base mpi_156)))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_157)"
"(begin"
"(if(1/module-path-index? mpi_157)"
"(void)"
"        (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_157)))"
"(if(not(module-path-index-path mpi_157))"
"(let-values(((r_158)(module-path-index-resolved mpi_157)))"
"(if r_158(let-values(((p_159)(1/resolved-module-path-name r_158)))(if(pair? p_159)(cdr p_159) #f)) #f))"
" #f))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_160)(module-path-index2.1 #f #f name_160(make-shift-cache)))"
"((name_161 enclosing_162)"
"(make-self-module-path-index"
"(let-values(((name23_163) name_161)"
"((temp24_164)(if enclosing_162(1/module-path-index-resolve enclosing_162) #f)))"
"(if(variable-reference-constant?(#%variable-reference build-module-name20.1))"
"(build-module-name18.1 #f #f name23_163 temp24_164)"
"(build-module-name20.1 name23_163 temp24_164)))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_165)"
"(let-values(((r_166)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_165))))"
"(let-values(((or-part_167)"
"(let-values(((e_168)(hash-ref generic-self-mpis r_166 #f)))"
"(if e_168(ephemeron-value e_168) #f))))"
"(if or-part_167"
" or-part_167"
"(let-values(((mpi_169)(module-path-index2.1 #f #f r_166(make-shift-cache))))"
"(begin(hash-set! generic-self-mpis r_166(make-ephemeron r_166 mpi_169)) mpi_169)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_170)"
"(let-values(((name_171)(1/resolved-module-path-name r_170)))"
"(1/make-resolved-module-path"
"(if(symbol? name_171) generic-module-name(cons generic-module-name(cdr name_171)))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_172)"
"(let-values(((r_173)(module-path-index-resolved mpi_172)))"
"(if r_173"
"(let-values()"
"(set-module-path-index-resolved! mpi_172(resolved-module-path-to-generic-resolved-module-path r_173)))"
"(void)))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_174 from-mpi_175 to-mpi_176)"
"(if(eq? mpi_174 from-mpi_175)"
"(let-values() to-mpi_176)"
"(let-values()"
"(let-values(((base_177)(module-path-index-base mpi_174)))"
"(if(not base_177)"
"(let-values() mpi_174)"
"(let-values()"
"(let-values(((shifted-base_178)(module-path-index-shift base_177 from-mpi_175 to-mpi_176)))"
"(if(eq? shifted-base_178 base_177)"
"(let-values() mpi_174)"
"(let-values(((c89336_179)"
"(shift-cache-ref(module-path-index-shift-cache shifted-base_178) mpi_174)))"
"(if c89336_179"
" c89336_179"
"(let-values()"
"(let-values(((shifted-mpi_180)"
"(module-path-index2.1"
"(module-path-index-path mpi_174)"
" shifted-base_178"
" #f"
"(make-shift-cache))))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache shifted-base_178) mpi_174 shifted-mpi_180)"
" shifted-mpi_180))))))))))))))"
"(define-values(make-shift-cache)(lambda()(make-weak-hasheq)))"
"(define-values(shift-cache-ref)(lambda(cache_181 v_182)(hash-ref cache_181 v_182 #f)))"
"(define-values(shift-cache-set!)(lambda(cache_183 v_184 r_185)(hash-set! cache_183 v_184 r_185)))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_186)(eq? top-level-module-path-index mpi_186)))"
"(define-values"
"(resolve-module-path)"
"(lambda(mod-path_187 base_188)((1/current-module-name-resolver) mod-path_187 base_188 #f #t)))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
"(case-lambda"
"((name_189 from-namespace_190)(void))"
"((p_191 enclosing_192 source-stx-stx_193 load?_194)"
"(begin"
"(if(1/module-path? p_191)"
"(void)"
"         (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_191)))"
"(if(let-values(((or-part_195)(not enclosing_192)))"
"(if or-part_195 or-part_195(1/resolved-module-path? enclosing_192)))"
"(void)"
"         (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_192)))"
"(if(if(list? p_191)(if(=(length p_191) 2)(if(eq? 'quote(car p_191))(symbol?(cadr p_191)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_191)))"
"         (if (if (list? p_191) (if (eq? 'submod (car p_191)) (equal? \"..\" (cadr p_191)) #f) #f)"
"(let-values()"
"(let-values(((lst_196)(cdr p_191)))"
"(begin"
"(if(list? lst_196)(void)(let-values()(in-list lst_196)))"
"((letrec-values(((for-loop_197)"
"(lambda(enclosing_198 lst_199)"
"(if(pair? lst_199)"
"(let-values(((s_200)(unsafe-car lst_199)))"
"(if #t"
"(let-values(((enclosing_201)"
"(let-values(((enclosing_202) enclosing_198))"
"(let-values(((enclosing_203)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:337:10_204)"
" build-module-name20.1)"
"((s25_205) s_200)"
"((enclosing26_206)"
" enclosing_202)"
"((p27_207) p_191))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p27_207"
" #t"
" s25_205"
" enclosing26_206)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:337:10_204"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p27_207)"
" s25_205"
" enclosing26_206))))))"
"(values enclosing_203)))))"
"(if #t(for-loop_197 enclosing_201(unsafe-cdr lst_199)) enclosing_201))"
" enclosing_198))"
" enclosing_198))))"
" for-loop_197)"
" enclosing_192"
" lst_196))))"
"           (if (if (list? p_191) (if (eq? 'submod (car p_191)) (equal? \".\" (cadr p_191)) #f) #f)"
"(let-values()"
"(let-values(((lst_208)(cddr p_191)))"
"(begin"
"(if(list? lst_208)(void)(let-values()(in-list lst_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(enclosing_210 lst_211)"
"(if(pair? lst_211)"
"(let-values(((s_212)(unsafe-car lst_211)))"
"(if #t"
"(let-values(((enclosing_213)"
"(let-values(((enclosing_214) enclosing_210))"
"(let-values(((enclosing_215)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:342:10_216)"
" build-module-name20.1)"
"((s28_217) s_212)"
"((enclosing29_218)"
" enclosing_214)"
"((p30_219) p_191))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p30_219"
" #t"
" s28_217"
" enclosing29_218)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:342:10_216"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p30_219)"
" s28_217"
" enclosing29_218))))))"
"(values enclosing_215)))))"
"(if #t(for-loop_209 enclosing_213(unsafe-cdr lst_211)) enclosing_213))"
" enclosing_210))"
" enclosing_210))))"
" for-loop_209)"
" enclosing_192"
" lst_208))))"
"(if(if(list? p_191)(eq? 'submod(car p_191)) #f)"
"(let-values()"
"(let-values(((base_220)((1/current-module-name-resolver)(cadr p_191) enclosing_192 #f #f)))"
"(let-values(((lst_221)(cddr p_191)))"
"(begin"
"(if(list? lst_221)(void)(let-values()(in-list lst_221)))"
"((letrec-values(((for-loop_222)"
"(lambda(enclosing_223 lst_224)"
"(if(pair? lst_224)"
"(let-values(((s_225)(unsafe-car lst_224)))"
"(if #t"
"(let-values(((enclosing_226)"
"(let-values(((enclosing_227) enclosing_223))"
"(let-values(((enclosing_228)"
"(let-values()"
"(let-values(((...mmon/module-path.rkt:347:12_229)"
" build-module-name20.1)"
"((s31_230) s_225)"
"((enclosing32_231)"
" enclosing_227)"
"((p33_232) p_191))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" build-module-name20.1))"
"(build-module-name18.1"
" p33_232"
" #t"
" s31_230"
" enclosing32_231)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...mmon/module-path.rkt:347:12_229"
" keyword-procedure-extract"
" '(#:original)"
" 4)"
" '(#:original)"
"(list p33_232)"
" s31_230"
" enclosing32_231))))))"
"(values enclosing_228)))))"
"(if #t"
"(for-loop_222 enclosing_226(unsafe-cdr lst_224))"
" enclosing_226))"
" enclosing_223))"
" enclosing_223))))"
" for-loop_222)"
" base_220"
" lst_221)))))"
"               (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_191)))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_233 original15_234 name16_235 enclosing17_236)"
"(let-values(((name_237) name16_235))"
"(let-values(((enclosing_238) enclosing17_236))"
"(let-values(((orig-name_239)(if original15_234 original14_233 name_237)))"
"(let-values()"
"(let-values(((enclosing-module-name_240)"
"(if enclosing_238(1/resolved-module-path-name enclosing_238) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_240)"
"(let-values() name_237)"
"(if(symbol? enclosing-module-name_240)"
"(let-values()(list enclosing-module-name_240 name_237))"
"                   (if (equal? name_237 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_240)"
"                         (let-values () (error \"too many \\\"..\\\"s:\" orig-name_239))"
"(if(= 2(length enclosing-module-name_240))"
"(let-values()(car enclosing-module-name_240))"
"(let-values()(alt-reverse(cdr(alt-reverse enclosing-module-name_240)))))))"
"(let-values()(append enclosing-module-name_240(list name_237))))))))))))))"
"(define-values"
"(unpack19.1)"
"(lambda(given-kws_241 given-args_242 name16_243 enclosing17_244)"
"(let-values(((original15_245)(pair? given-kws_241)))"
"(let-values(((original14_246)(if original15_245(car given-args_242)(void))))"
"(build-module-name18.1 original14_246 original15_245 name16_243 enclosing17_244)))))"
"(define-values"
"(build-module-name20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_247 given-argc_248)"
"(if(= given-argc_248 4)"
"(let-values(((l1_249) given-kws_247))"
"(let-values(((l1_250)(if(null? l1_249) l1_249(if(eq?(car l1_249) '#:original)(cdr l1_249) l1_249))))"
"(null? l1_250)))"
" #f))"
"(case-lambda"
"((given-kws_251 given-args_252 name_253 enclosing_254)"
"(unpack19.1 given-kws_251 given-args_252 name_253 enclosing_254)))"
" null"
" '(#:original)"
"(let-values(((build-module-name_255)"
"(case-lambda((name_256 enclosing_257)(unpack19.1 null null name_256 enclosing_257)))))"
" build-module-name_255)))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_258)"
"(begin"
"(if(let-values(((or-part_259)(not r_258)))(if or-part_259 or-part_259(1/resolved-module-path? r_258)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_258)))"
" r_258))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_260)"
"(begin"
"(if(let-values(((or-part_261)(not s_260)))"
"(if or-part_261"
" or-part_261"
"(let-values(((or-part_262)(symbol? s_260)))"
"(if or-part_262 or-part_262(if(path? s_260)(complete-path? s_260) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-declare-source"
"            \"(or/c #f symbol? (and/c path? complete-path?))\""
" s_260)))"
" s_260))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_263)"
"(let-values(((current-name_264)(1/current-module-declare-name)))"
"(let-values(((root-name_265)"
"(if current-name_264"
"(resolved-module-path-root-name current-name_264)"
"(if(pair? default-name_263)(car default-name_263) default-name_263))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_263)(cons root-name_265(cdr default-name_263)) root-name_265))))))"
"(define-values"
"(force/composable)"
"(lambda(root_98)"
"(let-values(((v_99)(unsafe-struct-ref root_98 0)))"
"(if(procedure? v_99)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_98 0(make-running(object-name v_99)))"
"(call-with-exception-handler"
"(lambda(e_100)(begin(unsafe-struct-set! root_98 0(make-reraise e_100)) e_100))"
"(lambda()"
"((letrec-values(((loop_101)"
"(lambda(v_102)"
"(if(composable-promise? v_102)"
"(let-values()"
"(let-values(((v*_103)(unsafe-struct-ref v_102 0)))"
"(begin"
"(unsafe-struct-set! v_102 0 root_98)"
"(if(procedure? v*_103)"
"(let-values()(loop_101(v*_103)))"
"(if(pair? v*_103)"
"(let-values()"
"(begin(unsafe-struct-set! root_98 0 v*_103)(unsafe-car v*_103)))"
"(let-values()(loop_101 v*_103)))))))"
"(if(promise? v_102)"
"(let-values()(begin(unsafe-struct-set! root_98 0 v_102)(force v_102)))"
"(let-values()(begin(unsafe-struct-set! root_98 0(list v_102)) v_102)))))))"
" loop_101)"
"(v_99))))))"
"(if(pair? v_99)"
"(let-values()(if(null?(unsafe-cdr v_99))(unsafe-car v_99)(apply values v_99)))"
"(if(composable-promise? v_99)"
"(let-values()(force/composable v_99))"
"(if(null? v_99)"
"(let-values()(values))"
"(if(promise? v_99)"
"(let-values()(force v_99))"
"                (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_99))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_104)"
"(if(pair? v_104)"
"(let-values()(if(null?(unsafe-cdr v_104))(unsafe-car v_104)(apply values v_104)))"
"(if(null? v_104)"
"(let-values()(values))"
"(if(reraise? v_104)"
"(let-values()(v_104))"
"          (let-values () (error 'force \"promise with invalid contents: ~e\" v_104)))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_105)"
"(reify-result"
"(let-values(((v_106)(unsafe-struct-ref promise_105 0)))"
"(if(procedure? v_106)"
"(begin"
"(unsafe-struct-set! promise_105 0(make-running(object-name v_106)))"
"(call-with-exception-handler"
"(lambda(e_107)(begin(unsafe-struct-set! promise_105 0(make-reraise e_107)) e_107))"
"(lambda()"
"(let-values(((vs_108)(call-with-values v_106 list)))"
"(begin(unsafe-struct-set! promise_105 0 vs_108) vs_108)))))"
" v_106)))))"
"(define-values"
"(force)"
"(lambda(promise_109)(if(promise? promise_109)((promise-forcer promise_109) promise_109) promise_109)))"
"(define-values"
"(promise-printer)"
"(lambda(promise_110 port_111 write?_112)"
"((letrec-values(((loop_113)"
"(lambda(v_114)"
"(if(reraise? v_114)"
"(let-values()"
"(let-values(((r_115)(reraise-val v_114)))"
"(if(exn? r_115)"
"(fprintf"
" port_111"
"                                 (if write?_112 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_115))"
"                                (fprintf port_111 (if write?_112 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_115))))"
"(if(running? v_114)"
"(let-values()"
"(let-values(((r_116)(running-name v_114)))"
"(if r_116"
"                                  (fprintf port_111 \"#<promise:!running!~a>\" r_116)"
"                                  (fprintf port_111 \"#<promise:!running>\"))))"
"(if(procedure? v_114)"
"(let-values()"
"(let-values(((c90259_117)(object-name v_114)))"
"(if c90259_117"
"                                    ((lambda (n_118) (fprintf port_111 \"#<promise:~a>\" n_118)) c90259_117)"
"                                    (let-values () (display \"#<promise>\" port_111)))))"
"(if(promise? v_114)"
"(let-values()(loop_113(unsafe-struct-ref v_114 0)))"
"(if(null? v_114)"
"                                  (let-values () (fprintf port_111 \"#<promise!(values)>\"))"
"(if(null?(cdr v_114))"
"(let-values()"
"                                      (fprintf port_111 (if write?_112 \"#<promise!~s>\" \"#<promise!~a>\") (car v_114)))"
"(let-values()"
"(begin"
"                                        (display \"#<promise!(values\" port_111)"
"                                        (let-values (((fmt_119) (if write?_112 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_120)(fprintf port_111 fmt_119 x_120)) v_114))"
"                                        (display \")>\" port_111))))))))))))"
" loop_113)"
"(unsafe-struct-ref promise_110 0))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_121 pred?_122 get_123)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_124 info_125)"
"(begin"
"(if(if(procedure? v_124)(procedure-arity-includes? v_124 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_124)))"
" v_124))"
" null"
" #t)))"
"(values prop_121 get_123)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_126 make-_127 ?_128 -ref_129 -set!_130)"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))"
"(values"
" struct:_126"
" make-_127"
" ?_128"
"(make-struct-field-accessor -ref_129 0 'val)"
"(make-struct-field-mutator -set!_130 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_147 make-_148 ?_149 -ref_150 -set!_151)"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise)))"
"(values struct:_147 make-_148 ?_149)))"
"(define-values(lazy) make-composable-promise)"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_163 make-_164 ?_165 -ref_166 -set!_167)"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_184)(raise(reraise-val this_184)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise)))"
"(values struct:_163 make-_164 ?_165(make-struct-field-accessor -ref_166 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_185 make-_186 ?_187 -ref_188 -set!_189)"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_206 port_207 write?_208)"
"                     (fprintf port_207 (if write?_208 \"#<running:~s>\" \"#<running:~a>\") (running-name this_206))))"
"(cons"
" prop:procedure"
"(lambda(this_209)"
"(let-values(((name_210)(running-name this_209)))"
"(if name_210"
"                         (error 'force \"reentrant promise `~.s'\" name_210)"
"                         (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running)))"
"(values struct:_185 make-_186 ?_187(make-struct-field-accessor -ref_188 0 'name))))"
"(define-values"
"(promise-forced?)"
"(lambda(promise_211)"
"(if(promise? promise_211)"
"(let-values(((v_212)(unsafe-struct-ref promise_211 0)))"
"(let-values(((or-part_213)(not(procedure? v_212))))(if or-part_213 or-part_213(reraise? v_212))))"
"      (raise-argument-error 'promise-forced? \"promise?\" promise_211))))"
"(define-values"
"(promise-running?)"
"(lambda(promise_214)"
"(if(promise? promise_214)"
"(running?(unsafe-struct-ref promise_214 0))"
"      (raise-argument-error 'promise-running? \"promise?\" promise_214))))"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_8 make-_9 ?_10 -ref_11 -set!_12)"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_24)((unsafe-struct-ref p_24 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/name)))"
"(values struct:_8 make-_9 ?_10)))"
"(define-values(delay/name) make-promise/name)"
"(define-values"
"(struct:promise/strict make-promise/strict promise/strict?)"
"(let-values(((struct:_25 make-_26 ?_27 -ref_28 -set!_29)"
"(make-struct-type"
" 'promise/strict"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_41)(reify-result(unsafe-struct-ref p_41 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/strict)))"
"(values struct:_25 make-_26 ?_27)))"
"(define-values(delay/strict)(lambda(thunk_42)(make-promise/strict(call-with-values thunk_42 list))))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_43 make-_44 ?_45 -ref_46 -set!_47)"
"(make-struct-type"
" 'running-thread"
" struct:running"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running-thread)))"
"(values struct:_43 make-_44 ?_45(make-struct-field-accessor -ref_46 0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(make-struct-type 'syncinfo #f 4 0 #f null(current-inspector) #f '(1 2 3) #f 'syncinfo)))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 0 'thunk)"
"(make-struct-field-accessor -ref_67 1 'done-evt)"
"(make-struct-field-accessor -ref_67 2 'done-sema)"
"(make-struct-field-accessor -ref_67 3 'access-sema)"
"(make-struct-field-mutator -set!_68 0 'thunk))))"
"(define-values"
"(struct:promise/sync make-promise/sync promise/sync?)"
"(let-values(((struct:_100 make-_101 ?_102 -ref_103 -set!_104)"
"(make-struct-type"
" 'promise/sync"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_116)"
"(let-values(((v_117)(unsafe-struct-ref p_116 0)))"
"(wrap-evt(if(syncinfo? v_117)(syncinfo-done-evt v_117) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_118)"
"(let-values(((v_119)(unsafe-struct-ref p_118 0)))"
"(reify-result"
"(if(not(syncinfo? v_119))"
"(let-values() v_119)"
"(if(running-thread?(syncinfo-thunk v_119))"
"(let-values()"
"(let-values(((r_120)(syncinfo-thunk v_119)))"
"(if(eq?(running-thread-thread r_120)(current-thread))"
"(r_120)"
"(begin(sync(syncinfo-done-evt v_119))(unsafe-struct-ref p_118 0)))))"
"(let-values()"
"(begin"
"(call-with-semaphore"
"(syncinfo-access-sema v_119)"
"(lambda(p_121 v_122)"
"(let-values(((thunk_123)(syncinfo-thunk v_122)))"
"(let-values(((done_124)(syncinfo-done-sema v_122)))"
"(if(running-thread? thunk_123)"
"(void)"
"(let-values()"
"(begin"
"(set-syncinfo-thunk!"
" v_122"
"(make-running-thread(object-name thunk_123)(current-thread)))"
"(call-with-exception-handler"
"(lambda(e_125)"
"(begin"
"(unsafe-struct-set! p_121 0(make-reraise e_125))"
"(semaphore-post done_124)"
" e_125))"
"(lambda()"
"(begin"
"(unsafe-struct-set! p_121 0(call-with-values thunk_123 list))"
"(semaphore-post done_124))))))))))"
" #f"
" p_118"
" v_119)"
"(unsafe-struct-ref p_118 0)))))))))"
"(cons"
" prop:custom-write"
"(lambda(p_126 port_127 write?_128)"
"(let-values(((v_129)(unsafe-struct-ref p_126 0)))"
"(promise-printer"
"(if(syncinfo? v_129)(make-promise(syncinfo-thunk v_129)) p_126)"
" port_127"
" write?_128)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/sync)))"
"(values struct:_100 make-_101 ?_102)))"
"(define-values"
"(delay/sync)"
"(lambda(thunk_130)"
"(let-values(((done-sema_131)(make-semaphore 0)))"
"(make-promise/sync"
"(make-syncinfo thunk_130(semaphore-peek-evt done-sema_131) done-sema_131(make-semaphore 1))))))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_132 make-_133 ?_134 -ref_135 -set!_136)"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_148)"
"(let-values(((v_149)(unsafe-struct-ref p_148 0)))"
"(wrap-evt(if(running? v_149)(running-thread-thread v_149) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_150)"
"(let-values(((v_151)(unsafe-struct-ref p_150 0)))"
"(reify-result"
"(if(running-thread? v_151)"
"(let-values(((t_152)(running-thread-thread v_151)))"
"(let-values((()(begin(thread-wait t_152)(values))))"
"(let-values(((v_153)(unsafe-struct-ref p_150 0)))"
"(if(running-thread? v_153)"
"(error"
" 'force"
"                                   \"promise's thread terminated ~a\\n  promise: ~e\""
"                                   \"without result or exception\""
" p_150)"
" v_153))))"
" v_151))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/thread)))"
"(values struct:_132 make-_133 ?_134)))"
"(define-values"
"(delay/thread)"
"(lambda(thunk_154 group_155)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_159)(not group_155)))"
"(if or-part_159 or-part_159(thread-group? group_155)))"
"(void)"
"                      (let-values () (raise-argument-error 'delay/thread \"(or/c thread-group? #f)\" group_155)))"
"(values))))"
"(let-values(((initialized-sema_156)(make-semaphore)))"
"(letrec-values(((run_157)"
"(lambda()"
"(begin"
"(semaphore-wait initialized-sema_156)"
"(call-with-exception-handler"
"(lambda(e_160)"
"(begin"
"(unsafe-struct-set! p_158 0(make-reraise e_160))"
"(kill-thread(current-thread))))"
"(lambda()(unsafe-struct-set! p_158 0(call-with-values thunk_154 list)))))))"
"((p_158)"
"(make-promise/thread"
"(make-running-thread"
"(object-name thunk_154)"
"(if group_155"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-thread-group"
" group_155)"
"(let-values()(thread run_157)))"
"(thread run_157))))))"
"(begin(semaphore-post initialized-sema_156) p_158))))))"
"(define-values"
"(struct:promise/idle make-promise/idle promise/idle?)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(make-struct-type"
" 'promise/idle"
" struct:promise/thread"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:force"
"(lambda(p_177)"
"(let-values(((v_178)(unsafe-struct-ref p_177 0)))"
"(reify-result"
"(if(procedure? v_178)"
"(let-values(((controller_179)"
"(if(running-thread? v_178)(running-thread-thread v_178)(v_178))))"
"(begin"
"(thread-send controller_179 'force!)"
"(thread-wait controller_179)"
"(unsafe-struct-ref p_177 0)))"
" v_178))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/idle)))"
"(values struct:_161 make-_162 ?_163)))"
"(define-values"
"(delay/idle)"
"(lambda(thunk_180 wait-for_181 work-while_182 tick_183 use*_184)"
"(let-values((()"
"(begin"
"(if(evt? wait-for_181)"
"(void)"
"                      (let-values () (raise-argument-error 'delay/idle \"evt?\" wait-for_181)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(evt? work-while_182)"
"(void)"
"                        (let-values () (raise-argument-error 'delay/idle \"evt?\" work-while_182)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(real? tick_183)(not(negative? tick_183)) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'delay/idle \"(>=/c 0.0)\" tick_183)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(real? use*_184)"
"(void)"
"                            (let-values () (raise-argument-error 'delay/idle \"real?\" use*_184)))"
"(values))))"
"(let-values(((use_185)"
"(if(<= use*_184 0)"
"(let-values() 0)"
"(if(>= use*_184 1)(let-values() 1)(let-values() use*_184)))))"
"(let-values(((work-time_186)(* tick_183 use_185)))"
"(let-values(((rest-time_187)(- tick_183 work-time_186)))"
"(letrec-values(((work_188)"
"(lambda()"
"(call-with-exception-handler"
"(lambda(e_192)"
"(begin"
"(unsafe-struct-set! p_191 0(make-reraise e_192))"
"(kill-thread(current-thread))))"
"(lambda()(unsafe-struct-set! p_191 0(call-with-values thunk_180 list))))))"
"((run_189)"
"(lambda()"
"(let-values(((force-evt_193)(thread-receive-evt)))"
"(let-values((()(begin(sync wait-for_181 force-evt_193)(values))))"
"(let-values((()"
"(begin"
"(unsafe-struct-set!"
" p_191"
" 0"
"(make-running-thread"
"(object-name thunk_180)"
" controller-thread_190))"
"(values))))"
"(let-values(((worker_194)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-thread-group"
"(make-thread-group))"
"(let-values()(thread work_188)))))"
"(if(if(>= use_185 1)(equal? work-while_182 always-evt) #f)"
"(let-values()(thread-wait worker_194))"
"(if(<= use_185 0)"
"(let-values()"
"(begin"
"(thread-suspend worker_194)"
"(sync force-evt_193)"
"(thread-wait worker_194)))"
"(let-values()"
"(begin"
"(thread-suspend worker_194)"
"((letrec-values(((loop_195)"
"(lambda()"
"(if(eq?"
"(begin0"
"(let-values(((or-part_196)"
"(sync/timeout"
" rest-time_187"
" force-evt_193)))"
"(if or-part_196"
" or-part_196"
"(sync"
" work-while_182"
" force-evt_193)))"
"(thread-resume worker_194))"
" force-evt_193)"
"(thread-wait worker_194)"
"(if(sync/timeout work-time_186 worker_194)"
"(void)"
"(let-values()"
"(begin"
"(thread-suspend worker_194)"
"(loop_195))))))))"
" loop_195))))))))))))"
"((controller-thread_190)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-thread-group"
"(make-thread-group))"
"(let-values()(thread run_189))))"
"((p_191)"
"(make-promise/idle"
"(new:procedure-rename"
"(lambda() controller-thread_190)"
"(let-values(((or-part_197)(object-name thunk_180)))"
"(if or-part_197 or-part_197 'idle-thread))))))"
" p_191))))))))))"
"(define-values"
"(phase?)"
"(lambda(v_1)(let-values(((or-part_2)(not v_1)))(if or-part_2 or-part_2(exact-integer? v_1)))))"
"(define-values(phase+)(lambda(a_3 b_4)(if a_3(if b_4(+ a_3 b_4) #f) #f)))"
"(define-values(phase-)(lambda(a_5 b_6)(if a_5(if b_6(- a_5 b_6) #f) #f)))"
"(define-values"
"(phase<?)"
"(lambda(a_7 b_8)(if(not b_8)(let-values() #f)(if(not a_7)(let-values() #t)(let-values()(< a_7 b_8))))))"
"(define-values(zero-phase?)(lambda(a_9)(eq? a_9 0)))"
"(define-values(label-phase?)(lambda(a_10)(not a_10)))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-inspector-id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'serialize-state"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'serialize-state)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_4 1 'bindings-intern)"
"(make-struct-field-accessor -ref_4 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_4 3 'scopes)"
"(make-struct-field-accessor -ref_4 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 5 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 6 'props)"
"(make-struct-field-accessor -ref_4 7 'interned-props)"
"(make-struct-field-accessor -ref_4 8 'inspector-id))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_62 inspector-id_63)"
"(serialize-state1.1"
" reachable-scopes_62"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
" inspector-id_63)))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_64 state_65)"
"(let-values(((or-part_66)(hash-ref(serialize-state-scopes state_65) scs_64 #f)))"
"(if or-part_66 or-part_66(begin(hash-set!(serialize-state-scopes state_65) scs_64 scs_64) scs_64)))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_67 state_68)"
"(let-values(((or-part_69)(hash-ref(serialize-state-shifted-multi-scopes state_68) sms_67 #f)))"
"(if or-part_69"
" or-part_69"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_68) sms_67 sms_67) sms_67)))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_70 state_71)"
"(if(null? mpi-shifts_70)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_72)(intern-mpi-shifts(cdr mpi-shifts_70) state_71)))"
"(let-values(((tail-table_73)"
"(let-values(((or-part_74)(hash-ref(serialize-state-mpi-shifts state_71) tail_72 #f)))"
"(if or-part_74"
" or-part_74"
"(let-values(((ht_75)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_71) tail_72 ht_75) ht_75))))))"
"(let-values(((or-part_76)(hash-ref tail-table_73(car mpi-shifts_70) #f)))"
"(if or-part_76"
" or-part_76"
"(let-values(((v_77)(cons(car mpi-shifts_70) tail_72)))"
"(begin(hash-set! tail-table_73(car mpi-shifts_70) v_77) v_77))))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_78 get-preserved-props_79 state_80)"
"(let-values(((v_81)(hash-ref(serialize-state-props state_80) all-props_78 'no)))"
"(if(eq? v_81 'no)"
"(let-values()"
"(let-values(((preserved-props_82)(get-preserved-props_79)))"
"(let-values(((p_83)"
"(if(zero?(hash-count preserved-props_82))"
"(let-values() #f)"
"(let-values(((c92619_84)"
"(hash-ref(serialize-state-interned-props state_80) preserved-props_82 #f)))"
"(if c92619_84"
"((lambda(p_85) p_85) c92619_84)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_80)"
" preserved-props_82"
" preserved-props_82)"
" preserved-props_82)))))))"
"(begin(hash-set!(serialize-state-props state_80) all-props_78 p_83) p_83))))"
"(let-values() v_81)))))"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_1)(let-values(((k_2)(prefab-struct-key v_1)))(if k_2(if(all-fields-immutable? k_2) k_2 #f) #f))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_3)"
"(let-values(((or-part_4)(symbol? k_3)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(null? k_3)))"
"(if or-part_5"
" or-part_5"
"(let-values(((rk_6)(cdr k_3)))"
"(let-values(((rk_7)(if(if(pair? rk_6)(exact-integer?(car rk_6)) #f)(cdr rk_6) rk_6)))"
"(let-values(((rk_8)"
"(if(if(pair? rk_7)(pair?(car rk_7)) #f)"
"(if(zero?(caar rk_7))(cdr rk_7)(cons '#(1)(cdr rk_7)))"
" rk_7)))"
"(if(if(pair? rk_8)(vector?(car rk_8)) #f)"
"(if(zero?(vector-length(car rk_8)))(all-fields-immutable?(cdr rk_8)) #f)"
"(all-fields-immutable? rk_8)))))))))))"
"(define-values"
"(datum-map)"
"(let-values(((datum-map5_1)"
"(lambda(s3_2 f4_3 seen1_4 seen2_5)"
"(let-values(((s_6) s3_2))"
"(let-values(((f_7) f4_3))"
"(let-values(((seen_8)(if seen2_5 seen1_4 #f)))"
"(let-values()"
"((letrec-values(((loop_9)"
"(lambda(tail?_10 s_11 prev-depth_12 prev-seen_13)"
"(let-values(((depth_14)(add1 prev-depth_12)))"
"(let-values(((seen_15)"
"(if(if prev-seen_13"
"(if(> depth_14 32)(datum-has-elements? s_11) #f)"
" #f)"
"(let-values()"
"(if(hash-ref prev-seen_13 s_11 #f)"
"(let-values()"
"((hash-ref prev-seen_13 'cycle-fail) s_11))"
"(let-values()(hash-set prev-seen_13 s_11 #t))))"
"(let-values() prev-seen_13))))"
"(if(pair? s_11)"
"(let-values()"
"(f_7"
" tail?_10"
"(cons"
"(loop_9 #f(car s_11) depth_14 seen_15)"
"(loop_9 #t(cdr s_11) depth_14 seen_15))))"
"(if(vector? s_11)"
"(let-values()"
"(f_7"
" #f"
"(vector->immutable-vector"
"(let-values(((len_16)(vector-length s_11)))"
"(begin"
"(if(exact-nonnegative-integer? len_16)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                   \"exact-nonnegative-integer?\""
" len_16)))"
"(let-values(((v_17)(make-vector len_16 0)))"
"(begin"
"(if(zero? len_16)"
"(void)"
"(let-values()"
"(let-values(((vec_18 len_19)"
"(let-values(((vec_20) s_11))"
"(begin"
"(if(vector? vec_20)"
"(void)"
"(let-values()"
"(in-vector vec_20)))"
"(values"
" vec_20"
"(unsafe-vector-length"
" vec_20))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_21)"
"(lambda(i_22 pos_23)"
"(if(unsafe-fx<"
" pos_23"
" len_19)"
"(let-values(((e_24)"
"(unsafe-vector-ref"
" vec_18"
" pos_23)))"
"(if #t"
"(let-values(((i_25)"
"(let-values(((i_26)"
" i_22))"
"(let-values(((i_27)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_17"
" i_26"
"(let-values()"
"(loop_9"
" #f"
" e_24"
" depth_14"
" seen_15)))"
"(unsafe-fx+"
" 1"
" i_26)))))"
"(values"
" i_27)))))"
"(if(if #t"
"(not"
"((lambda x_28"
"(unsafe-fx="
" i_25"
" len_16))"
" e_24))"
" #f)"
"(for-loop_21"
" i_25"
"(unsafe-fx+"
" 1"
" pos_23))"
" i_25))"
" i_22))"
" i_22))))"
" for-loop_21)"
" 0"
" 0)))))"
" v_17)))))))"
"(if(box? s_11)"
"(let-values()"
"(f_7"
" #f"
"(box-immutable(loop_9 #f(unbox s_11) depth_14 seen_15))))"
"(let-values(((c93968_29)(immutable-prefab-struct-key s_11)))"
"(if c93968_29"
"((lambda(key_30)"
"(f_7"
" #f"
"(apply"
" make-prefab-struct"
" key_30"
"(alt-reverse"
"(let-values(((v*_31 start*_32 stop*_33 step*_34)"
"(normalise-inputs"
" 'in-vector"
"                                                                                 \"vector\""
"(lambda(x_35)(vector? x_35))"
"(lambda(x_36)"
"(unsafe-vector-length x_36))"
"(struct->vector s_11)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_37)"
"(lambda(fold-var_38 idx_39)"
"(if(unsafe-fx<"
" idx_39"
" stop*_33)"
"(let-values(((e_40)"
"(unsafe-vector-ref"
" v*_31"
" idx_39)))"
"(if #t"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_42)"
" fold-var_38))"
"(let-values(((fold-var_43)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_9"
" #f"
" e_40"
" depth_14"
" seen_15))"
" fold-var_42))))"
"(values"
" fold-var_43)))))"
"(if #t"
"(for-loop_37"
" fold-var_41"
"(unsafe-fx+"
" idx_39"
" 1))"
" fold-var_41))"
" fold-var_38))"
" fold-var_38))))"
" for-loop_37)"
" null"
" start*_32)))))))"
" c93968_29)"
"(if(if(hash? s_11)(immutable? s_11) #f)"
"(let-values()"
"(if(hash-eq? s_11)"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_44) s_11))"
"(begin"
"(if((lambda(ht_45)(hash? ht_45)) ht_44)"
"(void)"
"(let-values()(default-in-hash ht_44)))"
"((letrec-values(((for-loop_46)"
"(lambda(table_47 i_48)"
"(if i_48"
"(let-values(((k_49 v_50)"
"(hash-iterate-key+value"
" ht_44"
" i_48)))"
"(if #t"
"(let-values(((table_51)"
"(let-values(((table_52)"
" table_47))"
"(let-values(((table_53)"
"(let-values()"
"(let-values(((key_54"
" val_55)"
"(let-values()"
"(values"
" k_49"
"(loop_9"
" #f"
" v_50"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_52"
" key_54"
" val_55)))))"
"(values"
" table_53)))))"
"(if #t"
"(for-loop_46"
" table_51"
"(hash-iterate-next"
" ht_44"
" i_48))"
" table_51))"
" table_47))"
" table_47))))"
" for-loop_46)"
" '#hasheq()"
"(hash-iterate-first ht_44))))))"
"(if(hash-eqv? s_11)"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_56) s_11))"
"(begin"
"(if((lambda(ht_57)(hash? ht_57)) ht_56)"
"(void)"
"(let-values()(default-in-hash ht_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(table_59 i_60)"
"(if i_60"
"(let-values(((k_61"
" v_62)"
"(hash-iterate-key+value"
" ht_56"
" i_60)))"
"(if #t"
"(let-values(((table_63)"
"(let-values(((table_64)"
" table_59))"
"(let-values(((table_65)"
"(let-values()"
"(let-values(((key_66"
" val_67)"
"(let-values()"
"(values"
" k_61"
"(loop_9"
" #f"
" v_62"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_64"
" key_66"
" val_67)))))"
"(values"
" table_65)))))"
"(if #t"
"(for-loop_58"
" table_63"
"(hash-iterate-next"
" ht_56"
" i_60))"
" table_63))"
" table_59))"
" table_59))))"
" for-loop_58)"
" '#hasheqv()"
"(hash-iterate-first ht_56))))))"
"(let-values()"
"(f_7"
" #f"
"(let-values(((ht_68) s_11))"
"(begin"
"(if((lambda(ht_69)(hash? ht_69)) ht_68)"
"(void)"
"(let-values()(default-in-hash ht_68)))"
"((letrec-values(((for-loop_70)"
"(lambda(table_71 i_72)"
"(if i_72"
"(let-values(((k_73"
" v_74)"
"(hash-iterate-key+value"
" ht_68"
" i_72)))"
"(if #t"
"(let-values(((table_75)"
"(let-values(((table_76)"
" table_71))"
"(let-values(((table_77)"
"(let-values()"
"(let-values(((key_78"
" val_79)"
"(let-values()"
"(values"
" k_73"
"(loop_9"
" #f"
" v_74"
" depth_14"
" seen_15)))))"
"(hash-set"
" table_76"
" key_78"
" val_79)))))"
"(values"
" table_77)))))"
"(if #t"
"(for-loop_70"
" table_75"
"(hash-iterate-next"
" ht_68"
" i_72))"
" table_75))"
" table_71))"
" table_71))))"
" for-loop_70)"
" '#hash()"
"(hash-iterate-first ht_68)))))))))"
"(if(null? s_11)"
"(let-values()(f_7 tail?_10 s_11))"
"(let-values()(f_7 #f s_11))))))))))))))"
" loop_9)"
" #f"
" s_6"
" 0"
" seen_8))))))))"
"(case-lambda"
"((s_80 f_81)(datum-map5_1 s_80 f_81 #f #f))"
"((s_82 f_83 seen1_84)(datum-map5_1 s_82 f_83 seen1_84 #t)))))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_85)"
"(let-values(((or-part_86)(pair? d_85)))"
"(if or-part_86"
" or-part_86"
"(let-values(((or-part_87)(vector? d_85)))"
"(if or-part_87"
" or-part_87"
"(let-values(((or-part_88)(box? d_85)))"
"(if or-part_88"
" or-part_88"
"(let-values(((or-part_89)(immutable-prefab-struct-key d_85)))"
"(if or-part_89"
" or-part_89"
"(if(hash? d_85)(if(immutable? d_85)(positive?(hash-count d_85)) #f) #f)))))))))))"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_22)(if(preserved-property-value? v_22)(preserved-property-value-content v_22) v_22)))"
"(define-values(deserialize-preserved-property-value)(lambda(v_23)(preserved-property-value1.1 v_23)))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_24 syntax?_25)"
"(datum-map"
" v_24"
"(lambda(tail?_26 v_27)"
"(begin"
"(if(let-values(((or-part_28)(null? v_27)))"
"(if or-part_28"
" or-part_28"
"(let-values(((or-part_29)(boolean? v_27)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? v_27)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(number? v_27)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(char? v_27)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(string? v_27)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(bytes? v_27)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(regexp? v_27)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(syntax?_25 v_27)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(pair? v_27)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(vector? v_27)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(box? v_27)))"
"(if or-part_39"
" or-part_39"
"(let-values(((or-part_40)(hash? v_27)))"
"(if or-part_40"
" or-part_40"
"(immutable-prefab-struct-key"
" v_27)))))))))))))))))))))))))))"
"(void)"
"           (let-values () (raise-arguments-error 'write \"disallowed value in preserved syntax property\" \"value\" v_27)))"
" v_27))"
" disallow-cycles$1)))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_41) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_41))))"
"(define-values(tamper-tainted?)(lambda(v_1)(symbol? v_1)))"
"(define-values(tamper-armed?)(lambda(v_2)(set? v_2)))"
"(define-values(tamper-clean?)(lambda(v_3)(not v_3)))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_4)(if(datum-has-elements? v_4) 'tainted/need-propagate 'tainted)))"
"(define-values(serialize-tamper)(lambda(t_5)(if(tamper-armed? t_5) 'armed t_5)))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_6)(if(eq? t_6 'armed)(current-arm-inspectors) t_6)))"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-scope-propagations"
" syntax-shifted-multi-scopes"
" syntax-mpi-shifts"
" syntax-bulk-binding-registry"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" syntax-tamper"
" set-syntax-content!"
" set-syntax-scope-propagations!"
" set-syntax-tamper!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'syntax"
" #f"
" 10"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(s_67 reach_68)"
"(let-values(((prop_69)(syntax-scope-propagations s_67)))"
"(begin"
"(reach_68(if prop_69((propagation-ref prop_69) s_67)(syntax-content s_67)))"
"(reach_68(syntax-scopes s_67))"
"(reach_68(syntax-shifted-multi-scopes s_67))"
"(let-values(((ht_70)(syntax-props s_67)))"
"(begin"
"(if((lambda(ht_71)(if(hash? ht_71)(immutable? ht_71) #f)) ht_70)"
"(void)"
"(let-values()(default-in-immutable-hash ht_70)))"
"((letrec-values(((for-loop_72)"
"(lambda(fold-var_73 i_74)"
"(if i_74"
"(let-values(((k_75 v_76)"
"(unsafe-immutable-hash-iterate-key+value ht_70 i_74)))"
"(if #t"
"(let-values(((fold-var_77)"
"(let-values(((fold-var_78) fold-var_73))"
"(if(preserved-property-value?"
"(plain-property-value v_76))"
"(let-values(((fold-var_79) fold-var_78))"
"(let-values(((fold-var_80)"
"(let-values()"
"(begin"
"(let-values()"
"(reach_68 v_76))"
"(void)))))"
"(values fold-var_80)))"
" fold-var_78))))"
"(if #t"
"(for-loop_72"
" fold-var_77"
"(unsafe-immutable-hash-iterate-next ht_70 i_74))"
" fold-var_77))"
" fold-var_73))"
" fold-var_73))))"
" for-loop_72)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_70))))))))"
"(cons"
" prop:serialize"
"(lambda(s_81 ser_82 state_83)"
"(let-values(((prop_84)(syntax-scope-propagations s_81)))"
"(list"
" 'deserialize-syntax"
"(ser_82(if prop_84((propagation-ref prop_84) s_81)(syntax-content s_81)))"
"(ser_82(intern-scopes(syntax-scopes s_81) state_83))"
"(ser_82(intern-shifted-multi-scopes(syntax-shifted-multi-scopes s_81) state_83))"
"(ser_82(intern-mpi-shifts(syntax-mpi-shifts s_81) state_83))"
"(ser_82(syntax-srcloc s_81))"
"(ser_82"
"(intern-properties"
"(syntax-props s_81)"
"(lambda()"
"(let-values(((ht_85)(syntax-props s_81)))"
"(begin"
"(if((lambda(ht_86)(hash? ht_86)) ht_85)"
"(void)"
"(let-values()(default-in-hash ht_85)))"
"((letrec-values(((for-loop_87)"
"(lambda(table_88 i_89)"
"(if i_89"
"(let-values(((k_90 v_91)(hash-iterate-key+value ht_85 i_89)))"
"(if #t"
"(let-values(((table_92)"
"(let-values(((table_93) table_88))"
"(if(preserved-property-value? v_91)"
"(let-values(((table_94) table_93))"
"(let-values(((table_95)"
"(let-values()"
"(let-values(((key_96"
" val_97)"
"(let-values()"
"(values"
" k_90"
"(check-value-to-preserve"
"(plain-property-value"
" v_91)"
" syntax?$1)))))"
"(hash-set"
" table_94"
" key_96"
" val_97)))))"
"(values table_95)))"
" table_93))))"
"(if #t"
"(for-loop_87 table_92(hash-iterate-next ht_85 i_89))"
" table_92))"
" table_88))"
" table_88))))"
" for-loop_87)"
" '#hasheq()"
"(hash-iterate-first ht_85)))))"
" state_83))"
"(serialize-state-inspector-id state_83)"
"(ser_82(serialize-tamper(syntax-tamper s_81)))))))"
"(cons"
" prop:custom-write"
"(lambda(s_98 port_99 mode_100)"
"                     (let-values ((() (begin (write-string \"#<syntax\" port_99) (values))))"
"(let-values(((srcloc_101)(syntax-srcloc s_98)))"
"(begin"
"(if srcloc_101"
"(let-values()"
"(let-values(((srcloc-str_102)(srcloc->string srcloc_101)))"
"                                 (if srcloc-str_102 (let-values () (fprintf port_99 \":~a\" srcloc-str_102)) (void))))"
"(void))"
"                           (fprintf port_99 \" ~.s\" (syntax->datum$1 s_98))"
"                           (write-string \">\" port_99)))))))"
"(current-inspector)"
" #f"
" '(1 3 4 5 6 7 8)"
" #f"
" 'syntax)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'content)"
"(make-struct-field-accessor -ref_4 1 'scopes)"
"(make-struct-field-accessor -ref_4 2 'scope-propagations)"
"(make-struct-field-accessor -ref_4 3 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 5 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 6 'srcloc)"
"(make-struct-field-accessor -ref_4 7 'props)"
"(make-struct-field-accessor -ref_4 8 'inspector)"
"(make-struct-field-accessor -ref_4 9 'tamper)"
"(make-struct-field-mutator -set!_5 0 'content)"
"(make-struct-field-mutator -set!_5 2 'scope-propagations)"
"(make-struct-field-mutator -set!_5 9 'tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes #f empty-shifted-multi-scopes empty-mpi-shifts #f #f empty-props #f #f))"
"(define-values(identifier?)(lambda(s_103)(if(syntax?$1 s_103)(symbol?(syntax-content s_103)) #f)))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_104)(syntax-map s_104(lambda(tail?_105 x_106) x_106)(lambda(s_107 d_108) d_108) syntax-content)))"
"(define-values"
"(datum->syntax$2)"
"(let-values(((datum->syntax8_109)"
"(lambda(stx-c6_110 s7_111 stx-l2_112 stx-p3_113 stx-l4_114 stx-p5_115)"
"(let-values(((stx-c_116) stx-c6_110))"
"(let-values(((s_117) s7_111))"
"(let-values(((stx-l_118)(if stx-l4_114 stx-l2_112 #f)))"
"(let-values(((stx-p_119)(if stx-p5_115 stx-p3_113 #f)))"
"(let-values()"
"(let-values(((wrap_120)"
"(lambda(content_121)"
"(syntax1.1"
" content_121"
"(if stx-c_116(syntax-scopes stx-c_116) empty-scopes)"
" #f"
"(if stx-c_116"
"(syntax-shifted-multi-scopes stx-c_116)"
" empty-shifted-multi-scopes)"
"(if stx-c_116(syntax-mpi-shifts stx-c_116) empty-mpi-shifts)"
"(if stx-c_116(syntax-bulk-binding-registry stx-c_116) #f)"
"(if stx-l_118(syntax-srcloc stx-l_118) #f)"
"(if stx-p_119(syntax-props stx-p_119) empty-props)"
"(if stx-c_116(syntax-inspector stx-c_116) #f)"
"(if stx-c_116"
"(if(syntax-tamper stx-c_116)"
"(tamper-tainted-for-content content_121)"
" #f)"
" #f)))))"
"(syntax-map"
" s_117"
"(lambda(tail?_122 x_123)(if tail?_122 x_123(wrap_120 x_123)))"
" #f"
" #f"
" disallow-cycles))))))))))"
"(case-lambda"
"((stx-c_124 s_125)(datum->syntax8_109 stx-c_124 s_125 #f #f #f #f))"
"((stx-c_126 s_127 stx-l_128 stx-p3_129)(datum->syntax8_109 stx-c_126 s_127 stx-l_128 stx-p3_129 #t #t))"
"((stx-c_130 s_131 stx-l2_132)(datum->syntax8_109 stx-c_130 s_131 stx-l2_132 #f #t #f)))))"
"(define-values"
"(syntax-map)"
"(let-values(((syntax-map16_133)"
"(lambda(s12_134 f13_135 d->s14_136 s-e15_137 seen10_138 seen11_139)"
"(let-values(((s_140) s12_134))"
"(let-values(((f_141) f13_135))"
"(let-values(((d->s_142) d->s14_136))"
"(let-values(((s-e_143) s-e15_137))"
"(let-values(((seen_144)(if seen11_139 seen10_138 #f)))"
"(let-values()"
"((letrec-values(((loop_145)"
"(lambda(s_146)"
"(datum-map"
" s_146"
"(lambda(tail?_147 v_148)"
"(if(syntax?$1 v_148)"
"(let-values()"
"(if d->s_142"
"(d->s_142"
" v_148"
"(if s-e_143"
"(loop_145(s-e_143 v_148))"
"(syntax-content v_148)))"
" v_148))"
"(let-values()(f_141 tail?_147 v_148))))"
" seen_144))))"
" loop_145)"
" s_140))))))))))"
"(case-lambda"
"((s_149 f_150 d->s_151 s-e_152)(syntax-map16_133 s_149 f_150 d->s_151 s-e_152 #f #f))"
"((s_153 f_154 d->s_155 s-e_156 seen10_157)(syntax-map16_133 s_153 f_154 d->s_155 s-e_156 seen10_157 #t)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_158) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" s_158))))"
"(define-values"
"(1/deserialize-syntax)"
"(lambda(content_159 scopes_160 shifted-multi-scopes_161 mpi-shifts_162 srcloc_163 props_164 inspector_165 tamper_166)"
"(syntax1.1"
" content_159"
" scopes_160"
" #f"
" shifted-multi-scopes_161"
" mpi-shifts_162"
" #f"
" srcloc_163"
"(if props_164"
"(let-values(((ht_167) props_164))"
"(begin"
"(if((lambda(ht_168)(if(hash? ht_168)(immutable? ht_168) #f)) ht_167)"
"(void)"
"(let-values()(default-in-immutable-hash ht_167)))"
"((letrec-values(((for-loop_169)"
"(lambda(table_170 i_171)"
"(if i_171"
"(let-values(((k_172 v_173)(unsafe-immutable-hash-iterate-key+value ht_167 i_171)))"
"(if #t"
"(let-values(((table_174)"
"(let-values(((table_175) table_170))"
"(let-values(((table_176)"
"(let-values()"
"(let-values(((key_177 val_178)"
"(let-values()"
"(values"
" k_172"
"(preserved-property-value1.1"
" v_173)))))"
"(hash-set table_175 key_177 val_178)))))"
"(values table_176)))))"
"(if #t"
"(for-loop_169 table_174(unsafe-immutable-hash-iterate-next ht_167 i_171))"
" table_174))"
" table_170))"
" table_170))))"
" for-loop_169)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_167))))"
" empty-props)"
" inspector_165"
"(deserialize-tamper tamper_166))))"
"(define-values"
"(propagate-taint!)"
"(lambda(s_1)"
"(if(eq?(syntax-tamper s_1) 'tainted/need-propagate)"
"(let-values()"
"(begin(set-syntax-content! s_1(taint-content(syntax-content s_1)))(set-syntax-tamper! s_1 'tainted)))"
"(void))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(syntax-map"
" d_2"
"(lambda(tail?_3 x_4) x_4)"
"(lambda(sub-s_5 d_6)"
"(if(tamper-tainted?(syntax-tamper sub-s_5))"
"(let-values() sub-s_5)"
"(let-values()"
"(let-values(((the-struct_7) sub-s_5))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((tamper6_8)(tamper-tainted-for-content(syntax-content sub-s_5))))"
"(syntax1.1"
"(syntax-content the-struct_7)"
"(syntax-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
"(syntax-inspector the-struct_7)"
" tamper6_8))"
"               (raise-argument-error 'struct-copy \"syntax?\" the-struct_7))))))"
" #f)))"
"(define-values(syntax-tainted?$1)(lambda(s_9)(tamper-tainted?(syntax-tamper s_9))))"
"(define-values(syntax-clean?)(lambda(s_10)(tamper-clean?(syntax-tamper s_10))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_11 insp_12)"
"(let-values(((t_13)(syntax-tamper s_11)))"
"(if(tamper-tainted? t_13)"
"(let-values() s_11)"
"(if(if t_13"
"(let-values(((or-part_14)(set-member? t_13 insp_12)))"
"(if or-part_14"
" or-part_14"
"(let-values(((ht_15) t_13))"
"(begin"
"(if((lambda(ht_16)(if(hash? ht_16)(immutable? ht_16) #f)) ht_15)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_15)))"
"((letrec-values(((for-loop_17)"
"(lambda(result_18 i_19)"
"(if i_19"
"(let-values(((already-insp_20)"
"(unsafe-immutable-hash-iterate-key ht_15 i_19)))"
"(if #t"
"(let-values(((result_21)"
"(let-values(((result_22) result_18))"
"(let-values(((result_23)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_20"
" insp_12)))))"
"(values result_23)))))"
"(if(if #t(not((lambda x_24 result_21) already-insp_20)) #f)"
"(for-loop_17"
" result_21"
"(unsafe-immutable-hash-iterate-next ht_15 i_19))"
" result_21))"
" result_18))"
" result_18))))"
" for-loop_17)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_15))))))"
" #f)"
"(let-values() s_11)"
"(let-values()"
"(let-values(((the-struct_25) s_11))"
"(if(syntax?$1 the-struct_25)"
"(let-values(((tamper7_26)(set-add(if t_13(remove-inferior t_13 insp_12)(seteq)) insp_12)))"
"(syntax1.1"
"(syntax-content the-struct_25)"
"(syntax-scopes the-struct_25)"
"(syntax-scope-propagations the-struct_25)"
"(syntax-shifted-multi-scopes the-struct_25)"
"(syntax-mpi-shifts the-struct_25)"
"(syntax-bulk-binding-registry the-struct_25)"
"(syntax-srcloc the-struct_25)"
"(syntax-props the-struct_25)"
"(syntax-inspector the-struct_25)"
" tamper7_26))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_25)))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_27 insp_28)"
"(let-values(((ht_29) t_27))"
"(begin"
"(if((lambda(ht_30)(if(hash? ht_30)(immutable? ht_30) #f)) ht_29)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_29)))"
"((letrec-values(((for-loop_31)"
"(lambda(table_32 i_33)"
"(if i_33"
"(let-values(((already-insp_34)(unsafe-immutable-hash-iterate-key ht_29 i_33)))"
"(if #t"
"(let-values(((table_35)"
"(let-values(((table_36) table_32))"
"(if(inspector-superior-or-same? insp_28 already-insp_34)"
" table_36"
"(let-values(((table_37) table_36))"
"(let-values(((table_38)"
"(let-values()"
"(let-values(((key_39 val_40)"
"(let-values()"
"(values"
"(let-values() already-insp_34)"
" #t))))"
"(hash-set table_37 key_39 val_40)))))"
"(values table_38)))))))"
"(if #t"
"(for-loop_31 table_35(unsafe-immutable-hash-iterate-next ht_29 i_33))"
" table_35))"
" table_32))"
" table_32))))"
" for-loop_31)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_29))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_41)"
"(lambda(s3_42 insp1_43 insp2_44)"
"(let-values(((s_45) s3_42))"
"(let-values(((insp_46)(if insp2_44 insp1_43 #f)))"
"(let-values()"
"(let-values(((t_47)(syntax-tamper s_45)))"
"(if(not(tamper-armed? t_47))"
"(let-values() s_45)"
"(if(not insp_46)"
"(let-values()"
"(let-values(((the-struct_48) s_45))"
"(if(syntax?$1 the-struct_48)"
"(let-values(((tamper8_49) #f))"
"(syntax1.1"
"(syntax-content the-struct_48)"
"(syntax-scopes the-struct_48)"
"(syntax-scope-propagations the-struct_48)"
"(syntax-shifted-multi-scopes the-struct_48)"
"(syntax-mpi-shifts the-struct_48)"
"(syntax-bulk-binding-registry the-struct_48)"
"(syntax-srcloc the-struct_48)"
"(syntax-props the-struct_48)"
"(syntax-inspector the-struct_48)"
" tamper8_49))"
"                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_48))))"
"(let-values()"
"(let-values(((new-t_50)(remove-inferior t_47 insp_46)))"
"(let-values(((the-struct_51) s_45))"
"(if(syntax?$1 the-struct_51)"
"(let-values(((tamper9_52)(if(not(set-empty? new-t_50)) new-t_50 #f)))"
"(syntax1.1"
"(syntax-content the-struct_51)"
"(syntax-scopes the-struct_51)"
"(syntax-scope-propagations the-struct_51)"
"(syntax-shifted-multi-scopes the-struct_51)"
"(syntax-mpi-shifts the-struct_51)"
"(syntax-bulk-binding-registry the-struct_51)"
"(syntax-srcloc the-struct_51)"
"(syntax-props the-struct_51)"
"(syntax-inspector the-struct_51)"
" tamper9_52))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_51))))))))))))))"
"(case-lambda((s_53)(syntax-disarm4_41 s_53 #f #f))((s_54 insp1_55)(syntax-disarm4_41 s_54 insp1_55 #t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_56 from-s_57)"
"(let-values(((t_58)(syntax-tamper s_56)))"
"(if(tamper-tainted? t_58)"
"(let-values() s_56)"
"(let-values()"
"(let-values(((from-t_59)(syntax-tamper from-s_57)))"
"(if(tamper-clean? from-t_59)"
"(let-values() s_56)"
"(if(tamper-tainted? from-t_59)"
"(let-values()"
"(let-values(((the-struct_60) s_56))"
"(if(syntax?$1 the-struct_60)"
"(let-values(((tamper10_61)(tamper-tainted-for-content(syntax-content s_56))))"
"(syntax1.1"
"(syntax-content the-struct_60)"
"(syntax-scopes the-struct_60)"
"(syntax-scope-propagations the-struct_60)"
"(syntax-shifted-multi-scopes the-struct_60)"
"(syntax-mpi-shifts the-struct_60)"
"(syntax-bulk-binding-registry the-struct_60)"
"(syntax-srcloc the-struct_60)"
"(syntax-props the-struct_60)"
"(syntax-inspector the-struct_60)"
" tamper10_61))"
"                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_60))))"
"(if(tamper-clean? t_58)"
"(let-values()"
"(let-values(((the-struct_62) s_56))"
"(if(syntax?$1 the-struct_62)"
"(let-values(((tamper11_63) from-t_59))"
"(syntax1.1"
"(syntax-content the-struct_62)"
"(syntax-scopes the-struct_62)"
"(syntax-scope-propagations the-struct_62)"
"(syntax-shifted-multi-scopes the-struct_62)"
"(syntax-mpi-shifts the-struct_62)"
"(syntax-bulk-binding-registry the-struct_62)"
"(syntax-srcloc the-struct_62)"
"(syntax-props the-struct_62)"
"(syntax-inspector the-struct_62)"
" tamper11_63))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_62))))"
"(let-values()"
"(let-values(((the-struct_64) s_56))"
"(if(syntax?$1 the-struct_64)"
"(let-values(((tamper12_65)"
"(let-values(((ht_66) from-t_59))"
"(begin"
"(if((lambda(ht_67)(if(hash? ht_67)(immutable? ht_67) #f)) ht_66)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_66)))"
"((letrec-values(((for-loop_68)"
"(lambda(t_69 i_70)"
"(if i_70"
"(let-values(((from-i_71)"
"(unsafe-immutable-hash-iterate-key"
" ht_66"
" i_70)))"
"(if #t"
"(let-values(((t_72)"
"(let-values(((t_73) t_69))"
"(let-values(((t_74)"
"(let-values()"
"(if(set-member?"
" t_73"
" from-i_71)"
"(let-values()"
" t_73)"
"(if(any-superior?"
" t_73"
" from-i_71)"
"(let-values()"
" t_73)"
"(let-values()"
"(set-add"
"(set-add"
"(remove-inferior"
" t_73"
" from-i_71)"
" from-i_71))))))))"
"(values t_74)))))"
"(if #t"
"(for-loop_68"
" t_72"
"(unsafe-immutable-hash-iterate-next"
" ht_66"
" i_70))"
" t_72))"
" t_69))"
" t_69))))"
" for-loop_68)"
" t_58"
"(unsafe-immutable-hash-iterate-first ht_66))))))"
"(syntax1.1"
"(syntax-content the-struct_64)"
"(syntax-scopes the-struct_64)"
"(syntax-scope-propagations the-struct_64)"
"(syntax-shifted-multi-scopes the-struct_64)"
"(syntax-mpi-shifts the-struct_64)"
"(syntax-bulk-binding-registry the-struct_64)"
"(syntax-srcloc the-struct_64)"
"(syntax-props the-struct_64)"
"(syntax-inspector the-struct_64)"
" tamper12_65))"
"                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_64)))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_75)"
"(if(tamper-tainted?(syntax-tamper s_75))"
" s_75"
"(let-values(((the-struct_76) s_75))"
"(if(syntax?$1 the-struct_76)"
"(let-values(((tamper13_77)(tamper-tainted-for-content(syntax-content s_75))))"
"(syntax1.1"
"(syntax-content the-struct_76)"
"(syntax-scopes the-struct_76)"
"(syntax-scope-propagations the-struct_76)"
"(syntax-shifted-multi-scopes the-struct_76)"
"(syntax-mpi-shifts the-struct_76)"
"(syntax-bulk-binding-registry the-struct_76)"
"(syntax-srcloc the-struct_76)"
"(syntax-props the-struct_76)"
"(syntax-inspector the-struct_76)"
" tamper13_77))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_76))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_78 from-i_79)"
"(let-values(((ht_80) t_78))"
"(begin"
"(if((lambda(ht_81)(if(hash? ht_81)(immutable? ht_81) #f)) ht_80)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_80)))"
"((letrec-values(((for-loop_82)"
"(lambda(result_83 i_84)"
"(if i_84"
"(let-values(((i_85)(unsafe-immutable-hash-iterate-key ht_80 i_84)))"
"(if #t"
"(let-values(((result_86)"
"(let-values(((result_87) result_83))"
"(let-values(((result_88)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_85 from-i_79)))))"
"(values result_88)))))"
"(if(if #t(not((lambda x_89 result_86) i_85)) #f)"
"(for-loop_82 result_86(unsafe-immutable-hash-iterate-next ht_80 i_84))"
" result_86))"
" result_83))"
" result_83))))"
" for-loop_82)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_80))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_90 i_91)"
"(let-values(((or-part_92)(eq? sup-i_90 i_91)))(if or-part_92 or-part_92(inspector-superior? sup-i_90 i_91)))))"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_22)(if(fallback? smss_22)(car(fallback-search-list smss_22)) smss_22)))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_23)"
"(let-values(((l_24)(cdr(fallback-search-list smss_23))))(if(null?(cdr l_24))(car l_24)(fallback1.1 l_24)))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_25 smss/maybe-fallback_26)"
"(fallback1.1"
"(cons"
" smss_25"
"(if(fallback? smss/maybe-fallback_26)"
"(fallback-search-list smss/maybe-fallback_26)"
"(list smss/maybe-fallback_26))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_27 f_28)"
"(if(fallback? smss_27)"
"(let-values(((l_29)(fallback-search-list smss_27)))(fallback1.1(cons(f_28(car l_29))(cdr l_29))))"
"(f_28 smss_27))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_30 f_31)"
"(if(fallback? smss_30)"
"(fallback1.1"
"(alt-reverse"
"(let-values(((lst_32)(fallback-search-list smss_30)))"
"(begin"
"(if(list? lst_32)(void)(let-values()(in-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_34 lst_35)"
"(if(pair? lst_35)"
"(let-values(((smss_36)(unsafe-car lst_35)))"
"(if #t"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38) fold-var_34))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()(f_31 smss_36))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(if #t(for-loop_33 fold-var_37(unsafe-cdr lst_35)) fold-var_37))"
" fold-var_34))"
" fold-var_34))))"
" for-loop_33)"
" null"
" lst_32)))))"
"(f_31 smss_30))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_40)(if(fallback? smss_40)(fallback-search-list smss_40)(list smss_40))))"
"(define-values(cache)(make-weak-box #f))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_1)(let-values(((c_2)(weak-box-value cache)))(if c_2(let-values()(hash-remove! c_2 sym_1))(void))))"
"(()(set! cache(make-weak-box(make-hasheq))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scopes entry-phase entry-binding)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type 'entry #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'entry)))"
"(values"
" struct:_3"
" make-_4"
" ?_5"
"(make-struct-field-accessor -ref_6 0 'scopes)"
"(make-struct-field-accessor -ref_6 1 'phase)"
"(make-struct-field-accessor -ref_6 2 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_34 phase_35 scopes_36)"
"(let-values(((c_37)(weak-box-value cache)))"
"(if c_37"
"(let-values(((v_38)(hash-ref c_37 sym_34 #f)))"
"(if v_38"
"(if(eqv? phase_35(entry-phase v_38))"
"(if(set=? scopes_36(entry-scopes v_38))(entry-binding v_38) #f)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_39 phase_40 scopes_41 b_42)"
"(let-values(((c_43)(weak-box-value cache)))"
"(if(not c_43)"
"(let-values()(begin(clear-resolve-cache!)(resolve-cache-set! sym_39 phase_40 scopes_41 b_42)))"
"(let-values()(hash-set! c_43 sym_39(entry1.1 scopes_41 phase_40 b_42)))))))"
"(define-values"
"(struct:scope"
" scope1.1"
" scope?"
" scope-id"
" scope-kind"
" scope-bindings"
" scope-bulk-bindings"
" set-scope-bindings!"
" set-scope-bulk-bindings!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'scope"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_37 reachable-scopes_38 reach_39 register-trigger_40)"
"(if(scope-bindings s_37)"
"(let-values()"
"(register-bindings-reachable"
"(scope-bindings s_37)"
" reachable-scopes_38"
" reach_39"
" register-trigger_40))"
"(void))))"
"(cons prop:reach-scopes(lambda(s_41 reach_42)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(id_43 s_44 ser_45 state_46)"
"(if(if(empty-bindings?(scope-bindings s_44))"
"(empty-bulk-bindings?(scope-bulk-bindings s_44))"
" #f)"
" '(void)"
"(list"
" 'deserialize-scope-fill!"
" id_43"
"(ser_45(prune-bindings-to-reachable(scope-bindings s_44) state_46))"
"(ser_45(prune-bulk-bindings-to-reachable(scope-bulk-bindings s_44) state_46))))))"
"(cons"
" prop:serialize"
"(lambda(s_47 ser_48 state_49)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_49) s_47)"
"(void)"
"                         (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_47 top-level-common-scope)"
" '(deserialize-scope)"
"(list 'deserialize-scope(ser_48(scope-kind s_47)))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_50 port_51 mode_52)"
"(begin"
"                       (write-string \"#<scope:\" port_51)"
"(display(scope-id sc_50) port_51)"
"                       (write-string \":\" port_51)"
"(display(scope-kind sc_50) port_51)"
"                       (write-string \">\" port_51)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'id)"
"(make-struct-field-accessor -ref_4 1 'kind)"
"(make-struct-field-accessor -ref_4 2 'bindings)"
"(make-struct-field-accessor -ref_4 3 'bulk-bindings)"
"(make-struct-field-mutator -set!_5 2 'bindings)"
"(make-struct-field-mutator -set!_5 3 'bulk-bindings))))"
"(define-values"
"(1/deserialize-scope)"
"(case-lambda"
"(() top-level-common-scope)"
"((kind_53)(scope1.1(new-deserialize-scope-id!) kind_53(make-bindings)(make-bulk-bindings)))))"
"(define-values"
"(1/deserialize-scope-fill!)"
"(lambda(s_54 bindings_55 bulk-bindings_56)"
"(begin(set-scope-bindings! s_54 bindings_55)(set-scope-bulk-bindings! s_54 bulk-bindings_56))))"
"(define-values"
"(struct:multi-scope"
" multi-scope2.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_57 make-_58 ?_59 -ref_60 -set!_61)"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(ms_98 reach_99)(reach_99(multi-scope-scopes ms_98))))"
"(cons"
" prop:serialize"
"(lambda(ms_100 ser_101 state_102)"
"(list"
" 'deserialize-multi-scope"
"(ser_101(multi-scope-name ms_100))"
"(ser_101(multi-scope-scopes ms_100))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))"
"(values"
" struct:_57"
" make-_58"
" ?_59"
"(make-struct-field-accessor -ref_60 0 'id)"
"(make-struct-field-accessor -ref_60 1 'name)"
"(make-struct-field-accessor -ref_60 2 'scopes)"
"(make-struct-field-accessor -ref_60 3 'shifted)"
"(make-struct-field-accessor -ref_60 4 'label-shifted))))"
"(define-values"
"(1/deserialize-multi-scope)"
"(lambda(name_103 scopes_104)"
"(multi-scope2.1(new-deserialize-scope-id!) name_103 scopes_104(make-hasheqv)(make-hash))))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_105 make-_106 ?_107 -ref_108 -set!_109)"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:reach-scopes(lambda(s_131 reach_132)(reach_132(representative-scope-owner s_131))))"
"(cons"
" prop:serialize-fill!"
"(lambda(id_133 s_134 ser_135 state_136)"
"(list"
" 'deserialize-representative-scope-fill!"
" id_133"
"(ser_135(prune-bindings-to-reachable(scope-bindings s_134) state_136))"
"(ser_135(prune-bulk-bindings-to-reachable(scope-bulk-bindings s_134) state_136))"
"(ser_135(representative-scope-owner s_134)))))"
"(cons"
" prop:serialize"
"(lambda(s_137 ser_138 state_139)"
"(list"
" 'deserialize-representative-scope"
"(ser_138(scope-kind s_137))"
"(ser_138(representative-scope-phase s_137)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_140 port_141 mode_142)"
"(begin"
"                       (write-string \"#<scope:\" port_141)"
"(display(scope-id sc_140) port_141)"
"(if(representative-scope-owner sc_140)"
"(let-values()"
"(begin"
"                             (write-string \"=\" port_141)"
"(display(multi-scope-id(representative-scope-owner sc_140)) port_141)))"
"(void))"
"                       (write-string \"@\" port_141)"
"(display(representative-scope-phase sc_140) port_141)"
"                       (write-string \">\" port_141)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))"
"(values"
" struct:_105"
" make-_106"
" ?_107"
"(make-struct-field-accessor -ref_108 0 'owner)"
"(make-struct-field-accessor -ref_108 1 'phase)"
"(make-struct-field-mutator -set!_109 0 'owner)"
"(make-struct-field-mutator -set!_109 1 'phase))))"
"(define-values"
"(1/deserialize-representative-scope)"
"(lambda(kind_143 phase_144)(representative-scope3.1(new-deserialize-scope-id!) kind_143 #f #f #f phase_144)))"
"(define-values"
"(1/deserialize-representative-scope-fill!)"
"(lambda(s_145 bindings_146 bulk-bindings_147 owner_148)"
"(begin"
"(1/deserialize-scope-fill! s_145 bindings_146 bulk-bindings_147)"
"(set-representative-scope-owner! s_145 owner_148))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_149 make-_150 ?_151 -ref_152 -set!_153)"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:reach-scopes"
"(lambda(sms_175 reach_176)(reach_176(shifted-multi-scope-multi-scope sms_175))))"
"(cons"
" prop:serialize"
"(lambda(sms_177 ser_178 state_179)"
"(list"
" 'deserialize-shifted-multi-scope"
"(ser_178(shifted-multi-scope-phase sms_177))"
"(ser_178(shifted-multi-scope-multi-scope sms_177)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_180 port_181 mode_182)"
"(begin"
"                       (write-string \"#<scope:\" port_181)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_180)) port_181)"
"                       (write-string \"@\" port_181)"
"(display(shifted-multi-scope-phase sms_180) port_181)"
"                       (write-string \">\" port_181)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))"
"(values"
" struct:_149"
" make-_150"
" ?_151"
"(make-struct-field-accessor -ref_152 0 'phase)"
"(make-struct-field-accessor -ref_152 1 'multi-scope))))"
"(define-values"
"(1/deserialize-shifted-multi-scope)"
"(lambda(phase_183 multi-scope_184)(intern-shifted-multi-scope phase_183 multi-scope_184)))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_185 multi-scope_186)"
"(if(phase? phase_185)"
"(let-values()"
"(let-values(((or-part_187)(hash-ref(multi-scope-shifted multi-scope_186) phase_185 #f)))"
"(if or-part_187"
" or-part_187"
"(let-values(((sms_188)(shifted-multi-scope4.1 phase_185 multi-scope_186)))"
"(begin(hash-set!(multi-scope-shifted multi-scope_186) phase_185 sms_188) sms_188)))))"
"(let-values()"
"(let-values(((or-part_189)(hash-ref(multi-scope-label-shifted multi-scope_186) phase_185 #f)))"
"(if or-part_189"
" or-part_189"
"(let-values(((sms_190)(shifted-multi-scope4.1 phase_185 multi-scope_186)))"
"(begin(hash-set!(multi-scope-label-shifted multi-scope_186) phase_185 sms_190) sms_190))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_191 make-_192 ?_193 -ref_194 -set!_195)"
"(make-struct-type 'shifted-to-label-phase #f 1 0 #f null 'prefab #f '(0) #f 'shifted-to-label-phase)))"
"(values struct:_191 make-_192 ?_193(make-struct-field-accessor -ref_194 0 'from))))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at6.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_212 make-_213 ?_214 -ref_215 -set!_216)"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"                  (cons prop:reach-scopes (lambda (sms_238 reach_239) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_240 ser_241 state_242)"
"(list"
" 'deserialize-bulk-binding-at"
"(ser_241(bulk-binding-at-scopes bba_240))"
"(ser_241(bulk-binding-at-bulk bba_240))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))"
"(values"
" struct:_212"
" make-_213"
" ?_214"
"(make-struct-field-accessor -ref_215 0 'scopes)"
"(make-struct-field-accessor -ref_215 1 'bulk))))"
"(define-values(1/deserialize-bulk-binding-at)(lambda(scopes_243 bulk_244)(bulk-binding-at6.1 scopes_243 bulk_244)))"
"(define-values(prop:bulk-binding bulk-binding? bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class7.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_245 make-_246 ?_247 -ref_248 -set!_249)"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))"
"(values"
" struct:_245"
" make-_246"
" ?_247"
"(make-struct-field-accessor -ref_248 0 'get-symbols)"
"(make-struct-field-accessor -ref_248 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_271 s_272 extra-shifts_273)"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_271))"
" b_271"
"(append extra-shifts_273(if s_272(syntax-mpi-shifts s_272) null)))))"
"(define-values(bulk-binding-create)(lambda(b_274)(bulk-binding-class-create(bulk-binding-ref b_274))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(set! id-counter(add1 id-counter)) id-counter)))"
"(define-values(new-deserialize-scope-id!)(lambda()(-(new-scope-id!))))"
"(define-values(make-bindings)(lambda() '#hasheq()))"
"(define-values(empty-bindings?)(lambda(bs_275)(zero?(hash-count bs_275))))"
"(define-values(make-bulk-bindings)(lambda() null))"
"(define-values(empty-bulk-bindings?)(lambda(bbs_276)(null? bbs_276)))"
"(define-values(top-level-common-scope)(scope1.1 0 'module(make-bindings)(make-bulk-bindings)))"
"(define-values"
"(new-scope)"
"(lambda(kind_277)(scope1.1(new-scope-id!) kind_277(make-bindings)(make-bulk-bindings))))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope10_278)"
"(lambda(name8_279 name9_280)"
"(let-values(((name_281)(if name9_280 name8_279 #f)))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope2.1(new-scope-id!) name_281(make-hasheqv)(make-hasheqv)(make-hash))))))))"
"(case-lambda(()(new-multi-scope10_278 #f #f))((name8_282)(new-multi-scope10_278 name8_282 #t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_283 phase_284)"
"(let-values(((or-part_285)(hash-ref(multi-scope-scopes ms_283) phase_284 #f)))"
"(if or-part_285"
" or-part_285"
"(let-values(((s_286)"
"(representative-scope3.1"
"(new-scope-id!)"
" 'module"
"(make-bindings)"
"(make-bulk-bindings)"
" ms_283"
" phase_284)))"
"(begin(hash-set!(multi-scope-scopes ms_283) phase_284 s_286) s_286))))))"
"(define-values(scope>?)(lambda(sc1_287 sc2_288)(>(scope-id sc1_287)(scope-id sc2_288))))"
"(define-values"
"(apply-scope)"
"(lambda(s_289 sc_290 op_291 prop-op_292)"
"(if(shifted-multi-scope? sc_290)"
"(apply-shifted-multi-scope s_289 sc_290 op_291)"
"(let-values(((the-struct_293) s_289))"
"(if(syntax?$1 the-struct_293)"
"(let-values(((scopes31_294)(op_291(syntax-scopes s_289) sc_290))"
"((scope-propagations32_295)"
"(if(datum-has-elements?(syntax-content s_289))"
"(prop-op_292(syntax-scope-propagations s_289) sc_290(syntax-scopes s_289))"
" #f)))"
"(syntax1.1"
"(syntax-content the-struct_293)"
" scopes31_294"
" scope-propagations32_295"
"(syntax-shifted-multi-scopes the-struct_293)"
"(syntax-mpi-shifts the-struct_293)"
"(syntax-bulk-binding-registry the-struct_293)"
"(syntax-srcloc the-struct_293)"
"(syntax-props the-struct_293)"
"(syntax-inspector the-struct_293)"
"(syntax-tamper the-struct_293)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_293))))))"
"(define-values"
"(apply-shifted-multi-scope)"
"(lambda(s_296 sms_297 op_298)"
"(let-values(((smss33_299) #f))"
"(let-values(((prev-result_300) #f))"
"(let-values(((do-op_301)"
"(lambda(smss_302)"
"(if(eq? smss33_299 smss_302)"
"(let-values() prev-result_300)"
"(let-values()"
"(let-values(((r_303)"
"(let-values()"
"(fallback-update-first"
" smss_302"
"(lambda(smss_304)(op_298 smss_304 sms_297))))))"
"(begin(set! smss33_299 smss_302)(set! prev-result_300 r_303) r_303)))))))"
"(syntax-map"
" s_296"
"(lambda(tail?_305 x_306) x_306)"
"(lambda(s_307 d_308)"
"(let-values(((the-struct_309) s_307))"
"(if(syntax?$1 the-struct_309)"
"(let-values(((content34_310) d_308)"
"((shifted-multi-scopes35_311)(do-op_301(syntax-shifted-multi-scopes s_307))))"
"(syntax1.1"
" content34_310"
"(syntax-scopes the-struct_309)"
"(syntax-scope-propagations the-struct_309)"
" shifted-multi-scopes35_311"
"(syntax-mpi-shifts the-struct_309)"
"(syntax-bulk-binding-registry the-struct_309)"
"(syntax-srcloc the-struct_309)"
"(syntax-props the-struct_309)"
"(syntax-inspector the-struct_309)"
"(syntax-tamper the-struct_309)))"
"                 (raise-argument-error 'struct-copy \"syntax?\" the-struct_309))))"
" syntax-e/no-taint))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_312)"
"(let-values((()(begin(propagate-taint! s_312)(values))))"
"(let-values(((prop_313)(syntax-scope-propagations s_312)))"
"(if prop_313"
"(let-values(((new-content_314)"
"(syntax-map"
"(syntax-content s_312)"
"(lambda(tail?_315 x_316) x_316)"
"(lambda(sub-s_317 d_318)"
"(let-values(((the-struct_319) sub-s_317))"
"(if(syntax?$1 the-struct_319)"
"(let-values(((scopes36_320)"
"(propagation-apply prop_313(syntax-scopes sub-s_317) s_312))"
"((scope-propagations37_321)"
"(propagation-merge"
" prop_313"
"(syntax-scope-propagations sub-s_317)"
"(syntax-scopes sub-s_317))))"
"(syntax1.1"
"(syntax-content the-struct_319)"
" scopes36_320"
" scope-propagations37_321"
"(syntax-shifted-multi-scopes the-struct_319)"
"(syntax-mpi-shifts the-struct_319)"
"(syntax-bulk-binding-registry the-struct_319)"
"(syntax-srcloc the-struct_319)"
"(syntax-props the-struct_319)"
"(syntax-inspector the-struct_319)"
"(syntax-tamper the-struct_319)))"
"                               (raise-argument-error 'struct-copy \"syntax?\" the-struct_319))))"
" #f)))"
"(begin"
"(set-syntax-content! s_312 new-content_314)"
"(set-syntax-scope-propagations! s_312 #f)"
" new-content_314))"
"(syntax-content s_312))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_322)"
"(let-values(((content_323)(syntax-e/no-taint s_322)))"
"(if(not(tamper-armed?(syntax-tamper s_322)))"
"(let-values() content_323)"
"(if(datum-has-elements? content_323)"
"(let-values()(taint-content content_323))"
"(let-values() content_323))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_324)"
"(if(representative-scope? sc_324)"
"(intern-shifted-multi-scope(representative-scope-phase sc_324)(representative-scope-owner sc_324))"
" sc_324)))"
"(define-values"
"(add-scope)"
"(lambda(s_325 sc_326)(apply-scope s_325(generalize-scope sc_326) set-add propagation-add)))"
"(define-values"
"(add-scopes)"
"(lambda(s_327 scs_328)"
"(let-values(((lst_329) scs_328))"
"(begin"
"(if(list? lst_329)(void)(let-values()(in-list lst_329)))"
"((letrec-values(((for-loop_330)"
"(lambda(s_331 lst_332)"
"(if(pair? lst_332)"
"(let-values(((sc_333)(unsafe-car lst_332)))"
"(if #t"
"(let-values(((s_334)"
"(let-values(((s_335) s_331))"
"(let-values(((s_336)(let-values()(add-scope s_335 sc_333))))"
"(values s_336)))))"
"(if #t(for-loop_330 s_334(unsafe-cdr lst_332)) s_334))"
" s_331))"
" s_331))))"
" for-loop_330)"
" s_327"
" lst_329)))))"
"(define-values"
"(remove-scope)"
"(lambda(s_337 sc_338)(apply-scope s_337(generalize-scope sc_338) set-remove propagation-remove)))"
"(define-values"
"(remove-scopes)"
"(lambda(s_339 scs_340)"
"(let-values(((lst_341) scs_340))"
"(begin"
"(if(list? lst_341)(void)(let-values()(in-list lst_341)))"
"((letrec-values(((for-loop_342)"
"(lambda(s_343 lst_344)"
"(if(pair? lst_344)"
"(let-values(((sc_345)(unsafe-car lst_344)))"
"(if #t"
"(let-values(((s_346)"
"(let-values(((s_347) s_343))"
"(let-values(((s_348)(let-values()(remove-scope s_347 sc_345))))"
"(values s_348)))))"
"(if #t(for-loop_342 s_346(unsafe-cdr lst_344)) s_346))"
" s_343))"
" s_343))))"
" for-loop_342)"
" s_339"
" lst_341)))))"
"(define-values"
"(set-flip)"
"(lambda(s_349 e_350)(if(set-member? s_349 e_350)(set-remove s_349 e_350)(set-add s_349 e_350))))"
"(define-values"
"(flip-scope)"
"(lambda(s_351 sc_352)(apply-scope s_351(generalize-scope sc_352) set-flip propagation-flip)))"
"(define-values"
"(flip-scopes)"
"(lambda(s_353 scs_354)"
"(let-values(((lst_355) scs_354))"
"(begin"
"(if(list? lst_355)(void)(let-values()(in-list lst_355)))"
"((letrec-values(((for-loop_356)"
"(lambda(s_357 lst_358)"
"(if(pair? lst_358)"
"(let-values(((sc_359)(unsafe-car lst_358)))"
"(if #t"
"(let-values(((s_360)"
"(let-values(((s_361) s_357))"
"(let-values(((s_362)(let-values()(flip-scope s_361 sc_359))))"
"(values s_362)))))"
"(if #t(for-loop_356 s_360(unsafe-cdr lst_358)) s_360))"
" s_357))"
" s_357))))"
" for-loop_356)"
" s_353"
" lst_355)))))"
"(define-values"
"(push-scope)"
"(lambda(s_363 sms_364)"
"(let-values(((smss/maybe-fallbacks38_365) #f))"
"(let-values(((prev-result_366) #f))"
"(let-values(((push_367)"
"(lambda(smss/maybe-fallbacks_368)"
"(if(eq? smss/maybe-fallbacks38_365 smss/maybe-fallbacks_368)"
"(let-values() prev-result_366)"
"(let-values()"
"(let-values(((r_369)"
"(let-values()"
"(let-values(((smss_370)(fallback-first smss/maybe-fallbacks_368)))"
"(if(set-empty? smss_370)"
"(let-values()(set-add smss_370 sms_364))"
"(if(set-member? smss_370 sms_364)"
"(let-values() smss/maybe-fallbacks_368)"
"(let-values()"
"(fallback-push"
"(set-add smss_370 sms_364)"
" smss/maybe-fallbacks_368))))))))"
"(begin"
"(set! smss/maybe-fallbacks38_365 smss/maybe-fallbacks_368)"
"(set! prev-result_366 r_369)"
" r_369)))))))"
"(syntax-map"
" s_363"
"(lambda(tail?_371 x_372) x_372)"
"(lambda(s_373 d_374)"
"(let-values(((the-struct_375) s_373))"
"(if(syntax?$1 the-struct_375)"
"(let-values(((content39_376) d_374)"
"((shifted-multi-scopes40_377)(push_367(syntax-shifted-multi-scopes s_373))))"
"(syntax1.1"
" content39_376"
"(syntax-scopes the-struct_375)"
"(syntax-scope-propagations the-struct_375)"
" shifted-multi-scopes40_377"
"(syntax-mpi-shifts the-struct_375)"
"(syntax-bulk-binding-registry the-struct_375)"
"(syntax-srcloc the-struct_375)"
"(syntax-props the-struct_375)"
"(syntax-inspector the-struct_375)"
"(syntax-tamper the-struct_375)))"
"                 (raise-argument-error 'struct-copy \"syntax?\" the-struct_375))))"
" syntax-e/no-taint))))))"
"(define-values"
"(struct:propagation propagation12.1 propagation? propagation-prev-scs propagation-scope-ops)"
"(let-values(((struct:_378 make-_379 ?_380 -ref_381 -set!_382)"
"(make-struct-type"
" 'propagation"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'propagation)))"
"(values"
" struct:_378"
" make-_379"
" ?_380"
"(make-struct-field-accessor -ref_381 0 'prev-scs)"
"(make-struct-field-accessor -ref_381 1 'scope-ops))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_404 sc_405 prev-scs_406)"
"(if prop_404"
"(let-values(((the-struct_407) prop_404))"
"(if(propagation? the-struct_407)"
"(let-values(((scope-ops42_408)(hash-set(propagation-scope-ops prop_404) sc_405 'add)))"
"(propagation12.1(propagation-prev-scs the-struct_407) scope-ops42_408))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_407)))"
"(propagation12.1 prev-scs_406(hasheq sc_405 'add)))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_409 sc_410 prev-scs_411)"
"(if prop_409"
"(let-values(((the-struct_412) prop_409))"
"(if(propagation? the-struct_412)"
"(let-values(((scope-ops43_413)(hash-set(propagation-scope-ops prop_409) sc_410 'remove)))"
"(propagation12.1(propagation-prev-scs the-struct_412) scope-ops43_413))"
"          (raise-argument-error 'struct-copy \"propagation?\" the-struct_412)))"
"(propagation12.1 prev-scs_411(hasheq sc_410 'remove)))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_414 sc_415 prev-scs_416)"
"(if prop_414"
"(let-values(((ops_417)(propagation-scope-ops prop_414)))"
"(let-values(((current-op_418)(hash-ref ops_417 sc_415 #f)))"
"(if(if(eq? current-op_418 'flip)(= 1(hash-count ops_417)) #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_419) prop_414))"
"(if(propagation? the-struct_419)"
"(let-values(((scope-ops44_420)"
"(if(eq? current-op_418 'flip)"
"(hash-remove ops_417 sc_415)"
"(hash-set"
" ops_417"
" sc_415"
"(let-values(((tmp_421) current-op_418))"
"(if(equal? tmp_421 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_421 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation12.1(propagation-prev-scs the-struct_419) scope-ops44_420))"
"                  (raise-argument-error 'struct-copy \"propagation?\" the-struct_419)))))))"
"(propagation12.1 prev-scs_416(hasheq sc_415 'flip)))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_422 scs_423 parent-s_424)"
"(if(not prop_422)"
"(let-values() scs_423)"
"(if(eq?(propagation-prev-scs prop_422) scs_423)"
"(let-values()(syntax-scopes parent-s_424))"
"(let-values()"
"(let-values(((ht_425)(propagation-scope-ops prop_422)))"
"(begin"
"(if((lambda(ht_426)(if(hash? ht_426)(immutable? ht_426) #f)) ht_425)"
"(void)"
"(let-values()(default-in-immutable-hash ht_425)))"
"((letrec-values(((for-loop_427)"
"(lambda(scs_428 i_429)"
"(if i_429"
"(let-values(((sc_430 op_431)"
"(unsafe-immutable-hash-iterate-key+value ht_425 i_429)))"
"(if #t"
"(let-values(((scs_432)"
"(let-values(((scs_433) scs_428))"
"(let-values(((scs_434)"
"(let-values()"
"(let-values(((tmp_435) op_431))"
"(if(equal? tmp_435 'add)"
"(let-values()(set-add scs_433 sc_430))"
"(if(equal? tmp_435 'remove)"
"(let-values()"
"(set-remove scs_433 sc_430))"
"(let-values()"
"(set-flip scs_433 sc_430))))))))"
"(values scs_434)))))"
"(if #t"
"(for-loop_427 scs_432(unsafe-immutable-hash-iterate-next ht_425 i_429))"
" scs_432))"
" scs_428))"
" scs_428))))"
" for-loop_427)"
" scs_423"
"(unsafe-immutable-hash-iterate-first ht_425)))))))))"
"(define-values"
"(propagation-merge)"
"(lambda(prop_436 base-prop_437 prev-scs_438)"
"(if(not prop_436)"
"(let-values() base-prop_437)"
"(if(not base-prop_437)"
"(let-values()(propagation12.1 prev-scs_438(propagation-scope-ops prop_436)))"
"(let-values()"
"(let-values(((new-ops_439)"
"(let-values(((ht_440)(propagation-scope-ops prop_436)))"
"(begin"
"(if((lambda(ht_441)(if(hash? ht_441)(immutable? ht_441) #f)) ht_440)"
"(void)"
"(let-values()(default-in-immutable-hash ht_440)))"
"((letrec-values(((for-loop_442)"
"(lambda(ops_443 i_444)"
"(if i_444"
"(let-values(((sc_445 op_446)"
"(unsafe-immutable-hash-iterate-key+value ht_440 i_444)))"
"(if #t"
"(let-values(((ops_447)"
"(let-values(((ops_448) ops_443))"
"(let-values(((ops_449)"
"(let-values()"
"(let-values(((tmp_450) op_446))"
"(if(equal? tmp_450 'add)"
"(let-values()"
"(hash-set"
" ops_448"
" sc_445"
" 'add))"
"(if(equal? tmp_450 'remove)"
"(let-values()"
"(hash-set"
" ops_448"
" sc_445"
" 'remove))"
"(let-values()"
"(let-values(((current-op_451)"
"(hash-ref"
" ops_448"
" sc_445"
" #f)))"
"(let-values(((tmp_452)"
" current-op_451))"
"(if(equal?"
" tmp_452"
" 'add)"
"(let-values()"
"(hash-set"
" ops_448"
" sc_445"
" 'remove))"
"(if(equal?"
" tmp_452"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_448"
" sc_445"
" 'add))"
"(if(equal?"
" tmp_452"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_448"
" sc_445))"
"(let-values()"
"(hash-set"
" ops_448"
" sc_445"
" 'flip))))))))))))))"
"(values ops_449)))))"
"(if #t"
"(for-loop_442"
" ops_447"
"(unsafe-immutable-hash-iterate-next ht_440 i_444))"
" ops_447))"
" ops_443))"
" ops_443))))"
" for-loop_442)"
"(propagation-scope-ops base-prop_437)"
"(unsafe-immutable-hash-iterate-first ht_440))))))"
"(if(zero?(hash-count new-ops_439))"
" #f"
"(propagation12.1(propagation-prev-scs base-prop_437) new-ops_439))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_453 delta_454)"
"(if(zero-phase? delta_454)"
"(let-values() sms_453)"
"(if(label-phase? delta_454)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_453))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase5.1(phase- 0(shifted-multi-scope-phase sms_453)))"
"(shifted-multi-scope-multi-scope sms_453)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_453))"
"(let-values() sms_453)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_454(shifted-multi-scope-phase sms_453))"
"(shifted-multi-scope-multi-scope sms_453))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_455 phase_456)"
"(if(eqv? phase_456 0)"
" s_455"
"(let-values()"
"(let-values(((smss45_457) #f))"
"(let-values(((prev-result_458) #f))"
"(let-values(((shift-all_459)"
"(lambda(smss_460)"
"(if(eq? smss45_457 smss_460)"
"(let-values() prev-result_458)"
"(let-values()"
"(let-values(((r_461)"
"(let-values()"
"(fallback-map"
" smss_460"
"(lambda(smss_462)"
"(let-values(((ht_463) smss_462))"
"(begin"
"(if((lambda(ht_464)(if(hash? ht_464)(immutable? ht_464) #f))"
" ht_463)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_463)))"
"((letrec-values(((for-loop_465)"
"(lambda(table_466 i_467)"
"(if i_467"
"(let-values(((sms_468)"
"(unsafe-immutable-hash-iterate-key"
" ht_463"
" i_467)))"
"(if #t"
"(let-values(((table_469)"
"(let-values(((new-sms_470)"
"(shift-multi-scope"
" sms_468"
" phase_456)))"
"(begin"
" #t"
"((letrec-values(((for-loop_471)"
"(lambda(table_472)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_473)"
"(let-values(((table_474)"
" table_472))"
"(if new-sms_470"
"(let-values(((table_475)"
" table_474))"
"(let-values(((table_476)"
"(let-values()"
"(let-values(((key_477"
" val_478)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_470)"
" #t))))"
"(hash-set"
" table_475"
" key_477"
" val_478)))))"
"(values"
" table_476)))"
" table_474))))"
"(if #f"
"(for-loop_471"
" table_473)"
" table_473))"
" table_472))"
" table_472))))"
" for-loop_471)"
" table_466)))))"
"(if #t"
"(for-loop_465"
" table_469"
"(unsafe-immutable-hash-iterate-next"
" ht_463"
" i_467))"
" table_469))"
" table_466))"
" table_466))))"
" for-loop_465)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first ht_463)))))))))"
"(begin(set! smss45_457 smss_460)(set! prev-result_458 r_461) r_461)))))))"
"(syntax-map"
" s_455"
"(lambda(tail?_479 d_480) d_480)"
"(lambda(s_481 d_482)"
"(let-values(((the-struct_483) s_481))"
"(if(syntax?$1 the-struct_483)"
"(let-values(((content46_484) d_482)"
"((shifted-multi-scopes47_485)(shift-all_459(syntax-shifted-multi-scopes s_481))))"
"(syntax1.1"
" content46_484"
"(syntax-scopes the-struct_483)"
"(syntax-scope-propagations the-struct_483)"
" shifted-multi-scopes47_485"
"(syntax-mpi-shifts the-struct_483)"
"(syntax-bulk-binding-registry the-struct_483)"
"(syntax-srcloc the-struct_483)"
"(syntax-props the-struct_483)"
"(syntax-inspector the-struct_483)"
"(syntax-tamper the-struct_483)))"
"                     (raise-argument-error 'struct-copy \"syntax?\" the-struct_483))))"
" syntax-e/no-taint))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_486 src-scopes_487 dest-scopes_488)"
"(if(equal? src-scopes_487 dest-scopes_488)"
" s_486"
"(let-values(((src-smss_489 src-scs_490)"
"(set-partition"
"(let-values(((ht_493) src-scopes_487))"
"(begin"
"(if((lambda(ht_494)(if(hash? ht_494)(immutable? ht_494) #f)) ht_493)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_493)))"
"((letrec-values(((for-loop_495)"
"(lambda(table_496 i_497)"
"(if i_497"
"(let-values(((sc_498)(unsafe-immutable-hash-iterate-key ht_493 i_497)))"
"(if #t"
"(let-values(((table_499)"
"(let-values(((table_500) table_496))"
"(let-values(((table_501)"
"(let-values()"
"(let-values(((key_502 val_503)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_498))"
" #t))))"
"(hash-set"
" table_500"
" key_502"
" val_503)))))"
"(values table_501)))))"
"(if #t"
"(for-loop_495"
" table_499"
"(unsafe-immutable-hash-iterate-next ht_493 i_497))"
" table_499))"
" table_496))"
" table_496))))"
" for-loop_495)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_493))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_491 dest-scs_492)"
"(set-partition"
"(let-values(((ht_504) dest-scopes_488))"
"(begin"
"(if((lambda(ht_505)(if(hash? ht_505)(immutable? ht_505) #f)) ht_504)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_504)))"
"((letrec-values(((for-loop_506)"
"(lambda(table_507 i_508)"
"(if i_508"
"(let-values(((sc_509)(unsafe-immutable-hash-iterate-key ht_504 i_508)))"
"(if #t"
"(let-values(((table_510)"
"(let-values(((table_511) table_507))"
"(let-values(((table_512)"
"(let-values()"
"(let-values(((key_513 val_514)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_509))"
" #t))))"
"(hash-set"
" table_511"
" key_513"
" val_514)))))"
"(values table_512)))))"
"(if #t"
"(for-loop_506"
" table_510"
"(unsafe-immutable-hash-iterate-next ht_504 i_508))"
" table_510))"
" table_507))"
" table_507))))"
" for-loop_506)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_504))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs48_515) #f))"
"(let-values(((prev-result_516) #f))"
"(let-values(((swap-scs_517)"
"(lambda(scs_521)"
"(if(eq? scs48_515 scs_521)"
"(let-values() prev-result_516)"
"(let-values()"
"(let-values(((r_522)"
"(let-values()"
"(if(subset?$1 src-scs_490 scs_521)"
"(set-union(set-subtract scs_521 src-scs_490) dest-scs_492)"
" scs_521))))"
"(begin(set! scs48_515 scs_521)(set! prev-result_516 r_522) r_522)))))))"
"(let-values(((smss49_518) #f))"
"(let-values(((prev-result_519) #f))"
"(let-values(((swap-smss_520)"
"(lambda(smss_523)"
"(if(eq? smss49_518 smss_523)"
"(let-values() prev-result_519)"
"(let-values()"
"(let-values(((r_524)"
"(let-values()"
"(fallback-update-first"
" smss_523"
"(lambda(smss_525)"
"(if(subset?$1 src-smss_489 smss_525)"
"(set-union"
"(set-subtract smss_525 src-smss_489)"
" dest-smss_491)"
" smss_525))))))"
"(begin(set! smss49_518 smss_523)(set! prev-result_519 r_524) r_524)))))))"
"(syntax-map"
" s_486"
"(lambda(tail?_526 d_527) d_527)"
"(lambda(s_528 d_529)"
"(let-values(((the-struct_530) s_528))"
"(if(syntax?$1 the-struct_530)"
"(let-values(((content50_531) d_529)"
"((scopes51_532)(swap-scs_517(syntax-scopes s_528)))"
"((shifted-multi-scopes52_533)"
"(swap-smss_520(syntax-shifted-multi-scopes s_528))))"
"(syntax1.1"
" content50_531"
" scopes51_532"
"(syntax-scope-propagations the-struct_530)"
" shifted-multi-scopes52_533"
"(syntax-mpi-shifts the-struct_530)"
"(syntax-bulk-binding-registry the-struct_530)"
"(syntax-srcloc the-struct_530)"
"(syntax-props the-struct_530)"
"(syntax-inspector the-struct_530)"
"(syntax-tamper the-struct_530)))"
"                           (raise-argument-error 'struct-copy \"syntax?\" the-struct_530))))"
" syntax-e/no-taint)))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_534 phase_535)"
"(scope-set-at-fallback s_534(fallback-first(syntax-shifted-multi-scopes s_534)) phase_535)))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_536 smss_537 phase_538)"
"(let-values(((ht_539) smss_537))"
"(begin"
"(if((lambda(ht_540)(if(hash? ht_540)(immutable? ht_540) #f)) ht_539)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_539)))"
"((letrec-values(((for-loop_541)"
"(lambda(scopes_542 i_543)"
"(if i_543"
"(let-values(((sms_544)(unsafe-immutable-hash-iterate-key ht_539 i_543)))"
"(if #t"
"(let-values(((scopes_545)"
"(let-values(((scopes_546) scopes_542))"
"(if(let-values(((or-part_547)(label-phase? phase_538)))"
"(if or-part_547"
" or-part_547"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_544)))))"
"(let-values(((scopes_548) scopes_546))"
"(let-values(((scopes_549)"
"(let-values()"
"(set-add"
" scopes_548"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_544)"
"(let-values(((ph_550)"
"(shifted-multi-scope-phase"
" sms_544)))"
"(if(shifted-to-label-phase? ph_550)"
"(shifted-to-label-phase-from ph_550)"
"(phase- ph_550 phase_538))))))))"
"(values scopes_549)))"
" scopes_546))))"
"(if #t"
"(for-loop_541 scopes_545(unsafe-immutable-hash-iterate-next ht_539 i_543))"
" scopes_545))"
" scopes_542))"
" scopes_542))))"
" for-loop_541)"
"(syntax-scopes s_536)"
"(unsafe-immutable-hash-iterate-first ht_539))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_551)"
"(begin"
"      (if (set-empty? scopes_551) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_552) scopes_551))"
"(begin"
"(if((lambda(ht_553)(if(hash? ht_553)(immutable? ht_553) #f)) ht_552)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_552)))"
"((letrec-values(((for-loop_554)"
"(lambda(max-sc_555 i_556)"
"(if i_556"
"(let-values(((sc_557)(unsafe-immutable-hash-iterate-key ht_552 i_556)))"
"(if #t"
"(let-values(((max-sc_558)"
"(let-values(((max-sc_559) max-sc_555))"
"(let-values(((max-sc_560)"
"(let-values()"
"(if(scope>? sc_557 max-sc_559)"
" sc_557"
" max-sc_559))))"
"(values max-sc_560)))))"
"(if #t"
"(for-loop_554 max-sc_558(unsafe-immutable-hash-iterate-next ht_552 i_556))"
" max-sc_558))"
" max-sc_555))"
" max-sc_555))))"
" for-loop_554)"
"(set-first scopes_551)"
"(unsafe-immutable-hash-iterate-first ht_552)))))))"
"(define-values"
"(add-binding-in-scopes!)"
"(lambda(scopes_561 sym_562 binding_563)"
"(let-values(((max-sc_564)(find-max-scope scopes_561)))"
"(let-values(((bindings_565)(scope-bindings max-sc_564)))"
"(let-values(((sym-bindings_566)(hash-ref bindings_565 sym_562 '#hash())))"
"(begin"
"(set-scope-bindings!"
" max-sc_564"
"(hash-set bindings_565 sym_562(hash-set sym-bindings_566 scopes_561 binding_563)))"
"(clear-resolve-cache! sym_562)))))))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_567 binding_568)"
"(let-values(((max-sc_569)(find-max-scope scopes_567)))"
"(begin"
"(set-scope-bulk-bindings!"
" max-sc_569"
"(cons(bulk-binding-at6.1 scopes_567 binding_568)(scope-bulk-bindings max-sc_569)))"
"(remove-matching-bindings! max-sc_569 scopes_567 binding_568)"
"(clear-resolve-cache!)))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_570)"
"(let-values(((ht_571)(syntax-scopes s_570)))"
"(begin"
"(if((lambda(ht_572)(if(hash? ht_572)(immutable? ht_572) #f)) ht_571)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_571)))"
"((letrec-values(((for-loop_573)"
"(lambda(result_574 i_575)"
"(if i_575"
"(let-values(((sc_576)(unsafe-immutable-hash-iterate-key ht_571 i_575)))"
"(if #t"
"(let-values(((result_577)"
"(let-values(((result_578) result_574))"
"(let-values(((result_579)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_576) 'macro)))))"
"(values result_579)))))"
"(if(if #t(not((lambda x_580 result_577) sc_576)) #f)"
"(for-loop_573 result_577(unsafe-immutable-hash-iterate-next ht_571 i_575))"
" result_577))"
" result_574))"
" result_574))))"
" for-loop_573)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_571))))))"
"(define-values"
"(resolve21.1)"
"(lambda(ambiguous-value13_581"
" ambiguous-value16_582"
" exactly?14_583"
" exactly?17_584"
" extra-shifts15_585"
" extra-shifts18_586"
" s19_587"
" phase20_588)"
"(let-values(((s_589) s19_587))"
"(let-values(((phase_590) phase20_588))"
"(let-values(((ambiguous-value_591)(if ambiguous-value16_582 ambiguous-value13_581 #f)))"
"(let-values(((exactly?_592)(if exactly?17_584 exactly?14_583 #f)))"
"(let-values(((extra-shifts_593)(if extra-shifts18_586 extra-shifts15_585 null)))"
"(let-values()"
"(begin"
"                  (if (identifier? s_589) (void) (let-values () (raise-argument-error 'resolve \"identifier?\" s_589)))"
"                  (if (phase? phase_590) (void) (let-values () (raise-argument-error 'resolve \"phase?\" phase_590)))"
"((letrec-values(((fallback-loop_594)"
"(lambda(smss_595)"
"(let-values(((scopes_596)"
"(scope-set-at-fallback s_589(fallback-first smss_595) phase_590)))"
"(let-values(((sym_597)(syntax-content s_589)))"
"(let-values(((c43167_598)"
"(if(not exactly?_592)"
"(resolve-cache-get sym_597 phase_590 scopes_596)"
" #f)))"
"(if c43167_598"
"((lambda(b_599) b_599) c43167_598)"
"(let-values()"
"(let-values(((candidates_600)"
"(alt-reverse"
"(let-values(((ht_602) scopes_596))"
"(begin"
"(if((lambda(ht_603)"
"(if(hash? ht_603)(immutable? ht_603) #f))"
" ht_602)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_602)))"
"((letrec-values(((for-loop_604)"
"(lambda(fold-var_605 i_606)"
"(if i_606"
"(let-values(((sc_607)"
"(unsafe-immutable-hash-iterate-key"
" ht_602"
" i_606)))"
"(if #t"
"(let-values(((fold-var_608)"
"(let-values(((bindings_609)"
"(let-values(((bindings_610)"
"(hash-ref"
"(scope-bindings"
" sc_607)"
" sym_597"
" '#hash())))"
"(let-values(((lst_611)"
"(scope-bulk-bindings"
" sc_607)))"
"(begin"
"(if(list?"
" lst_611)"
"(void)"
"(let-values()"
"(in-list"
" lst_611)))"
"((letrec-values(((for-loop_612)"
"(lambda(bindings_613"
" lst_614)"
"(if(pair?"
" lst_614)"
"(let-values(((bulk-at_615)"
"(unsafe-car"
" lst_614)))"
"(if #t"
"(let-values(((bindings_616)"
"(let-values(((bulk_617)"
"(bulk-binding-at-bulk"
" bulk-at_615)))"
"(begin"
" #t"
"((letrec-values(((for-loop_618)"
"(lambda(bindings_619)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((bindings_620)"
"(let-values(((syms_621)"
"(bulk-binding-symbols"
" bulk_617"
" s_589"
" extra-shifts_593)))"
"(begin"
" #t"
"((letrec-values(((for-loop_622)"
"(lambda(bindings_623)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((bindings_624)"
"(let-values(((b-info_625)"
"(hash-ref"
" syms_621"
" sym_597"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_626)"
"(lambda(bindings_627)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((bindings_628)"
"(let-values(((bindings_629)"
" bindings_627))"
"(if(if b-info_625"
"(not"
"(hash-ref"
" bindings_629"
"(bulk-binding-at-scopes"
" bulk-at_615)"
" #f))"
" #f)"
"(let-values(((bindings_630)"
" bindings_629))"
"(let-values(((bindings_631)"
"(let-values()"
"(hash-set"
" bindings_630"
"(bulk-binding-at-scopes"
" bulk-at_615)"
"((bulk-binding-create"
" bulk_617)"
" bulk_617"
" b-info_625"
" sym_597)))))"
"(values"
" bindings_631)))"
" bindings_629))))"
"(if #f"
"(for-loop_626"
" bindings_628)"
" bindings_628))"
" bindings_627))"
" bindings_627))))"
" for-loop_626)"
" bindings_623)))))"
"(if #f"
"(for-loop_622"
" bindings_624)"
" bindings_624))"
" bindings_623))"
" bindings_623))))"
" for-loop_622)"
" bindings_619)))))"
"(if #f"
"(for-loop_618"
" bindings_620)"
" bindings_620))"
" bindings_619))"
" bindings_619))))"
" for-loop_618)"
" bindings_613)))))"
"(if #t"
"(for-loop_612"
" bindings_616"
"(unsafe-cdr"
" lst_614))"
" bindings_616))"
" bindings_613))"
" bindings_613))))"
" for-loop_612)"
" bindings_610"
" lst_611))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_632)"
"(lambda(fold-var_633)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_634)"
"(let-values(((ht_635)"
" bindings_609))"
"(begin"
"(if((lambda(ht_636)"
"(if(hash?"
" ht_636)"
"(immutable?"
" ht_636)"
" #f))"
" ht_635)"
"(void)"
"(let-values()"
"(default-in-immutable-hash"
" ht_635)))"
"((letrec-values(((for-loop_637)"
"(lambda(fold-var_638"
" i_639)"
"(if i_639"
"(let-values(((b-scopes_640"
" binding_641)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_635"
" i_639)))"
"(if #t"
"(let-values(((fold-var_642)"
"(let-values(((fold-var_643)"
" fold-var_638))"
"(if(subset?$1"
" b-scopes_640"
" scopes_596)"
"(let-values(((fold-var_644)"
" fold-var_643))"
"(let-values(((fold-var_645)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" b-scopes_640"
" binding_641))"
" fold-var_644))))"
"(values"
" fold-var_645)))"
" fold-var_643))))"
"(if #t"
"(for-loop_637"
" fold-var_642"
"(unsafe-immutable-hash-iterate-next"
" ht_635"
" i_639))"
" fold-var_642))"
" fold-var_638))"
" fold-var_638))))"
" for-loop_637)"
" fold-var_633"
"(unsafe-immutable-hash-iterate-first"
" ht_635))))))"
"(if #f"
"(for-loop_632"
" fold-var_634)"
" fold-var_634))"
" fold-var_633))"
" fold-var_633))))"
" for-loop_632)"
" fold-var_605)))))"
"(if #t"
"(for-loop_604"
" fold-var_608"
"(unsafe-immutable-hash-iterate-next"
" ht_602"
" i_606))"
" fold-var_608))"
" fold-var_605))"
" fold-var_605))))"
" for-loop_604)"
" null"
"(unsafe-immutable-hash-iterate-first ht_602)))))))"
"(let-values(((max-candidate_601)"
"(if(pair? candidates_600)"
"(let-values(((lst_646)(cdr candidates_600)))"
"(begin"
"(if(list? lst_646)"
"(void)"
"(let-values()(in-list lst_646)))"
"((letrec-values(((for-loop_647)"
"(lambda(max-c_648 lst_649)"
"(if(pair? lst_649)"
"(let-values(((c_650)"
"(unsafe-car"
" lst_649)))"
"(if #t"
"(let-values(((max-c_651)"
"(let-values(((max-c_652)"
" max-c_648))"
"(let-values(((max-c_653)"
"(let-values()"
"(if(>"
"(set-count"
"(car"
" c_650))"
"(set-count"
"(car"
" max-c_652)))"
" c_650"
" max-c_652))))"
"(values"
" max-c_653)))))"
"(if #t"
"(for-loop_647"
" max-c_651"
"(unsafe-cdr"
" lst_649))"
" max-c_651))"
" max-c_648))"
" max-c_648))))"
" for-loop_647)"
"(car candidates_600)"
" lst_646)))"
" #f)))"
"(if max-candidate_601"
"(let-values()"
"(if(not"
"(let-values(((lst_654) candidates_600))"
"(begin"
"(if(list? lst_654)"
"(void)"
"(let-values()(in-list lst_654)))"
"((letrec-values(((for-loop_655)"
"(lambda(result_656 lst_657)"
"(if(pair? lst_657)"
"(let-values(((c_658)"
"(unsafe-car"
" lst_657)))"
"(if #t"
"(let-values(((result_659)"
"(let-values(((result_660)"
" result_656))"
"(let-values(((result_661)"
"(let-values()"
"(let-values()"
"(subset?$1"
"(car"
" c_658)"
"(car"
" max-candidate_601))))))"
"(values"
" result_661)))))"
"(if(if #t"
"(not"
"((lambda x_662"
"(not result_659))"
" c_658))"
" #f)"
"(for-loop_655"
" result_659"
"(unsafe-cdr lst_657))"
" result_659))"
" result_656))"
" result_656))))"
" for-loop_655)"
" #t"
" lst_654))))"
"(let-values()"
"(if(fallback? smss_595)"
"(fallback-loop_594(fallback-rest smss_595))"
" ambiguous-value_591))"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_597"
" phase_590"
" scopes_596"
"(cdr max-candidate_601))"
"(if(let-values(((or-part_663)(not exactly?_592)))"
"(if or-part_663"
" or-part_663"
"(equal?"
"(set-count scopes_596)"
"(set-count(car max-candidate_601)))))"
"(cdr max-candidate_601)"
" #f)))))"
"(let-values()"
"(if(fallback? smss_595)"
"(fallback-loop_594(fallback-rest smss_595))"
" #f)))))))))))))"
" fallback-loop_594)"
"(syntax-shifted-multi-scopes s_589)))))))))))"
"(define-values"
"(unpack22.1$1)"
"(lambda(given-kws_664 given-args_665 s19_666 phase20_667)"
"(let-values(((ambiguous-value16_668)(if(pair? given-kws_664)(eq? '#:ambiguous-value(car given-kws_664)) #f)))"
"(let-values(((ambiguous-value13_669)(if ambiguous-value16_668(car given-args_665)(void)))"
"((given-kws_670)(if ambiguous-value16_668(cdr given-kws_664) given-kws_664))"
"((given-args_671)(if ambiguous-value16_668(cdr given-args_665) given-args_665)))"
"(let-values(((exactly?17_672)(if(pair? given-kws_670)(eq? '#:exactly?(car given-kws_670)) #f)))"
"(let-values(((exactly?14_673)(if exactly?17_672(car given-args_671)(void)))"
"((given-kws_674)(if exactly?17_672(cdr given-kws_670) given-kws_670))"
"((given-args_675)(if exactly?17_672(cdr given-args_671) given-args_671)))"
"(let-values(((extra-shifts18_676)(pair? given-kws_674)))"
"(let-values(((extra-shifts15_677)(if extra-shifts18_676(car given-args_675)(void))))"
"(resolve21.1"
" ambiguous-value13_669"
" ambiguous-value16_668"
" exactly?14_673"
" exactly?17_672"
" extra-shifts15_677"
" extra-shifts18_676"
" s19_666"
" phase20_667)))))))))"
"(define-values"
"(resolve23.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_678 given-argc_679)"
"(if(= given-argc_679 4)"
"(let-values(((l1_680) given-kws_678))"
"(let-values(((l1_681)"
"(if(null? l1_680) l1_680(if(eq?(car l1_680) '#:ambiguous-value)(cdr l1_680) l1_680))))"
"(let-values(((l1_682) l1_681))"
"(let-values(((l1_683)(if(null? l1_682) l1_682(if(eq?(car l1_682) '#:exactly?)(cdr l1_682) l1_682))))"
"(let-values(((l1_684) l1_683))"
"(let-values(((l1_685)"
"(if(null? l1_684) l1_684(if(eq?(car l1_684) '#:extra-shifts)(cdr l1_684) l1_684))))"
"(null? l1_685)))))))"
" #f))"
"(case-lambda"
"((given-kws_686 given-args_687 s_688 phase_689)(unpack22.1$1 given-kws_686 given-args_687 s_688 phase_689)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
"(let-values(((resolve_690)(case-lambda((s_691 phase_692)(unpack22.1$1 null null s_691 phase_692)))))"
" resolve_690)))"
"(define-values"
"(remove-matching-bindings!)"
"(lambda(sc_693 scopes_694 bulk_695)"
"(let-values(((bulk-symbols_696)(bulk-binding-symbols bulk_695 #f null)))"
"(let-values(((bindings_697)(scope-bindings sc_693)))"
"(let-values(((new-bindings_698)"
"(if(<(hash-count bindings_697)(hash-count bulk-symbols_696))"
"(let-values()"
"(let-values(((ht_699) bindings_697))"
"(begin"
"(if((lambda(ht_700)(if(hash? ht_700)(immutable? ht_700) #f)) ht_699)"
"(void)"
"(let-values()(default-in-immutable-hash ht_699)))"
"((letrec-values(((for-loop_701)"
"(lambda(bindings_702 i_703)"
"(if i_703"
"(let-values(((sym_704 sym-bindings_705)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_699"
" i_703)))"
"(if #t"
"(let-values(((bindings_706)"
"(let-values(((bindings_707) bindings_702))"
"(let-values(((bindings_708)"
"(let-values()"
"(if(hash-ref"
" bulk-symbols_696"
" sym_704"
" #f)"
"(hash-set"
" bindings_707"
" sym_704"
"(hash-remove"
" sym-bindings_705"
" scopes_694))"
" bindings_707))))"
"(values bindings_708)))))"
"(if #t"
"(for-loop_701"
" bindings_706"
"(unsafe-immutable-hash-iterate-next ht_699 i_703))"
" bindings_706))"
" bindings_702))"
" bindings_702))))"
" for-loop_701)"
" bindings_697"
"(unsafe-immutable-hash-iterate-first ht_699)))))"
"(let-values()"
"(let-values(((ht_709) bulk-symbols_696))"
"(begin"
"(if((lambda(ht_710)(if(hash? ht_710)(immutable? ht_710) #f)) ht_709)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_709)))"
"((letrec-values(((for-loop_711)"
"(lambda(bindings_712 i_713)"
"(if i_713"
"(let-values(((sym_714)"
"(unsafe-immutable-hash-iterate-key ht_709 i_713)))"
"(if #t"
"(let-values(((bindings_715)"
"(let-values(((bindings_716) bindings_712))"
"(let-values(((bindings_717)"
"(let-values()"
"(let-values(((sym-bindings_718)"
"(hash-ref"
" bindings_716"
" sym_714"
" #f)))"
"(if sym-bindings_718"
"(hash-set"
" bindings_716"
" sym_714"
"(hash-remove"
" sym-bindings_718"
" scopes_694))"
" bindings_716)))))"
"(values bindings_717)))))"
"(if #t"
"(for-loop_711"
" bindings_715"
"(unsafe-immutable-hash-iterate-next ht_709 i_713))"
" bindings_715))"
" bindings_712))"
" bindings_712))))"
" for-loop_711)"
" bindings_697"
"(unsafe-immutable-hash-iterate-first ht_709))))))))"
"(set-scope-bindings! sc_693 new-bindings_698))))))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_719 b_720 phase_721)"
"(if(eq?(syntax-e$1 a_719)(syntax-e$1 b_720))"
"(equal?(syntax-scope-set a_719 phase_721)(syntax-scope-set b_720 phase_721))"
" #f)))"
"(define-values"
"(prune-bindings-to-reachable)"
"(lambda(bindings_722 state_723)"
"(let-values(((or-part_724)(hash-ref(serialize-state-bindings-intern state_723) bindings_722 #f)))"
"(if or-part_724"
" or-part_724"
"(let-values(((reachable-scopes_725)(serialize-state-reachable-scopes state_723)))"
"(let-values(((new-bindings_726)"
"(let-values(((ht_727) bindings_722))"
"(begin"
"(if((lambda(ht_728)(if(hash? ht_728)(immutable? ht_728) #f)) ht_727)"
"(void)"
"(let-values()(default-in-immutable-hash ht_727)))"
"((letrec-values(((for-loop_729)"
"(lambda(table_730 i_731)"
"(if i_731"
"(let-values(((sym_732 bindings-for-sym_733)"
"(unsafe-immutable-hash-iterate-key+value ht_727 i_731)))"
"(if #t"
"(let-values(((table_734)"
"(let-values(((new-bindings-for-sym_735)"
"(let-values(((ht_736)"
" bindings-for-sym_733))"
"(begin"
"(if((lambda(ht_737)"
"(if(hash? ht_737)"
"(immutable? ht_737)"
" #f))"
" ht_736)"
"(void)"
"(let-values()"
"(default-in-immutable-hash"
" ht_736)))"
"((letrec-values(((for-loop_738)"
"(lambda(table_739"
" i_740)"
"(if i_740"
"(let-values(((scopes_741"
" binding_742)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_736"
" i_740)))"
"(if #t"
"(let-values(((table_743)"
"(let-values(((table_744)"
" table_739))"
"(if(subset?$1"
" scopes_741"
" reachable-scopes_725)"
"(let-values(((table_745)"
" table_744))"
"(let-values(((table_746)"
"(let-values()"
"(let-values(((key_747"
" val_748)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_741"
" state_723)"
" binding_742))))"
"(hash-set"
" table_745"
" key_747"
" val_748)))))"
"(values"
" table_746)))"
" table_744))))"
"(if #t"
"(for-loop_738"
" table_743"
"(unsafe-immutable-hash-iterate-next"
" ht_736"
" i_740))"
" table_743))"
" table_739))"
" table_739))))"
" for-loop_738)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_736))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_749)"
"(lambda(table_750)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_751)"
"(let-values(((table_752)"
" table_750))"
"(if(zero?"
"(hash-count"
" new-bindings-for-sym_735))"
" table_752"
"(let-values(((table_753)"
" table_752))"
"(let-values(((table_754)"
"(let-values()"
"(let-values(((key_755"
" val_756)"
"(let-values()"
"(values"
" sym_732"
" new-bindings-for-sym_735))))"
"(hash-set"
" table_753"
" key_755"
" val_756)))))"
"(values"
" table_754)))))))"
"(if #f"
"(for-loop_749"
" table_751)"
" table_751))"
" table_750))"
" table_750))))"
" for-loop_749)"
" table_730)))))"
"(if #t"
"(for-loop_729"
" table_734"
"(unsafe-immutable-hash-iterate-next ht_727 i_731))"
" table_734))"
" table_730))"
" table_730))))"
" for-loop_729)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_727))))))"
"(begin"
"(hash-set!(serialize-state-bindings-intern state_723) bindings_722 new-bindings_726)"
" new-bindings_726)))))))"
"(define-values"
"(prune-bulk-bindings-to-reachable)"
"(lambda(bulk-bindings_757 state_758)"
"(if bulk-bindings_757"
"(let-values(((or-part_759)(hash-ref(serialize-state-bulk-bindings-intern state_758) bulk-bindings_757 #f)))"
"(if or-part_759"
" or-part_759"
"(let-values(((reachable-scopes_760)(serialize-state-reachable-scopes state_758)))"
"(let-values(((new-bulk-bindings_761)"
"(alt-reverse"
"(let-values(((lst_762) bulk-bindings_757))"
"(begin"
"(if(list? lst_762)(void)(let-values()(in-list lst_762)))"
"((letrec-values(((for-loop_763)"
"(lambda(fold-var_764 lst_765)"
"(if(pair? lst_765)"
"(let-values(((bba_766)(unsafe-car lst_765)))"
"(if #t"
"(let-values(((fold-var_767)"
"(let-values(((fold-var_768) fold-var_764))"
"(if(subset?$1"
"(bulk-binding-at-scopes bba_766)"
" reachable-scopes_760)"
"(let-values(((fold-var_769) fold-var_768))"
"(let-values(((fold-var_770)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((the-struct_771)"
" bba_766))"
"(if(bulk-binding-at?"
" the-struct_771)"
"(let-values(((scopes53_772)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_766)"
" state_758)))"
"(bulk-binding-at6.1"
" scopes53_772"
"(bulk-binding-at-bulk"
" the-struct_771)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                     \"bulk-binding-at?\""
" the-struct_771))))"
" fold-var_769))))"
"(values fold-var_770)))"
" fold-var_768))))"
"(if #t"
"(for-loop_763 fold-var_767(unsafe-cdr lst_765))"
" fold-var_767))"
" fold-var_764))"
" fold-var_764))))"
" for-loop_763)"
" null"
" lst_762))))))"
"(begin"
"(hash-set!(serialize-state-bulk-bindings-intern state_758) bulk-bindings_757 new-bulk-bindings_761)"
"(if(pair? new-bulk-bindings_761) new-bulk-bindings_761 #f))))))"
" #f)))"
"(define-values"
"(register-bindings-reachable)"
"(lambda(bindings_773 reachable-scopes_774 reach_775 register-trigger_776)"
"(let-values(((ht_777) bindings_773))"
"(begin"
"(if((lambda(ht_778)(if(hash? ht_778)(immutable? ht_778) #f)) ht_777)"
"(void)"
"(let-values()(default-in-immutable-hash ht_777)))"
"((letrec-values(((for-loop_779)"
"(lambda(fold-var_780 i_781)"
"(if i_781"
"(let-values(((sym_782 bindings-for-sym_783)"
"(unsafe-immutable-hash-iterate-key+value ht_777 i_781)))"
"(if #t"
"(let-values(((fold-var_784)"
"(let-values(((ht_785) bindings-for-sym_783))"
"(begin"
"(if((lambda(ht_786)(if(hash? ht_786)(immutable? ht_786) #f))"
" ht_785)"
"(void)"
"(let-values()(default-in-immutable-hash ht_785)))"
"((letrec-values(((for-loop_787)"
"(lambda(fold-var_788 i_789)"
"(if i_789"
"(let-values(((scopes_790 binding_791)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_785"
" i_789)))"
"(if #t"
"(let-values(((fold-var_792)"
"(let-values(((fold-var_793)"
" fold-var_788))"
"(let-values(((fold-var_794)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((v_795)"
"(if(binding-reach-scopes?"
" binding_791)"
"((binding-reach-scopes-ref"
" binding_791)"
" binding_791)"
" #f)))"
"(if v_795"
"(let-values()"
"(if(subset?$1"
" scopes_790"
" reachable-scopes_774)"
"(let-values()"
"(reach_775"
" v_795))"
"(let-values()"
"(let-values(((ht_796)"
" scopes_790))"
"(begin"
"(if((lambda(ht_797)"
"(if(hash?"
" ht_797)"
"(immutable?"
" ht_797)"
" #f))"
" ht_796)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_796)))"
"((letrec-values(((for-loop_798)"
"(lambda(fold-var_799"
" i_800)"
"(if i_800"
"(let-values(((sc_801)"
"(unsafe-immutable-hash-iterate-key"
" ht_796"
" i_800)))"
"(if #t"
"(let-values(((fold-var_802)"
"(let-values(((fold-var_803)"
" fold-var_799))"
"(if(set-member?"
" reachable-scopes_774"
" sc_801)"
" fold-var_803"
"(let-values(((fold-var_804)"
" fold-var_803))"
"(let-values(((fold-var_805)"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_776"
" sc_801"
" v_795))"
"(void)))))"
"(values"
" fold-var_805)))))))"
"(if #t"
"(for-loop_798"
" fold-var_802"
"(unsafe-immutable-hash-iterate-next"
" ht_796"
" i_800))"
" fold-var_802))"
" fold-var_799))"
" fold-var_799))))"
" for-loop_798)"
"(void)"
"(unsafe-immutable-hash-iterate-first"
" ht_796)))))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_794)))))"
"(if #t"
"(for-loop_787"
" fold-var_792"
"(unsafe-immutable-hash-iterate-next"
" ht_785"
" i_789))"
" fold-var_792))"
" fold-var_788))"
" fold-var_788))))"
" for-loop_787)"
" fold-var_780"
"(unsafe-immutable-hash-iterate-first ht_785))))))"
"(if #t"
"(for-loop_779 fold-var_784(unsafe-immutable-hash-iterate-next ht_777 i_781))"
" fold-var_784))"
" fold-var_780))"
" fold-var_780))))"
" for-loop_779)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_777))))))"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_1 key_2)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_1)))"
"(values))))"
"(let-values(((v_3)(hash-ref(syntax-props s_1) key_2 #f)))(plain-property-value v_3))))"
"((s_4 key_5 val_6)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_4)))"
"(values))))"
"(let-values(((pval_7)(if(eq? key_5 'paren-shape)(preserved-property-value1.1 val_6) val_6)))"
"(let-values(((the-struct_8) s_4))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((props1_9)(hash-set(syntax-props s_4) key_5 pval_7)))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-scope-propagations the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-bulk-binding-registry the-struct_8)"
"(syntax-srcloc the-struct_8)"
" props1_9"
"(syntax-inspector the-struct_8)"
"(syntax-tamper the-struct_8)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_8))))))"
"((s_10 key_11 val_12 preserved?_13)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_10)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_13"
"(let-values()"
"(if(if(symbol? key_11)(symbol-interned? key_11) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                               \"key for a perserved property must be an interned symbol\""
"                               \"given key\""
" key_11"
"                               \"given value\""
" val_12))))"
"(void))"
"(values))))"
"(let-values(((pval_14)(if preserved?_13(preserved-property-value1.1 val_12) val_12)))"
"(let-values(((the-struct_15) s_10))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((props2_16)(hash-set(syntax-props s_10) key_11 pval_14)))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-scope-propagations the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-bulk-binding-registry the-struct_15)"
"(syntax-srcloc the-struct_15)"
" props2_16"
"(syntax-inspector the-struct_15)"
"(syntax-tamper the-struct_15)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_15)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_17 key_18)"
"(begin"
"      (if (syntax?$1 s_17) (void) (let-values () (raise-argument-error 'syntax-property-preserved \"syntax?\" s_17)))"
"(if(if(symbol? key_18)(symbol-interned? key_18) #f)"
"(void)"
"        (let-values () (raise-argument-error 'syntax-property \"(and/c symbol? symbol-interned?)\" key_18)))"
"(preserved-property-value?(hash-ref(syntax-props s_17) key_18 #f)))))"
"(define-values"
"(syntax-property-symbol-keys$1)"
"(lambda(s_19)"
"(begin"
"      (if (syntax?$1 s_19) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_19)))"
"(alt-reverse"
"(let-values(((ht_20)(syntax-props s_19)))"
"(begin"
"(if((lambda(ht_21)(if(hash? ht_21)(immutable? ht_21) #f)) ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)(unsafe-immutable-hash-iterate-key+value ht_20 i_24)))"
"(if #t"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28) fold-var_23))"
"(if(if(symbol? k_25)(symbol-interned? k_25) #f)"
"(let-values(((fold-var_29) fold-var_28))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons(let-values() k_25) fold-var_29))))"
"(values fold-var_30)))"
" fold-var_28))))"
"(if #t"
"(for-loop_22 fold-var_27(unsafe-immutable-hash-iterate-next ht_20 i_24))"
" fold-var_27))"
" fold-var_23))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first ht_20))))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_31 key_32)"
"(if(hash-ref(syntax-props s_31) key_32 #f)"
"(let-values(((the-struct_33) s_31))"
"(if(syntax?$1 the-struct_33)"
"(let-values(((props3_34)(hash-remove(syntax-props s_31) key_32)))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-scope-propagations the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-mpi-shifts the-struct_33)"
"(syntax-bulk-binding-registry the-struct_33)"
"(syntax-srcloc the-struct_33)"
" props3_34"
"(syntax-inspector the-struct_33)"
"(syntax-tamper the-struct_33)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_33)))"
" s_31)))"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:binding-reach-scopes(lambda(b_27)(binding-free=id b_27))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'frame-id)"
"(make-struct-field-accessor -ref_4 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_28)(if(full-binding? b_28)(full-binding-frame-id b_28) #f)))"
"(define-values(binding-free=id)(lambda(b_29)(if(full-binding? b_29)(full-binding-free=id b_29) #f)))"
"(define-values"
"(make-module-binding20.1)"
"(lambda(extra-inspector8_1"
" extra-inspector16_2"
" frame-id6_3"
" frame-id14_4"
" free=id7_5"
" free=id15_6"
" nominal-module2_7"
" nominal-module10_8"
" nominal-phase3_9"
" nominal-phase11_10"
" nominal-require-phase5_11"
" nominal-require-phase13_12"
" nominal-sym4_13"
" nominal-sym12_14"
" wrt1_15"
" wrt9_16"
" module17_17"
" phase18_18"
" sym19_19)"
"(let-values(((module_20) module17_17))"
"(let-values(((phase_21) phase18_18))"
"(let-values(((sym_22) sym19_19))"
"(let-values(((wrt-sym_23)(if wrt9_16 wrt1_15 sym_22)))"
"(let-values(((nominal-module_24)(if nominal-module10_8 nominal-module2_7 module_20)))"
"(let-values(((nominal-phase_25)(if nominal-phase11_10 nominal-phase3_9 phase_21)))"
"(let-values(((nominal-sym_26)(if nominal-sym12_14 nominal-sym4_13 sym_22)))"
"(let-values(((nominal-require-phase_27)(if nominal-require-phase13_12 nominal-require-phase5_11 0)))"
"(let-values(((frame-id_28)(if frame-id14_4 frame-id6_3 #f)))"
"(let-values(((free=id_29)(if free=id15_6 free=id7_5 #f)))"
"(let-values(((extra-inspector_30)(if extra-inspector16_2 extra-inspector8_1 #f)))"
"(let-values()"
"(if(let-values(((or-part_31) frame-id_28))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32) free=id_29))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33) extra-inspector_30))"
"(if or-part_33"
" or-part_33"
"(not"
"(if(eq? nominal-module_24 module_20)"
"(if(eqv? nominal-phase_25 phase_21)"
"(if(eq? nominal-sym_26 sym_22)(eqv? nominal-require-phase_27 0) #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding47.1"
" frame-id_28"
" free=id_29"
" module_20"
" phase_21"
" sym_22"
" nominal-module_24"
" nominal-phase_25"
" nominal-sym_26"
" nominal-require-phase_27"
" extra-inspector_30))"
"(let-values()(simple-module-binding48.1 module_20 phase_21 sym_22)))))))))))))))))"
"(define-values"
"(unpack21.1$1)"
"(lambda(given-kws_34 given-args_35 module17_36 phase18_37 sym19_38)"
"(let-values(((extra-inspector16_39)(if(pair? given-kws_34)(eq? '#:extra-inspector(car given-kws_34)) #f)))"
"(let-values(((extra-inspector8_40)(if extra-inspector16_39(car given-args_35)(void)))"
"((given-kws_41)(if extra-inspector16_39(cdr given-kws_34) given-kws_34))"
"((given-args_42)(if extra-inspector16_39(cdr given-args_35) given-args_35)))"
"(let-values(((frame-id14_43)(if(pair? given-kws_41)(eq? '#:frame-id(car given-kws_41)) #f)))"
"(let-values(((frame-id6_44)(if frame-id14_43(car given-args_42)(void)))"
"((given-kws_45)(if frame-id14_43(cdr given-kws_41) given-kws_41))"
"((given-args_46)(if frame-id14_43(cdr given-args_42) given-args_42)))"
"(let-values(((free=id15_47)(if(pair? given-kws_45)(eq? '#:free=id(car given-kws_45)) #f)))"
"(let-values(((free=id7_48)(if free=id15_47(car given-args_46)(void)))"
"((given-kws_49)(if free=id15_47(cdr given-kws_45) given-kws_45))"
"((given-args_50)(if free=id15_47(cdr given-args_46) given-args_46)))"
"(let-values(((nominal-module10_51)"
"(if(pair? given-kws_49)(eq? '#:nominal-module(car given-kws_49)) #f)))"
"(let-values(((nominal-module2_52)(if nominal-module10_51(car given-args_50)(void)))"
"((given-kws_53)(if nominal-module10_51(cdr given-kws_49) given-kws_49))"
"((given-args_54)(if nominal-module10_51(cdr given-args_50) given-args_50)))"
"(let-values(((nominal-phase11_55)"
"(if(pair? given-kws_53)(eq? '#:nominal-phase(car given-kws_53)) #f)))"
"(let-values(((nominal-phase3_56)(if nominal-phase11_55(car given-args_54)(void)))"
"((given-kws_57)(if nominal-phase11_55(cdr given-kws_53) given-kws_53))"
"((given-args_58)(if nominal-phase11_55(cdr given-args_54) given-args_54)))"
"(let-values(((nominal-require-phase13_59)"
"(if(pair? given-kws_57)(eq? '#:nominal-require-phase(car given-kws_57)) #f)))"
"(let-values(((nominal-require-phase5_60)"
"(if nominal-require-phase13_59(car given-args_58)(void)))"
"((given-kws_61)(if nominal-require-phase13_59(cdr given-kws_57) given-kws_57))"
"((given-args_62)"
"(if nominal-require-phase13_59(cdr given-args_58) given-args_58)))"
"(let-values(((nominal-sym12_63)"
"(if(pair? given-kws_61)(eq? '#:nominal-sym(car given-kws_61)) #f)))"
"(let-values(((nominal-sym4_64)(if nominal-sym12_63(car given-args_62)(void)))"
"((given-kws_65)(if nominal-sym12_63(cdr given-kws_61) given-kws_61))"
"((given-args_66)(if nominal-sym12_63(cdr given-args_62) given-args_62)))"
"(let-values(((wrt9_67)(pair? given-kws_65)))"
"(let-values(((wrt1_68)(if wrt9_67(car given-args_66)(void))))"
"(make-module-binding20.1"
" extra-inspector8_40"
" extra-inspector16_39"
" frame-id6_44"
" frame-id14_43"
" free=id7_48"
" free=id15_47"
" nominal-module2_52"
" nominal-module10_51"
" nominal-phase3_56"
" nominal-phase11_55"
" nominal-require-phase5_60"
" nominal-require-phase13_59"
" nominal-sym4_64"
" nominal-sym12_63"
" wrt1_68"
" wrt9_67"
" module17_36"
" phase18_37"
" sym19_38)))))))))))))))))))"
"(define-values"
"(make-module-binding22.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_69 given-argc_70)"
"(if(= given-argc_70 5)"
"(let-values(((l1_71) given-kws_69))"
"(let-values(((l1_72)(if(null? l1_71) l1_71(if(eq?(car l1_71) '#:extra-inspector)(cdr l1_71) l1_71))))"
"(let-values(((l1_73) l1_72))"
"(let-values(((l1_74)(if(null? l1_73) l1_73(if(eq?(car l1_73) '#:frame-id)(cdr l1_73) l1_73))))"
"(let-values(((l1_75) l1_74))"
"(let-values(((l1_76)(if(null? l1_75) l1_75(if(eq?(car l1_75) '#:free=id)(cdr l1_75) l1_75))))"
"(let-values(((l1_77) l1_76))"
"(let-values(((l1_78)"
"(if(null? l1_77) l1_77(if(eq?(car l1_77) '#:nominal-module)(cdr l1_77) l1_77))))"
"(let-values(((l1_79) l1_78))"
"(let-values(((l1_80)"
"(if(null? l1_79)"
" l1_79"
"(if(eq?(car l1_79) '#:nominal-phase)(cdr l1_79) l1_79))))"
"(let-values(((l1_81) l1_80))"
"(let-values(((l1_82)"
"(if(null? l1_81)"
" l1_81"
"(if(eq?(car l1_81) '#:nominal-require-phase)(cdr l1_81) l1_81))))"
"(let-values(((l1_83) l1_82))"
"(let-values(((l1_84)"
"(if(null? l1_83)"
" l1_83"
"(if(eq?(car l1_83) '#:nominal-sym)(cdr l1_83) l1_83))))"
"(let-values(((l1_85) l1_84))"
"(let-values(((l1_86)"
"(if(null? l1_85)"
" l1_85"
"(if(eq?(car l1_85) '#:wrt)(cdr l1_85) l1_85))))"
"(null? l1_86)))))))))))))))))"
" #f))"
"(case-lambda"
"((given-kws_87 given-args_88 module_89 phase_90 sym_91)"
"(unpack21.1$1 given-kws_87 given-args_88 module_89 phase_90 sym_91)))"
" null"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:wrt)"
"(let-values(((make-module-binding_92)"
"(case-lambda((module_93 phase_94 sym_95)(unpack21.1$1 null null module_93 phase_94 sym_95)))))"
" make-module-binding_92)))"
"(define-values"
"(module-binding-update44.1)"
"(lambda(extra-inspector32_96"
" extra-inspector42_97"
" frame-id30_98"
" frame-id40_99"
" free=id31_100"
" free=id41_101"
" module23_102"
" module33_103"
" nominal-module26_104"
" nominal-module36_105"
" nominal-phase27_106"
" nominal-phase37_107"
" nominal-require-phase29_108"
" nominal-require-phase39_109"
" nominal-sym28_110"
" nominal-sym38_111"
" phase24_112"
" phase34_113"
" sym25_114"
" sym35_115"
" b43_116)"
"(let-values(((b_117) b43_116))"
"(let-values(((module_118)(if module33_103 module23_102(module-binding-module b_117))))"
"(let-values(((phase_119)(if phase34_113 phase24_112(module-binding-phase b_117))))"
"(let-values(((sym_120)(if sym35_115 sym25_114(module-binding-sym b_117))))"
"(let-values(((nominal-module_121)"
"(if nominal-module36_105 nominal-module26_104(module-binding-nominal-module b_117))))"
"(let-values(((nominal-phase_122)"
"(if nominal-phase37_107 nominal-phase27_106(module-binding-nominal-phase b_117))))"
"(let-values(((nominal-sym_123)"
"(if nominal-sym38_111 nominal-sym28_110(module-binding-nominal-sym b_117))))"
"(let-values(((nominal-require-phase_124)"
"(if nominal-require-phase39_109"
" nominal-require-phase29_108"
"(module-binding-nominal-require-phase b_117))))"
"(let-values(((frame-id_125)(if frame-id40_99 frame-id30_98(binding-frame-id b_117))))"
"(let-values(((free=id_126)(if free=id41_101 free=id31_100(binding-free=id b_117))))"
"(let-values(((extra-inspector_127)"
"(if extra-inspector42_97"
" extra-inspector32_96"
"(module-binding-extra-inspector b_117))))"
"(let-values()"
"(let-values(((...x/module-binding.rkt:62:2_128) make-module-binding22.1)"
"((module49_129) module_118)"
"((phase50_130) phase_119)"
"((sym51_131) sym_120)"
"((nominal-module52_132) nominal-module_121)"
"((nominal-phase53_133) nominal-phase_122)"
"((nominal-sym54_134) nominal-sym_123)"
"((nominal-require-phase55_135) nominal-require-phase_124)"
"((frame-id56_136) frame-id_125)"
"((free=id57_137) free=id_126)"
"((extra-inspector58_138) extra-inspector_127))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" extra-inspector58_138"
" #t"
" frame-id56_136"
" #t"
" free=id57_137"
" #t"
" nominal-module52_132"
" #t"
" nominal-phase53_133"
" #t"
" nominal-require-phase55_135"
" #t"
" nominal-sym54_134"
" #t"
" #f"
" #f"
" module49_129"
" phase50_130"
" sym51_131)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:62:2_128"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 5)"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" extra-inspector58_138"
" frame-id56_136"
" free=id57_137"
" nominal-module52_132"
" nominal-phase53_133"
" nominal-require-phase55_135"
" nominal-sym54_134)"
" module49_129"
" phase50_130"
" sym51_131)))))))))))))))))"
"(define-values"
"(unpack45.1)"
"(lambda(given-kws_139 given-args_140 b43_141)"
"(let-values(((extra-inspector42_142)(if(pair? given-kws_139)(eq? '#:extra-inspector(car given-kws_139)) #f)))"
"(let-values(((extra-inspector32_143)(if extra-inspector42_142(car given-args_140)(void)))"
"((given-kws_144)(if extra-inspector42_142(cdr given-kws_139) given-kws_139))"
"((given-args_145)(if extra-inspector42_142(cdr given-args_140) given-args_140)))"
"(let-values(((frame-id40_146)(if(pair? given-kws_144)(eq? '#:frame-id(car given-kws_144)) #f)))"
"(let-values(((frame-id30_147)(if frame-id40_146(car given-args_145)(void)))"
"((given-kws_148)(if frame-id40_146(cdr given-kws_144) given-kws_144))"
"((given-args_149)(if frame-id40_146(cdr given-args_145) given-args_145)))"
"(let-values(((free=id41_150)(if(pair? given-kws_148)(eq? '#:free=id(car given-kws_148)) #f)))"
"(let-values(((free=id31_151)(if free=id41_150(car given-args_149)(void)))"
"((given-kws_152)(if free=id41_150(cdr given-kws_148) given-kws_148))"
"((given-args_153)(if free=id41_150(cdr given-args_149) given-args_149)))"
"(let-values(((module33_154)(if(pair? given-kws_152)(eq? '#:module(car given-kws_152)) #f)))"
"(let-values(((module23_155)(if module33_154(car given-args_153)(void)))"
"((given-kws_156)(if module33_154(cdr given-kws_152) given-kws_152))"
"((given-args_157)(if module33_154(cdr given-args_153) given-args_153)))"
"(let-values(((nominal-module36_158)"
"(if(pair? given-kws_156)(eq? '#:nominal-module(car given-kws_156)) #f)))"
"(let-values(((nominal-module26_159)(if nominal-module36_158(car given-args_157)(void)))"
"((given-kws_160)(if nominal-module36_158(cdr given-kws_156) given-kws_156))"
"((given-args_161)(if nominal-module36_158(cdr given-args_157) given-args_157)))"
"(let-values(((nominal-phase37_162)"
"(if(pair? given-kws_160)(eq? '#:nominal-phase(car given-kws_160)) #f)))"
"(let-values(((nominal-phase27_163)(if nominal-phase37_162(car given-args_161)(void)))"
"((given-kws_164)(if nominal-phase37_162(cdr given-kws_160) given-kws_160))"
"((given-args_165)(if nominal-phase37_162(cdr given-args_161) given-args_161)))"
"(let-values(((nominal-require-phase39_166)"
"(if(pair? given-kws_164)"
"(eq? '#:nominal-require-phase(car given-kws_164))"
" #f)))"
"(let-values(((nominal-require-phase29_167)"
"(if nominal-require-phase39_166(car given-args_165)(void)))"
"((given-kws_168)"
"(if nominal-require-phase39_166(cdr given-kws_164) given-kws_164))"
"((given-args_169)"
"(if nominal-require-phase39_166(cdr given-args_165) given-args_165)))"
"(let-values(((nominal-sym38_170)"
"(if(pair? given-kws_168)(eq? '#:nominal-sym(car given-kws_168)) #f)))"
"(let-values(((nominal-sym28_171)(if nominal-sym38_170(car given-args_169)(void)))"
"((given-kws_172)"
"(if nominal-sym38_170(cdr given-kws_168) given-kws_168))"
"((given-args_173)"
"(if nominal-sym38_170(cdr given-args_169) given-args_169)))"
"(let-values(((phase34_174)"
"(if(pair? given-kws_172)(eq? '#:phase(car given-kws_172)) #f)))"
"(let-values(((phase24_175)(if phase34_174(car given-args_173)(void)))"
"((given-kws_176)(if phase34_174(cdr given-kws_172) given-kws_172))"
"((given-args_177)"
"(if phase34_174(cdr given-args_173) given-args_173)))"
"(let-values(((sym35_178)(pair? given-kws_176)))"
"(let-values(((sym25_179)(if sym35_178(car given-args_177)(void))))"
"(module-binding-update44.1"
" extra-inspector32_143"
" extra-inspector42_142"
" frame-id30_147"
" frame-id40_146"
" free=id31_151"
" free=id41_150"
" module23_155"
" module33_154"
" nominal-module26_159"
" nominal-module36_158"
" nominal-phase27_163"
" nominal-phase37_162"
" nominal-require-phase29_167"
" nominal-require-phase39_166"
" nominal-sym28_171"
" nominal-sym38_170"
" phase24_175"
" phase34_174"
" sym25_179"
" sym35_178"
" b43_141)))))))))))))))))))))))"
"(define-values"
"(module-binding-update46.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_180 given-argc_181)"
"(if(= given-argc_181 3)"
"(let-values(((l1_182) given-kws_180))"
"(let-values(((l1_183)"
"(if(null? l1_182) l1_182(if(eq?(car l1_182) '#:extra-inspector)(cdr l1_182) l1_182))))"
"(let-values(((l1_184) l1_183))"
"(let-values(((l1_185)(if(null? l1_184) l1_184(if(eq?(car l1_184) '#:frame-id)(cdr l1_184) l1_184))))"
"(let-values(((l1_186) l1_185))"
"(let-values(((l1_187)"
"(if(null? l1_186) l1_186(if(eq?(car l1_186) '#:free=id)(cdr l1_186) l1_186))))"
"(let-values(((l1_188) l1_187))"
"(let-values(((l1_189)"
"(if(null? l1_188) l1_188(if(eq?(car l1_188) '#:module)(cdr l1_188) l1_188))))"
"(let-values(((l1_190) l1_189))"
"(let-values(((l1_191)"
"(if(null? l1_190)"
" l1_190"
"(if(eq?(car l1_190) '#:nominal-module)(cdr l1_190) l1_190))))"
"(let-values(((l1_192) l1_191))"
"(let-values(((l1_193)"
"(if(null? l1_192)"
" l1_192"
"(if(eq?(car l1_192) '#:nominal-phase)(cdr l1_192) l1_192))))"
"(let-values(((l1_194) l1_193))"
"(let-values(((l1_195)"
"(if(null? l1_194)"
" l1_194"
"(if(eq?(car l1_194) '#:nominal-require-phase)(cdr l1_194) l1_194))))"
"(let-values(((l1_196) l1_195))"
"(let-values(((l1_197)"
"(if(null? l1_196)"
" l1_196"
"(if(eq?(car l1_196) '#:nominal-sym)(cdr l1_196) l1_196))))"
"(let-values(((l1_198) l1_197))"
"(let-values(((l1_199)"
"(if(null? l1_198)"
" l1_198"
"(if(eq?(car l1_198) '#:phase)(cdr l1_198) l1_198))))"
"(let-values(((l1_200) l1_199))"
"(let-values(((l1_201)"
"(if(null? l1_200)"
" l1_200"
"(if(eq?(car l1_200) '#:sym)(cdr l1_200) l1_200))))"
"(null? l1_201)))))))))))))))))))))"
" #f))"
"(case-lambda((given-kws_202 given-args_203 b_204)(unpack45.1 given-kws_202 given-args_203 b_204)))"
" null"
" '(#:extra-inspector"
" #:frame-id"
" #:free=id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym"
" #:phase"
" #:sym)"
"(let-values(((module-binding-update_205)(case-lambda((b_206)(unpack45.1 null null b_206)))))"
" module-binding-update_205)))"
"(define-values"
"(module-binding?)"
"(lambda(b_207)"
"(let-values(((or-part_208)(simple-module-binding? b_207)))"
"(if or-part_208 or-part_208(full-module-binding? b_207)))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding47.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector)"
"(let-values(((struct:_209 make-_210 ?_211 -ref_212 -set!_213)"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_265 ser_266 state_267)"
"(let-values(((simplified-b_268)"
"(if(full-binding-frame-id b_265)"
"(let-values(((...x/module-binding.rkt:87:16_269) module-binding-update46.1)"
"((b60_270) b_265)"
"((temp61_271) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" #f"
" #f"
" temp61_271"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b60_270)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:87:16_269"
" keyword-procedure-extract"
" '(#:frame-id)"
" 3)"
" '(#:frame-id)"
"(list temp61_271)"
" b60_270)))"
" b_265)))"
"(if(full-module-binding? simplified-b_268)"
"(let-values()"
"(list"
" 'deserialize-full-module-binding"
"(ser_266(full-module-binding-module b_265))"
"(ser_266(full-module-binding-sym b_265))"
"(ser_266(full-module-binding-phase b_265))"
"(ser_266(full-module-binding-nominal-module b_265))"
"(ser_266(full-module-binding-nominal-phase b_265))"
"(ser_266(full-module-binding-nominal-sym b_265))"
"(ser_266(full-module-binding-nominal-require-phase b_265))"
"(ser_266(full-binding-free=id b_265))"
"(if(full-module-binding-extra-inspector b_265)"
"(serialize-state-inspector-id state_267)"
" #f)))"
"(let-values()(ser_266 simplified-b_268)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7)"
" #f"
" 'full-module-binding)))"
"(values"
" struct:_209"
" make-_210"
" ?_211"
"(make-struct-field-accessor -ref_212 0 'module)"
"(make-struct-field-accessor -ref_212 1 'phase)"
"(make-struct-field-accessor -ref_212 2 'sym)"
"(make-struct-field-accessor -ref_212 3 'nominal-module)"
"(make-struct-field-accessor -ref_212 4 'nominal-phase)"
"(make-struct-field-accessor -ref_212 5 'nominal-sym)"
"(make-struct-field-accessor -ref_212 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_212 7 'extra-inspector))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding48.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym)"
"(let-values(((struct:_272 make-_273 ?_274 -ref_275 -set!_276)"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_303 ser_304 state_305)"
"(list"
" 'deserialize-simple-module-binding"
"(ser_304(simple-module-binding-module b_303))"
"(ser_304(simple-module-binding-sym b_303))"
"(ser_304(simple-module-binding-phase b_303))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'simple-module-binding)))"
"(values"
" struct:_272"
" make-_273"
" ?_274"
"(make-struct-field-accessor -ref_275 0 'module)"
"(make-struct-field-accessor -ref_275 1 'phase)"
"(make-struct-field-accessor -ref_275 2 'sym))))"
"(define-values"
"(1/deserialize-full-module-binding)"
"(lambda(module_306"
" sym_307"
" phase_308"
" nominal-module_309"
" nominal-phase_310"
" nominal-sym_311"
" nominal-require-phase_312"
" free=id_313"
" extra-inspector_314)"
"(let-values(((...x/module-binding.rkt:121:2_315) make-module-binding22.1)"
"((module63_316) module_306)"
"((phase64_317) phase_308)"
"((sym65_318) sym_307)"
"((nominal-module66_319) nominal-module_309)"
"((nominal-phase67_320) nominal-phase_310)"
"((nominal-sym68_321) nominal-sym_311)"
"((nominal-require-phase69_322) nominal-require-phase_312)"
"((free=id70_323) free=id_313)"
"((extra-inspector71_324) extra-inspector_314))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" extra-inspector71_324"
" #t"
" #f"
" #f"
" free=id70_323"
" #t"
" nominal-module66_319"
" #t"
" nominal-phase67_320"
" #t"
" nominal-require-phase69_322"
" #t"
" nominal-sym68_321"
" #t"
" #f"
" #f"
" module63_316"
" phase64_317"
" sym65_318)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...x/module-binding.rkt:121:2_315"
" keyword-procedure-extract"
" '(#:extra-inspector #:free=id #:nominal-module #:nominal-phase #:nominal-require-phase #:nominal-sym)"
" 5)"
" '(#:extra-inspector #:free=id #:nominal-module #:nominal-phase #:nominal-require-phase #:nominal-sym)"
"(list"
" extra-inspector71_324"
" free=id70_323"
" nominal-module66_319"
" nominal-phase67_320"
" nominal-require-phase69_322"
" nominal-sym68_321)"
" module63_316"
" phase64_317"
" sym65_318)))))"
"(define-values"
"(1/deserialize-simple-module-binding)"
"(lambda(module_325 sym_326 phase_327)(simple-module-binding48.1 module_325 phase_327 sym_326)))"
"(define-values"
"(module-binding-module)"
"(lambda(b_328)"
"(if(simple-module-binding? b_328)(simple-module-binding-module b_328)(full-module-binding-module b_328))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_329)"
"(if(simple-module-binding? b_329)(simple-module-binding-phase b_329)(full-module-binding-phase b_329))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_330)"
"(if(simple-module-binding? b_330)(simple-module-binding-sym b_330)(full-module-binding-sym b_330))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_331)"
"(if(simple-module-binding? b_331)"
"(simple-module-binding-module b_331)"
"(full-module-binding-nominal-module b_331))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_332)"
"(if(simple-module-binding? b_332)(simple-module-binding-phase b_332)(full-module-binding-nominal-phase b_332))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_333)"
"(if(simple-module-binding? b_333)(simple-module-binding-sym b_333)(full-module-binding-nominal-sym b_333))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_334)(if(simple-module-binding? b_334) 0(full-module-binding-nominal-require-phase b_334))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_335)(if(simple-module-binding? b_335) #f(full-module-binding-extra-inspector b_335))))"
"(define-values"
"(local-binding?)"
"(lambda(b_1)(let-values(((or-part_2)(full-local-binding? b_1)))(if or-part_2 or-part_2(symbol? b_1)))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_24 ser_25 state_26)"
"(list"
" 'deserialize-full-local-binding"
"(ser_25(full-local-binding-key b_24))"
"(ser_25(full-binding-free=id b_24))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'key))))"
"(define-values"
"(1/deserialize-full-local-binding)"
"(lambda(key_27 free=id_28)(full-local-binding1.1 #f free=id_28 key_27)))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_29 frame-id4_30 free=id3_31 free=id5_32 key6_33)"
"(let-values(((key_34) key6_33))"
"(let-values(((frame-id_35)(if frame-id4_30 frame-id2_29 #f)))"
"(let-values(((free=id_36)(if free=id5_32 free=id3_31 #f)))"
"(let-values()"
"(if(if(not frame-id_35)(not free=id_36) #f)"
"(let-values() key_34)"
"(let-values()(full-local-binding1.1 frame-id_35 free=id_36 key_34)))))))))"
"(define-values"
"(unpack8.1$1)"
"(lambda(given-kws_37 given-args_38 key6_39)"
"(let-values(((frame-id4_40)(if(pair? given-kws_37)(eq? '#:frame-id(car given-kws_37)) #f)))"
"(let-values(((frame-id2_41)(if frame-id4_40(car given-args_38)(void)))"
"((given-kws_42)(if frame-id4_40(cdr given-kws_37) given-kws_37))"
"((given-args_43)(if frame-id4_40(cdr given-args_38) given-args_38)))"
"(let-values(((free=id5_44)(pair? given-kws_42)))"
"(let-values(((free=id3_45)(if free=id5_44(car given-args_43)(void))))"
"(make-local-binding7.1 frame-id2_41 frame-id4_40 free=id3_45 free=id5_44 key6_39)))))))"
"(define-values"
"(make-local-binding9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_46 given-argc_47)"
"(if(= given-argc_47 3)"
"(let-values(((l1_48) given-kws_46))"
"(let-values(((l1_49)(if(null? l1_48) l1_48(if(eq?(car l1_48) '#:frame-id)(cdr l1_48) l1_48))))"
"(let-values(((l1_50) l1_49))"
"(let-values(((l1_51)(if(null? l1_50) l1_50(if(eq?(car l1_50) '#:free=id)(cdr l1_50) l1_50))))"
"(null? l1_51)))))"
" #f))"
"(case-lambda((given-kws_52 given-args_53 key_54)(unpack8.1$1 given-kws_52 given-args_53 key_54)))"
" null"
" '(#:frame-id #:free=id)"
"(let-values(((make-local-binding_55)(case-lambda((key_56)(unpack8.1$1 null null key_56)))))"
" make-local-binding_55)))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_57 frame-id14_58 free=id12_59 free=id15_60 key10_61 key13_62 b16_63)"
"(let-values(((b_64) b16_63))"
"(let-values(((key_65)(if key13_62 key10_61(local-binding-key b_64))))"
"(let-values(((frame-id_66)(if frame-id14_58 frame-id11_57(binding-frame-id b_64))))"
"(let-values(((free=id_67)(if free=id15_60 free=id12_59(binding-free=id b_64))))"
"(let-values()"
"(let-values(((...ax/local-binding.rkt:48:2_68) make-local-binding9.1)"
"((key21_69) key_65)"
"((frame-id22_70) frame-id_66)"
"((free=id23_71) free=id_67))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id22_70 #t free=id23_71 #t key21_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ax/local-binding.rkt:48:2_68"
" keyword-procedure-extract"
" '(#:frame-id #:free=id)"
" 3)"
" '(#:frame-id #:free=id)"
"(list frame-id22_70 free=id23_71)"
" key21_69))))))))))"
"(define-values"
"(unpack18.1$2)"
"(lambda(given-kws_72 given-args_73 b16_74)"
"(let-values(((frame-id14_75)(if(pair? given-kws_72)(eq? '#:frame-id(car given-kws_72)) #f)))"
"(let-values(((frame-id11_76)(if frame-id14_75(car given-args_73)(void)))"
"((given-kws_77)(if frame-id14_75(cdr given-kws_72) given-kws_72))"
"((given-args_78)(if frame-id14_75(cdr given-args_73) given-args_73)))"
"(let-values(((free=id15_79)(if(pair? given-kws_77)(eq? '#:free=id(car given-kws_77)) #f)))"
"(let-values(((free=id12_80)(if free=id15_79(car given-args_78)(void)))"
"((given-kws_81)(if free=id15_79(cdr given-kws_77) given-kws_77))"
"((given-args_82)(if free=id15_79(cdr given-args_78) given-args_78)))"
"(let-values(((key13_83)(pair? given-kws_81)))"
"(let-values(((key10_84)(if key13_83(car given-args_82)(void))))"
"(local-binding-update17.1"
" frame-id11_76"
" frame-id14_75"
" free=id12_80"
" free=id15_79"
" key10_84"
" key13_83"
" b16_74)))))))))"
"(define-values"
"(local-binding-update19.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_85 given-argc_86)"
"(if(= given-argc_86 3)"
"(let-values(((l1_87) given-kws_85))"
"(let-values(((l1_88)(if(null? l1_87) l1_87(if(eq?(car l1_87) '#:frame-id)(cdr l1_87) l1_87))))"
"(let-values(((l1_89) l1_88))"
"(let-values(((l1_90)(if(null? l1_89) l1_89(if(eq?(car l1_89) '#:free=id)(cdr l1_89) l1_89))))"
"(let-values(((l1_91) l1_90))"
"(let-values(((l1_92)(if(null? l1_91) l1_91(if(eq?(car l1_91) '#:key)(cdr l1_91) l1_91))))"
"(null? l1_92)))))))"
" #f))"
"(case-lambda((given-kws_93 given-args_94 b_95)(unpack18.1$2 given-kws_93 given-args_94 b_95)))"
" null"
" '(#:frame-id #:free=id #:key)"
"(let-values(((local-binding-update_96)(case-lambda((b_97)(unpack18.1$2 null null b_97)))))"
" local-binding-update_96)))"
"(define-values(local-binding-key)(lambda(b_98)(if(full-local-binding? b_98)(full-local-binding-key b_98) b_98)))"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(exact-nonnegative-integer? v_1)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(identifier? v_1)))"
"(if or-part_5 or-part_5(if(procedure? v_1)(procedure-arity-includes? v_1 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(identifier? v_1)"
"(let-values()(lambda(t_6) v_1))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_7)"
"(let-values(((val_8)(ref_3 t_7 v_1)))(if(identifier? val_8) val_8(datum->syntax$2 #f '?)))))"
"(let-values()"
"(lambda(t_9)"
"(let-values(((id_10)(v_1 t_9)))"
"(begin"
"(if(identifier? id_10)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_10)))"
" id_10))))))))))))"
"(define-values"
"(1/make-rename-transformer)"
"(let-values()"
"(let-values(((struct:rename-transformer_11 rename-transformer1_12 rename-transformer?_13 rename-transformer-id_14)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'rename-transformer)))"
"(values struct:_16 make-_17 ?_18(make-struct-field-accessor -ref_19 0 'id)))))"
"(lambda(id_37)"
"(begin"
"(if(identifier? id_37)"
"(void)"
"            (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_37)))"
"(rename-transformer1_12 id_37))))))"
"(define-values(1/rename-transformer-target)(lambda(t_38)((rename-transformer-value t_38) t_38)))"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_1 b_2 a-phase_3 b-phase_4)"
"(let-values(((ab_5)"
"(let-values(((...r/syntax/binding.rkt:44:13_7) resolve+shift15.1)"
"((a21_8) a_1)"
"((a-phase22_9) a-phase_3)"
"((temp23_10) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f temp23_10 #t a21_8 a-phase22_9)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:44:13_7"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp23_10)"
" a21_8"
" a-phase22_9)))))"
"(let-values(((bb_6)"
"(let-values(((...r/syntax/binding.rkt:45:13_11) resolve+shift15.1)"
"((b24_12) b_2)"
"((b-phase25_13) b-phase_4)"
"((temp26_14) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f temp26_14 #t b24_12 b-phase25_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:45:13_11"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp26_14)"
" b24_12"
" b-phase25_13)))))"
"(if(let-values(((or-part_15)(symbol? ab_5)))(if or-part_15 or-part_15(symbol? bb_6)))"
"(let-values()(eq? ab_5 bb_6))"
"(let-values()(same-binding? ab_5 bb_6)))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_16 bb_17)"
"(if(module-binding? ab_16)"
"(let-values()"
"(if(module-binding? bb_17)"
"(if(eq?(module-binding-sym ab_16)(module-binding-sym bb_17))"
"(if(eqv?(module-binding-phase ab_16)(module-binding-phase bb_17))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_16))"
"(1/module-path-index-resolve(module-binding-module bb_17)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_16)"
"(let-values()(if(local-binding? bb_17)(eq?(local-binding-key ab_16)(local-binding-key bb_17)) #f))"
"        (let-values () (error \"bad binding\"))))))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_18 phase_19)"
"(let-values(((b_20)"
"(let-values(((...r/syntax/binding.rkt:69:12_21) resolve+shift15.1)"
"((id27_22) id_18)"
"((phase28_23) phase_19)"
"((temp29_24) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f temp29_24 #t id27_22 phase28_23)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:69:12_21"
" keyword-procedure-extract"
" '(#:unbound-sym?)"
" 4)"
" '(#:unbound-sym?)"
"(list temp29_24)"
" id27_22"
" phase28_23)))))"
"(if(symbol? b_20)"
"(let-values() b_20)"
"(if(module-binding? b_20)"
"(let-values()(module-binding-sym b_20))"
"(if(local-binding? b_20)(let-values()(local-binding-key b_20))(let-values()(syntax-e$1 id_18))))))))"
"(define-values"
"(identifier-binding$1)"
"(lambda(id_25 phase_26)"
"(let-values(((b_27)"
"(let-values(((id30_28) id_25)((phase31_29) phase_26))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f id30_28 phase31_29)"
"(resolve+shift15.1 id30_28 phase31_29)))))"
"(if(module-binding? b_27)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_27))"
" #f"
"(list"
"(module-binding-module b_27)"
"(module-binding-sym b_27)"
"(module-binding-nominal-module b_27)"
"(module-binding-nominal-sym b_27)"
"(module-binding-phase b_27)"
"(module-binding-nominal-require-phase b_27)"
"(module-binding-nominal-phase b_27))))"
"(if(local-binding? b_27)(let-values() 'lexical)(let-values() #f))))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_30 id_31 phase_32)"
"(if(1/rename-transformer? val_30)"
"(let-values()"
"(let-values(((free=id_33)(1/rename-transformer-target val_30)))"
"(if(syntax-property$1 free=id_33 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_34)"
"(let-values(((...r/syntax/binding.rkt:101:16_35) resolve+shift15.1)"
"((id32_36) id_31)"
"((phase33_37) phase_32)"
"((temp34_38) #t)"
"((temp35_39) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f temp34_38 #t #f #f temp35_39 #t #f #f id32_36 phase33_37)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:101:16_35"
" keyword-procedure-extract"
" '(#:exactly? #:immediate?)"
" 4)"
" '(#:exactly? #:immediate?)"
"(list temp34_38 temp35_39)"
" id32_36"
" phase33_37)))))"
"(add-binding-in-scopes!"
"(syntax-scope-set id_31 phase_32)"
"(syntax-e$1 id_31)"
"(binding-set-free=id b_34 free=id_33)))))))"
"(void))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_40 free=id_41)"
"(if(module-binding? b_40)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:107:24_42) module-binding-update46.1)"
"((b36_43) b_40)"
"((free=id37_44) free=id_41))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1 #f #f #f #f free=id37_44 #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f b36_43)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:107:24_42"
" keyword-procedure-extract"
" '(#:free=id)"
" 3)"
" '(#:free=id)"
"(list free=id37_44)"
" b36_43))))"
"(if(local-binding? b_40)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:108:23_45) local-binding-update19.1)"
"((b38_46) b_40)"
"((free=id39_47) free=id_41))"
"(if(variable-reference-constant?(#%variable-reference local-binding-update19.1))"
"(local-binding-update17.1 #f #f free=id39_47 #t #f #f b38_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:108:23_45"
" keyword-procedure-extract"
" '(#:free=id)"
" 3)"
" '(#:free=id)"
"(list free=id39_47)"
" b38_46))))"
"        (let-values () (error \"bad binding for free=id:\" b_40))))))"
"(define-values"
"(1/syntax-module-path-index-shift)"
"(lambda(s_48 from-mpi_49 to-mpi_50)"
"(if(eq? from-mpi_49 to-mpi_50)"
" s_48"
"(let-values(((shift_51)(cons from-mpi_49 to-mpi_50)))"
"(let-values(((shifts40_52) #f))"
"(let-values(((prev-result_53) #f))"
"(let-values(((add-shift_54)"
"(lambda(shifts_55)"
"(if(eq? shifts40_52 shifts_55)"
"(let-values() prev-result_53)"
"(let-values()"
"(let-values(((r_56)(let-values()(cons shift_51 shifts_55))))"
"(begin(set! shifts40_52 shifts_55)(set! prev-result_53 r_56) r_56)))))))"
"(syntax-map"
" s_48"
"(lambda(tail?_57 d_58) d_58)"
"(lambda(s_59 d_60)"
"(let-values(((the-struct_61) s_59))"
"(if(syntax?$1 the-struct_61)"
"(let-values(((content41_62) d_60)((mpi-shifts42_63)(add-shift_54(syntax-mpi-shifts s_59))))"
"(syntax1.1"
" content41_62"
"(syntax-scopes the-struct_61)"
"(syntax-scope-propagations the-struct_61)"
"(syntax-shifted-multi-scopes the-struct_61)"
" mpi-shifts42_63"
"(syntax-bulk-binding-registry the-struct_61)"
"(syntax-srcloc the-struct_61)"
"(syntax-props the-struct_61)"
"(syntax-inspector the-struct_61)"
"(syntax-tamper the-struct_61)))"
"                     (raise-argument-error 'struct-copy \"syntax?\" the-struct_61))))"
" syntax-e/no-taint))))))))"
"(define-values"
"(resolve+shift13.1)"
"(lambda(ambiguous-value1_64"
" ambiguous-value6_65"
" exactly?2_66"
" exactly?7_67"
" extra-shifts5_68"
" extra-shifts10_69"
" immediate?3_70"
" immediate?8_71"
" unbound-sym?4_72"
" unbound-sym?9_73"
" s11_74"
" phase12_75)"
"(let-values(((s_76) s11_74))"
"(let-values(((phase_77) phase12_75))"
"(let-values(((ambiguous-value_78)(if ambiguous-value6_65 ambiguous-value1_64 #f)))"
"(let-values(((exactly?_79)(if exactly?7_67 exactly?2_66 #f)))"
"(let-values(((immediate?_80)(if immediate?8_71 immediate?3_70 exactly?_79)))"
"(let-values(((unbound-sym?_81)(if unbound-sym?9_73 unbound-sym?4_72 #f)))"
"(let-values(((extra-shifts_82)(if extra-shifts10_69 extra-shifts5_68 null)))"
"(let-values()"
"(let-values(((immediate-b_83)"
"(let-values(((...r/syntax/binding.rkt:142:22_85) resolve23.1)"
"((s43_86) s_76)"
"((phase44_87) phase_77)"
"((ambiguous-value45_88) ambiguous-value_78)"
"((exactly?46_89) exactly?_79)"
"((extra-shifts47_90) extra-shifts_82))"
"(if(variable-reference-constant?(#%variable-reference resolve23.1))"
"(resolve21.1"
" ambiguous-value45_88"
" #t"
" exactly?46_89"
" #t"
" extra-shifts47_90"
" #t"
" s43_86"
" phase44_87)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:142:22_85"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
" 4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts)"
"(list ambiguous-value45_88 exactly?46_89 extra-shifts47_90)"
" s43_86"
" phase44_87)))))"
"(let-values(((b_84)"
"(if(if immediate-b_83"
"(if(not immediate?_80)(binding-free=id immediate-b_83) #f)"
" #f)"
"(let-values(((...r/syntax/binding.rkt:149:16_91) resolve+shift15.1)"
"((temp48_92)(binding-free=id immediate-b_83))"
"((phase49_93) phase_77)"
"((temp50_94)(append extra-shifts_82(syntax-mpi-shifts s_76)))"
"((ambiguous-value51_95) ambiguous-value_78)"
"((exactly?52_96) exactly?_79)"
"((unbound-sym?53_97) unbound-sym?_81))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" ambiguous-value51_95"
" #t"
" exactly?52_96"
" #t"
" temp50_94"
" #t"
" #f"
" #f"
" unbound-sym?53_97"
" #t"
" temp48_92"
" phase49_93)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:149:16_91"
" keyword-procedure-extract"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
" 4)"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:unbound-sym?)"
"(list ambiguous-value51_95 exactly?52_96 temp50_94 unbound-sym?53_97)"
" temp48_92"
" phase49_93)))"
" immediate-b_83)))"
"(if(module-binding? b_84)"
"(let-values()"
"(let-values(((mpi-shifts_98)(syntax-mpi-shifts s_76)))"
"(if(null? mpi-shifts_98)"
"(let-values() b_84)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:162:6_99) module-binding-update46.1)"
"((b54_100) b_84)"
"((temp55_101)"
"(apply-syntax-shifts(module-binding-module b_84) mpi-shifts_98))"
"((temp56_102)"
"(apply-syntax-shifts"
"(module-binding-nominal-module b_84)"
" mpi-shifts_98))"
"((temp57_103)"
"(if(binding-free=id b_84)"
"(syntax-transfer-shifts(binding-free=id b_84) s_76)"
" #f)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" #f"
" #f"
" #f"
" #f"
" temp57_103"
" #t"
" temp55_101"
" #t"
" temp56_102"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b54_100)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:162:6_99"
" keyword-procedure-extract"
" '(#:free=id #:module #:nominal-module)"
" 3)"
" '(#:free=id #:module #:nominal-module)"
"(list temp57_103 temp55_101 temp56_102)"
" b54_100)))))))"
"(if(if(not b_84) unbound-sym?_81 #f)"
"(let-values()(syntax-e$1 s_76))"
"(let-values() b_84)))))))))))))))"
"(define-values"
"(unpack14.1)"
"(lambda(given-kws_104 given-args_105 s11_106 phase12_107)"
"(let-values(((ambiguous-value6_108)(if(pair? given-kws_104)(eq? '#:ambiguous-value(car given-kws_104)) #f)))"
"(let-values(((ambiguous-value1_109)(if ambiguous-value6_108(car given-args_105)(void)))"
"((given-kws_110)(if ambiguous-value6_108(cdr given-kws_104) given-kws_104))"
"((given-args_111)(if ambiguous-value6_108(cdr given-args_105) given-args_105)))"
"(let-values(((exactly?7_112)(if(pair? given-kws_110)(eq? '#:exactly?(car given-kws_110)) #f)))"
"(let-values(((exactly?2_113)(if exactly?7_112(car given-args_111)(void)))"
"((given-kws_114)(if exactly?7_112(cdr given-kws_110) given-kws_110))"
"((given-args_115)(if exactly?7_112(cdr given-args_111) given-args_111)))"
"(let-values(((extra-shifts10_116)(if(pair? given-kws_114)(eq? '#:extra-shifts(car given-kws_114)) #f)))"
"(let-values(((extra-shifts5_117)(if extra-shifts10_116(car given-args_115)(void)))"
"((given-kws_118)(if extra-shifts10_116(cdr given-kws_114) given-kws_114))"
"((given-args_119)(if extra-shifts10_116(cdr given-args_115) given-args_115)))"
"(let-values(((immediate?8_120)(if(pair? given-kws_118)(eq? '#:immediate?(car given-kws_118)) #f)))"
"(let-values(((immediate?3_121)(if immediate?8_120(car given-args_119)(void)))"
"((given-kws_122)(if immediate?8_120(cdr given-kws_118) given-kws_118))"
"((given-args_123)(if immediate?8_120(cdr given-args_119) given-args_119)))"
"(let-values(((unbound-sym?9_124)(pair? given-kws_122)))"
"(let-values(((unbound-sym?4_125)(if unbound-sym?9_124(car given-args_123)(void))))"
"(resolve+shift13.1"
" ambiguous-value1_109"
" ambiguous-value6_108"
" exactly?2_113"
" exactly?7_112"
" extra-shifts5_117"
" extra-shifts10_116"
" immediate?3_121"
" immediate?8_120"
" unbound-sym?4_125"
" unbound-sym?9_124"
" s11_106"
" phase12_107)))))))))))))"
"(define-values"
"(resolve+shift15.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_126 given-argc_127)"
"(if(= given-argc_127 4)"
"(let-values(((l1_128) given-kws_126))"
"(let-values(((l1_129)"
"(if(null? l1_128) l1_128(if(eq?(car l1_128) '#:ambiguous-value)(cdr l1_128) l1_128))))"
"(let-values(((l1_130) l1_129))"
"(let-values(((l1_131)(if(null? l1_130) l1_130(if(eq?(car l1_130) '#:exactly?)(cdr l1_130) l1_130))))"
"(let-values(((l1_132) l1_131))"
"(let-values(((l1_133)"
"(if(null? l1_132) l1_132(if(eq?(car l1_132) '#:extra-shifts)(cdr l1_132) l1_132))))"
"(let-values(((l1_134) l1_133))"
"(let-values(((l1_135)"
"(if(null? l1_134)"
" l1_134"
"(if(eq?(car l1_134) '#:immediate?)(cdr l1_134) l1_134))))"
"(let-values(((l1_136) l1_135))"
"(let-values(((l1_137)"
"(if(null? l1_136)"
" l1_136"
"(if(eq?(car l1_136) '#:unbound-sym?)(cdr l1_136) l1_136))))"
"(null? l1_137)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_138 given-args_139 s_140 phase_141)(unpack14.1 given-kws_138 given-args_139 s_140 phase_141)))"
" null"
" '(#:ambiguous-value #:exactly? #:extra-shifts #:immediate? #:unbound-sym?)"
"(let-values(((resolve+shift_142)(case-lambda((s_143 phase_144)(unpack14.1 null null s_143 phase_144)))))"
" resolve+shift_142)))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_145 shifts_146)"
"(if(null? shifts_146)"
"(let-values() mpi_145)"
"(let-values()"
"(let-values(((shifted-mpi_147)(apply-syntax-shifts mpi_145(cdr shifts_146))))"
"(module-path-index-shift shifted-mpi_147(caar shifts_146)(cdar shifts_146)))))))"
"(define-values(syntax-apply-shifts)(lambda(s_148 mpi_149)(apply-syntax-shifts mpi_149(syntax-mpi-shifts s_148))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_150 from-mpi_151 to-mpi_152)"
"(if(module-binding? b_150)"
"(let-values()"
"(let-values(((...r/syntax/binding.rkt:187:4_153) module-binding-update46.1)"
"((b58_154) b_150)"
"((temp59_155)(module-path-index-shift(module-binding-module b_150) from-mpi_151 to-mpi_152))"
"((temp60_156)"
"(module-path-index-shift(module-binding-nominal-module b_150) from-mpi_151 to-mpi_152)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp59_155"
" #t"
" temp60_156"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b58_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/syntax/binding.rkt:187:4_153"
" keyword-procedure-extract"
" '(#:module #:nominal-module)"
" 3)"
" '(#:module #:nominal-module)"
"(list temp59_155 temp60_156)"
" b58_154))))"
"(let-values() b_150))))"
"(define-values"
"(syntax-transfer-shifts)"
"(lambda(to-s_157 from-s_158)"
"(let-values(((lst_159)(alt-reverse(syntax-mpi-shifts from-s_158))))"
"(begin"
"(if(list? lst_159)(void)(let-values()(in-list lst_159)))"
"((letrec-values(((for-loop_160)"
"(lambda(s_161 lst_162)"
"(if(pair? lst_162)"
"(let-values(((shift_163)(unsafe-car lst_162)))"
"(if #t"
"(let-values(((s_164)"
"(let-values(((s_165) s_161))"
"(let-values(((s_166)"
"(let-values()"
"(1/syntax-module-path-index-shift"
" s_165"
"(car shift_163)"
"(cdr shift_163)))))"
"(values s_166)))))"
"(if #t(for-loop_160 s_164(unsafe-cdr lst_162)) s_164))"
" s_161))"
" s_161))))"
" for-loop_160)"
" to-s_157"
" lst_159)))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module19_167)"
"(lambda(s18_168 source?16_169 source?17_170)"
"(let-values(((s_171) s18_168))"
"(let-values(((source?_172)(if source?17_170 source?16_169 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_171)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_171)))"
"(let-values(((lst_173)(alt-reverse(syntax-mpi-shifts s_171))))"
"(begin"
"(if(list? lst_173)(void)(let-values()(in-list lst_173)))"
"((letrec-values(((for-loop_174)"
"(lambda(result_175 lst_176)"
"(if(pair? lst_176)"
"(let-values(((shift_177)(unsafe-car lst_176)))"
"(if #t"
"(let-values(((result_178)"
"(let-values(((result_179) result_175))"
"(let-values(((result_180)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_181)"
"(car"
" shift_177)))"
"(let-values(((path_182"
" base_183)"
"(1/module-path-index-split"
" from-mpi_181)))"
"(if(not path_182)"
"(if(module-path-index-resolved"
" from-mpi_181)"
"(apply-syntax-shifts"
" from-mpi_181"
"(syntax-mpi-shifts"
" s_171))"
" #f)"
" #f)))))))"
"(values result_180)))))"
"(if(if #t(not((lambda x_184 result_178) shift_177)) #f)"
"(for-loop_174 result_178(unsafe-cdr lst_176))"
" result_178))"
" result_175))"
" result_175))))"
" for-loop_174)"
" #f"
" lst_173))))))))))"
"(case-lambda"
"((s_185)(syntax-source-module19_167 s_185 #f #f))"
"((s_186 source?16_187)(syntax-source-module19_167 s_186 source?16_187 #t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_188)"
"(begin"
"(if(identifier? id_188)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_188)))"
"(let-values(((the-struct_189)(datum->syntax$2 #f(syntax-e$1 id_188) id_188 id_188)))"
"(if(syntax?$1 the-struct_189)"
"(let-values(((mpi-shifts61_190)(syntax-mpi-shifts id_188)))"
"(syntax1.1"
"(syntax-content the-struct_189)"
"(syntax-scopes the-struct_189)"
"(syntax-scope-propagations the-struct_189)"
"(syntax-shifted-multi-scopes the-struct_189)"
" mpi-shifts61_190"
"(syntax-bulk-binding-registry the-struct_189)"
"(syntax-srcloc the-struct_189)"
"(syntax-props the-struct_189)"
"(syntax-inspector the-struct_189)"
"(syntax-tamper the-struct_189)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_189))))))"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_1)(hash-set! built-in-symbols s_1 #t)))"
"(define-values(built-in-symbol?)(lambda(s_2)(hash-ref built-in-symbols s_2 #f)))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_3)"
"    (let-values (((built-in-s_4) (string->symbol (format \".~s\" s_3))))"
"(begin(register-built-in-symbol! built-in-s_4) built-in-s_4))))"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference)))"
" print-values)"
"(call-with-values"
"(lambda()"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?)))"
" print-values)"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literalss-id)(make-built-in-symbol! 'syntax-literalss))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialized-syntax-id)(make-built-in-symbol! 'deserialized-syntax))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'provided #f 3 0 #f null 'prefab #f '(0 1 2) #f 'provided)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'binding)"
"(make-struct-field-accessor -ref_4 1 'protected?)"
"(make-struct-field-accessor -ref_4 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_32)(if(provided? v_32)(provided-binding v_32) v_32)))"
"(define-values(provided-as-protected?)(lambda(v_33)(if(provided? v_33)(provided-protected? v_33) #f)))"
"(define-values(provided-as-transformer?)(lambda(v_34)(if(provided? v_34)(provided-syntax? v_34) #f)))"
"(define-values"
"(lifted/1.1$18)"
"(make-required"
" 'provide-binding-to-require-binding"
"(case-lambda((self_2 binding/p_3 sym_4)(apply missing-kw self_2 binding/p_3 sym_4 null)))"
" #f"
" #f))"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_5 phase-shift4_6 provide-phase-level3_7 self1_8 binding/p9_9 sym10_10)"
"(let-values(((binding/p_11) binding/p9_9))"
"(let-values(((sym_12) sym10_10))"
"(let-values(((self_13) self1_8))"
"(let-values(((mpi_14) mpi2_5))"
"(let-values(((provide-phase-level_15) provide-phase-level3_7))"
"(let-values(((phase-shift_16) phase-shift4_6))"
"(let-values()"
"(let-values(((binding_17)(provided-as-binding binding/p_11)))"
"(let-values(((from-mod_18)(module-binding-module binding_17)))"
"(let-values(((...tax/bulk-binding.rkt:51:2_19) module-binding-update46.1)"
"((binding17_20) binding_17)"
"((temp18_21)(module-path-index-shift from-mod_18 self_13 mpi_14))"
"((mpi19_22) mpi_14)"
"((provide-phase-level20_23) provide-phase-level_15)"
"((sym21_24) sym_12)"
"((phase-shift22_25) phase-shift_16)"
"((temp23_26) #f)"
"((temp24_27)"
"(if(not(provided-as-protected? binding/p_11))"
"(module-binding-extra-inspector binding_17)"
" #f)))"
"(if(variable-reference-constant?(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" temp24_27"
" #t"
" temp23_26"
" #t"
" #f"
" #f"
" temp18_21"
" #t"
" mpi19_22"
" #t"
" provide-phase-level20_23"
" #t"
" phase-shift22_25"
" #t"
" sym21_24"
" #t"
" #f"
" #f"
" #f"
" #f"
" binding17_20)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:51:2_19"
" keyword-procedure-extract"
" '(#:extra-inspector"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
" 3)"
" '(#:extra-inspector"
" #:frame-id"
" #:module"
" #:nominal-module"
" #:nominal-phase"
" #:nominal-require-phase"
" #:nominal-sym)"
"(list"
" temp24_27"
" temp23_26"
" temp18_21"
" mpi19_22"
" provide-phase-level20_23"
" phase-shift22_25"
" sym21_24)"
" binding17_20))))))))))))))"
"(define-values"
"(unpack12.1$3)"
"(lambda(given-kws_28 given-args_29 binding/p9_30 sym10_31)"
"(let-values(((mpi2_32)(car given-args_29))"
"((given-kws_33)(cdr given-kws_28))"
"((given-args_34)(cdr given-args_29)))"
"(let-values(((phase-shift4_35)(car given-args_34))"
"((given-kws_36)(cdr given-kws_33))"
"((given-args_37)(cdr given-args_34)))"
"(let-values(((provide-phase-level3_38)(car given-args_37))"
"((given-kws_39)(cdr given-kws_36))"
"((given-args_40)(cdr given-args_37)))"
"(let-values(((self1_41)(car given-args_40)))"
"(provide-binding-to-require-binding11.1"
" mpi2_32"
" phase-shift4_35"
" provide-phase-level3_38"
" self1_41"
" binding/p9_30"
" sym10_31)))))))"
"(define-values"
"(provide-binding-to-require-binding13.1)"
"(lifted/1.1$18"
"(lambda(given-kws_42 given-argc_43)"
"(if(= given-argc_43 4)"
"(let-values(((l2_44) given-kws_42))"
"(if(pair? l2_44)"
"(if(eq?(car l2_44) '#:mpi)"
"(let-values(((l2_45)(cdr l2_44)))"
"(if(pair? l2_45)"
"(if(eq?(car l2_45) '#:phase-shift)"
"(let-values(((l2_46)(cdr l2_45)))"
"(if(pair? l2_46)"
"(if(eq?(car l2_46) '#:provide-phase-level)"
"(let-values(((l2_47)(cdr l2_46)))"
"(if(pair? l2_47)(if(eq?(car l2_47) '#:self)(null?(cdr l2_47)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_48 given-args_49 binding/p_50 sym_51)(unpack12.1$3 given-kws_48 given-args_49 binding/p_50 sym_51)))"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?$1"
" bulk-binding-provides"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_52 make-_53 ?_54 -ref_55 -set!_56)"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 6"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_98 ser_99 reachable-scopes_100)"
"(list"
" 'deserialize-bulk-binding"
"(ser_99(bulk-binding-mpi b_98))"
"(ser_99(bulk-binding-provide-phase-level b_98))"
"(ser_99(bulk-binding-phase-shift b_98))"
" bulk-binding-registry-id)))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class7.1"
"(lambda(b_101 mpi-shifts_102)"
"(let-values(((or-part_103)(bulk-binding-provides b_101)))"
"(if or-part_103"
" or-part_103"
"(let-values(((mod-name_104)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_101) mpi-shifts_102))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-registry16.1 b_101)"
"(void)"
"(let-values()"
"(error"
"                                                 \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_104)))"
"(values))))"
"(let-values(((table_105)"
"(bulk-binding-registry-table(bulk-binding-bulk-binding-registry b_101))))"
"(let-values(((bulk-provide_106)(hash-ref table_105 mod-name_104 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_106"
"(void)"
"(let-values()"
"(error"
"                                                       \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_104)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self! b_101(bulk-provide-self bulk-provide_106))"
"(values))))"
"(let-values(((provides_107)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_106)"
"(bulk-binding-provide-phase-level b_101))))"
"(begin(set-bulk-binding-provides! b_101 provides_107) provides_107)))))))))))"
"(lambda(b_108 binding_109 sym_110)"
"(let-values(((...tax/bulk-binding.rkt:105:11_111) provide-binding-to-require-binding13.1)"
"((binding26_112) binding_109)"
"((sym27_113) sym_110)"
"((temp28_114)(bulk-binding-self b_108))"
"((temp29_115)(bulk-binding-mpi b_108))"
"((temp30_116)(bulk-binding-provide-phase-level b_108))"
"((temp31_117)(bulk-binding-phase-shift b_108)))"
"(if(variable-reference-constant?(#%variable-reference provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" temp29_115"
" temp31_117"
" temp30_116"
" temp28_114"
" binding26_112"
" sym27_113)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tax/bulk-binding.rkt:105:11_111"
" keyword-procedure-extract"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
" 4)"
" '(#:mpi #:phase-shift #:provide-phase-level #:self)"
"(list temp29_115 temp31_117 temp30_116 temp28_114)"
" binding26_112"
" sym27_113)))))))"
"(current-inspector)"
" #f"
" '(2 3 4 5)"
" #f"
" 'bulk-binding)))"
"(values"
" struct:_52"
" make-_53"
" ?_54"
"(make-struct-field-accessor -ref_55 0 'provides)"
"(make-struct-field-accessor -ref_55 1 'self)"
"(make-struct-field-accessor -ref_55 2 'mpi)"
"(make-struct-field-accessor -ref_55 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_55 4 'phase-shift)"
"(make-struct-field-accessor -ref_55 5 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_56 0 'provides)"
"(make-struct-field-mutator -set!_56 1 'self))))"
"(define-values"
"(1/deserialize-bulk-binding)"
"(lambda(mpi_118 provide-phase-level_119 phase-shift_120 bulk-binding-registry_121)"
"(bulk-binding14.1 #f #f mpi_118 provide-phase-level_119 phase-shift_120 bulk-binding-registry_121)))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_122 make-_123 ?_124 -ref_125 -set!_126)"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))"
"(values"
" struct:_122"
" make-_123"
" ?_124"
"(make-struct-field-accessor -ref_125 0 'self)"
"(make-struct-field-accessor -ref_125 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_148 make-_149 ?_150 -ref_151 -set!_152)"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))"
"(values struct:_148 make-_149 ?_150(make-struct-field-accessor -ref_151 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(bulk-binding-registry16.1(make-hasheq))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_169 mod-name_170 self_171 provides_172)"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_169)"
" mod-name_170"
"(bulk-provide15.1 self_171 provides_172))))"
"(define-values(generate-lift-key)(lambda()(gensym 'lift)))"
"(define-values"
"(struct:root-expand-context"
" root-expand-context1.1"
" root-expand-context?"
" root-expand-context-module-scopes"
" root-expand-context-post-expansion-scope"
" root-expand-context-top-level-bind-scope"
" root-expand-context-all-scopes-stx"
" root-expand-context-use-site-scopes"
" root-expand-context-defined-syms"
" root-expand-context-frame-id"
" root-expand-context-counter"
" root-expand-context-lift-key)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'root-expand-context"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'root-expand-context)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module-scopes)"
"(make-struct-field-accessor -ref_4 1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_4 2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_4 3 'all-scopes-stx)"
"(make-struct-field-accessor -ref_4 4 'use-site-scopes)"
"(make-struct-field-accessor -ref_4 5 'defined-syms)"
"(make-struct-field-accessor -ref_4 6 'frame-id)"
"(make-struct-field-accessor -ref_4 7 'counter)"
"(make-struct-field-accessor -ref_4 8 'lift-key))))"
"(define-values"
"(make-root-expand-context10.1)"
"(lambda(all-scopes-stx5_62"
" all-scopes-stx9_63"
" initial-scopes2_64"
" initial-scopes6_65"
" outside-scope3_66"
" outside-scope7_67"
" post-expansion-scope4_68"
" post-expansion-scope8_69)"
"(let-values(((initial-scopes_70)(if initial-scopes6_65 initial-scopes2_64 null)))"
"(let-values(((outside-scope_71)(if outside-scope7_67 outside-scope3_66 top-level-common-scope)))"
"(let-values(((post-expansion-scope_72)"
"(if post-expansion-scope8_69 post-expansion-scope4_68(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_73)(if all-scopes-stx9_63 all-scopes-stx5_62 #f)))"
"(let-values()"
"(let-values(((module-scopes_74)(list* post-expansion-scope_72 outside-scope_71 initial-scopes_70)))"
"(root-expand-context1.1"
" module-scopes_74"
" post-expansion-scope_72"
"(new-scope 'module)"
"(let-values(((or-part_75) all-scopes-stx_73))"
"(if or-part_75 or-part_75(add-scopes empty-syntax module-scopes_74)))"
"(box null)"
"(make-hasheqv)"
"(gensym)"
"(box 0)"
"(generate-lift-key))))))))))"
"(define-values"
"(unpack11.1$1)"
"(lambda(given-kws_76 given-args_77)"
"(let-values(((all-scopes-stx9_78)(if(pair? given-kws_76)(eq? '#:all-scopes-stx(car given-kws_76)) #f)))"
"(let-values(((all-scopes-stx5_79)(if all-scopes-stx9_78(car given-args_77)(void)))"
"((given-kws_80)(if all-scopes-stx9_78(cdr given-kws_76) given-kws_76))"
"((given-args_81)(if all-scopes-stx9_78(cdr given-args_77) given-args_77)))"
"(let-values(((initial-scopes6_82)(if(pair? given-kws_80)(eq? '#:initial-scopes(car given-kws_80)) #f)))"
"(let-values(((initial-scopes2_83)(if initial-scopes6_82(car given-args_81)(void)))"
"((given-kws_84)(if initial-scopes6_82(cdr given-kws_80) given-kws_80))"
"((given-args_85)(if initial-scopes6_82(cdr given-args_81) given-args_81)))"
"(let-values(((outside-scope7_86)(if(pair? given-kws_84)(eq? '#:outside-scope(car given-kws_84)) #f)))"
"(let-values(((outside-scope3_87)(if outside-scope7_86(car given-args_85)(void)))"
"((given-kws_88)(if outside-scope7_86(cdr given-kws_84) given-kws_84))"
"((given-args_89)(if outside-scope7_86(cdr given-args_85) given-args_85)))"
"(let-values(((post-expansion-scope8_90)(pair? given-kws_88)))"
"(let-values(((post-expansion-scope4_91)(if post-expansion-scope8_90(car given-args_89)(void))))"
"(make-root-expand-context10.1"
" all-scopes-stx5_79"
" all-scopes-stx9_78"
" initial-scopes2_83"
" initial-scopes6_82"
" outside-scope3_87"
" outside-scope7_86"
" post-expansion-scope4_91"
" post-expansion-scope8_90)))))))))))"
"(define-values"
"(make-root-expand-context12.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_92 given-argc_93)"
"(if(= given-argc_93 2)"
"(let-values(((l1_94) given-kws_92))"
"(let-values(((l1_95)(if(null? l1_94) l1_94(if(eq?(car l1_94) '#:all-scopes-stx)(cdr l1_94) l1_94))))"
"(let-values(((l1_96) l1_95))"
"(let-values(((l1_97)(if(null? l1_96) l1_96(if(eq?(car l1_96) '#:initial-scopes)(cdr l1_96) l1_96))))"
"(let-values(((l1_98) l1_97))"
"(let-values(((l1_99)"
"(if(null? l1_98) l1_98(if(eq?(car l1_98) '#:outside-scope)(cdr l1_98) l1_98))))"
"(let-values(((l1_100) l1_99))"
"(let-values(((l1_101)"
"(if(null? l1_100)"
" l1_100"
"(if(eq?(car l1_100) '#:post-expansion-scope)(cdr l1_100) l1_100))))"
"(null? l1_101)))))))))"
" #f))"
"(case-lambda((given-kws_102 given-args_103)(unpack11.1$1 given-kws_102 given-args_103)))"
" null"
" '(#:all-scopes-stx #:initial-scopes #:outside-scope #:post-expansion-scope)"
"(let-values(((make-root-expand-context_104)(case-lambda(()(unpack11.1$1 null null)))))"
" make-root-expand-context_104)))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_105 orig-self_106 new-self_107)"
"(datum->syntax$2"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_105))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_105))"
"(1/syntax-module-path-index-shift(root-expand-context-all-scopes-stx ctx_105) orig-self_106 new-self_107)"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_105)))"
"(let-values(((ht_108)(root-expand-context-defined-syms ctx_105)))"
"(begin"
"(if((lambda(ht_109)(hash? ht_109)) ht_108)(void)(let-values()(default-in-hash ht_108)))"
"((letrec-values(((for-loop_110)"
"(lambda(table_111 i_112)"
"(if i_112"
"(let-values(((phase_113 ht_114)(hash-iterate-key+value ht_108 i_112)))"
"(if #t"
"(let-values(((table_115)"
"(let-values(((table_116) table_111))"
"(let-values(((table_117)"
"(let-values()"
"(let-values(((key_118 val_119)"
"(let-values()"
"(values phase_113 ht_114))))"
"(hash-set table_116 key_118 val_119)))))"
"(values table_117)))))"
"(if #t(for-loop_110 table_115(hash-iterate-next ht_108 i_112)) table_115))"
" table_111))"
" table_111))))"
" for-loop_110)"
" '#hasheqv()"
"(hash-iterate-first ht_108))))"
"(root-expand-context-frame-id ctx_105)"
"(unbox(root-expand-context-counter ctx_105))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_120)"
"(let-values(((vec_121)(if(syntax?$1 vec-s_120)(syntax-e$1 vec-s_120) #f)))"
"(begin"
"(if(if(vector? vec_121)"
"(if(=(vector-length vec_121) 7)"
"(if(syntax?$1(vector-ref vec_121 0))"
"(if(syntax-with-one-scope?(vector-ref vec_121 1))"
"(if(syntax?$1(vector-ref vec_121 2))"
"(if(syntax?$1(vector-ref vec_121 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_121 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_121 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_121 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"          (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_120)))"
"(root-expand-context1.1"
"(extract-scope-list(vector-ref vec_121 0))"
"(extract-scope(vector-ref vec_121 1))"
"(new-scope 'module)"
"(vector-ref vec_121 2)"
"(box(extract-scope-list(vector-ref vec_121 3)))"
"(unpack-defined-syms(vector-ref vec_121 4))"
"(syntax-e$1(vector-ref vec_121 5))"
"(box(syntax-e$1(vector-ref vec_121 6)))"
"(generate-lift-key))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_122)"
"(let-values(((ht_123) v_122))"
"(begin"
"(if((lambda(ht_124)(hash? ht_124)) ht_123)(void)(let-values()(default-in-hash ht_123)))"
"((letrec-values(((for-loop_125)"
"(lambda(result_126 i_127)"
"(if i_127"
"(let-values(((phase_128 ht-s_129)(hash-iterate-key+value ht_123 i_127)))"
"(if #t"
"(let-values(((result_130)"
"(let-values(((result_131) result_126))"
"(let-values(((result_132)"
"(let-values()"
"(let-values()"
"(if(phase? phase_128)"
"(if(hash?(syntax-e$1 ht-s_129))"
"(let-values(((ht_133)(syntax-e$1 ht-s_129)))"
"(begin"
"(if((lambda(ht_134)(hash? ht_134))"
" ht_133)"
"(void)"
"(let-values()(default-in-hash ht_133)))"
"((letrec-values(((for-loop_135)"
"(lambda(result_136 i_137)"
"(if i_137"
"(let-values(((sym_138"
" id_139)"
"(hash-iterate-key+value"
" ht_133"
" i_137)))"
"(if #t"
"(let-values(((result_140)"
"(let-values(((result_141)"
" result_136))"
"(let-values(((result_142)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_138)"
"(identifier?"
" id_139)"
" #f)))))"
"(values"
" result_142)))))"
"(if(if #t"
"(not"
"((lambda x_143"
"(not"
" result_140))"
" sym_138"
" id_139))"
" #f)"
"(for-loop_135"
" result_140"
"(hash-iterate-next"
" ht_133"
" i_137))"
" result_140))"
" result_136))"
" result_136))))"
" for-loop_135)"
" #t"
"(hash-iterate-first ht_133))))"
" #f)"
" #f)))))"
"(values result_132)))))"
"(if(if #t(not((lambda x_144(not result_130)) phase_128 ht-s_129)) #f)"
"(for-loop_125 result_130(hash-iterate-next ht_123 i_127))"
" result_130))"
" result_126))"
" result_126))))"
" for-loop_125)"
" #t"
"(hash-iterate-first ht_123))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_145)(map2 generalize-scope(set->list(syntax-scope-set stx_145 0)))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_146)(if(syntax?$1 stx_146)(= 1(set-count(syntax-scope-set stx_146 0))) #f)))"
"(define-values"
"(extract-scope)"
"(lambda(stx_147)(let-values(((s_148)(syntax-scope-set stx_147 0)))(generalize-scope(set-first s_148)))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_149)"
"(hash-copy"
"(let-values(((ht_150)(syntax-e$1 v_149)))"
"(begin"
"(if((lambda(ht_151)(hash? ht_151)) ht_150)(void)(let-values()(default-in-hash ht_150)))"
"((letrec-values(((for-loop_152)"
"(lambda(table_153 i_154)"
"(if i_154"
"(let-values(((phase_155 ht-s_156)(hash-iterate-key+value ht_150 i_154)))"
"(if #t"
"(let-values(((table_157)"
"(let-values(((table_158) table_153))"
"(let-values(((table_159)"
"(let-values()"
"(let-values(((key_160 val_161)"
"(let-values()"
"(values"
" phase_155"
"(hash-copy"
"(let-values(((ht_162)"
"(syntax-e$1"
" ht-s_156)))"
"(begin"
"(if((lambda(ht_163)"
"(hash? ht_163))"
" ht_162)"
"(void)"
"(let-values()"
"(default-in-hash ht_162)))"
"((letrec-values(((for-loop_164)"
"(lambda(table_165"
" i_166)"
"(if i_166"
"(let-values(((sym_167"
" id_168)"
"(hash-iterate-key+value"
" ht_162"
" i_166)))"
"(if #t"
"(let-values(((table_169)"
"(let-values(((table_170)"
" table_165))"
"(let-values(((table_171)"
"(let-values()"
"(let-values(((key_172"
" val_173)"
"(let-values()"
"(values"
" sym_167"
" id_168))))"
"(hash-set"
" table_170"
" key_172"
" val_173)))))"
"(values"
" table_171)))))"
"(if #t"
"(for-loop_164"
" table_169"
"(hash-iterate-next"
" ht_162"
" i_166))"
" table_169))"
" table_165))"
" table_165))))"
" for-loop_164)"
" '#hash()"
"(hash-iterate-first"
" ht_162)))))))))"
"(hash-set table_158 key_160 val_161)))))"
"(values table_159)))))"
"(if #t(for-loop_152 table_157(hash-iterate-next ht_150 i_154)) table_157))"
" table_153))"
" table_153))))"
" for-loop_152)"
" '#hasheqv()"
"(hash-iterate-first ht_150)))))))"
"(define-values"
"(linklet-primitive-table)"
"(let-values(((or-part_14)(primitive-table '#%bootstrap-linklet)))"
"(if or-part_14 or-part_14(primitive-table '#%linklet))))"
"(define-values(1/primitive-table)(hash-ref linklet-primitive-table 'primitive-table #f))"
"(define-values(1/linklet?)(hash-ref linklet-primitive-table 'linklet? #f))"
"(define-values(1/compile-linklet)(hash-ref linklet-primitive-table 'compile-linklet #f))"
"(define-values(1/instantiate-linklet)(hash-ref linklet-primitive-table 'instantiate-linklet #f))"
"(define-values(1/linklet-import-variables)(hash-ref linklet-primitive-table 'linklet-import-variables #f))"
"(define-values(1/linklet-export-variables)(hash-ref linklet-primitive-table 'linklet-export-variables #f))"
"(define-values(1/instance?)(hash-ref linklet-primitive-table 'instance? #f))"
"(define-values(1/make-instance)(hash-ref linklet-primitive-table 'make-instance #f))"
"(define-values(1/instance-name)(hash-ref linklet-primitive-table 'instance-name #f))"
"(define-values(1/instance-data)(hash-ref linklet-primitive-table 'instance-data #f))"
"(define-values(1/instance-variable-names)(hash-ref linklet-primitive-table 'instance-variable-names #f))"
"(define-values(1/instance-variable-value)(hash-ref linklet-primitive-table 'instance-variable-value #f))"
"(define-values(1/instance-set-variable-value!)(hash-ref linklet-primitive-table 'instance-set-variable-value! #f))"
"(define-values(1/instance-unset-variable!)(hash-ref linklet-primitive-table 'instance-unset-variable! #f))"
"(define-values(1/linklet-directory?)(hash-ref linklet-primitive-table 'linklet-directory? #f))"
"(define-values(1/hash->linklet-directory)(hash-ref linklet-primitive-table 'hash->linklet-directory #f))"
"(define-values(1/linklet-directory->hash)(hash-ref linklet-primitive-table 'linklet-directory->hash #f))"
"(define-values(1/linklet-bundle?)(hash-ref linklet-primitive-table 'linklet-bundle? #f))"
"(define-values(1/hash->linklet-bundle)(hash-ref linklet-primitive-table 'hash->linklet-bundle #f))"
"(define-values(1/linklet-bundle->hash)(hash-ref linklet-primitive-table 'linklet-bundle->hash #f))"
"(define-values(1/variable-reference?)(hash-ref linklet-primitive-table 'variable-reference? #f))"
"(define-values(1/variable-reference->instance)(hash-ref linklet-primitive-table 'variable-reference->instance #f))"
"(define-values(1/variable-reference-constant?)(hash-ref linklet-primitive-table 'variable-reference-constant? #f))"
"(call-with-values"
"(lambda()"
"(if 1/variable-reference-constant?"
"(void)"
"      (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
" print-values)"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'module-registry #f 2 0 #f null(current-inspector) #f '(0 1) #f 'module-registry)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'declarations)"
"(make-struct-field-accessor -ref_4 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(module-registry1.1(make-hasheq)(box #f))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_27 proc_28)"
"(let-values(((lock-box_29)(module-registry-lock-box r_27)))"
"((letrec-values(((loop_30)"
"(lambda()"
"(let-values(((v_31)(unbox lock-box_29)))"
"(if(not v_31)"
"(let-values()"
"(let-values(((lock_32)(cons(make-semaphore)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_29 v_31 lock_32)"
"(let-values()(begin(proc_28) void))"
"(let-values() loop_30)))"
"(lambda()(semaphore-post(car lock_32)))))))"
"(if(eq?(current-thread)(cdr v_31))"
"(let-values()(proc_28))"
"(let-values()(begin(sync(car v_31)(cdr v_31))(loop_30)))))))))"
" loop_30)))))"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" namespace-module-registry$1"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-cross-phase-persistent-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'namespace"
" #f"
" 14"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_87 port_88 mode_89)"
"                     (let-values ((() (begin (write-string \"#<namespace\" port_88) (values))))"
"(let-values(((n_90)(namespace-mpi ns_87)))"
"(let-values((()"
"(begin"
"(if(top-level-module-path-index? n_90)"
"(void)"
"                                           (let-values () (fprintf port_88 \":~a\" (1/module-path-index-resolve n_90))))"
"(values))))"
"(let-values(((phase_91)(namespace-phase ns_87)))"
"(begin"
"                               (if (zero-phase? phase_91) (void) (let-values () (fprintf port_88 \":~s\" phase_91)))"
"                               (write-string \">\" port_88)))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 12 13)"
" #f"
" 'namespace)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'mpi)"
"(make-struct-field-accessor -ref_4 1 'root-expand-ctx)"
"(make-struct-field-accessor -ref_4 2 'phase)"
"(make-struct-field-accessor -ref_4 3 '0-phase)"
"(make-struct-field-accessor -ref_4 4 'phase-to-namespace)"
"(make-struct-field-accessor -ref_4 5 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_4 6 'module-registry)"
"(make-struct-field-accessor -ref_4 7 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 8 'submodule-declarations)"
"(make-struct-field-accessor -ref_4 9 'cross-phase-persistent-namespace)"
"(make-struct-field-accessor -ref_4 10 'declaration-inspector)"
"(make-struct-field-accessor -ref_4 11 'inspector)"
"(make-struct-field-accessor -ref_4 12 'available-module-instances)"
"(make-struct-field-accessor -ref_4 13 'module-instances)"
"(make-struct-field-mutator -set!_5 11 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_92 make-_93 ?_94 -ref_95 -set!_96)"
"(make-struct-type 'definitions #f 2 0 #f null(current-inspector) #f '(0 1) #f 'definitions)))"
"(values"
" struct:_92"
" make-_93"
" ?_94"
"(make-struct-field-accessor -ref_95 0 'variables)"
"(make-struct-field-accessor -ref_95 1 'transformers))))"
"(define-values"
"(make-namespace)"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 #f #f #f #f #f #f)"
"(new-namespace11.1)))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_118"
" register?6_119"
" root-expand-ctx3_120"
" root-expand-ctx5_121"
" share-from-ns7_122"
" share-from-ns8_123)"
"(let-values(((share-from-ns_124)(if share-from-ns8_123 share-from-ns7_122 #f)))"
"(let-values(((root-expand-ctx_125)"
"(if root-expand-ctx5_121"
" root-expand-ctx3_120"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1))))))"
"(let-values(((register?_126)(if register?6_119 register?4_118 #t)))"
"(let-values()"
"(let-values(((phase_127)(if share-from-ns_124(namespace-phase share-from-ns_124) 0)))"
"(let-values(((ns_128)"
"(namespace1.1"
" top-level-module-path-index"
"(box root-expand-ctx_125)"
" phase_127"
" phase_127"
"(make-hasheqv)"
"(make-hasheqv)"
"(if share-from-ns_124"
"(namespace-module-registry$1 share-from-ns_124)"
"(make-module-registry))"
"(if share-from-ns_124"
"(namespace-bulk-binding-registry share-from-ns_124)"
"(make-bulk-binding-registry))"
"(make-hasheq)"
"(if share-from-ns_124"
"(let-values(((or-part_129)"
"(namespace-cross-phase-persistent-namespace share-from-ns_124)))"
"(if or-part_129 or-part_129 share-from-ns_124))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_124"
"(namespace-available-module-instances share-from-ns_124)"
"(make-hasheqv))"
"(if share-from-ns_124(namespace-module-instances share-from-ns_124)(make-hasheqv)))))"
"(begin"
"(if register?_126"
"(let-values()(hash-set!(namespace-phase-to-namespace ns_128) phase_127 ns_128))"
"(void))"
" ns_128)))))))))"
"(define-values"
"(unpack10.1)"
"(lambda(given-kws_130 given-args_131 share-from-ns7_132 share-from-ns8_133)"
"(let-values(((register?6_134)(if(pair? given-kws_130)(eq? '#:register?(car given-kws_130)) #f)))"
"(let-values(((register?4_135)(if register?6_134(car given-args_131)(void)))"
"((given-kws_136)(if register?6_134(cdr given-kws_130) given-kws_130))"
"((given-args_137)(if register?6_134(cdr given-args_131) given-args_131)))"
"(let-values(((root-expand-ctx5_138)(pair? given-kws_136)))"
"(let-values(((root-expand-ctx3_139)(if root-expand-ctx5_138(car given-args_137)(void))))"
"(new-namespace9.1"
" register?4_135"
" register?6_134"
" root-expand-ctx3_139"
" root-expand-ctx5_138"
" share-from-ns7_132"
" share-from-ns8_133)))))))"
"(define-values"
"(new-namespace11.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_140 given-argc_141)"
"(if(if(>= given-argc_141 2)(<= given-argc_141 3) #f)"
"(let-values(((l1_142) given-kws_140))"
"(let-values(((l1_143)(if(null? l1_142) l1_142(if(eq?(car l1_142) '#:register?)(cdr l1_142) l1_142))))"
"(let-values(((l1_144) l1_143))"
"(let-values(((l1_145)"
"(if(null? l1_144) l1_144(if(eq?(car l1_144) '#:root-expand-ctx)(cdr l1_144) l1_144))))"
"(null? l1_145)))))"
" #f))"
"(case-lambda"
"((given-kws_146 given-args_147)(unpack10.1 given-kws_146 given-args_147 #f #f))"
"((given-kws_148 given-args_149 share-from-ns7_150)(unpack10.1 given-kws_148 given-args_149 share-from-ns7_150 #t)))"
" null"
" '(#:register? #:root-expand-ctx)"
"(let-values(((new-namespace_151)"
"(case-lambda"
"(()(unpack10.1 null null #f #f))"
"((share-from-ns7_152)(unpack10.1 null null share-from-ns7_152 #t)))))"
" new-namespace_151)))"
"(define-values(1/current-namespace)(make-parameter(make-namespace)))"
"(define-values(namespace-get-root-expand-ctx)(lambda(ns_153)(force(unbox(namespace-root-expand-ctx ns_153)))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_154 root-ctx_155)(set-box!(namespace-root-expand-ctx ns_154) root-ctx_155)))"
"(define-values"
"(namespace->module)"
"(lambda(ns_156 name_157)"
"(let-values(((or-part_158)(hash-ref(namespace-submodule-declarations ns_156) name_157 #f)))"
"(if or-part_158"
" or-part_158"
"(hash-ref(module-registry-declarations(namespace-module-registry$1 ns_156)) name_157 #f)))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_159 phase_160)"
"(let-values(((or-part_161)(hash-ref(namespace-phase-to-namespace ns_159) phase_160 #f)))"
"(if or-part_161"
" or-part_161"
"(let-values(((p-ns_162)"
"(let-values(((the-struct_163) ns_159))"
"(if(1/namespace? the-struct_163)"
"(let-values(((phase14_164) phase_160))"
"(namespace1.1"
"(namespace-mpi the-struct_163)"
"(namespace-root-expand-ctx the-struct_163)"
" phase14_164"
"(namespace-0-phase the-struct_163)"
"(namespace-phase-to-namespace the-struct_163)"
"(namespace-phase-level-to-definitions the-struct_163)"
"(namespace-module-registry$1 the-struct_163)"
"(namespace-bulk-binding-registry the-struct_163)"
"(namespace-submodule-declarations the-struct_163)"
"(namespace-cross-phase-persistent-namespace the-struct_163)"
"(namespace-declaration-inspector the-struct_163)"
"(namespace-inspector the-struct_163)"
"(namespace-available-module-instances the-struct_163)"
"(namespace-module-instances the-struct_163)))"
"                          (raise-argument-error 'struct-copy \"namespace?\" the-struct_163)))))"
"(begin(hash-set!(namespace-phase-to-namespace ns_159) phase_160 p-ns_162) p-ns_162))))))"
"(define-values"
"(namespace->name)"
"  (lambda (p-ns_165) (format \"~a\" (1/module-path-index-resolve (namespace-mpi p-ns_165)))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_166 phase-level_167)"
"(let-values(((d_168)(hash-ref(namespace-phase-level-to-definitions ns_166) phase-level_167 #f)))"
"(let-values(((or-part_169) d_168))"
"(if or-part_169"
" or-part_169"
"(let-values()"
"(let-values(((p-ns_170)"
"(namespace->namespace-at-phase ns_166(phase+(namespace-0-phase ns_166) phase-level_167))))"
"(let-values(((d_171)"
"(definitions2.1(1/make-instance(namespace->name p-ns_170) p-ns_170)(make-hasheq))))"
"(begin(hash-set!(namespace-phase-level-to-definitions ns_166) phase-level_167 d_171) d_171)))))))))"
"(define-values"
"(namespace-set-variable!)"
"(lambda(ns_172 phase-level_173 name_174 val_175)"
"(let-values(((d_176)(namespace->definitions ns_172 phase-level_173)))"
"(1/instance-set-variable-value!(definitions-variables d_176) name_174 val_175))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_177 phase-level_178 name_179)"
"(let-values(((d_180)(namespace->definitions ns_177 phase-level_178)))"
"(1/instance-unset-variable!(definitions-variables d_180) name_179))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_181 phase-level_182 name_183 val_184)"
"(let-values(((d_185)(namespace->definitions ns_181(add1 phase-level_182))))"
"(hash-set!(definitions-transformers d_185) name_183 val_184))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_186 phase-level_187 name_188 fail-k_189)"
"(let-values(((d_190)(namespace->definitions ns_186 phase-level_187)))"
"(1/instance-variable-value(definitions-variables d_190) name_188 fail-k_189))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_191 phase-level_192 name_193 fail-k_194)"
"(let-values(((d_195)(namespace->definitions ns_191(add1 phase-level_192))))"
"(hash-ref(definitions-transformers d_195) name_193 fail-k_194))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_196 phase-shift_197)(definitions-variables(namespace->definitions ns_196 phase-shift_197))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_198 b-ns_199)"
"(eq?"
"(hash-ref(namespace-phase-level-to-definitions a-ns_198)(namespace-0-phase a-ns_198) 'no-a)"
"(hash-ref(namespace-phase-level-to-definitions b-ns_199)(namespace-0-phase b-ns_199) 'no-b))))"
"(define-values(original-property-sym)(gensym 'original))"
"(define-values"
"(syntax->list$1)"
"(lambda(s_1)"
"(let-values(((l_2)"
"((letrec-values(((loop_3)"
"(lambda(s_4)"
"(if(pair? s_4)"
"(let-values()(cons(car s_4)(loop_3(cdr s_4))))"
"(if(syntax?$1 s_4)"
"(let-values()(loop_3(syntax-e$1 s_4)))"
"(let-values() s_4))))))"
" loop_3)"
" s_1)))"
"(if(list? l_2) l_2 #f))))"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_1)"
"(lambda(new-stx3_2 old-stx4_3 id1_4 id2_5)"
"(let-values(((new-stx_6) new-stx3_2))"
"(let-values(((old-stx_7) old-stx4_3))"
"(let-values(((id_8)"
"(if id2_5"
" id1_4"
"(if(identifier? old-stx_7)"
" old-stx_7"
"(let-values(((v_9)(syntax-e/no-taint old-stx_7)))"
"(if(pair? v_9)(car v_9) #f))))))"
"(let-values()"
"(let-values(((old-props_10)(syntax-props old-stx_7)))"
"(if(zero?(hash-count old-props_10))"
"(let-values()(if id_8(syntax-property$1 new-stx_6 'origin(list id_8)) new-stx_6))"
"(let-values()"
"(let-values(((new-props_11)(syntax-props new-stx_6)))"
"(if(zero?(hash-count new-props_11))"
"(let-values()"
"(if id_8"
"(let-values()"
"(let-values(((old-origin_12)"
"(plain-property-value"
"(hash-ref old-props_10 'origin missing$1))))"
"(let-values(((origin_13)"
"(if(eq? old-origin_12 missing$1)"
"(list id_8)"
"(cons id_8 old-origin_12))))"
"(let-values(((the-struct_14) new-stx_6))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((props7_15)(hash-set old-props_10 'origin origin_13)))"
"(syntax1.1"
"(syntax-content the-struct_14)"
"(syntax-scopes the-struct_14)"
"(syntax-scope-propagations the-struct_14)"
"(syntax-shifted-multi-scopes the-struct_14)"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-bulk-binding-registry the-struct_14)"
"(syntax-srcloc the-struct_14)"
" props7_15"
"(syntax-inspector the-struct_14)"
"(syntax-tamper the-struct_14)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_14))))))"
"(let-values()"
"(let-values(((the-struct_16) new-stx_6))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((props8_17) old-props_10))"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
"(syntax-scope-propagations the-struct_16)"
"(syntax-shifted-multi-scopes the-struct_16)"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-bulk-binding-registry the-struct_16)"
"(syntax-srcloc the-struct_16)"
" props8_17"
"(syntax-inspector the-struct_16)"
"(syntax-tamper the-struct_16)))"
"                                              (raise-argument-error 'struct-copy \"syntax?\" the-struct_16))))))"
"(let-values()"
"(let-values(((old-props-with-origin_18)"
"(if id_8"
"(hash-set"
" old-props_10"
" 'origin"
"(cons id_8(hash-ref old-props_10 'origin null)))"
" old-props_10)))"
"(let-values(((updated-props_19)"
"(if(<"
"(hash-count old-props-with-origin_18)"
"(hash-count new-props_11))"
"(let-values()"
"(let-values(((ht_20) old-props-with-origin_18))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash? ht_21)(immutable? ht_21) #f))"
" ht_20)"
"(void)"
"(let-values()(default-in-immutable-hash ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(new-props_23 i_24)"
"(if i_24"
"(let-values(((k_25 v_26)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_20"
" i_24)))"
"(if #t"
"(let-values(((new-props_27)"
"(let-values(((new-props_28)"
" new-props_23))"
"(let-values(((new-props_29)"
"(let-values()"
"(let-values(((new-v_30)"
"(hash-ref"
" new-props_28"
" k_25"
" missing$1)))"
"(hash-set"
" new-props_28"
" k_25"
"(if(eq?"
" new-v_30"
" missing$1)"
" v_26"
"(cons/preserve"
" new-v_30"
" v_26)))))))"
"(values"
" new-props_29)))))"
"(if #t"
"(for-loop_22"
" new-props_27"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))"
" new-props_27))"
" new-props_23))"
" new-props_23))))"
" for-loop_22)"
" new-props_11"
"(unsafe-immutable-hash-iterate-first ht_20)))))"
"(let-values()"
"(let-values(((ht_31) new-props_11))"
"(begin"
"(if((lambda(ht_32)"
"(if(hash? ht_32)(immutable? ht_32) #f))"
" ht_31)"
"(void)"
"(let-values()(default-in-immutable-hash ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(old-props_34 i_35)"
"(if i_35"
"(let-values(((k_36 v_37)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_31"
" i_35)))"
"(if #t"
"(let-values(((old-props_38)"
"(let-values(((old-props_39)"
" old-props_34))"
"(let-values(((old-props_40)"
"(let-values()"
"(let-values(((old-v_41)"
"(hash-ref"
" old-props_39"
" k_36"
" missing$1)))"
"(hash-set"
" old-props_39"
" k_36"
"(if(eq?"
" old-v_41"
" missing$1)"
" v_37"
"(cons/preserve"
" v_37"
" old-v_41)))))))"
"(values"
" old-props_40)))))"
"(if #t"
"(for-loop_33"
" old-props_38"
"(unsafe-immutable-hash-iterate-next"
" ht_31"
" i_35))"
" old-props_38))"
" old-props_34))"
" old-props_34))))"
" for-loop_33)"
" old-props-with-origin_18"
"(unsafe-immutable-hash-iterate-first ht_31))))))))"
"(let-values(((the-struct_42) new-stx_6))"
"(if(syntax?$1 the-struct_42)"
"(let-values(((props9_43) updated-props_19))"
"(syntax1.1"
"(syntax-content the-struct_42)"
"(syntax-scopes the-struct_42)"
"(syntax-scope-propagations the-struct_42)"
"(syntax-shifted-multi-scopes the-struct_42)"
"(syntax-mpi-shifts the-struct_42)"
"(syntax-bulk-binding-registry the-struct_42)"
"(syntax-srcloc the-struct_42)"
" props9_43"
"(syntax-inspector the-struct_42)"
"(syntax-tamper the-struct_42)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"syntax?\""
" the-struct_42))))))))))))))))))"
"(case-lambda"
"((new-stx_44 old-stx_45)(syntax-track-origin5_1 new-stx_44 old-stx_45 #f #f))"
"((new-stx_46 old-stx_47 id1_48)(syntax-track-origin5_1 new-stx_46 old-stx_47 id1_48 #t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_49 b_50)"
"(if(let-values(((or-part_51)(preserved-property-value? a_49)))"
"(if or-part_51 or-part_51(preserved-property-value? b_50)))"
"(preserved-property-value1.1(cons(plain-property-value a_49)(plain-property-value b_50)))"
"(cons a_49 b_50))))"
"(define-values(lifted/1.1$24)(void))"
"(define-values(lifted/2.1$6)(void))"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list(cons prop:exn:srclocs(lambda(e_24)(1/exn:fail:syntax-exprs e_24))))"
" #f"
" #f"
" '(0)"
"(lambda(str_25 cm_26 exprs_27 info_28)"
"(begin"
"(if(if(list? exprs_27)(andmap2 syntax?$1 exprs_27) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_27)))"
"(values str_25 cm_26 exprs_27)))"
" 'exn:fail:syntax)))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_29 make-_30 ?_31 -ref_32 -set!_33)"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))"
"(values struct:_29 make-_30 ?_31)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error11_45)"
"(lambda(given-name9_46"
" message10_47"
" expr1_48"
" sub-expr2_49"
" extra-sources3_50"
" message-suffix4_51"
" expr5_52"
" sub-expr6_53"
" extra-sources7_54"
" message-suffix8_55)"
"(let-values(((given-name_56) given-name9_46))"
"(let-values(((message_57) message10_47))"
"(let-values(((expr_58)(if expr5_52 expr1_48 #f)))"
"(let-values(((sub-expr_59)(if sub-expr6_53 sub-expr2_49 #f)))"
"(let-values(((extra-sources_60)(if extra-sources7_54 extra-sources3_50 null)))"
"                            (let-values (((message-suffix_61) (if message-suffix8_55 message-suffix4_51 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax"
" given-name_56"
" message_57"
" expr_58"
" sub-expr_59"
" extra-sources_60"
" message-suffix_61)))))))))))"
"(case-lambda"
"((given-name_62 message_63)(raise-syntax-error11_45 given-name_62 message_63 #f #f #f #f #f #f #f #f))"
"((given-name_64 message_65 expr_66 sub-expr_67 extra-sources_68 message-suffix4_69)"
"(raise-syntax-error11_45"
" given-name_64"
" message_65"
" expr_66"
" sub-expr_67"
" extra-sources_68"
" message-suffix4_69"
" #t"
" #t"
" #t"
" #t))"
"((given-name_70 message_71 expr_72 sub-expr_73 extra-sources3_74)"
"(raise-syntax-error11_45 given-name_70 message_71 expr_72 sub-expr_73 extra-sources3_74 #f #t #t #t #f))"
"((given-name_75 message_76 expr_77 sub-expr2_78)"
"(raise-syntax-error11_45 given-name_75 message_76 expr_77 sub-expr2_78 #f #f #t #t #f #f))"
"((given-name_79 message_80 expr1_81)"
"(raise-syntax-error11_45 given-name_79 message_80 expr1_81 #f #f #f #t #f #f #f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_82)"
"(lambda(given-name21_83"
" message22_84"
" expr13_85"
" sub-expr14_86"
" extra-sources15_87"
" message-suffix16_88"
" expr17_89"
" sub-expr18_90"
" extra-sources19_91"
" message-suffix20_92)"
"(let-values(((given-name_93) given-name21_83))"
"(let-values(((message_94) message22_84))"
"(let-values(((expr_95)(if expr17_89 expr13_85 #f)))"
"(let-values(((sub-expr_96)(if sub-expr18_90 sub-expr14_86 #f)))"
"(let-values(((extra-sources_97)(if extra-sources19_91 extra-sources15_87 null)))"
"                            (let-values (((message-suffix_98) (if message-suffix20_92 message-suffix16_88 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound"
" given-name_93"
" message_94"
" expr_95"
" sub-expr_96"
" extra-sources_97"
" message-suffix_98)))))))))))"
"(case-lambda"
"((given-name_99 message_100)(raise-unbound-syntax-error23_82 given-name_99 message_100 #f #f #f #f #f #f #f #f))"
"((given-name_101 message_102 expr_103 sub-expr_104 extra-sources_105 message-suffix16_106)"
"(raise-unbound-syntax-error23_82"
" given-name_101"
" message_102"
" expr_103"
" sub-expr_104"
" extra-sources_105"
" message-suffix16_106"
" #t"
" #t"
" #t"
" #t))"
"((given-name_107 message_108 expr_109 sub-expr_110 extra-sources15_111)"
"(raise-unbound-syntax-error23_82"
" given-name_107"
" message_108"
" expr_109"
" sub-expr_110"
" extra-sources15_111"
" #f"
" #t"
" #t"
" #t"
" #f))"
"((given-name_112 message_113 expr_114 sub-expr14_115)"
"(raise-unbound-syntax-error23_82 given-name_112 message_113 expr_114 sub-expr14_115 #f #f #t #t #f #f))"
"((given-name_116 message_117 expr13_118)"
"(raise-unbound-syntax-error23_82 given-name_116 message_117 expr13_118 #f #f #f #t #f #f #f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_119 given-name_120 message_121 expr_122 sub-expr_123 extra-sources_124 message-suffix_125)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_130)(not given-name_120)))"
"(if or-part_130 or-part_130(symbol? given-name_120)))"
"(void)"
"                      (let-values () (raise-argument-error 'raise-syntax-error \"(or/c symbol? #f)\" given-name_120)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_121)"
"(void)"
"                        (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message_121)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_124)(andmap2 syntax?$1 extra-sources_124) #f)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'raise-syntax-error \"(listof syntax?)\" extra-sources_124)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_125)"
"(void)"
"                            (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message-suffix_125)))"
"(values))))"
"(let-values(((name_126)"
"(format"
"                           \"~a\""
"(let-values(((or-part_131) given-name_120))"
"(if or-part_131"
" or-part_131"
"(let-values(((or-part_132)(extract-form-name expr_122)))"
"(if or-part_132 or-part_132 '?)))))))"
"(let-values(((at-message_127)"
"(let-values(((or-part_133)"
"(if sub-expr_123"
"(if(error-print-source-location)"
"                                              (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$2 #f sub-expr_123)))"
" #f)"
" #f)))"
"                              (if or-part_133 or-part_133 \"\"))))"
"(let-values(((in-message_128)"
"(let-values(((or-part_134)"
"(if expr_122"
"(if(error-print-source-location)"
"                                                (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$2 #f expr_122)))"
" #f)"
" #f)))"
"                                (if or-part_134 or-part_134 \"\"))))"
"(let-values(((src-loc-str_129)"
"(let-values(((or-part_135)(extract-source-location sub-expr_123)))"
"(if or-part_135"
" or-part_135"
"(let-values(((or-part_136)(extract-source-location expr_122)))"
"                                      (if or-part_136 or-part_136 \"\"))))))"
"(raise"
"(exn:fail:syntax_119"
"(string-append"
" src-loc-str_129"
" name_126"
"                       \": \""
" message_121"
" at-message_127"
" in-message_128"
" message-suffix_125)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_137) sub-expr_123))(if or-part_137 or-part_137 expr_122))"
"(cons"
"(datum->syntax$2"
" #f"
"(let-values(((or-part_138) sub-expr_123))(if or-part_138 or-part_138 expr_122)))"
" extra-sources_124)"
" extra-sources_124))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_139)"
"(if(syntax?$1 s_139)"
"(let-values()"
"(let-values(((e_140)(syntax-e$1 s_139)))"
"(if(symbol? e_140)"
"(let-values() e_140)"
"(if(if(pair? e_140)(identifier?(car e_140)) #f)"
"(let-values()(syntax-e$1(car e_140)))"
"(let-values() #f)))))"
"(let-values() #f))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_141)"
"(if(syntax?$1 s_141)"
"(if(syntax-srcloc s_141)"
"        (let-values (((str_142) (srcloc->string (syntax-srcloc s_141)))) (if str_142 (string-append str_142 \": \") #f))"
" #f)"
" #f)))"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'module-use #f 2 0 #f null #f #f '(0 1) #f 'module-use)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module)"
"(make-struct-field-accessor -ref_4 1 'phase))))"
"(define-values(lifted/1.1$8)(void))"
"(define-values(lifted/2.1$2)(void))"
"(define-values(lifted/3.1$1)(void))"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-predefined?$1"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(make-struct-type"
" 'module"
" #f"
" 17"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16)"
" #f"
" 'module)))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 0 'self)"
"(make-struct-field-accessor -ref_8 1 'requires)"
"(make-struct-field-accessor -ref_8 2 'provides)"
"(make-struct-field-accessor -ref_8 3 'access)"
"(make-struct-field-accessor -ref_8 4 'language-info)"
"(make-struct-field-accessor -ref_8 5 'min-phase-level)"
"(make-struct-field-accessor -ref_8 6 'max-phase-level)"
"(make-struct-field-accessor -ref_8 7 'prepare-instance)"
"(make-struct-field-accessor -ref_8 8 'instantiate-phase)"
"(make-struct-field-accessor -ref_8 9 'primitive?)"
"(make-struct-field-accessor -ref_8 10 'predefined?)"
"(make-struct-field-accessor -ref_8 11 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_8 12 'no-protected?)"
"(make-struct-field-accessor -ref_8 13 'inspector)"
"(make-struct-field-accessor -ref_8 14 'submodule-names)"
"(make-struct-field-accessor -ref_8 15 'supermodule-name)"
"(make-struct-field-accessor -ref_8 16 'get-all-variables)"
"(make-struct-field-mutator -set!_9 3 'access))))"
"(define-values"
"(lifted/1.1$4)"
"(make-required 'make-module(case-lambda((self_106)(apply missing-kw self_106 null))) #f #f))"
"(define-values"
"(make-module32.1)"
"(lambda(cross-phase-persistent?12_107"
" cross-phase-persistent?27_108"
" get-all-variables16_109"
" get-all-variables31_110"
" instantiate-phase-callback7_111"
" language-info9_112"
" language-info24_113"
" max-phase-level6_114"
" max-phase-level21_115"
" min-phase-level5_116"
" min-phase-level20_117"
" no-protected?13_118"
" no-protected?28_119"
" predefined?11_120"
" predefined?26_121"
" prepare-instance-callback8_122"
" prepare-instance-callback23_123"
" primitive?10_124"
" primitive?25_125"
" provides4_126"
" requires3_127"
" requires18_128"
" self2_129"
" submodule-names14_130"
" submodule-names29_131"
" supermodule-name15_132"
" supermodule-name30_133)"
"(let-values(((self_134) self2_129))"
"(let-values(((requires_135)(if requires18_128 requires3_127 null)))"
"(let-values(((provides_136) provides4_126))"
"(let-values(((min-phase-level_137)(if min-phase-level20_117 min-phase-level5_116 0)))"
"(let-values(((max-phase-level_138)(if max-phase-level21_115 max-phase-level6_114 0)))"
"(let-values(((instantiate-phase_139) instantiate-phase-callback7_111))"
"(let-values(((prepare-instance_140)"
"(if prepare-instance-callback23_123 prepare-instance-callback8_122 void)))"
"(let-values(((language-info_141)(if language-info24_113 language-info9_112 #f)))"
"(let-values(((primitive?_142)(if primitive?25_125 primitive?10_124 #f)))"
"(let-values(((predefined?_143)(if predefined?26_121 predefined?11_120 #f)))"
"(let-values(((cross-phase-persistent?_144)"
"(if cross-phase-persistent?27_108 cross-phase-persistent?12_107 primitive?_142)))"
"(let-values(((no-protected?_145)(if no-protected?28_119 no-protected?13_118 #f)))"
"(let-values(((submodule-names_146)(if submodule-names29_131 submodule-names14_130 null)))"
"(let-values(((supermodule-name_147)"
"(if supermodule-name30_133 supermodule-name15_132 #f)))"
"(let-values(((get-all-variables_148)"
"(if get-all-variables31_110 get-all-variables16_109(lambda() null))))"
"(let-values()"
"(module1.1"
" self_134"
" requires_135"
" provides_136"
" #f"
" language-info_141"
" min-phase-level_137"
" max-phase-level_138"
" prepare-instance_140"
" instantiate-phase_139"
" primitive?_142"
" predefined?_143"
" cross-phase-persistent?_144"
" no-protected?_145"
"(current-code-inspector)"
" submodule-names_146"
" supermodule-name_147"
" get-all-variables_148)))))))))))))))))))"
"(define-values"
"(unpack33.1)"
"(lambda(given-kws_149 given-args_150)"
"(let-values(((cross-phase-persistent?27_151)"
"(if(pair? given-kws_149)(eq? '#:cross-phase-persistent?(car given-kws_149)) #f)))"
"(let-values(((cross-phase-persistent?12_152)(if cross-phase-persistent?27_151(car given-args_150)(void)))"
"((given-kws_153)(if cross-phase-persistent?27_151(cdr given-kws_149) given-kws_149))"
"((given-args_154)(if cross-phase-persistent?27_151(cdr given-args_150) given-args_150)))"
"(let-values(((get-all-variables31_155)"
"(if(pair? given-kws_153)(eq? '#:get-all-variables(car given-kws_153)) #f)))"
"(let-values(((get-all-variables16_156)(if get-all-variables31_155(car given-args_154)(void)))"
"((given-kws_157)(if get-all-variables31_155(cdr given-kws_153) given-kws_153))"
"((given-args_158)(if get-all-variables31_155(cdr given-args_154) given-args_154)))"
"(let-values(((instantiate-phase-callback7_159)(car given-args_158))"
"((given-kws_160)(cdr given-kws_157))"
"((given-args_161)(cdr given-args_158)))"
"(let-values(((language-info24_162)"
"(if(pair? given-kws_160)(eq? '#:language-info(car given-kws_160)) #f)))"
"(let-values(((language-info9_163)(if language-info24_162(car given-args_161)(void)))"
"((given-kws_164)(if language-info24_162(cdr given-kws_160) given-kws_160))"
"((given-args_165)(if language-info24_162(cdr given-args_161) given-args_161)))"
"(let-values(((max-phase-level21_166)"
"(if(pair? given-kws_164)(eq? '#:max-phase-level(car given-kws_164)) #f)))"
"(let-values(((max-phase-level6_167)(if max-phase-level21_166(car given-args_165)(void)))"
"((given-kws_168)(if max-phase-level21_166(cdr given-kws_164) given-kws_164))"
"((given-args_169)(if max-phase-level21_166(cdr given-args_165) given-args_165)))"
"(let-values(((min-phase-level20_170)"
"(if(pair? given-kws_168)(eq? '#:min-phase-level(car given-kws_168)) #f)))"
"(let-values(((min-phase-level5_171)(if min-phase-level20_170(car given-args_169)(void)))"
"((given-kws_172)(if min-phase-level20_170(cdr given-kws_168) given-kws_168))"
"((given-args_173)(if min-phase-level20_170(cdr given-args_169) given-args_169)))"
"(let-values(((no-protected?28_174)"
"(if(pair? given-kws_172)(eq? '#:no-protected?(car given-kws_172)) #f)))"
"(let-values(((no-protected?13_175)(if no-protected?28_174(car given-args_173)(void)))"
"((given-kws_176)(if no-protected?28_174(cdr given-kws_172) given-kws_172))"
"((given-args_177)"
"(if no-protected?28_174(cdr given-args_173) given-args_173)))"
"(let-values(((predefined?26_178)"
"(if(pair? given-kws_176)(eq? '#:predefined?(car given-kws_176)) #f)))"
"(let-values(((predefined?11_179)(if predefined?26_178(car given-args_177)(void)))"
"((given-kws_180)(if predefined?26_178(cdr given-kws_176) given-kws_176))"
"((given-args_181)"
"(if predefined?26_178(cdr given-args_177) given-args_177)))"
"(let-values(((prepare-instance-callback23_182)"
"(if(pair? given-kws_180)"
"(eq? '#:prepare-instance-callback(car given-kws_180))"
" #f)))"
"(let-values(((prepare-instance-callback8_183)"
"(if prepare-instance-callback23_182(car given-args_181)(void)))"
"((given-kws_184)"
"(if prepare-instance-callback23_182"
"(cdr given-kws_180)"
" given-kws_180))"
"((given-args_185)"
"(if prepare-instance-callback23_182"
"(cdr given-args_181)"
" given-args_181)))"
"(let-values(((primitive?25_186)"
"(if(pair? given-kws_184)"
"(eq? '#:primitive?(car given-kws_184))"
" #f)))"
"(let-values(((primitive?10_187)"
"(if primitive?25_186(car given-args_185)(void)))"
"((given-kws_188)"
"(if primitive?25_186(cdr given-kws_184) given-kws_184))"
"((given-args_189)"
"(if primitive?25_186(cdr given-args_185) given-args_185)))"
"(let-values(((provides4_190)(car given-args_189))"
"((given-kws_191)(cdr given-kws_188))"
"((given-args_192)(cdr given-args_189)))"
"(let-values(((requires18_193)"
"(if(pair? given-kws_191)"
"(eq? '#:requires(car given-kws_191))"
" #f)))"
"(let-values(((requires3_194)"
"(if requires18_193(car given-args_192)(void)))"
"((given-kws_195)"
"(if requires18_193(cdr given-kws_191) given-kws_191))"
"((given-args_196)"
"(if requires18_193(cdr given-args_192) given-args_192)))"
"(let-values(((self2_197)(car given-args_196))"
"((given-kws_198)(cdr given-kws_195))"
"((given-args_199)(cdr given-args_196)))"
"(let-values(((submodule-names29_200)"
"(if(pair? given-kws_198)"
"(eq? '#:submodule-names(car given-kws_198))"
" #f)))"
"(let-values(((submodule-names14_201)"
"(if submodule-names29_200"
"(car given-args_199)"
"(void)))"
"((given-kws_202)"
"(if submodule-names29_200"
"(cdr given-kws_198)"
" given-kws_198))"
"((given-args_203)"
"(if submodule-names29_200"
"(cdr given-args_199)"
" given-args_199)))"
"(let-values(((supermodule-name30_204)(pair? given-kws_202)))"
"(let-values(((supermodule-name15_205)"
"(if supermodule-name30_204"
"(car given-args_203)"
"(void))))"
"(make-module32.1"
" cross-phase-persistent?12_152"
" cross-phase-persistent?27_151"
" get-all-variables16_156"
" get-all-variables31_155"
" instantiate-phase-callback7_159"
" language-info9_163"
" language-info24_162"
" max-phase-level6_167"
" max-phase-level21_166"
" min-phase-level5_171"
" min-phase-level20_170"
" no-protected?13_175"
" no-protected?28_174"
" predefined?11_179"
" predefined?26_178"
" prepare-instance-callback8_183"
" prepare-instance-callback23_182"
" primitive?10_187"
" primitive?25_186"
" provides4_190"
" requires3_194"
" requires18_193"
" self2_197"
" submodule-names14_201"
" submodule-names29_200"
" supermodule-name15_205"
" supermodule-name30_204))))))))))))))))))))))))))))))"
"(define-values"
"(make-module34.1)"
"(lifted/1.1$4"
"(lambda(given-kws_206 given-argc_207)"
"(if(= given-argc_207 2)"
"(subsets?"
" '(#:instantiate-phase-callback #:provides #:self)"
" given-kws_206"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:predefined?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:submodule-names"
" #:supermodule-name))"
" #f))"
"(case-lambda((given-kws_208 given-args_209)(unpack33.1 given-kws_208 given-args_209)))"
" '(#:instantiate-phase-callback #:provides #:self)"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:no-protected?"
" #:predefined?"
" #:prepare-instance-callback"
" #:primitive?"
" #:provides"
" #:requires"
" #:self"
" #:submodule-names"
" #:supermodule-name)))"
"(define-values"
"(struct:module-instance"
" module-instance35.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!)"
"(let-values(((struct:_210 make-_211 ?_212 -ref_213 -set!_214)"
"(make-struct-type"
" 'module-instance"
" #f"
" 6"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 3 5)"
" #f"
" 'module-instance)))"
"(values"
" struct:_210"
" make-_211"
" ?_212"
"(make-struct-field-accessor -ref_213 0 'namespace)"
"(make-struct-field-accessor -ref_213 1 'module)"
"(make-struct-field-accessor -ref_213 2 'shifted-requires)"
"(make-struct-field-accessor -ref_213 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_213 4 'made-available?)"
"(make-struct-field-accessor -ref_213 5 'data-box)"
"(make-struct-field-mutator -set!_214 2 'shifted-requires)"
"(make-struct-field-mutator -set!_214 4 'made-available?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_256 m_257)(module-instance35.1 m-ns_256 m_257 #f(make-hasheqv) #f(box #f))))"
"(define-values"
"(lifted/2.1$3)"
"(make-required"
" 'make-module-namespace"
"(case-lambda((self_258 ns_259)(apply missing-kw self_258 ns_259 null)))"
" #f"
" #f))"
"(define-values"
"(make-module-namespace43.1)"
"(lambda(for-submodule?38_260 mpi36_261 root-expand-context37_262 ns42_263)"
"(let-values(((ns_264) ns42_263))"
"(let-values(((name-mpi_265) mpi36_261))"
"(let-values(((root-expand-ctx_266) root-expand-context37_262))"
"(let-values(((for-submodule?_267) for-submodule?38_260))"
"(let-values()"
"(let-values(((phase_268) 0))"
"(let-values(((name_269)(1/module-path-index-resolve name-mpi_265)))"
"(let-values(((m-ns_270)"
"(let-values(((the-struct_272)"
"(let-values(((...namespace/module.rkt:127:27_273) new-namespace11.1)"
"((ns153_274) ns_264)"
"((root-expand-ctx154_275) root-expand-ctx_266)"
"((temp155_276) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference new-namespace11.1))"
"(new-namespace9.1"
" temp155_276"
" #t"
" root-expand-ctx154_275"
" #t"
" ns153_274"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:127:27_273"
" keyword-procedure-extract"
" '(#:register? #:root-expand-ctx)"
" 3)"
" '(#:register? #:root-expand-ctx)"
"(list temp155_276 root-expand-ctx154_275)"
" ns153_274)))))"
"(if(1/namespace? the-struct_272)"
"(let-values(((mpi146_277) name-mpi_265)"
"((phase147_278) phase_268)"
"((0-phase148_279) phase_268)"
"((submodule-declarations149_280)"
"(if for-submodule?_267"
"(namespace-submodule-declarations ns_264)"
"(make-hash)))"
"((available-module-instances150_281)(make-hasheqv))"
"((module-instances151_282)(make-hasheqv))"
"((declaration-inspector152_283)(current-code-inspector)))"
"(namespace1.1"
" mpi146_277"
"(namespace-root-expand-ctx the-struct_272)"
" phase147_278"
" 0-phase148_279"
"(namespace-phase-to-namespace the-struct_272)"
"(namespace-phase-level-to-definitions the-struct_272)"
"(namespace-module-registry$1 the-struct_272)"
"(namespace-bulk-binding-registry the-struct_272)"
" submodule-declarations149_280"
"(namespace-cross-phase-persistent-namespace the-struct_272)"
" declaration-inspector152_283"
"(namespace-inspector the-struct_272)"
" available-module-instances150_281"
" module-instances151_282))"
"                                    (raise-argument-error 'struct-copy \"namespace?\" the-struct_272)))))"
"(let-values((()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_270) phase_268 m-ns_270)"
"(values))))"
"(let-values(((at-phase_271)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_270) phase_268 at-phase_271)"
"(hash-set! at-phase_271 name_269(make-module-instance m-ns_270 #f))"
" m-ns_270)))))))))))))"
"(define-values"
"(unpack44.1)"
"(lambda(given-kws_284 given-args_285 ns42_286)"
"(let-values(((for-submodule?38_287)(car given-args_285))"
"((given-kws_288)(cdr given-kws_284))"
"((given-args_289)(cdr given-args_285)))"
"(let-values(((mpi36_290)(car given-args_289))"
"((given-kws_291)(cdr given-kws_288))"
"((given-args_292)(cdr given-args_289)))"
"(let-values(((root-expand-context37_293)(car given-args_292)))"
"(make-module-namespace43.1 for-submodule?38_287 mpi36_290 root-expand-context37_293 ns42_286))))))"
"(define-values"
"(make-module-namespace45.1)"
"(lifted/2.1$3"
"(lambda(given-kws_294 given-argc_295)"
"(if(= given-argc_295 3)"
"(let-values(((l2_296) given-kws_294))"
"(if(pair? l2_296)"
"(if(eq?(car l2_296) '#:for-submodule?)"
"(let-values(((l2_297)(cdr l2_296)))"
"(if(pair? l2_297)"
"(if(eq?(car l2_297) '#:mpi)"
"(let-values(((l2_298)(cdr l2_297)))"
"(if(pair? l2_298)(if(eq?(car l2_298) '#:root-expand-context)(null?(cdr l2_298)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_299 given-args_300 ns_301)(unpack44.1 given-kws_299 given-args_300 ns_301)))"
" '(#:for-submodule? #:mpi #:root-expand-context)"
" '(#:for-submodule? #:mpi #:root-expand-context)))"
"(define-values"
"(declare-module!51.1)"
"(lambda(as-submodule?46_302 as-submodule?47_303 ns48_304 m49_305 mod-name50_306)"
"(let-values(((ns_307) ns48_304))"
"(let-values(((m_308) m49_305))"
"(let-values(((mod-name_309) mod-name50_306))"
"(let-values(((as-submodule?_310)(if as-submodule?47_303 as-submodule?46_302 #f)))"
"(let-values()"
"(begin"
"(hash-set!"
"(if as-submodule?_310"
"(namespace-submodule-declarations ns_307)"
"(module-registry-declarations(namespace-module-registry$1 ns_307)))"
" mod-name_309"
" m_308)"
"(if as-submodule?_310"
"(void)"
"(let-values()"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_307)"
" mod-name_309"
"(module-self m_308)"
"(module-provides m_308))))"
"((1/current-module-name-resolver) mod-name_309 #f)))))))))"
"(define-values"
"(unpack52.1)"
"(lambda(given-kws_311 given-args_312 ns48_313 m49_314 mod-name50_315)"
"(let-values(((as-submodule?47_316)(pair? given-kws_311)))"
"(let-values(((as-submodule?46_317)(if as-submodule?47_316(car given-args_312)(void))))"
"(declare-module!51.1 as-submodule?46_317 as-submodule?47_316 ns48_313 m49_314 mod-name50_315)))))"
"(define-values"
"(declare-module!53.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_318 given-argc_319)"
"(if(= given-argc_319 5)"
"(let-values(((l1_320) given-kws_318))"
"(let-values(((l1_321)"
"(if(null? l1_320) l1_320(if(eq?(car l1_320) '#:as-submodule?)(cdr l1_320) l1_320))))"
"(null? l1_321)))"
" #f))"
"(case-lambda"
"((given-kws_322 given-args_323 ns_324 m_325 mod-name_326)"
"(unpack52.1 given-kws_322 given-args_323 ns_324 m_325 mod-name_326)))"
" null"
" '(#:as-submodule?)"
"(let-values(((declare-module!_327)"
"(case-lambda((ns_328 m_329 mod-name_330)(unpack52.1 null null ns_328 m_329 mod-name_330)))))"
" declare-module!_327)))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_331 mod-name_332) (raise-arguments-error who_331 \"unknown module\" \"module name\" mod-name_332)))"
"(define-values"
"(namespace->module-instance65.1)"
"(lambda(check-available-at-phase-level56_333"
" check-available-at-phase-level60_334"
" complain-on-failure?55_335"
" complain-on-failure?59_336"
" install!-namespace54_337"
" install!-namespace58_338"
" unavailable-callback57_339"
" unavailable-callback61_340"
" ns62_341"
" name63_342"
" 0-phase64_343)"
"(let-values(((ns_344) ns62_341))"
"(let-values(((name_345) name63_342))"
"(let-values(((0-phase_346) 0-phase64_343))"
"(let-values(((install!-ns_347)(if install!-namespace58_338 install!-namespace54_337 #f)))"
"(let-values(((complain-on-failure?_348)(if complain-on-failure?59_336 complain-on-failure?55_335 #f)))"
"(let-values(((check-available-at-phase-level_349)"
"(if check-available-at-phase-level60_334 check-available-at-phase-level56_333 #f)))"
"(let-values(((unavailable-callback_350)"
"(if unavailable-callback61_340 unavailable-callback57_339 void)))"
"(let-values()"
"(let-values(((mi_351)"
"(let-values(((or-part_352)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_344) 0-phase_346 '#hasheq())"
" name_345"
" #f)))"
"(if or-part_352"
" or-part_352"
"(let-values(((or-part_353)"
"(let-values(((c-ns_354)"
"(let-values(((or-part_355)"
"(namespace-cross-phase-persistent-namespace"
" ns_344)))"
"(if or-part_355 or-part_355 ns_344))))"
"(hash-ref(namespace-module-instances c-ns_354) name_345 #f))))"
"(if or-part_353"
" or-part_353"
"(if complain-on-failure?_348"
"                                            (error \"no module instance found:\" name_345 0-phase_346)"
" #f)))))))"
"(begin"
"(if(if mi_351 check-available-at-phase-level_349 #f)"
"(let-values()"
"(check-availablilty mi_351 check-available-at-phase-level_349 unavailable-callback_350))"
"(void))"
" mi_351))))))))))))"
"(define-values"
"(unpack66.1)"
"(lambda(given-kws_356 given-args_357 ns62_358 name63_359 0-phase64_360)"
"(let-values(((check-available-at-phase-level60_361)"
"(if(pair? given-kws_356)(eq? '#:check-available-at-phase-level(car given-kws_356)) #f)))"
"(let-values(((check-available-at-phase-level56_362)"
"(if check-available-at-phase-level60_361(car given-args_357)(void)))"
"((given-kws_363)(if check-available-at-phase-level60_361(cdr given-kws_356) given-kws_356))"
"((given-args_364)(if check-available-at-phase-level60_361(cdr given-args_357) given-args_357)))"
"(let-values(((complain-on-failure?59_365)"
"(if(pair? given-kws_363)(eq? '#:complain-on-failure?(car given-kws_363)) #f)))"
"(let-values(((complain-on-failure?55_366)(if complain-on-failure?59_365(car given-args_364)(void)))"
"((given-kws_367)(if complain-on-failure?59_365(cdr given-kws_363) given-kws_363))"
"((given-args_368)(if complain-on-failure?59_365(cdr given-args_364) given-args_364)))"
"(let-values(((install!-namespace58_369)"
"(if(pair? given-kws_367)(eq? '#:install!-namespace(car given-kws_367)) #f)))"
"(let-values(((install!-namespace54_370)(if install!-namespace58_369(car given-args_368)(void)))"
"((given-kws_371)(if install!-namespace58_369(cdr given-kws_367) given-kws_367))"
"((given-args_372)(if install!-namespace58_369(cdr given-args_368) given-args_368)))"
"(let-values(((unavailable-callback61_373)(pair? given-kws_371)))"
"(let-values(((unavailable-callback57_374)"
"(if unavailable-callback61_373(car given-args_372)(void))))"
"(namespace->module-instance65.1"
" check-available-at-phase-level56_362"
" check-available-at-phase-level60_361"
" complain-on-failure?55_366"
" complain-on-failure?59_365"
" install!-namespace54_370"
" install!-namespace58_369"
" unavailable-callback57_374"
" unavailable-callback61_373"
" ns62_358"
" name63_359"
" 0-phase64_360)))))))))))"
"(define-values"
"(namespace->module-instance67.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_375 given-argc_376)"
"(if(= given-argc_376 5)"
"(let-values(((l1_377) given-kws_375))"
"(let-values(((l1_378)"
"(if(null? l1_377)"
" l1_377"
"(if(eq?(car l1_377) '#:check-available-at-phase-level)(cdr l1_377) l1_377))))"
"(let-values(((l1_379) l1_378))"
"(let-values(((l1_380)"
"(if(null? l1_379)"
" l1_379"
"(if(eq?(car l1_379) '#:complain-on-failure?)(cdr l1_379) l1_379))))"
"(let-values(((l1_381) l1_380))"
"(let-values(((l1_382)"
"(if(null? l1_381)"
" l1_381"
"(if(eq?(car l1_381) '#:install!-namespace)(cdr l1_381) l1_381))))"
"(let-values(((l1_383) l1_382))"
"(let-values(((l1_384)"
"(if(null? l1_383)"
" l1_383"
"(if(eq?(car l1_383) '#:unavailable-callback)(cdr l1_383) l1_383))))"
"(null? l1_384)))))))))"
" #f))"
"(case-lambda"
"((given-kws_385 given-args_386 ns_387 name_388 0-phase_389)"
"(unpack66.1 given-kws_385 given-args_386 ns_387 name_388 0-phase_389)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:install!-namespace #:unavailable-callback)"
"(let-values(((namespace->module-instance_390)"
"(case-lambda((ns_391 name_392 0-phase_393)(unpack66.1 null null ns_391 name_392 0-phase_393)))))"
" namespace->module-instance_390)))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_394 name_395 0-phase_396 m_397 existing-m-ns_398)"
"(let-values(((m-ns_399)"
"(let-values(((the-struct_401) ns_394))"
"(if(1/namespace? the-struct_401)"
"(let-values(((mpi156_402)(namespace-mpi existing-m-ns_398))"
"((root-expand-ctx157_403)(namespace-root-expand-ctx existing-m-ns_398))"
"((phase158_404)(namespace-phase existing-m-ns_398))"
"((0-phase159_405)(namespace-0-phase existing-m-ns_398))"
"((phase-to-namespace160_406)(make-hasheqv))"
"((phase-level-to-definitions161_407)"
"(if(module-cross-phase-persistent? m_397)"
"(namespace-phase-level-to-definitions existing-m-ns_398)"
"(make-hasheqv)))"
"((declaration-inspector162_408)(module-inspector m_397))"
"((inspector163_409)(namespace-inspector existing-m-ns_398)))"
"(namespace1.1"
" mpi156_402"
" root-expand-ctx157_403"
" phase158_404"
" 0-phase159_405"
" phase-to-namespace160_406"
" phase-level-to-definitions161_407"
"(namespace-module-registry$1 the-struct_401)"
"(namespace-bulk-binding-registry the-struct_401)"
"(namespace-submodule-declarations the-struct_401)"
"(namespace-cross-phase-persistent-namespace the-struct_401)"
" declaration-inspector162_408"
" inspector163_409"
"(namespace-available-module-instances the-struct_401)"
"(namespace-module-instances the-struct_401)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_401)))))"
"(let-values(((mi_400)(make-module-instance m-ns_399 m_397)))"
"(if(module-cross-phase-persistent? m_397)"
"(let-values()"
"(begin"
"(hash-set!(namespace-phase-to-namespace m-ns_399) 0 m-ns_399)"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_410)(namespace-cross-phase-persistent-namespace ns_394)))"
"(if or-part_410 or-part_410 ns_394)))"
" name_395"
" mi_400)"
"(hash-set!(module-instance-phase-level-to-state mi_400) 0 'started)))"
"(let-values()"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_399) 0-phase_396 m-ns_399)(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(namespace-phase-level-to-definitions m-ns_399)"
" 0-phase_396"
"(namespace->definitions existing-m-ns_398 0-phase_396))"
"(values))))"
"(let-values((()(begin(hash-set!(module-instance-phase-level-to-state mi_400) 0 'started)(values))))"
"(let-values(((at-phase_411)"
"(let-values(((or-part_412)"
"(hash-ref(namespace-module-instances ns_394) 0-phase_396 #f)))"
"(if or-part_412"
" or-part_412"
"(let-values(((at-phase_413)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_394) 0-phase_396 at-phase_413)"
" at-phase_413))))))"
"(hash-set! at-phase_411 name_395 mi_400)))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_414 name_415 0-phase_416 m_417 mpi_418)"
"(let-values(((m-ns_419)"
"(let-values(((the-struct_421) ns_414))"
"(if(1/namespace? the-struct_421)"
"(let-values(((mpi164_422) mpi_418)"
"((root-expand-ctx165_423)(box #f))"
"((phase166_424) 0-phase_416)"
"((0-phase167_425) 0-phase_416)"
"((phase-to-namespace168_426)(make-hasheqv))"
"((phase-level-to-definitions169_427)(make-hasheqv))"
"((declaration-inspector170_428)(module-inspector m_417))"
"((inspector171_429)(make-inspector(module-inspector m_417))))"
"(namespace1.1"
" mpi164_422"
" root-expand-ctx165_423"
" phase166_424"
" 0-phase167_425"
" phase-to-namespace168_426"
" phase-level-to-definitions169_427"
"(namespace-module-registry$1 the-struct_421)"
"(namespace-bulk-binding-registry the-struct_421)"
"(namespace-submodule-declarations the-struct_421)"
"(namespace-cross-phase-persistent-namespace the-struct_421)"
" declaration-inspector170_428"
" inspector171_429"
"(namespace-available-module-instances the-struct_421)"
"(namespace-module-instances the-struct_421)))"
"                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_421)))))"
"(let-values((()(begin(hash-set!(namespace-phase-to-namespace m-ns_419) 0-phase_416 m-ns_419)(values))))"
"(let-values(((mi_420)(make-module-instance m-ns_419 m_417)))"
"(begin"
"(if(module-cross-phase-persistent? m_417)"
"(hash-set!(namespace-module-instances ns_414) name_415 mi_420)"
"(let-values(((at-phase_430)"
"(let-values(((or-part_431)(hash-ref(namespace-module-instances ns_414) 0-phase_416 #f)))"
"(if or-part_431"
" or-part_431"
"(let-values(((at-phase_432)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_414) 0-phase_416 at-phase_432)"
" at-phase_432))))))"
"(hash-set! at-phase_430 name_415 mi_420)))"
" mi_420))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_433 check-available-at-phase-level_434 unavailable-callback_435)"
"(let-values(((m_436)(module-instance-module mi_433)))"
"(if(if m_436"
"(if(<="
"(module-min-phase-level m_436)"
"(add1 check-available-at-phase-level_434)"
"(module-max-phase-level m_436))"
"(not"
"(hash-ref(module-instance-phase-level-to-state mi_433)(add1 check-available-at-phase-level_434) #f))"
" #f)"
" #f)"
"(let-values()(unavailable-callback_435))"
"(void)))))"
"(define-values"
"(namespace->module-namespace77.1)"
"(lambda(check-available-at-phase-level69_437"
" check-available-at-phase-level72_438"
" complain-on-failure?68_439"
" complain-on-failure?71_440"
" unavailable-callback70_441"
" unavailable-callback73_442"
" ns74_443"
" name75_444"
" 0-phase76_445)"
"(let-values(((ns_446) ns74_443))"
"(let-values(((name_447) name75_444))"
"(let-values(((0-phase_448) 0-phase76_445))"
"(let-values(((complain-on-failure?_449)(if complain-on-failure?71_440 complain-on-failure?68_439 #f)))"
"(let-values(((check-available-at-phase-level_450)"
"(if check-available-at-phase-level72_438 check-available-at-phase-level69_437 #f)))"
"(let-values(((unavailable-callback_451)(if unavailable-callback73_442 unavailable-callback70_441 void)))"
"(let-values()"
"(let-values(((mi_452)"
"(let-values(((...namespace/module.rkt:254:13_453) namespace->module-instance67.1)"
"((ns172_454) ns_446)"
"((name173_455) name_447)"
"((0-phase174_456) 0-phase_448)"
"((complain-on-failure?175_457) complain-on-failure?_449)"
"((check-available-at-phase-level176_458)"
" check-available-at-phase-level_450)"
"((unavailable-callback177_459) unavailable-callback_451))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance67.1))"
"(namespace->module-instance65.1"
" check-available-at-phase-level176_458"
" #t"
" complain-on-failure?175_457"
" #t"
" #f"
" #f"
" unavailable-callback177_459"
" #t"
" ns172_454"
" name173_455"
" 0-phase174_456)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:254:13_453"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
" 5)"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(list"
" check-available-at-phase-level176_458"
" complain-on-failure?175_457"
" unavailable-callback177_459)"
" ns172_454"
" name173_455"
" 0-phase174_456)))))"
"(if mi_452(module-instance-namespace mi_452) #f)))))))))))"
"(define-values"
"(unpack78.1)"
"(lambda(given-kws_460 given-args_461 ns74_462 name75_463 0-phase76_464)"
"(let-values(((check-available-at-phase-level72_465)"
"(if(pair? given-kws_460)(eq? '#:check-available-at-phase-level(car given-kws_460)) #f)))"
"(let-values(((check-available-at-phase-level69_466)"
"(if check-available-at-phase-level72_465(car given-args_461)(void)))"
"((given-kws_467)(if check-available-at-phase-level72_465(cdr given-kws_460) given-kws_460))"
"((given-args_468)(if check-available-at-phase-level72_465(cdr given-args_461) given-args_461)))"
"(let-values(((complain-on-failure?71_469)"
"(if(pair? given-kws_467)(eq? '#:complain-on-failure?(car given-kws_467)) #f)))"
"(let-values(((complain-on-failure?68_470)(if complain-on-failure?71_469(car given-args_468)(void)))"
"((given-kws_471)(if complain-on-failure?71_469(cdr given-kws_467) given-kws_467))"
"((given-args_472)(if complain-on-failure?71_469(cdr given-args_468) given-args_468)))"
"(let-values(((unavailable-callback73_473)(pair? given-kws_471)))"
"(let-values(((unavailable-callback70_474)(if unavailable-callback73_473(car given-args_472)(void))))"
"(namespace->module-namespace77.1"
" check-available-at-phase-level69_466"
" check-available-at-phase-level72_465"
" complain-on-failure?68_470"
" complain-on-failure?71_469"
" unavailable-callback70_474"
" unavailable-callback73_473"
" ns74_462"
" name75_463"
" 0-phase76_464)))))))))"
"(define-values"
"(namespace->module-namespace79.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_475 given-argc_476)"
"(if(= given-argc_476 5)"
"(let-values(((l1_477) given-kws_475))"
"(let-values(((l1_478)"
"(if(null? l1_477)"
" l1_477"
"(if(eq?(car l1_477) '#:check-available-at-phase-level)(cdr l1_477) l1_477))))"
"(let-values(((l1_479) l1_478))"
"(let-values(((l1_480)"
"(if(null? l1_479)"
" l1_479"
"(if(eq?(car l1_479) '#:complain-on-failure?)(cdr l1_479) l1_479))))"
"(let-values(((l1_481) l1_480))"
"(let-values(((l1_482)"
"(if(null? l1_481)"
" l1_481"
"(if(eq?(car l1_481) '#:unavailable-callback)(cdr l1_481) l1_481))))"
"(null? l1_482)))))))"
" #f))"
"(case-lambda"
"((given-kws_483 given-args_484 ns_485 name_486 0-phase_487)"
"(unpack78.1 given-kws_483 given-args_484 ns_485 name_486 0-phase_487)))"
" null"
" '(#:check-available-at-phase-level #:complain-on-failure? #:unavailable-callback)"
"(let-values(((namespace->module-namespace_488)"
"(case-lambda((ns_489 name_490 0-phase_491)(unpack78.1 null null ns_489 name_490 0-phase_491)))))"
" namespace->module-namespace_488)))"
"(define-values"
"(namespace-module-instantiate!91.1)"
"(lambda(otherwise-available?82_492"
" otherwise-available?86_493"
" run-phase80_494"
" run-phase84_495"
" seen83_496"
" seen87_497"
" skip-run?81_498"
" skip-run?85_499"
" ns88_500"
" mpi89_501"
" instance-phase90_502)"
"(let-values(((ns_503) ns88_500))"
"(let-values(((mpi_504) mpi89_501))"
"(let-values(((instance-phase_505) instance-phase90_502))"
"(let-values(((run-phase_506)(if run-phase84_495 run-phase80_494(namespace-phase ns_503))))"
"(let-values(((skip-run?_507)(if skip-run?85_499 skip-run?81_498 #f)))"
"(let-values(((otherwise-available?_508)(if otherwise-available?86_493 otherwise-available?82_492 #t)))"
"(let-values(((seen_509)(if seen87_497 seen83_496 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_504)"
"(void)"
"                                      (let-values () (error \"not a module path index:\" mpi_504)))"
"(values))))"
"(let-values(((name_510)(1/module-path-index-resolve mpi_504 #t)))"
"(let-values(((m_511)(namespace->module ns_503 name_510)))"
"(let-values((()"
"(begin"
"(if m_511"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_510)))"
"(values))))"
"(let-values(((instantiate!_512)"
"(lambda(instance-phase_513 run-phase_514 ns_515)"
"(let-values(((mi_516)"
"(let-values(((or-part_517)"
"(let-values(((ns184_518) ns_515)"
"((name185_519) name_510)"
"((instance-phase186_520)"
" instance-phase_513))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-instance67.1))"
"(namespace->module-instance65.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns184_518"
" name185_519"
" instance-phase186_520)"
"(namespace->module-instance67.1"
" ns184_518"
" name185_519"
" instance-phase186_520)))))"
"(if or-part_517"
" or-part_517"
"(namespace-create-module-instance!"
" ns_515"
" name_510"
" instance-phase_513"
" m_511"
" mpi_504)))))"
"(let-values(((...namespace/module.rkt:277:4_521)"
" run-module-instance!122.1)"
"((mi178_522) mi_516)"
"((ns179_523) ns_515)"
"((run-phase180_524) run-phase_514)"
"((skip-run?181_525) skip-run?_507)"
"((otherwise-available?182_526) otherwise-available?_508)"
"((seen183_527) seen_509))"
"(if(variable-reference-constant?"
"(#%variable-reference run-module-instance!122.1))"
"(run-module-instance!120.1"
" otherwise-available?182_526"
" run-phase180_524"
" seen183_527"
" #t"
" skip-run?181_525"
" mi178_522"
" ns179_523)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:277:4_521"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
" 4)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(list"
" otherwise-available?182_526"
" run-phase180_524"
" seen183_527"
" skip-run?181_525)"
" mi178_522"
" ns179_523)))))))"
"(if(module-cross-phase-persistent? m_511)"
"(let-values()"
"(instantiate!_512"
" 0"
" 0"
"(let-values(((or-part_528)(namespace-cross-phase-persistent-namespace ns_503)))"
"(if or-part_528 or-part_528 ns_503))))"
"(let-values()"
"(instantiate!_512 instance-phase_505 run-phase_506 ns_503))))))))))))))))))"
"(define-values"
"(unpack92.1$1)"
"(lambda(given-kws_529 given-args_530 ns88_531 mpi89_532 instance-phase90_533)"
"(let-values(((otherwise-available?86_534)"
"(if(pair? given-kws_529)(eq? '#:otherwise-available?(car given-kws_529)) #f)))"
"(let-values(((otherwise-available?82_535)(if otherwise-available?86_534(car given-args_530)(void)))"
"((given-kws_536)(if otherwise-available?86_534(cdr given-kws_529) given-kws_529))"
"((given-args_537)(if otherwise-available?86_534(cdr given-args_530) given-args_530)))"
"(let-values(((run-phase84_538)(if(pair? given-kws_536)(eq? '#:run-phase(car given-kws_536)) #f)))"
"(let-values(((run-phase80_539)(if run-phase84_538(car given-args_537)(void)))"
"((given-kws_540)(if run-phase84_538(cdr given-kws_536) given-kws_536))"
"((given-args_541)(if run-phase84_538(cdr given-args_537) given-args_537)))"
"(let-values(((seen87_542)(if(pair? given-kws_540)(eq? '#:seen(car given-kws_540)) #f)))"
"(let-values(((seen83_543)(if seen87_542(car given-args_541)(void)))"
"((given-kws_544)(if seen87_542(cdr given-kws_540) given-kws_540))"
"((given-args_545)(if seen87_542(cdr given-args_541) given-args_541)))"
"(let-values(((skip-run?85_546)(pair? given-kws_544)))"
"(let-values(((skip-run?81_547)(if skip-run?85_546(car given-args_545)(void))))"
"(namespace-module-instantiate!91.1"
" otherwise-available?82_535"
" otherwise-available?86_534"
" run-phase80_539"
" run-phase84_538"
" seen83_543"
" seen87_542"
" skip-run?81_547"
" skip-run?85_546"
" ns88_531"
" mpi89_532"
" instance-phase90_533)))))))))))"
"(define-values"
"(namespace-module-instantiate!93.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_548 given-argc_549)"
"(if(= given-argc_549 5)"
"(let-values(((l1_550) given-kws_548))"
"(let-values(((l1_551)"
"(if(null? l1_550) l1_550(if(eq?(car l1_550) '#:otherwise-available?)(cdr l1_550) l1_550))))"
"(let-values(((l1_552) l1_551))"
"(let-values(((l1_553)"
"(if(null? l1_552) l1_552(if(eq?(car l1_552) '#:run-phase)(cdr l1_552) l1_552))))"
"(let-values(((l1_554) l1_553))"
"(let-values(((l1_555)(if(null? l1_554) l1_554(if(eq?(car l1_554) '#:seen)(cdr l1_554) l1_554))))"
"(let-values(((l1_556) l1_555))"
"(let-values(((l1_557)"
"(if(null? l1_556) l1_556(if(eq?(car l1_556) '#:skip-run?)(cdr l1_556) l1_556))))"
"(null? l1_557)))))))))"
" #f))"
"(case-lambda"
"((given-kws_558 given-args_559 ns_560 mpi_561 instance-phase_562)"
"(unpack92.1$1 given-kws_558 given-args_559 ns_560 mpi_561 instance-phase_562)))"
" null"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)"
"(let-values(((namespace-module-instantiate!_563)"
"(case-lambda"
"((ns_564 mpi_565 instance-phase_566)(unpack92.1$1 null null ns_564 mpi_565 instance-phase_566)))))"
" namespace-module-instantiate!_563)))"
"(define-values"
"(namespace-module-visit!99.1)"
"(lambda(visit-phase94_567 visit-phase95_568 ns96_569 mpi97_570 instance-phase98_571)"
"(let-values(((ns_572) ns96_569))"
"(let-values(((mpi_573) mpi97_570))"
"(let-values(((instance-phase_574) instance-phase98_571))"
"(let-values(((visit-phase_575)(if visit-phase95_568 visit-phase94_567(namespace-phase ns_572))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:290:2_576) namespace-module-instantiate!93.1)"
"((ns187_577) ns_572)"
"((mpi188_578) mpi_573)"
"((instance-phase189_579) instance-phase_574)"
"((temp190_580)(add1 visit-phase_575)))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!93.1))"
"(namespace-module-instantiate!91.1"
" #f"
" #f"
" temp190_580"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns187_577"
" mpi188_578"
" instance-phase189_579)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:290:2_576"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list temp190_580)"
" ns187_577"
" mpi188_578"
" instance-phase189_579))))))))))"
"(define-values"
"(unpack100.1$1)"
"(lambda(given-kws_581 given-args_582 ns96_583 mpi97_584 instance-phase98_585)"
"(let-values(((visit-phase95_586)(pair? given-kws_581)))"
"(let-values(((visit-phase94_587)(if visit-phase95_586(car given-args_582)(void))))"
"(namespace-module-visit!99.1 visit-phase94_587 visit-phase95_586 ns96_583 mpi97_584 instance-phase98_585)))))"
"(define-values"
"(namespace-module-visit!101.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_588 given-argc_589)"
"(if(= given-argc_589 5)"
"(let-values(((l1_590) given-kws_588))"
"(let-values(((l1_591)(if(null? l1_590) l1_590(if(eq?(car l1_590) '#:visit-phase)(cdr l1_590) l1_590))))"
"(null? l1_591)))"
" #f))"
"(case-lambda"
"((given-kws_592 given-args_593 ns_594 mpi_595 instance-phase_596)"
"(unpack100.1$1 given-kws_592 given-args_593 ns_594 mpi_595 instance-phase_596)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-visit!_597)"
"(case-lambda"
"((ns_598 mpi_599 instance-phase_600)(unpack100.1$1 null null ns_598 mpi_599 instance-phase_600)))))"
" namespace-module-visit!_597)))"
"(define-values"
"(namespace-module-make-available!107.1)"
"(lambda(visit-phase102_601 visit-phase103_602 ns104_603 mpi105_604 instance-phase106_605)"
"(let-values(((ns_606) ns104_603))"
"(let-values(((mpi_607) mpi105_604))"
"(let-values(((instance-phase_608) instance-phase106_605))"
"(let-values(((visit-phase_609)(if visit-phase103_602 visit-phase102_601(namespace-phase ns_606))))"
"(let-values()"
"(let-values(((...namespace/module.rkt:293:2_610) namespace-module-instantiate!93.1)"
"((ns191_611) ns_606)"
"((mpi192_612) mpi_607)"
"((instance-phase193_613) instance-phase_608)"
"((temp194_614)(add1 visit-phase_609))"
"((temp195_615) #t))"
"(if(variable-reference-constant?(#%variable-reference namespace-module-instantiate!93.1))"
"(namespace-module-instantiate!91.1"
" #f"
" #f"
" temp194_614"
" #t"
" #f"
" #f"
" temp195_615"
" #t"
" ns191_611"
" mpi192_612"
" instance-phase193_613)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:293:2_610"
" keyword-procedure-extract"
" '(#:run-phase #:skip-run?)"
" 5)"
" '(#:run-phase #:skip-run?)"
"(list temp194_614 temp195_615)"
" ns191_611"
" mpi192_612"
" instance-phase193_613))))))))))"
"(define-values"
"(unpack108.1$1)"
"(lambda(given-kws_616 given-args_617 ns104_618 mpi105_619 instance-phase106_620)"
"(let-values(((visit-phase103_621)(pair? given-kws_616)))"
"(let-values(((visit-phase102_622)(if visit-phase103_621(car given-args_617)(void))))"
"(namespace-module-make-available!107.1"
" visit-phase102_622"
" visit-phase103_621"
" ns104_618"
" mpi105_619"
" instance-phase106_620)))))"
"(define-values"
"(namespace-module-make-available!109.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_623 given-argc_624)"
"(if(= given-argc_624 5)"
"(let-values(((l1_625) given-kws_623))"
"(let-values(((l1_626)(if(null? l1_625) l1_625(if(eq?(car l1_625) '#:visit-phase)(cdr l1_625) l1_625))))"
"(null? l1_626)))"
" #f))"
"(case-lambda"
"((given-kws_627 given-args_628 ns_629 mpi_630 instance-phase_631)"
"(unpack108.1$1 given-kws_627 given-args_628 ns_629 mpi_630 instance-phase_631)))"
" null"
" '(#:visit-phase)"
"(let-values(((namespace-module-make-available!_632)"
"(case-lambda"
"((ns_633 mpi_634 instance-phase_635)(unpack108.1$1 null null ns_633 mpi_634 instance-phase_635)))))"
" namespace-module-make-available!_632)))"
"(define-values"
"(lifted/3.1$5)"
"(make-required"
" 'run-module-instance!"
"(case-lambda((self_636 mi_637 ns_638)(apply missing-kw self_636 mi_637 ns_638 null)))"
" #f"
" #f))"
"(define-values"
"(run-module-instance!120.1)"
"(lambda(otherwise-available?112_639 run-phase110_640 seen113_641 seen117_642 skip-run?111_643 mi118_644 ns119_645)"
"(let-values(((mi_646) mi118_644))"
"(let-values(((ns_647) ns119_645))"
"(let-values(((run-phase_648) run-phase110_640))"
"(let-values(((skip-run?_649) skip-run?111_643))"
"(let-values(((otherwise-available?_650) otherwise-available?112_639))"
"(let-values(((seen_651)(if seen117_642 seen113_641 '#hasheq())))"
"(let-values()"
"(let-values(((m-ns_652)(module-instance-namespace mi_646)))"
"(let-values(((instance-phase_653)(namespace-0-phase m-ns_652)))"
"(let-values(((run-phase-level_654)(phase- run-phase_648 instance-phase_653)))"
"(if(if(let-values(((or-part_655) skip-run?_649))"
"(if or-part_655"
" or-part_655"
"(eq?"
" 'started"
"(hash-ref(module-instance-phase-level-to-state mi_646) run-phase-level_654 #f))))"
"(let-values(((or-part_656)(not otherwise-available?_650)))"
"(if or-part_656 or-part_656(module-instance-made-available? mi_646)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_657)(module-instance-module mi_646)))"
"(let-values(((mpi_658)(namespace-mpi m-ns_652)))"
"(let-values(((phase-shift_659) instance-phase_653))"
"(let-values(((bulk-binding-registry_660)(namespace-bulk-binding-registry m-ns_652)))"
"(begin"
"(if(hash-ref seen_651 mi_646 #f)"
"(let-values()"
"                                          (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_646)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_646"
"(alt-reverse"
"(let-values(((lst_661)(module-requires m_657)))"
"(begin"
"(if(list? lst_661)(void)(let-values()(in-list lst_661)))"
"((letrec-values(((for-loop_662)"
"(lambda(fold-var_663 lst_664)"
"(if(pair? lst_664)"
"(let-values(((phase+mpis_665)"
"(unsafe-car lst_664)))"
"(if #t"
"(let-values(((fold-var_666)"
"(let-values(((fold-var_667)"
" fold-var_663))"
"(let-values(((fold-var_668)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_665)"
"(alt-reverse"
"(let-values(((lst_669)"
"(cdr"
" phase+mpis_665)))"
"(begin"
"(if(list?"
" lst_669)"
"(void)"
"(let-values()"
"(in-list"
" lst_669)))"
"((letrec-values(((for-loop_670)"
"(lambda(fold-var_671"
" lst_672)"
"(if(pair?"
" lst_672)"
"(let-values(((req-mpi_673)"
"(unsafe-car"
" lst_672)))"
"(if #t"
"(let-values(((fold-var_674)"
"(let-values(((fold-var_675)"
" fold-var_671))"
"(let-values(((fold-var_676)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" req-mpi_673"
"(module-self"
" m_657)"
" mpi_658))"
" fold-var_675))))"
"(values"
" fold-var_676)))))"
"(if #t"
"(for-loop_670"
" fold-var_674"
"(unsafe-cdr"
" lst_672))"
" fold-var_674))"
" fold-var_671))"
" fold-var_671))))"
" for-loop_670)"
" null"
" lst_669))))))"
" fold-var_667))))"
"(values fold-var_668)))))"
"(if #t"
"(for-loop_662"
" fold-var_666"
"(unsafe-cdr lst_664))"
" fold-var_666))"
" fold-var_663))"
" fold-var_663))))"
" for-loop_662)"
" null"
" lst_661)))))))"
"(let-values(((lst_677)(module-instance-shifted-requires mi_646)))"
"(begin"
"(if(list? lst_677)(void)(let-values()(in-list lst_677)))"
"((letrec-values(((for-loop_678)"
"(lambda(fold-var_679 lst_680)"
"(if(pair? lst_680)"
"(let-values(((phase+mpis_681)(unsafe-car lst_680)))"
"(if #t"
"(let-values(((fold-var_682)"
"(let-values(((fold-var_683)"
" fold-var_679))"
"(let-values(((fold-var_684)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_685)"
"(car"
" phase+mpis_681)))"
"(let-values(((lst_686)"
"(cdr"
" phase+mpis_681)))"
"(begin"
"(if(list?"
" lst_686)"
"(void)"
"(let-values()"
"(in-list"
" lst_686)))"
"((letrec-values(((for-loop_687)"
"(lambda(fold-var_688"
" lst_689)"
"(if(pair?"
" lst_689)"
"(let-values(((req-mpi_690)"
"(unsafe-car"
" lst_689)))"
"(if #t"
"(let-values(((fold-var_691)"
"(let-values(((fold-var_692)"
" fold-var_688))"
"(let-values(((fold-var_693)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:340:8_694)"
" namespace-module-instantiate!93.1)"
"((ns196_695)"
" ns_647)"
"((req-mpi197_696)"
" req-mpi_690)"
"((temp198_697)"
"(phase+"
" instance-phase_653"
" req-phase_685))"
"((run-phase199_698)"
" run-phase_648)"
"((skip-run?200_699)"
" skip-run?_649)"
"((otherwise-available?201_700)"
" otherwise-available?_650)"
"((temp202_701)"
"(hash-set"
" seen_651"
" mpi_658"
" #t)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!93.1))"
"(namespace-module-instantiate!91.1"
" otherwise-available?201_700"
" #t"
" run-phase199_698"
" #t"
" temp202_701"
" #t"
" skip-run?200_699"
" #t"
" ns196_695"
" req-mpi197_696"
" temp198_697)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:340:8_694"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
" 5)"
" '(#:otherwise-available?"
" #:run-phase"
" #:seen"
" #:skip-run?)"
"(list"
" otherwise-available?201_700"
" run-phase199_698"
" temp202_701"
" skip-run?200_699)"
" ns196_695"
" req-mpi197_696"
" temp198_697))))"
"(void)))))"
"(values"
" fold-var_693)))))"
"(if #t"
"(for-loop_687"
" fold-var_691"
"(unsafe-cdr"
" lst_689))"
" fold-var_691))"
" fold-var_688))"
" fold-var_688))))"
" for-loop_687)"
"(void)"
" lst_686)))))"
"(void)))))"
"(values fold-var_684)))))"
"(if #t"
"(for-loop_678 fold-var_682(unsafe-cdr lst_680))"
" fold-var_682))"
" fold-var_679))"
" fold-var_679))))"
" for-loop_678)"
"(void)"
" lst_677)))"
"(if(label-phase? instance-phase_653)"
"(void)"
"(let-values()"
"(let-values(((start_702)(module-max-phase-level m_657))"
"((end_703)(sub1(module-min-phase-level m_657)))"
"((inc_704) -1))"
"(begin"
"(if(if(real? start_702)(if(real? end_703)(real? inc_704) #f) #f)"
"(void)"
"(let-values()(in-range start_702 end_703 inc_704)))"
"((letrec-values(((for-loop_705)"
"(lambda(fold-var_706 pos_707)"
"(if(> pos_707 end_703)"
"(let-values(((phase-level_708) pos_707))"
"(if #t"
"(let-values(((fold-var_709)"
"(let-values(((fold-var_710)"
" fold-var_706))"
"(let-values(((fold-var_711)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_712)"
"(phase+"
" phase-level_708"
" phase-shift_659)))"
"(if(if(not"
" skip-run?_649)"
"(eqv?"
" phase_712"
" run-phase_648)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_646)"
" phase-level_708"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_646)"
" phase-level_708"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_652"
" phase-level_708))"
"(values))))"
"(let-values(((p-ns_713)"
"(namespace->namespace-at-phase"
" m-ns_652"
" phase_712)))"
"(let-values(((insp_714)"
"(module-inspector"
" m_657)))"
"(let-values(((data-box_715)"
"(module-instance-data-box"
" mi_646)))"
"(let-values(((prep_716)"
"(module-prepare-instance"
" m_657)))"
"(let-values(((go_717)"
"(module-instantiate-phase"
" m_657)))"
"(begin"
"(prep_716"
" data-box_715"
" p-ns_713"
" phase-shift_659"
" mpi_658"
" bulk-binding-registry_660"
" insp_714)"
"(go_717"
" data-box_715"
" p-ns_713"
" phase-shift_659"
" phase-level_708"
" mpi_658"
" bulk-binding-registry_660"
" insp_714))))))))))))"
"(if(if otherwise-available?_650"
"(if(not"
"(negative?"
" run-phase_648))"
"(not"
"(hash-ref"
"(module-instance-phase-level-to-state"
" mi_646)"
" phase-level_708"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_647)"
" phase_712"
"(lambda(l_720)"
"(cons"
" mi_646"
" l_720))"
" null)"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
"(module-instance-phase-level-to-state"
" mi_646)"
" phase-level_708"
" 'available)"
"(values))))"
"(let-values(((insp_718)"
"(module-inspector"
" m_657)))"
"(let-values(((prep_719)"
"(module-prepare-instance"
" m_657)))"
"(prep_719"
"(module-instance-data-box"
" mi_646)"
" m-ns_652"
" phase-shift_659"
" mpi_658"
" bulk-binding-registry_660"
" insp_718))))))"
"(void)))))"
"(void)))))"
"(values fold-var_711)))))"
"(if #t"
"(for-loop_705"
" fold-var_709"
"(+ pos_707 inc_704))"
" fold-var_709))"
" fold-var_706))"
" fold-var_706))))"
" for-loop_705)"
"(void)"
" start_702)))))"
"(if otherwise-available?_650"
"(let-values()(set-module-instance-made-available?! mi_646 #t))"
"(void))"
"(if skip-run?_649"
"(void)"
"(let-values()"
"(hash-set!"
"(module-instance-phase-level-to-state mi_646)"
" run-phase-level_654"
" 'started))))))))))))))))))))))"
"(define-values"
"(unpack121.1)"
"(lambda(given-kws_721 given-args_722 mi118_723 ns119_724)"
"(let-values(((otherwise-available?112_725)(car given-args_722))"
"((given-kws_726)(cdr given-kws_721))"
"((given-args_727)(cdr given-args_722)))"
"(let-values(((run-phase110_728)(car given-args_727))"
"((given-kws_729)(cdr given-kws_726))"
"((given-args_730)(cdr given-args_727)))"
"(let-values(((seen117_731)(if(pair? given-kws_729)(eq? '#:seen(car given-kws_729)) #f)))"
"(let-values(((seen113_732)(if seen117_731(car given-args_730)(void)))"
"((given-kws_733)(if seen117_731(cdr given-kws_729) given-kws_729))"
"((given-args_734)(if seen117_731(cdr given-args_730) given-args_730)))"
"(let-values(((skip-run?111_735)(car given-args_734)))"
"(run-module-instance!120.1"
" otherwise-available?112_725"
" run-phase110_728"
" seen113_732"
" seen117_731"
" skip-run?111_735"
" mi118_723"
" ns119_724))))))))"
"(define-values"
"(run-module-instance!122.1)"
"(lifted/3.1$5"
"(lambda(given-kws_736 given-argc_737)"
"(if(= given-argc_737 4)"
"(subsets?"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" given-kws_736"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?))"
" #f))"
"(case-lambda((given-kws_738 given-args_739 mi_740 ns_741)(unpack121.1 given-kws_738 given-args_739 mi_740 ns_741)))"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" '(#:otherwise-available? #:run-phase #:seen #:skip-run?)))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!126_742)"
"(lambda(ns125_743 run-phase123_744 run-phase124_745)"
"(let-values(((ns_746) ns125_743))"
"(let-values(((run-phase_747)(if run-phase124_745 run-phase123_744(namespace-phase ns_746))))"
"(let-values()(namespace-run-available-modules! ns_746(add1 run-phase_747))))))))"
"(case-lambda"
"((ns_748)(namespace-visit-available-modules!126_742 ns_748 #f #f))"
"((ns_749 run-phase123_750)(namespace-visit-available-modules!126_742 ns_749 run-phase123_750 #t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!131_751)"
"(lambda(ns130_752 run-phase128_753 run-phase129_754)"
"(let-values(((ns_755) ns130_752))"
"(let-values(((run-phase_756)(if run-phase129_754 run-phase128_753(namespace-phase ns_755))))"
"(let-values()"
"(registry-call-with-lock"
"(namespace-module-registry$1 ns_755)"
"(lambda()"
"((letrec-values(((loop_757)"
"(lambda()"
"(let-values(((mis_758)"
"(hash-ref"
"(namespace-available-module-instances ns_755)"
" run-phase_756"
" null)))"
"(if(null? mis_758)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_755)"
" run-phase_756"
" null)"
"(let-values(((lst_759)(alt-reverse mis_758)))"
"(begin"
"(if(list? lst_759)(void)(let-values()(in-list lst_759)))"
"((letrec-values(((for-loop_760)"
"(lambda(fold-var_761 lst_762)"
"(if(pair? lst_762)"
"(let-values(((mi_763)"
"(unsafe-car lst_762)))"
"(if #t"
"(let-values(((fold-var_764)"
"(let-values(((fold-var_765)"
" fold-var_761))"
"(let-values(((fold-var_766)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...namespace/module.rkt:397:11_767)"
" run-module-instance!122.1)"
"((mi203_768)"
" mi_763)"
"((ns204_769)"
" ns_755)"
"((run-phase205_770)"
" run-phase_756)"
"((temp206_771)"
" #f)"
"((temp207_772)"
" #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" run-module-instance!122.1))"
"(run-module-instance!120.1"
" temp207_772"
" run-phase205_770"
" #f"
" #f"
" temp206_771"
" mi203_768"
" ns204_769)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:397:11_767"
" keyword-procedure-extract"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
" 4)"
" '(#:otherwise-available?"
" #:run-phase"
" #:skip-run?)"
"(list"
" temp207_772"
" run-phase205_770"
" temp206_771)"
" mi203_768"
" ns204_769))))"
"(void)))))"
"(values"
" fold-var_766)))))"
"(if #t"
"(for-loop_760"
" fold-var_764"
"(unsafe-cdr lst_762))"
" fold-var_764))"
" fold-var_761))"
" fold-var_761))))"
" for-loop_760)"
"(void)"
" lst_759)))"
"(loop_757))))))))"
" loop_757))))))))))"
"(case-lambda"
"((ns_773)(namespace-run-available-modules!131_751 ns_773 #f #f))"
"((ns_774 run-phase128_775)(namespace-run-available-modules!131_751 ns_774 run-phase128_775 #t)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_776 name_777)"
"(let-values(((mi_778)(hash-ref(namespace-module-instances ns_776)(1/make-resolved-module-path name_777))))"
"(let-values(((...namespace/module.rkt:403:2_779) run-module-instance!122.1)"
"((mi208_780) mi_778)"
"((ns209_781) ns_776)"
"((temp210_782) 1)"
"((temp211_783) #f)"
"((temp212_784) #t))"
"(if(variable-reference-constant?(#%variable-reference run-module-instance!122.1))"
"(run-module-instance!120.1 temp212_784 temp210_782 #f #f temp211_783 mi208_780 ns209_781)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:403:2_779"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
" 4)"
" '(#:otherwise-available? #:run-phase #:skip-run?)"
"(list temp212_784 temp210_782 temp211_783)"
" mi208_780"
" ns209_781))))))"
"(define-values"
"(lifted/4.1$3)"
"(make-required"
" 'namespace-module-use->module+linklet-instances"
"(case-lambda((self_785 ns_786 mu_787)(apply missing-kw self_785 ns_786 mu_787 null)))"
" #f"
" #f))"
"(define-values"
"(namespace-module-use->module+linklet-instances141.1)"
"(lambda(phase-shift135_788 shift-from133_789 shift-from136_790 shift-to134_791 shift-to137_792 ns139_793 mu140_794)"
"(let-values(((ns_795) ns139_793))"
"(let-values(((mu_796) mu140_794))"
"(let-values(((shift-from_797)(if shift-from136_790 shift-from133_789 #f)))"
"(let-values(((shift-to_798)(if shift-to137_792 shift-to134_791 #f)))"
"(let-values(((phase-shift_799) phase-shift135_788))"
"(let-values()"
"(let-values(((mod_800)(module-use-module mu_796)))"
"(let-values(((mi_801)"
"(let-values(((...namespace/module.rkt:413:4_804) namespace->module-instance67.1)"
"((ns213_805) ns_795)"
"((temp214_806)"
"(1/module-path-index-resolve"
"(if shift-from_797"
"(module-path-index-shift mod_800 shift-from_797 shift-to_798)"
" mod_800)))"
"((phase-shift215_807) phase-shift_799)"
"((temp216_808) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-instance67.1))"
"(namespace->module-instance65.1"
" #f"
" #f"
" temp216_808"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns213_805"
" temp214_806"
" phase-shift215_807)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/module.rkt:413:4_804"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp216_808)"
" ns213_805"
" temp214_806"
" phase-shift215_807)))))"
"(let-values(((m-ns_802)(module-instance-namespace mi_801)))"
"(let-values(((d_803)"
"(hash-ref"
"(namespace-phase-level-to-definitions m-ns_802)"
"(module-use-phase mu_796)"
" #f)))"
"(if d_803"
"(values mi_801(definitions-variables d_803))"
"                          (error \"namespace mismatch: phase level not found\"))))))))))))))"
"(define-values"
"(unpack142.1)"
"(lambda(given-kws_809 given-args_810 ns139_811 mu140_812)"
"(let-values(((phase-shift135_813)(car given-args_810))"
"((given-kws_814)(cdr given-kws_809))"
"((given-args_815)(cdr given-args_810)))"
"(let-values(((shift-from136_816)(if(pair? given-kws_814)(eq? '#:shift-from(car given-kws_814)) #f)))"
"(let-values(((shift-from133_817)(if shift-from136_816(car given-args_815)(void)))"
"((given-kws_818)(if shift-from136_816(cdr given-kws_814) given-kws_814))"
"((given-args_819)(if shift-from136_816(cdr given-args_815) given-args_815)))"
"(let-values(((shift-to137_820)(pair? given-kws_818)))"
"(let-values(((shift-to134_821)(if shift-to137_820(car given-args_819)(void))))"
"(namespace-module-use->module+linklet-instances141.1"
" phase-shift135_813"
" shift-from133_817"
" shift-from136_816"
" shift-to134_821"
" shift-to137_820"
" ns139_811"
" mu140_812))))))))"
"(define-values"
"(namespace-module-use->module+linklet-instances143.1)"
"(lifted/4.1$3"
"(lambda(given-kws_822 given-argc_823)"
"(if(= given-argc_823 4)(subsets? '(#:phase-shift) given-kws_822 '(#:phase-shift #:shift-from #:shift-to)) #f))"
"(case-lambda((given-kws_824 given-args_825 ns_826 mu_827)(unpack142.1 given-kws_824 given-args_825 ns_826 mu_827)))"
" '(#:phase-shift)"
" '(#:phase-shift #:shift-from #:shift-to)))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_828)"
"(let-values(((access_829)"
"(let-values(((ht_830)(module-provides m_828)))"
"(begin"
"(if((lambda(ht_831)(hash? ht_831)) ht_830)(void)(let-values()(default-in-hash ht_830)))"
"((letrec-values(((for-loop_832)"
"(lambda(table_833 i_834)"
"(if i_834"
"(let-values(((phase_835 at-phase_836)"
"(hash-iterate-key+value ht_830 i_834)))"
"(if #t"
"(let-values(((table_837)"
"(let-values(((table_838) table_833))"
"(let-values(((table_839)"
"(let-values()"
"(let-values(((key_840 val_841)"
"(let-values()"
"(values"
" phase_835"
"(let-values(((ht_842)"
" at-phase_836))"
"(begin"
"(if((lambda(ht_843)"
"(hash?"
" ht_843))"
" ht_842)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_842)))"
"((letrec-values(((for-loop_844)"
"(lambda(table_845"
" i_846)"
"(if i_846"
"(let-values(((sym_847"
" binding/p_848)"
"(hash-iterate-key+value"
" ht_842"
" i_846)))"
"(if #t"
"(let-values(((table_849)"
"(let-values(((table_850)"
" table_845))"
"(let-values(((table_851)"
"(let-values()"
"(let-values(((key_852"
" val_853)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_848))"
"(if(provided-as-protected?"
" binding/p_848)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_850"
" key_852"
" val_853)))))"
"(values"
" table_851)))))"
"(if #t"
"(for-loop_844"
" table_849"
"(hash-iterate-next"
" ht_842"
" i_846))"
" table_849))"
" table_845))"
" table_845))))"
" for-loop_844)"
" '#hash()"
"(hash-iterate-first"
" ht_842))))))))"
"(hash-set"
" table_838"
" key_840"
" val_841)))))"
"(values table_839)))))"
"(if #t"
"(for-loop_832 table_837(hash-iterate-next ht_830 i_834))"
" table_837))"
" table_833))"
" table_833))))"
" for-loop_832)"
" '#hasheqv()"
"(hash-iterate-first ht_830))))))"
"(begin(set-module-access! m_828 access_829) access_829))))"
"(define-values"
"(binding->module-instance)"
"(lambda(b_1 ns_2 phase_3 id_4)"
"(let-values(((at-phase_5)(phase- phase_3(module-binding-phase b_1))))"
"(let-values(((mi_6)"
"(let-values(((...inding-to-module.rkt:14:4_7) namespace->module-instance67.1)"
"((ns1_8) ns_2)"
"((temp2_9)(1/module-path-index-resolve(module-binding-module b_1)))"
"((at-phase3_10) at-phase_5)"
"((temp4_11)(module-binding-phase b_1))"
"((temp5_12)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                                       \"module mismatch;\\n\""
"                                       \" attempted to use a module that is not available\\n\""
"                                       \"  possible cause:\\n\""
"                                       \"   using (dynamic-require .... #f)\\n\""
"                                       \"   but need (dynamic-require .... 0)\\n\""
"                                       \"  module: ~s\\n\""
"                                       \"  phase: ~s\")"
"(module-binding-module b_1)"
"(phase+ at-phase_5(module-binding-phase b_1)))"
" id_4))))"
"(if(variable-reference-constant?(#%variable-reference namespace->module-instance67.1))"
"(namespace->module-instance65.1 temp4_11 #t #f #f #f #f temp5_12 #t ns1_8 temp2_9 at-phase3_10)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...inding-to-module.rkt:14:4_7"
" keyword-procedure-extract"
" '(#:check-available-at-phase-level #:unavailable-callback)"
" 5)"
" '(#:check-available-at-phase-level #:unavailable-callback)"
"(list temp4_11 temp5_12)"
" ns1_8"
" temp2_9"
" at-phase3_10)))))"
"(begin"
"(if mi_6"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                \"namespace mismatch; cannot locate module instance\\n\""
"                \"  module: ~s\\n\""
"                \"  use phase: ~a\\n\""
"                \"  definition phase: ~a\\n\""
"                \"  for identifier: ~s\")"
"(module-binding-module b_1)"
" phase_3"
"(module-binding-phase b_1)"
" id_4)))"
" mi_6)))))"
"(define-values"
"(check-access)"
"(lambda(b_1 mi_2 id_3 in-s_4 what_5)"
"(let-values(((m_6)(module-instance-module mi_2)))"
"(if(if m_6(not(module-no-protected? m_6)) #f)"
"(let-values()"
"(let-values(((access_7)"
"(let-values(((or-part_9)(module-access m_6)))"
"(if or-part_9 or-part_9(module-compute-access! m_6)))))"
"(let-values(((a_8)"
"(hash-ref"
"(hash-ref access_7(module-binding-phase b_1) '#hasheq())"
"(module-binding-sym b_1)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_8 'unexported)))(if or-part_10 or-part_10(eq? a_8 'protected)))"
"(let-values()"
"(if(let-values(((or-part_11)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_3)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_2)))))"
"(if or-part_11"
" or-part_11"
"(if(module-binding-extra-inspector b_1)"
"(inspector-superior?"
"(module-binding-extra-inspector b_1)"
"(namespace-inspector(module-instance-namespace mi_2)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_13)"
"(let-values(((c-id_14)"
"(let-values(((or-part_15) in-s_4))"
"(if or-part_15 or-part_15(module-binding-sym b_1)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_14)(syntax-content c-id_14) c-id_14)"
"(syntax-content id_3)))"
" c-id_14"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                          \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_8"
" what_5"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_2))))"
" complain-id_13"
" id_3"
" null)))))"
"(void)))))"
"(void)))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_16 phase_17 ns_18)"
"((letrec-values(((loop_19)"
"(lambda(id_20 in-s_21)"
"(let-values(((b_22)"
"(let-values(((...r/expand/protect.rkt:53:14_23) resolve+shift15.1)"
"((id1_24) id_20)"
"((phase2_25) phase_17)"
"((temp3_26) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f temp3_26 #t #f #f id1_24 phase2_25)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:53:14_23"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp3_26)"
" id1_24"
" phase2_25)))))"
"(let-values(((c54537_27)(binding-free=id b_22)))"
"(if c54537_27"
"((lambda(next-id_28)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_22)"
"(not(top-level-module-path-index?(module-binding-module b_22)))"
" #f)"
"(let-values()"
"(let-values(((mi_30)"
"(binding->module-instance"
" b_22"
" ns_18"
" phase_17"
" id_20)))"
"                                                       (check-access b_22 mi_30 id_20 in-s_21 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_29)"
"(loop_19"
" next-id_28"
"(let-values(((or-part_31) in-s_21))"
"(if or-part_31 or-part_31 id_20)))))"
"(if(if(module-binding? next-b_29)"
"(if(not(module-binding-extra-inspector next-b_29))"
"(syntax-inspector id_20)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((...r/expand/protect.rkt:66:13_32) module-binding-update46.1)"
"((next-b4_33) next-b_29)"
"((temp5_34)(syntax-inspector id_20)))"
"(if(variable-reference-constant?"
"(#%variable-reference module-binding-update46.1))"
"(module-binding-update44.1"
" temp5_34"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" next-b4_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/protect.rkt:66:13_32"
" keyword-procedure-extract"
" '(#:extra-inspector)"
" 3)"
" '(#:extra-inspector)"
"(list temp5_34)"
" next-b4_33))))"
"(let-values() next-b_29)))))"
" c54537_27)"
"(let-values() b_22)))))))"
" loop_19)"
" id_16"
" #f)))"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_1 info_2)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)"
"(if(procedure? v_1)"
"(let-values(((or-part_5)(procedure-arity-includes? v_1 1)))"
"(if or-part_5 or-part_5(procedure-arity-includes? v_1 2)))"
" #f)))"
"(if or-part_4 or-part_4(exact-nonnegative-integer? v_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_1)"
"(let-values()"
"(begin"
"(if(<= v_1(list-ref info_2 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_1"
"                                  \"initialized-field count\""
"(list-ref info_2 1))))"
"(if(member v_1(list-ref info_2 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_1)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_2 3)))"
"(if(integer? v_1)"
"(let-values()"
"(lambda(t_6)"
"(let-values(((p_7)(ref_3 t_6 v_1)))"
"(if(if(procedure? p_7)(procedure-arity-includes? p_7 1) #f)"
" p_7"
"                     (lambda (s_8) (error \"bad syntax:\" s_8))))))"
"(let-values()(lambda(t_9) v_1)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_10 set!-transformer1_11 set!-transformer?_12 set!-transformer-proc_13)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))"
"(values struct:_15 make-_16 ?_17(make-struct-field-accessor -ref_18 0 'proc)))))"
"(lambda(proc_36)"
"(begin"
"(if(if(procedure? proc_36)(procedure-arity-includes? proc_36 1) #f)"
"(void)"
"            (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_36)))"
"(set!-transformer1_11 proc_36))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_37)"
"(let-values(((v_38)((set!-transformer-value t_37) t_37)))"
"(if(procedure-arity-includes? v_38 1) v_38(lambda(s_39)(v_38 t_37 s_39))))))"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_2 key_3 val_4)(hash-set env_2 key_3 val_4)))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_5)(let-values(((or-part_6)(eq? t_5 variable)))(if or-part_6 or-part_6(local-variable? t_5)))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_7 make-_8 ?_9 -ref_10 -set!_11)"
"(make-struct-type 'local-variable #f 1 0 #f null(current-inspector) #f '(0) #f 'local-variable)))"
"(values struct:_7 make-_8 ?_9(make-struct-field-accessor -ref_10 0 'id))))"
"(define-values"
"(lifted/1.1$11)"
"(make-required"
" 'substitute-variable"
"(case-lambda((self_28 id_29 t_30)(apply missing-kw self_28 id_29 t_30 null)))"
" #f"
" #f))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_31 id4_32 t5_33)"
"(let-values(((id_34) id4_32))"
"(let-values(((t_35) t5_33))"
"(let-values(((no-stops?_36) no-stops?2_31))"
"(let-values()"
"(if(if no-stops?_36(local-variable? t_35) #f)"
"(let-values(((bind-id_37)(local-variable-id t_35)))"
"(syntax-rearm$1"
"(datum->syntax$2(syntax-disarm$1 bind-id_37)(syntax-e$1 bind-id_37) id_34 id_34)"
" id_34))"
" id_34)))))))"
"(define-values"
"(unpack7.1$2)"
"(lambda(given-kws_38 given-args_39 id4_40 t5_41)"
"(let-values(((no-stops?2_42)(car given-args_39)))(substitute-variable6.1 no-stops?2_42 id4_40 t5_41))))"
"(define-values"
"(substitute-variable8.1)"
"(lifted/1.1$11"
"(lambda(given-kws_43 given-argc_44)"
"(if(= given-argc_44 4)"
"(let-values(((l2_45) given-kws_43))"
"(if(pair? l2_45)(if(eq?(car l2_45) '#:no-stops?)(null?(cdr l2_45)) #f) #f))"
" #f))"
"(case-lambda((given-kws_46 given-args_47 id_48 t_49)(unpack7.1$2 given-kws_46 given-args_47 id_48 t_49)))"
" '(#:no-stops?)"
" '(#:no-stops?)))"
"(define-values(missing)(gensym 'missing))"
"(define-values(missing?)(lambda(t_50)(eq? t_50 missing)))"
"(define-values"
"(transformer?)"
"(lambda(t_51)"
"(let-values(((or-part_52)(procedure? t_51)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(1/set!-transformer? t_51)))"
"(if or-part_53 or-part_53(1/rename-transformer? t_51)))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_54)"
"(if(1/set!-transformer? t_54)"
"(let-values()(1/set!-transformer-procedure t_54))"
"(if(1/rename-transformer? t_54)(let-values()(lambda(s_55) s_55))(let-values() t_54)))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_56 make-_57 ?_58 -ref_59 -set!_60)"
"(make-struct-type 'core-form #f 2 0 #f null #f #f '(0 1) #f 'core-form)))"
"(values"
" struct:_56"
" make-_57"
" ?_58"
"(make-struct-field-accessor -ref_59 0 'expander)"
"(make-struct-field-accessor -ref_59 1 'name))))"
"(define-values"
"(add-binding!15.1)"
"(lambda(in10_82 in11_83 id12_84 binding13_85 phase14_86)"
"(let-values(((id_87) id12_84))"
"(let-values(((binding_88) binding13_85))"
"(let-values(((phase_89) phase14_86))"
"(let-values(((in-s_90)(if in11_83 in10_82 #f)))"
"(let-values()"
"(begin"
"(check-id-taint id_87 in-s_90)"
"(add-binding-in-scopes!(syntax-scope-set id_87 phase_89)(syntax-e$1 id_87) binding_88)))))))))"
"(define-values"
"(unpack16.1$3)"
"(lambda(given-kws_91 given-args_92 id12_93 binding13_94 phase14_95)"
"(let-values(((in11_96)(pair? given-kws_91)))"
"(let-values(((in10_97)(if in11_96(car given-args_92)(void))))"
"(add-binding!15.1 in10_97 in11_96 id12_93 binding13_94 phase14_95)))))"
"(define-values"
"(add-binding!17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_98 given-argc_99)"
"(if(= given-argc_99 5)"
"(let-values(((l1_100) given-kws_98))"
"(let-values(((l1_101)(if(null? l1_100) l1_100(if(eq?(car l1_100) '#:in)(cdr l1_100) l1_100))))"
"(null? l1_101)))"
" #f))"
"(case-lambda"
"((given-kws_102 given-args_103 id_104 binding_105 phase_106)"
"(unpack16.1$3 given-kws_102 given-args_103 id_104 binding_105 phase_106)))"
" null"
" '(#:in)"
"(let-values(((add-binding!_107)"
"(case-lambda((id_108 binding_109 phase_110)(unpack16.1$3 null null id_108 binding_109 phase_110)))))"
" add-binding!_107)))"
"(define-values"
"(add-bulk-binding!23.1)"
"(lambda(in18_111 in19_112 s20_113 binding21_114 phase22_115)"
"(let-values(((s_116) s20_113))"
"(let-values(((binding_117) binding21_114))"
"(let-values(((phase_118) phase22_115))"
"(let-values(((in-s_119)(if in19_112 in18_111 #f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_116)"
"                  (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_119 s_116))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_116 phase_118) binding_117)))))))))"
"(define-values"
"(unpack24.1)"
"(lambda(given-kws_120 given-args_121 s20_122 binding21_123 phase22_124)"
"(let-values(((in19_125)(pair? given-kws_120)))"
"(let-values(((in18_126)(if in19_125(car given-args_121)(void))))"
"(add-bulk-binding!23.1 in18_126 in19_125 s20_122 binding21_123 phase22_124)))))"
"(define-values"
"(add-bulk-binding!25.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_127 given-argc_128)"
"(if(= given-argc_128 5)"
"(let-values(((l1_129) given-kws_127))"
"(let-values(((l1_130)(if(null? l1_129) l1_129(if(eq?(car l1_129) '#:in)(cdr l1_129) l1_129))))"
"(null? l1_130)))"
" #f))"
"(case-lambda"
"((given-kws_131 given-args_132 s_133 binding_134 phase_135)"
"(unpack24.1 given-kws_131 given-args_132 s_133 binding_134 phase_135)))"
" null"
" '(#:in)"
"(let-values(((add-bulk-binding!_136)"
"(case-lambda((s_137 binding_138 phase_139)(unpack24.1 null null s_137 binding_138 phase_139)))))"
" add-bulk-binding!_136)))"
"(define-values"
"(add-local-binding!33.1)"
"(lambda(frame-id26_140 frame-id28_141 in27_142 in29_143 id30_144 phase31_145 counter32_146)"
"(let-values(((id_147) id30_144))"
"(let-values(((phase_148) phase31_145))"
"(let-values(((counter_149) counter32_146))"
"(let-values(((frame-id_150)(if frame-id28_141 frame-id26_140 #f)))"
"(let-values(((in-s_151)(if in29_143 in27_142 #f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_147 in-s_151)(values))))"
"(let-values((()(begin(set-box! counter_149(add1(unbox counter_149)))(values))))"
"(let-values(((key_152)"
"                                  (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_147) (unbox counter_149)))))"
"(begin"
"(add-binding-in-scopes!"
"(syntax-scope-set id_147 phase_148)"
"(syntax-e$1 id_147)"
"(let-values(((...ander/expand/env.rkt:97:68_153) make-local-binding9.1)"
"((key51_154) key_152)"
"((frame-id52_155) frame-id_150))"
"(if(variable-reference-constant?(#%variable-reference make-local-binding9.1))"
"(make-local-binding7.1 frame-id52_155 #t #f #f key51_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/expand/env.rkt:97:68_153"
" keyword-procedure-extract"
" '(#:frame-id)"
" 3)"
" '(#:frame-id)"
"(list frame-id52_155)"
" key51_154))))"
" key_152))))))))))))"
"(define-values"
"(unpack34.1$3)"
"(lambda(given-kws_156 given-args_157 id30_158 phase31_159 counter32_160)"
"(let-values(((frame-id28_161)(if(pair? given-kws_156)(eq? '#:frame-id(car given-kws_156)) #f)))"
"(let-values(((frame-id26_162)(if frame-id28_161(car given-args_157)(void)))"
"((given-kws_163)(if frame-id28_161(cdr given-kws_156) given-kws_156))"
"((given-args_164)(if frame-id28_161(cdr given-args_157) given-args_157)))"
"(let-values(((in29_165)(pair? given-kws_163)))"
"(let-values(((in27_166)(if in29_165(car given-args_164)(void))))"
"(add-local-binding!33.1"
" frame-id26_162"
" frame-id28_161"
" in27_166"
" in29_165"
" id30_158"
" phase31_159"
" counter32_160)))))))"
"(define-values"
"(add-local-binding!35.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_167 given-argc_168)"
"(if(= given-argc_168 5)"
"(let-values(((l1_169) given-kws_167))"
"(let-values(((l1_170)(if(null? l1_169) l1_169(if(eq?(car l1_169) '#:frame-id)(cdr l1_169) l1_169))))"
"(let-values(((l1_171) l1_170))"
"(let-values(((l1_172)(if(null? l1_171) l1_171(if(eq?(car l1_171) '#:in)(cdr l1_171) l1_171))))"
"(null? l1_172)))))"
" #f))"
"(case-lambda"
"((given-kws_173 given-args_174 id_175 phase_176 counter_177)"
"(unpack34.1$3 given-kws_173 given-args_174 id_175 phase_176 counter_177)))"
" null"
" '(#:frame-id #:in)"
"(let-values(((add-local-binding!_178)"
"(case-lambda((id_179 phase_180 counter_181)(unpack34.1$3 null null id_179 phase_180 counter_181)))))"
" add-local-binding!_178)))"
"(define-values"
"(check-id-taint)"
"(lambda(id_182 in-s_183)"
"(if(syntax-tainted?$1 id_182)"
"      (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_183 id_182))"
"(void))))"
"(define-values"
"(binding-lookup46.1)"
"(lambda(in36_184"
" in38_185"
" out-of-context-as-variable?37_186"
" out-of-context-as-variable?39_187"
" b40_188"
" env41_189"
" lift-envs42_190"
" ns43_191"
" phase44_192"
" id45_193)"
"(let-values(((b_194) b40_188))"
"(let-values(((env_195) env41_189))"
"(let-values(((lift-envs_196) lift-envs42_190))"
"(let-values(((ns_197) ns43_191))"
"(let-values(((phase_198) phase44_192))"
"(let-values(((id_199) id45_193))"
"(let-values(((in-s_200)(if in38_185 in36_184 #f)))"
"(let-values(((out-of-context-as-variable?_201)"
"(if out-of-context-as-variable?39_187 out-of-context-as-variable?37_186 #f)))"
"(let-values()"
"(if(module-binding? b_194)"
"(let-values()"
"(let-values(((top-level?_202)(top-level-module-path-index?(module-binding-module b_194))))"
"(let-values(((mi_203)"
"(if(not top-level?_202)"
"(binding->module-instance b_194 ns_197 phase_198 id_199)"
" #f)))"
"(let-values(((m-ns_204)"
"(if top-level?_202"
" ns_197"
"(if mi_203(module-instance-namespace mi_203) #f))))"
"(let-values((()(begin(check-taint id_199)(values))))"
"(let-values(((t_205)"
"(namespace-get-transformer"
" m-ns_204"
"(module-binding-phase b_194)"
"(module-binding-sym b_194)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_203"
"(let-values()"
"(check-access"
" b_194"
" mi_203"
" id_199"
" in-s_200"
"                                                         (if t_205 \"transformer\" \"variable\")))"
"(void))"
"(values))))"
"(let-values(((insp_206)"
"(if mi_203"
"(if(module-instance-module mi_203)"
"(module-inspector(module-instance-module mi_203))"
" #f)"
" #f)))"
"(values t_205 insp_206)))))))))"
"(if(local-binding? b_194)"
"(let-values()"
"(let-values(((t_207)(hash-ref env_195(local-binding-key b_194) missing)))"
"(if(eq? t_207 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_208)"
"(let-values(((lst_209) lift-envs_196))"
"(begin"
"(if(list? lst_209)(void)(let-values()(in-list lst_209)))"
"((letrec-values(((for-loop_210)"
"(lambda(result_211 lst_212)"
"(if(pair? lst_212)"
"(let-values(((lift-env_213)"
"(unsafe-car lst_212)))"
"(if #t"
"(let-values(((result_214)"
"(let-values(((result_215)"
" result_211))"
"(let-values(((result_216)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_213)"
"(local-binding-key"
" b_194)"
" #f)))))"
"(values result_216)))))"
"(if(if #t"
"(not"
"((lambda x_217 result_214)"
" lift-env_213))"
" #f)"
"(for-loop_210"
" result_214"
"(unsafe-cdr lst_212))"
" result_214))"
" result_211))"
" result_211))))"
" for-loop_210)"
" #f"
" lst_209)))))"
"(if or-part_208"
" or-part_208"
"(if out-of-context-as-variable?_201"
" variable"
"                                         (error \"identifier used out of context:\" id_199))))"
" #f))"
"(let-values()(begin(check-taint id_199)(values t_207 #f))))))"
"                          (let-values () (error \"internal error: unknown binding for lookup:\" b_194)))))))))))))))"
"(define-values"
"(unpack47.1$1)"
"(lambda(given-kws_218 given-args_219 b40_220 env41_221 lift-envs42_222 ns43_223 phase44_224 id45_225)"
"(let-values(((in38_226)(if(pair? given-kws_218)(eq? '#:in(car given-kws_218)) #f)))"
"(let-values(((in36_227)(if in38_226(car given-args_219)(void)))"
"((given-kws_228)(if in38_226(cdr given-kws_218) given-kws_218))"
"((given-args_229)(if in38_226(cdr given-args_219) given-args_219)))"
"(let-values(((out-of-context-as-variable?39_230)(pair? given-kws_228)))"
"(let-values(((out-of-context-as-variable?37_231)"
"(if out-of-context-as-variable?39_230(car given-args_229)(void))))"
"(binding-lookup46.1"
" in36_227"
" in38_226"
" out-of-context-as-variable?37_231"
" out-of-context-as-variable?39_230"
" b40_220"
" env41_221"
" lift-envs42_222"
" ns43_223"
" phase44_224"
" id45_225)))))))"
"(define-values"
"(binding-lookup48.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_232 given-argc_233)"
"(if(= given-argc_233 8)"
"(let-values(((l1_234) given-kws_232))"
"(let-values(((l1_235)(if(null? l1_234) l1_234(if(eq?(car l1_234) '#:in)(cdr l1_234) l1_234))))"
"(let-values(((l1_236) l1_235))"
"(let-values(((l1_237)"
"(if(null? l1_236)"
" l1_236"
"(if(eq?(car l1_236) '#:out-of-context-as-variable?)(cdr l1_236) l1_236))))"
"(null? l1_237)))))"
" #f))"
"(case-lambda"
"((given-kws_238 given-args_239 b_240 env_241 lift-envs_242 ns_243 phase_244 id_245)"
"(unpack47.1$1 given-kws_238 given-args_239 b_240 env_241 lift-envs_242 ns_243 phase_244 id_245)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((binding-lookup_246)"
"(case-lambda"
"((b_247 env_248 lift-envs_249 ns_250 phase_251 id_252)"
"(unpack47.1$1 null null b_247 env_248 lift-envs_249 ns_250 phase_251 id_252)))))"
" binding-lookup_246)))"
"(define-values"
"(check-taint)"
"(lambda(id_253)"
"(if(syntax-tainted?$1 id_253)"
"      (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_253))"
"(void))))"
"(define-values"
"(free-id-set)"
"(lambda(phase_1 ids_2)"
"(let-values(((lst_3) ids_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(ht_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((id_7)(unsafe-car lst_6)))"
"(if #t"
"(let-values(((ht_8)"
"(let-values(((ht_9) ht_5))"
"(let-values(((ht_10)"
"(let-values()"
"(hash-update"
" ht_9"
"(identifier-binding-symbol$1 id_7 phase_1)"
"(lambda(l_11)(cons id_7 l_11))"
" null))))"
"(values ht_10)))))"
"(if #t(for-loop_4 ht_8(unsafe-cdr lst_6)) ht_8))"
" ht_5))"
" ht_5))))"
" for-loop_4)"
" '#hasheq()"
" lst_3)))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_12 phase_13 given-id_14)"
"(let-values(((lst_15)(hash-ref fs_12(identifier-binding-symbol$1 given-id_14 phase_13) null)))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(result_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((id_19)(unsafe-car lst_18)))"
"(if #t"
"(let-values(((result_20)"
"(let-values(((result_21) result_17))"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_19"
" given-id_14"
" phase_13"
" phase_13)))))"
"(values result_22)))))"
"(if(if #t(not((lambda x_23 result_20) id_19)) #f)"
"(for-loop_16 result_20(unsafe-cdr lst_18))"
" result_20))"
" result_17))"
" result_17))))"
" for-loop_16)"
" #f"
" lst_15)))))"
"(define-values(free-id-set-empty?)(lambda(fs_24)(zero?(hash-count fs_24))))"
"(define-values"
"(struct:expand-context"
" expand-context1.1"
" expand-context?"
" expand-context-context"
" expand-context-phase"
" expand-context-namespace"
" expand-context-env"
" expand-context-post-expansion-scope-action"
" expand-context-scopes"
" expand-context-def-ctx-scopes"
" expand-context-reference-records"
" expand-context-only-immediate?"
" expand-context-just-once?"
" expand-context-module-begin-k"
" expand-context-need-eventually-defined"
" expand-context-allow-unbound?"
" expand-context-preserve-#%expression-and-do-not-add-#%top?"
" expand-context-stops"
" expand-context-current-introduction-scopes"
" expand-context-declared-submodule-names"
" expand-context-lifts"
" expand-context-lift-envs"
" expand-context-module-lifts"
" expand-context-require-lifts"
" expand-context-to-module-lifts"
" expand-context-requires+provides"
" expand-context-name"
" expand-context-observer)"
"(let-values(((struct:_2 make-_3 ?_4 -ref_5 -set!_6)"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context"
" 25"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24)"
" #f"
" 'expand-context)))"
"(values"
" struct:_2"
" make-_3"
" ?_4"
"(make-struct-field-accessor -ref_5 0 'context)"
"(make-struct-field-accessor -ref_5 1 'phase)"
"(make-struct-field-accessor -ref_5 2 'namespace)"
"(make-struct-field-accessor -ref_5 3 'env)"
"(make-struct-field-accessor -ref_5 4 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_5 5 'scopes)"
"(make-struct-field-accessor -ref_5 6 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_5 7 'reference-records)"
"(make-struct-field-accessor -ref_5 8 'only-immediate?)"
"(make-struct-field-accessor -ref_5 9 'just-once?)"
"(make-struct-field-accessor -ref_5 10 'module-begin-k)"
"(make-struct-field-accessor -ref_5 11 'need-eventually-defined)"
"(make-struct-field-accessor -ref_5 12 'allow-unbound?)"
"(make-struct-field-accessor -ref_5 13 'preserve-#%expression-and-do-not-add-#%top?)"
"(make-struct-field-accessor -ref_5 14 'stops)"
"(make-struct-field-accessor -ref_5 15 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_5 16 'declared-submodule-names)"
"(make-struct-field-accessor -ref_5 17 'lifts)"
"(make-struct-field-accessor -ref_5 18 'lift-envs)"
"(make-struct-field-accessor -ref_5 19 'module-lifts)"
"(make-struct-field-accessor -ref_5 20 'require-lifts)"
"(make-struct-field-accessor -ref_5 21 'to-module-lifts)"
"(make-struct-field-accessor -ref_5 22 'requires+provides)"
"(make-struct-field-accessor -ref_5 23 'name)"
"(make-struct-field-accessor -ref_5 24 'observer))))"
"(define-values"
"(make-expand-context)"
"(lambda(ns_143)"
"(let-values(((root-ctx_144)(namespace-get-root-expand-ctx ns_143)))"
"(expand-context1.1"
"(root-expand-context-module-scopes root-ctx_144)"
"(root-expand-context-post-expansion-scope root-ctx_144)"
"(root-expand-context-top-level-bind-scope root-ctx_144)"
"(root-expand-context-all-scopes-stx root-ctx_144)"
"(root-expand-context-use-site-scopes root-ctx_144)"
"(root-expand-context-defined-syms root-ctx_144)"
"(root-expand-context-frame-id root-ctx_144)"
"(root-expand-context-counter root-ctx_144)"
"(root-expand-context-lift-key root-ctx_144)"
" 'top-level"
"(namespace-phase ns_143)"
" ns_143"
" empty-env"
" push-scope"
" null"
" #f"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" empty-free-id-set"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
"(current-expand-observe)))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_145 root-ctx_146)"
"(let-values(((the-struct_147) ctx_145))"
"(if(expand-context? the-struct_147)"
"(let-values(((module-scopes16_148)(root-expand-context-module-scopes root-ctx_146))"
"((post-expansion-scope17_149)(root-expand-context-post-expansion-scope root-ctx_146))"
"((top-level-bind-scope18_150)(root-expand-context-top-level-bind-scope root-ctx_146))"
"((all-scopes-stx19_151)(root-expand-context-all-scopes-stx root-ctx_146))"
"((use-site-scopes20_152)(root-expand-context-use-site-scopes root-ctx_146))"
"((defined-syms21_153)(root-expand-context-defined-syms root-ctx_146))"
"((frame-id22_154)(root-expand-context-frame-id root-ctx_146))"
"((counter23_155)(root-expand-context-counter root-ctx_146))"
"((lift-key24_156)(root-expand-context-lift-key root-ctx_146)))"
"(expand-context1.1"
" module-scopes16_148"
" post-expansion-scope17_149"
" top-level-bind-scope18_150"
" all-scopes-stx19_151"
" use-site-scopes20_152"
" defined-syms21_153"
" frame-id22_154"
" counter23_155"
" lift-key24_156"
"(expand-context-context the-struct_147)"
"(expand-context-phase the-struct_147)"
"(expand-context-namespace the-struct_147)"
"(expand-context-env the-struct_147)"
"(expand-context-post-expansion-scope-action the-struct_147)"
"(expand-context-scopes the-struct_147)"
"(expand-context-def-ctx-scopes the-struct_147)"
"(expand-context-reference-records the-struct_147)"
"(expand-context-only-immediate? the-struct_147)"
"(expand-context-just-once? the-struct_147)"
"(expand-context-module-begin-k the-struct_147)"
"(expand-context-need-eventually-defined the-struct_147)"
"(expand-context-allow-unbound? the-struct_147)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_147)"
"(expand-context-stops the-struct_147)"
"(expand-context-current-introduction-scopes the-struct_147)"
"(expand-context-declared-submodule-names the-struct_147)"
"(expand-context-lifts the-struct_147)"
"(expand-context-lift-envs the-struct_147)"
"(expand-context-module-lifts the-struct_147)"
"(expand-context-require-lifts the-struct_147)"
"(expand-context-to-module-lifts the-struct_147)"
"(expand-context-requires+provides the-struct_147)"
"(expand-context-name the-struct_147)"
"(expand-context-observer the-struct_147)))"
"        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_147)))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context6.1)"
"(lambda(fail-ok?2_157 fail-ok?3_158 who4_159 who5_160)"
"(let-values(((who_161)(if who5_160 who4_159 'unexpected)))"
"(let-values(((fail-ok?_162)(if fail-ok?3_158 fail-ok?2_157 #f)))"
"(let-values()"
"(let-values(((or-part_163)(force(current-expand-context))))"
"(if or-part_163"
" or-part_163"
"              (if fail-ok?_162 #f (raise-arguments-error who_161 \"not currently expanding\")))))))))"
"(define-values"
"(unpack7.1)"
"(lambda(given-kws_164 given-args_165 who4_166 who5_167)"
"(let-values(((fail-ok?3_168)(pair? given-kws_164)))"
"(let-values(((fail-ok?2_169)(if fail-ok?3_168(car given-args_165)(void))))"
"(get-current-expand-context6.1 fail-ok?2_169 fail-ok?3_168 who4_166 who5_167)))))"
"(define-values"
"(get-current-expand-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_170 given-argc_171)"
"(if(if(>= given-argc_171 2)(<= given-argc_171 3) #f)"
"(let-values(((l1_172) given-kws_170))"
"(let-values(((l1_173)(if(null? l1_172) l1_172(if(eq?(car l1_172) '#:fail-ok?)(cdr l1_172) l1_172))))"
"(null? l1_173)))"
" #f))"
"(case-lambda"
"((given-kws_174 given-args_175)(unpack7.1 given-kws_174 given-args_175 #f #f))"
"((given-kws_176 given-args_177 who4_178)(unpack7.1 given-kws_176 given-args_177 who4_178 #t)))"
" null"
" '(#:fail-ok?)"
"(let-values(((get-current-expand-context_179)"
"(case-lambda(()(unpack7.1 null null #f #f))((who4_180)(unpack7.1 null null who4_180 #t)))))"
" get-current-expand-context_179)))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_181)"
"(begin"
"(if(let-values(((or-part_182)(not v_181)))"
"(if or-part_182 or-part_182(if(procedure? v_181)(procedure-arity-includes? v_181 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_181)))"
" v_181))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_183)"
"(if(if(eq? 'expression(expand-context-context ctx_183))(not(expand-context-name ctx_183)) #f)"
"(let-values() ctx_183)"
"(let-values()"
"(let-values(((the-struct_184) ctx_183))"
"(if(expand-context? the-struct_184)"
"(let-values(((context25_185) 'expression)"
"((name26_186) #f)"
"((use-site-scopes27_187) #f)"
"((post-expansion-scope28_188) #f)"
"((frame-id29_189) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_184)"
" post-expansion-scope28_188"
"(root-expand-context-top-level-bind-scope the-struct_184)"
"(root-expand-context-all-scopes-stx the-struct_184)"
" use-site-scopes27_187"
"(root-expand-context-defined-syms the-struct_184)"
" frame-id29_189"
"(root-expand-context-counter the-struct_184)"
"(root-expand-context-lift-key the-struct_184)"
" context25_185"
"(expand-context-phase the-struct_184)"
"(expand-context-namespace the-struct_184)"
"(expand-context-env the-struct_184)"
"(expand-context-post-expansion-scope-action the-struct_184)"
"(expand-context-scopes the-struct_184)"
"(expand-context-def-ctx-scopes the-struct_184)"
"(expand-context-reference-records the-struct_184)"
"(expand-context-only-immediate? the-struct_184)"
"(expand-context-just-once? the-struct_184)"
"(expand-context-module-begin-k the-struct_184)"
"(expand-context-need-eventually-defined the-struct_184)"
"(expand-context-allow-unbound? the-struct_184)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_184)"
"(expand-context-stops the-struct_184)"
"(expand-context-current-introduction-scopes the-struct_184)"
"(expand-context-declared-submodule-names the-struct_184)"
"(expand-context-lifts the-struct_184)"
"(expand-context-lift-envs the-struct_184)"
"(expand-context-module-lifts the-struct_184)"
"(expand-context-require-lifts the-struct_184)"
"(expand-context-to-module-lifts the-struct_184)"
"(expand-context-requires+provides the-struct_184)"
" name26_186"
"(expand-context-observer the-struct_184)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_184)))))))"
"(define-values"
"(lifted/1.1$7)"
"(make-required 'as-tail-context(case-lambda((self_190 ctx_191)(apply missing-kw self_190 ctx_191 null))) #f #f))"
"(define-values"
"(as-tail-context12.1)"
"(lambda(wrt9_192 ctx11_193)"
"(let-values(((ctx_194) ctx11_193))"
"(let-values(((wrt-ctx_195) wrt9_192))"
"(let-values()"
"(if(expand-context-name wrt-ctx_195)"
"(let-values()"
"(let-values(((the-struct_196) ctx_194))"
"(if(expand-context? the-struct_196)"
"(let-values(((name30_197)(expand-context-name wrt-ctx_195)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_196)"
"(root-expand-context-post-expansion-scope the-struct_196)"
"(root-expand-context-top-level-bind-scope the-struct_196)"
"(root-expand-context-all-scopes-stx the-struct_196)"
"(root-expand-context-use-site-scopes the-struct_196)"
"(root-expand-context-defined-syms the-struct_196)"
"(root-expand-context-frame-id the-struct_196)"
"(root-expand-context-counter the-struct_196)"
"(root-expand-context-lift-key the-struct_196)"
"(expand-context-context the-struct_196)"
"(expand-context-phase the-struct_196)"
"(expand-context-namespace the-struct_196)"
"(expand-context-env the-struct_196)"
"(expand-context-post-expansion-scope-action the-struct_196)"
"(expand-context-scopes the-struct_196)"
"(expand-context-def-ctx-scopes the-struct_196)"
"(expand-context-reference-records the-struct_196)"
"(expand-context-only-immediate? the-struct_196)"
"(expand-context-just-once? the-struct_196)"
"(expand-context-module-begin-k the-struct_196)"
"(expand-context-need-eventually-defined the-struct_196)"
"(expand-context-allow-unbound? the-struct_196)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_196)"
"(expand-context-stops the-struct_196)"
"(expand-context-current-introduction-scopes the-struct_196)"
"(expand-context-declared-submodule-names the-struct_196)"
"(expand-context-lifts the-struct_196)"
"(expand-context-lift-envs the-struct_196)"
"(expand-context-module-lifts the-struct_196)"
"(expand-context-require-lifts the-struct_196)"
"(expand-context-to-module-lifts the-struct_196)"
"(expand-context-requires+provides the-struct_196)"
" name30_197"
"(expand-context-observer the-struct_196)))"
"                  (raise-argument-error 'struct-copy \"expand-context?\" the-struct_196))))"
"(let-values() ctx_194)))))))"
"(define-values"
"(unpack13.1)"
"(lambda(given-kws_198 given-args_199 ctx11_200)"
"(let-values(((wrt9_201)(car given-args_199)))(as-tail-context12.1 wrt9_201 ctx11_200))))"
"(define-values"
"(as-tail-context14.1)"
"(lifted/1.1$7"
"(lambda(given-kws_202 given-argc_203)"
"(if(= given-argc_203 3)"
"(let-values(((l2_204) given-kws_202))"
"(if(pair? l2_204)(if(eq?(car l2_204) '#:wrt)(null?(cdr l2_204)) #f) #f))"
" #f))"
"(case-lambda((given-kws_205 given-args_206 ctx_207)(unpack13.1 given-kws_205 given-args_206 ctx_207)))"
" '(#:wrt)"
" '(#:wrt)))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_208 ids_209)"
"(if(if(pair? ids_209)(null?(cdr ids_209)) #f)"
"(let-values()"
"(let-values(((the-struct_210) ctx_208))"
"(if(expand-context? the-struct_210)"
"(let-values(((name31_211)(car ids_209)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_210)"
"(root-expand-context-post-expansion-scope the-struct_210)"
"(root-expand-context-top-level-bind-scope the-struct_210)"
"(root-expand-context-all-scopes-stx the-struct_210)"
"(root-expand-context-use-site-scopes the-struct_210)"
"(root-expand-context-defined-syms the-struct_210)"
"(root-expand-context-frame-id the-struct_210)"
"(root-expand-context-counter the-struct_210)"
"(root-expand-context-lift-key the-struct_210)"
"(expand-context-context the-struct_210)"
"(expand-context-phase the-struct_210)"
"(expand-context-namespace the-struct_210)"
"(expand-context-env the-struct_210)"
"(expand-context-post-expansion-scope-action the-struct_210)"
"(expand-context-scopes the-struct_210)"
"(expand-context-def-ctx-scopes the-struct_210)"
"(expand-context-reference-records the-struct_210)"
"(expand-context-only-immediate? the-struct_210)"
"(expand-context-just-once? the-struct_210)"
"(expand-context-module-begin-k the-struct_210)"
"(expand-context-need-eventually-defined the-struct_210)"
"(expand-context-allow-unbound? the-struct_210)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_210)"
"(expand-context-stops the-struct_210)"
"(expand-context-current-introduction-scopes the-struct_210)"
"(expand-context-declared-submodule-names the-struct_210)"
"(expand-context-lifts the-struct_210)"
"(expand-context-lift-envs the-struct_210)"
"(expand-context-module-lifts the-struct_210)"
"(expand-context-require-lifts the-struct_210)"
"(expand-context-to-module-lifts the-struct_210)"
"(expand-context-requires+provides the-struct_210)"
" name31_211"
"(expand-context-observer the-struct_210)))"
"            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_210))))"
"(let-values() ctx_208))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_287)"
"(if(pair? s_287)"
"(let-values()(let-values(((r_288)(to-syntax-list.1$1(cdr s_287))))(if r_288(cons(car s_287) r_288) #f)))"
"(if(syntax?$1 s_287)"
"(let-values()(to-syntax-list.1$1(syntax-e$1 s_287)))"
"(if(list? s_287)(let-values() s_287)(let-values() #f))))))"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!)"
"(lambda(sym_1 proc_2)(begin(add-core-binding! sym_1)(set! core-forms(hash-set core-forms sym_1 proc_2)))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_3 val_4)"
"(begin(add-core-binding! sym_3)(set! core-primitives(hash-set core-primitives sym_3 val_4)))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_5)"
"(let-values(((temp1_6)(datum->syntax$2 core-stx sym_5))"
"((temp2_7)"
"(let-values(((core-mpi4_9) core-mpi)((temp5_10) 0)((sym6_11) sym_5))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi4_9"
" temp5_10"
" sym6_11)"
"(make-module-binding22.1 core-mpi4_9 temp5_10 sym6_11))))"
"((temp3_8) 0))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 #f #f temp1_6 temp2_7 temp3_8)"
"(add-binding!17.1 temp1_6 temp2_7 temp3_8)))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_12)"
"(let-values(((ns7_13) ns_12)"
"((temp8_14)"
"(let-values(((...r/namespace/core.rkt:59:3_16) make-module34.1)"
"((temp10_17) #t)"
"((temp11_18) #t)"
"((temp12_19) #t)"
"((core-mpi13_20) core-mpi)"
"((temp14_21)"
"(hasheqv"
" 0"
"(let-values(((lst_23)(list core-primitives core-forms))((lst_24) '(#f #t)))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(table_26 lst_27 lst_28)"
"(if(if(pair? lst_27)(pair? lst_28) #f)"
"(let-values(((syms_29)(unsafe-car lst_27))"
"((syntax?_30)(unsafe-car lst_28)))"
"(if(if #t #t #f)"
"(let-values(((table_31)"
"(let-values(((table_32) table_26))"
"(if #t"
"(let-values(((ht_33) syms_29))"
"(begin"
"(if((lambda(ht_34)(hash? ht_34))"
" ht_33)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_33)))"
"((letrec-values(((for-loop_35)"
"(lambda(table_36"
" i_37)"
"(if i_37"
"(let-values(((sym_38)"
"(hash-iterate-key"
" ht_33"
" i_37)))"
"(if #t"
"(let-values(((table_39)"
"(let-values(((table_40)"
" table_36))"
"(let-values(((table_41)"
"(let-values()"
"(let-values(((key_42"
" val_43)"
"(let-values()"
"(let-values(((b_44)"
"(let-values(((core-mpi16_45)"
" core-mpi)"
"((temp17_46)"
" 0)"
"((sym18_47)"
" sym_38))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi16_45"
" temp17_46"
" sym18_47)"
"(make-module-binding22.1"
" core-mpi16_45"
" temp17_46"
" sym18_47)))))"
"(values"
" sym_38"
"(if syntax?_30"
"(provided1.1"
" b_44"
" #f"
" #t)"
" b_44))))))"
"(hash-set"
" table_40"
" key_42"
" val_43)))))"
"(values"
" table_41)))))"
"(if #t"
"(for-loop_35"
" table_39"
"(hash-iterate-next"
" ht_33"
" i_37))"
" table_39))"
" table_36))"
" table_36))))"
" for-loop_35)"
" table_32"
"(hash-iterate-first ht_33))))"
" table_32))))"
"(if(if #t #t #f)"
"(for-loop_25"
" table_31"
"(unsafe-cdr lst_27)"
"(unsafe-cdr lst_28))"
" table_31))"
" table_26))"
" table_26))))"
" for-loop_25)"
" '#hasheq()"
" lst_23"
" lst_24)))))"
"((temp15_22)"
"(lambda(data-box_48"
" ns_49"
" phase_50"
" phase-level_51"
" self_52"
" bulk-binding-registry_53"
" insp_54)"
"(let-values(((tmp_55) phase-level_51))"
"(if(equal? tmp_55 0)"
"(let-values()"
"(begin"
"(let-values(((ht_56) core-primitives))"
"(begin"
"(if((lambda(ht_57)(hash? ht_57)) ht_56)"
"(void)"
"(let-values()(default-in-hash ht_56)))"
"((letrec-values(((for-loop_58)"
"(lambda(fold-var_59 i_60)"
"(if i_60"
"(let-values(((sym_61 val_62)"
"(hash-iterate-key+value ht_56 i_60)))"
"(if #t"
"(let-values(((fold-var_63)"
"(let-values(((fold-var_64)"
" fold-var_59))"
"(let-values(((fold-var_65)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_49"
" 0"
" sym_61"
" val_62))"
"(void)))))"
"(values fold-var_65)))))"
"(if #t"
"(for-loop_58"
" fold-var_63"
"(hash-iterate-next ht_56 i_60))"
" fold-var_63))"
" fold-var_59))"
" fold-var_59))))"
" for-loop_58)"
"(void)"
"(hash-iterate-first ht_56))))"
"(let-values(((ht_66) core-forms))"
"(begin"
"(if((lambda(ht_67)(hash? ht_67)) ht_66)"
"(void)"
"(let-values()(default-in-hash ht_66)))"
"((letrec-values(((for-loop_68)"
"(lambda(fold-var_69 i_70)"
"(if i_70"
"(let-values(((sym_71 proc_72)"
"(hash-iterate-key+value ht_66 i_70)))"
"(if #t"
"(let-values(((fold-var_73)"
"(let-values(((fold-var_74)"
" fold-var_69))"
"(let-values(((fold-var_75)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_49"
" 0"
" sym_71"
"(core-form9.1"
" proc_72"
" sym_71)))"
"(void)))))"
"(values fold-var_75)))))"
"(if #t"
"(for-loop_68"
" fold-var_73"
"(hash-iterate-next ht_66 i_70))"
" fold-var_73))"
" fold-var_69))"
" fold-var_69))))"
" for-loop_68)"
"(void)"
"(hash-iterate-first ht_66))))))"
"(let-values()(void)))))))"
"(if(variable-reference-constant?(#%variable-reference make-module34.1))"
"(make-module32.1"
" temp10_17"
" #t"
" #f"
" #f"
" temp15_22"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp11_18"
" #t"
" temp12_19"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp14_21"
" #f"
" #f"
" core-mpi13_20"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/namespace/core.rkt:59:3_16"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:provides"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:provides"
" #:self)"
"(list temp10_17 temp15_22 temp11_18 temp12_19 temp14_21 core-mpi13_20)))))"
"((core-module-name9_15) core-module-name))"
"(if(variable-reference-constant?(#%variable-reference declare-module!53.1))"
"(declare-module!51.1 #f #f ns7_13 temp8_14 core-module-name9_15)"
"(declare-module!53.1 ns7_13 temp8_14 core-module-name9_15)))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_76 phase_77)"
"(let-values(((ok?_78 id19_79 _20_80)"
"(let-values(((s_91) s_76))"
"(if(if #t"
"(let-values(((s_92)(if(syntax?$1 s_91)(syntax-e$1 s_91) s_91)))"
"(if(pair? s_92)"
"(if(let-values(((s_93)(car s_92)))"
"(if(syntax?$1 s_93)(symbol?(syntax-e$1 s_93)) #f))"
"(let-values(((s_94)(cdr s_92))) #t)"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_95) s_91))"
"(let-values(((id19_96 _20_97)"
"(let-values(((s_98)(if(syntax?$1 s_91)(syntax-e$1 s_91) s_91)))"
"(if #t"
"(let-values(((id21_99)(let-values(((s_101)(car s_98))) s_101))"
"((_22_100)(let-values(((s_102)(cdr s_98))) s_102)))"
"(values id21_99 _22_100))"
"                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_95)))))"
"(values #t id19_96 _20_97)))"
"(values #f #f #f)))))"
"(if ok?_78"
"(let-values(((b_103)"
"(let-values(((temp23_104) id19_79)((phase24_105) phase_77))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f temp23_104 phase24_105)"
"(resolve+shift15.1 temp23_104 phase24_105)))))"
"(if(module-binding? b_103)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_103)))"
"(module-binding-sym b_103)"
" #f)"
" #f))"
" #f))))"
"(define-values"
"(taint-dispatch)"
"(lambda(s_1 proc_2 phase_3)"
"((letrec-values(((loop_4)"
"(lambda(s_5 mode_6)"
"(let-values(((tmp_7) mode_6))"
"(if(equal? tmp_7 'opaque)"
"(let-values()(proc_2 s_5))"
"(if(equal? tmp_7 'transparent)"
"(let-values()"
"(let-values(((c_8)"
"(syntax-map"
"(let-values(((or-part_9)(syntax->list$1 s_5)))"
"(if or-part_9 or-part_9(syntax-e$1 s_5)))"
"(lambda(tail?_10 d_11) d_11)"
"(lambda(s_12 d_13)(loop_4 s_12(syntax-taint-mode-property s_12)))"
" #f)))"
"(datum->syntax$2"
" #f"
" c_8"
" s_5"
"(if(syntax-any-macro-scopes? s_5)"
"(syntax-property-remove s_5 original-property-sym)"
" s_5))))"
"(if(equal? tmp_7 'transparent-binding)"
"(let-values()"
"(let-values(((c_14)(syntax-e$1 s_5)))"
"(if(pair? c_14)"
"(let-values()"
"(let-values(((cd_15)"
"(if(syntax?$1(cdr c_14))(syntax-e$1(cdr c_14))(cdr c_14))))"
"(if(let-values(((or-part_16)(pair? cd_15)))"
"(if or-part_16"
" or-part_16"
"(if(syntax?$1 cd_15)(pair?(syntax-e$1 cd_15)) #f)))"
"(let-values()"
"(let-values(((d_17)(if(syntax?$1 cd_15)(syntax-e$1 cd_15) cd_15)))"
"(datum->syntax$2"
" s_5"
"(cons"
"(loop_4(car c_14)(syntax-taint-mode-property s_5))"
"(cons"
"(loop_4(car d_17) 'transparent)"
"(syntax-map"
"(syntax->list$1(cdr d_17))"
"(lambda(tail?_18 d_19) d_19)"
"(lambda(s_20 d_21)(loop_4 s_20(syntax-taint-mode-property s_20)))"
" #f)))"
" s_5"
" s_5)))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()(loop_4 s_5 'transparent)))))"
"(let-values()"
"(let-values(((c_22)(syntax-e$1 s_5)))"
"(let-values(((tmp_23)(core-form-sym c_22 phase_3)))"
"(if(if(equal? tmp_23 'begin)"
" #t"
"(if(equal? tmp_23 'begin-for-syntax)"
" #t"
"(if(equal? tmp_23 'module) #t(equal? tmp_23 '#%module-begin))))"
"(let-values()(loop_4 s_5 'transparent))"
"(if(if(equal? tmp_23 'define-values) #t(equal? tmp_23 'define-syntaxes))"
"(let-values()(loop_4 s_5 'transparent-binding))"
"(let-values()(loop_4 s_5 'opaque))))))))))))))"
" loop_4)"
" s_1"
"(syntax-taint-mode-property s_1))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_24)"
"(let-values(((or-part_25)(syntax-property$1 s_24 'taint-mode)))"
"(if or-part_25 or-part_25(syntax-property$1 s_24 'certify-mode)))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_26)(syntax-property-remove(syntax-property-remove s_26 'taint-mode) 'certify-mode)))"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(define-values(lifted/1.1)(void))"
"(define-values(lifted/2.1$8)(void))"
"(define-values(lifted/3.1)(void))"
"(define-values(lifted/4.1$1)(void))"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_1 phase_2 all-bindings?_3)"
"(let-values(((hts_4)"
"(alt-reverse"
"(let-values(((lst_6)(fallback->list(syntax-shifted-multi-scopes s_1))))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((smss_10)(unsafe-car lst_9)))"
"(if #t"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_14)"
"(if(identifier? s_1)"
"(hasheq"
" 'name"
"(syntax-e$1 s_1))"
" '#hasheq())))"
"(let-values(((s-scs_15)"
"(scope-set-at-fallback"
" s_1"
" smss_10"
" phase_2)))"
"(let-values(((context_16)"
"(scope-set->context"
" s-scs_15)))"
"(let-values(((context-ht_17)"
"(hash-set"
" init-ht_14"
" 'context"
" context_16)))"
"(let-values(((sym_18)"
"(syntax-e$1"
" s_1)))"
"(let-values(((bindings_19)"
"(if(identifier?"
" s_1)"
"(let-values()"
"(alt-reverse"
"(let-values(((ht_20)"
" s-scs_15))"
"(begin"
"(if((lambda(ht_21)"
"(if(hash?"
" ht_21)"
"(immutable?"
" ht_21)"
" #f))"
" ht_20)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_20)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_23"
" i_24)"
"(if i_24"
"(let-values(((sc_25)"
"(unsafe-immutable-hash-iterate-key"
" ht_20"
" i_24)))"
"(if #t"
"(let-values(((fold-var_26)"
"(let-values(((bindings_27)"
"(let-values(((bindings_28)"
"(let-values(((or-part_29)"
"(hash-ref"
"(scope-bindings"
" sc_25)"
" sym_18"
" #f)))"
"(if or-part_29"
" or-part_29"
" '#hash()))))"
"(let-values(((lst_30)"
"(scope-bulk-bindings"
" sc_25)))"
"(begin"
"(if(list?"
" lst_30)"
"(void)"
"(let-values()"
"(in-list"
" lst_30)))"
"((letrec-values(((for-loop_31)"
"(lambda(bindings_32"
" lst_33)"
"(if(pair?"
" lst_33)"
"(let-values(((bulk-at_34)"
"(unsafe-car"
" lst_33)))"
"(if #t"
"(let-values(((bindings_35)"
"(let-values(((bulk_36)"
"(bulk-binding-at-bulk"
" bulk-at_34)))"
"(begin"
" #t"
"((letrec-values(((for-loop_37)"
"(lambda(bindings_38)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((bindings_39)"
"(let-values(((syms_40)"
"(bulk-binding-symbols"
" bulk_36"
" s_1"
" null)))"
"(begin"
" #t"
"((letrec-values(((for-loop_41)"
"(lambda(bindings_42)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((bindings_43)"
"(let-values(((b-info_44)"
"(hash-ref"
" syms_40"
" sym_18"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_45)"
"(lambda(bindings_46)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((bindings_47)"
"(let-values(((bindings_48)"
" bindings_46))"
"(if(if b-info_44"
"(not"
"(hash-ref"
" bindings_48"
"(bulk-binding-at-scopes"
" bulk-at_34)"
" #f))"
" #f)"
"(let-values(((bindings_49)"
" bindings_48))"
"(let-values(((bindings_50)"
"(let-values()"
"(hash-set"
" bindings_49"
"(bulk-binding-at-scopes"
" bulk-at_34)"
"((bulk-binding-create"
" bulk_36)"
" bulk_36"
" b-info_44"
" sym_18)))))"
"(values"
" bindings_50)))"
" bindings_48))))"
"(if #f"
"(for-loop_45"
" bindings_47)"
" bindings_47))"
" bindings_46))"
" bindings_46))))"
" for-loop_45)"
" bindings_42)))))"
"(if #f"
"(for-loop_41"
" bindings_43)"
" bindings_43))"
" bindings_42))"
" bindings_42))))"
" for-loop_41)"
" bindings_38)))))"
"(if #f"
"(for-loop_37"
" bindings_39)"
" bindings_39))"
" bindings_38))"
" bindings_38))))"
" for-loop_37)"
" bindings_32)))))"
"(if #t"
"(for-loop_31"
" bindings_35"
"(unsafe-cdr"
" lst_33))"
" bindings_35))"
" bindings_32))"
" bindings_32))))"
" for-loop_31)"
" bindings_28"
" lst_30))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_51)"
"(lambda(fold-var_52)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_53)"
"(let-values(((ht_54)"
" bindings_27))"
"(begin"
"(if((lambda(ht_55)"
"(hash?"
" ht_55))"
" ht_54)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_54)))"
"((letrec-values(((for-loop_56)"
"(lambda(fold-var_57"
" i_58)"
"(if i_58"
"(let-values(((scs_59"
" b_60)"
"(hash-iterate-key+value"
" ht_54"
" i_58)))"
"(if #t"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62)"
" fold-var_57))"
"(if(let-values(((or-part_63)"
" all-bindings?_3))"
"(if or-part_63"
" or-part_63"
"(subset?$1"
" scs_59"
" s-scs_15)))"
"(let-values(((fold-var_64)"
" fold-var_62))"
"(let-values(((fold-var_65)"
"(let-values()"
"(cons"
"(let-values()"
"(hash"
" 'name"
"(syntax-e$1"
" s_1)"
" 'context"
"(scope-set->context"
" scs_59)"
" 'match?"
"(subset?$1"
" scs_59"
" s-scs_15)"
"(if(local-binding?"
" b_60)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_60)"
"(local-binding-key"
" b_60)"
"(vector"
"(module-binding-sym"
" b_60)"
"(module-binding-module"
" b_60)"
"(module-binding-phase"
" b_60)))))"
" fold-var_64))))"
"(values"
" fold-var_65)))"
" fold-var_62))))"
"(if #t"
"(for-loop_56"
" fold-var_61"
"(hash-iterate-next"
" ht_54"
" i_58))"
" fold-var_61))"
" fold-var_57))"
" fold-var_57))))"
" for-loop_56)"
" fold-var_52"
"(hash-iterate-first"
" ht_54))))))"
"(if #f"
"(for-loop_51"
" fold-var_53)"
" fold-var_53))"
" fold-var_52))"
" fold-var_52))))"
" for-loop_51)"
" fold-var_23)))))"
"(if #t"
"(for-loop_22"
" fold-var_26"
"(unsafe-immutable-hash-iterate-next"
" ht_20"
" i_24))"
" fold-var_26))"
" fold-var_23))"
" fold-var_23))))"
" for-loop_22)"
" null"
"(unsafe-immutable-hash-iterate-first"
" ht_20))))))"
"(let-values()"
" null))))"
"(if(null? bindings_19)"
" context-ht_17"
"(hash-set"
" context-ht_17"
" 'bindings"
" bindings_19)))))))))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(if #t(for-loop_7 fold-var_11(unsafe-cdr lst_9)) fold-var_11))"
" fold-var_8))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(let-values(((ht_5)(car hts_4)))(if(null?(cdr hts_4)) ht_5(hash-set ht_5 'fallbacks(cdr hts_4)))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_66)"
"(let-values(((...der/syntax/debug.rkt:66:2_67) sort9.1)"
"((temp1_68)"
"(alt-reverse"
"(let-values(((ht_71) scs_66))"
"(begin"
"(if((lambda(ht_72)(if(hash? ht_72)(immutable? ht_72) #f)) ht_71)"
"(void)"
"(let-values()(default-in-immutable-hash-keys ht_71)))"
"((letrec-values(((for-loop_73)"
"(lambda(fold-var_74 i_75)"
"(if i_75"
"(let-values(((sc_76)(unsafe-immutable-hash-iterate-key ht_71 i_75)))"
"(if #t"
"(let-values(((fold-var_77)"
"(let-values(((fold-var_78) fold-var_74))"
"(let-values(((fold-var_79)"
"(let-values()"
"(cons"
"(let-values()"
"(if(representative-scope? sc_76)"
"(vector"
"(scope-id sc_76)"
"(scope-kind sc_76)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_76)))"
"(vector"
"(scope-id sc_76)"
"(scope-kind sc_76))))"
" fold-var_78))))"
"(values fold-var_79)))))"
"(if #t"
"(for-loop_73"
" fold-var_77"
"(unsafe-immutable-hash-iterate-next ht_71 i_75))"
" fold-var_77))"
" fold-var_74))"
" fold-var_74))))"
" for-loop_73)"
" null"
"(unsafe-immutable-hash-iterate-first ht_71))))))"
"((<2_69) <)"
"((temp3_70)(lambda(v_80)(vector-ref v_80 0))))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f temp3_70 #t temp1_68 <2_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/syntax/debug.rkt:66:2_67"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list temp3_70)"
" temp1_68"
" <2_69)))))"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_1 ctx_2)"
"    (raise-syntax-error$1 #f \"identifier's binding is ambiguous\" id_1 #f null (syntax-debug-info-string id_1 ctx_2))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_3 ctx_4)"
"(let-values(((info_5)(syntax-debug-info$1 s_3(expand-context-phase ctx_4) #t)))"
"((letrec-values(((loop_6)"
"(lambda(info_7 layer_8)"
"(string-append"
"                           \"\\n  context\""
"(layer->string layer_8)"
"                           \"...:\""
"(describe-context(hash-ref info_7 'context))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((pos->vals_9 pos-next_10 init_11 pos-cont?_12 val-cont?_13 all-cont?_14)"
"(make-sequence '(b)(hash-ref info_7 'bindings null))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_15)"
"(lambda(fold-var_16 pos_17)"
"(if(if pos-cont?_12(pos-cont?_12 pos_17) #t)"
"(let-values(((b_18)(pos->vals_9 pos_17)))"
"(if(if val-cont?_13(val-cont?_13 b_18) #t)"
"(let-values(((fold-var_19)"
"(let-values(((fold-var_20) fold-var_16))"
"(let-values(((fold-var_21)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
"                                                                                               \"\\n  \""
"(if(hash-ref"
" b_18"
" 'match?"
" #f)"
"                                                                                                 \"matching\""
"                                                                                                 \"other\")"
"                                                                                               \" binding\""
"(layer->string layer_8)"
"                                                                                               \"...:\""
"                                                                                               \"\\n   \""
"(if(hash-ref"
" b_18"
" 'local"
" #f)"
"                                                                                                 \"local\""
"(format"
"                                                                                                  \"~a\""
"(hash-ref"
" b_18"
" 'module"
" #f)))"
"(describe-context"
"(hash-ref"
" b_18"
" 'context))))"
" fold-var_20))))"
"(values fold-var_21)))))"
"(if(if all-cont?_14(all-cont?_14 pos_17 b_18) #t)"
"(for-loop_15 fold-var_19(pos-next_10 pos_17))"
" fold-var_19))"
" fold-var_16))"
" fold-var_16))))"
" for-loop_15)"
" null"
" init_11)))))"
"(let-values(((fallbacks_22)(hash-ref info_7 'fallbacks null)))"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_23) fallbacks_22)((start_24)(add1 layer_8)))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(exact-nonnegative-integer? start_24)"
"(void)"
"(let-values()(in-naturals start_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26 lst_27 pos_28)"
"(if(if(pair? lst_27) #t #f)"
"(let-values(((fallback_29)(unsafe-car lst_27))"
"((layer_30) pos_28))"
"(if(if #t #t #f)"
"(let-values(((fold-var_31)"
"(let-values(((fold-var_32) fold-var_26))"
"(let-values(((fold-var_33)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_6"
" fallback_29"
" layer_30))"
" fold-var_32))))"
"(values fold-var_33)))))"
"(if(if #t #t #f)"
"(for-loop_25"
" fold-var_31"
"(unsafe-cdr lst_27)"
"(+ pos_28 1))"
" fold-var_31))"
" fold-var_26))"
" fold-var_26))))"
" for-loop_25)"
" null"
" lst_23"
" start_24))))))))))"
" loop_6)"
" info_5"
" 0))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_34)"
"(let-values(((strs_35)"
"((letrec-values(((loop_36)"
"(lambda(strs_37 scopes_38)"
"(if(null? scopes_38)"
"(let-values()(alt-reverse strs_37))"
"(let-values()"
"                                          (let-values (((str_39) (format \" ~a\" (car scopes_38))))"
"(if(if(pair? strs_37)"
"(<(+(string-length str_39)(string-length(car strs_37))) 72)"
" #f)"
"(loop_36"
"(cons(string-append(car strs_37) str_39)(cdr strs_37))"
"(cdr scopes_38))"
"(loop_36(cons str_39 strs_37)(cdr scopes_38)))))))))"
" loop_36)"
" null"
" scopes_34)))"
"(if(null? strs_35)"
"        (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(alt-reverse"
"(let-values(((lst_40) strs_35))"
"(begin"
"(if(list? lst_40)(void)(let-values()(in-list lst_40)))"
"((letrec-values(((for-loop_41)"
"(lambda(fold-var_42 lst_43)"
"(if(pair? lst_43)"
"(let-values(((str_44)(unsafe-car lst_43)))"
"(if #t"
"(let-values(((fold-var_45)"
"(let-values(((fold-var_46) fold-var_42))"
"(let-values(((fold-var_47)"
"(let-values()"
"(cons"
"                                                                           (let-values () (string-append \"\\n  \" str_44))"
" fold-var_46))))"
"(values fold-var_47)))))"
"(if #t(for-loop_41 fold-var_45(unsafe-cdr lst_43)) fold-var_45))"
" fold-var_42))"
" fold-var_42))))"
" for-loop_41)"
" null"
" lst_40))))))))))"
" (define-values (layer->string) (lambda (layer_48) (if (zero? layer_48) \"\" (format \" at layer ~a\" layer_48))))"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_1 sym_2 trigger-id_3 ctx_4)"
"(let-values(((phase_5)(expand-context-phase ctx_4)))"
"(let-values(((what_6)"
"(let-values(((tmp_8) sym_2))"
"(if(equal? tmp_8 '#%app)"
"                        (let-values () \"function application\")"
"(if(equal? tmp_8 '#%datum)"
"                          (let-values () \"literal data\")"
"(if(equal? tmp_8 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_4)"
"                                \"reference to a top-level identifier\""
"                                \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_7)"
"(if trigger-id_3"
"(not"
"(let-values(((trigger-id1_9) trigger-id_3)((phase2_10) phase_5))"
"(if(variable-reference-constant?(#%variable-reference resolve23.1))"
"(resolve21.1 #f #f #f #f #f #f trigger-id1_9 phase2_10)"
"(resolve23.1 trigger-id1_9 phase2_10))))"
" #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_7"
"              \"unbound identifier;\\n also, no ~a transformer is bound~a\""
"              (string-append what_6 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_2"
"(let-values(((tmp_11) phase_5))"
"(if(equal? tmp_11 0)"
"                (let-values () \"\")"
"(if(equal? tmp_11 1)"
"                  (let-values () \" in the transformer phase\")"
"                  (let-values () (format \" at phase ~a\" phase_5))))))"
"(if unbound?_7 trigger-id_3 #f)"
"(if(not unbound?_7) s_1 #f)"
" null"
"           (if unbound?_7 (syntax-debug-info-string trigger-id_3 ctx_4) \"\")))))))"
"(define-values(make-check-no-duplicate-table)(lambda() '#hasheq()))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_1 what2_2 ids5_3 phase6_4 s7_5 ht3_6 ht4_7)"
"(let-values(((ids_8) ids5_3))"
"(let-values(((phase_9) phase6_4))"
"(let-values(((s_10) s7_5))"
"(let-values(((ht_11)(if ht4_7 ht3_6(make-check-no-duplicate-table))))"
"            (let-values (((what_12) (if what2_2 what1_1 \"binding name\")))"
"(let-values()"
"((letrec-values(((loop_13)"
"(lambda(v_14 ht_15)"
"(if(identifier? v_14)"
"(let-values()"
"(let-values(((l_16)(hash-ref ht_15(syntax-e$1 v_14) null)))"
"(begin"
"(let-values(((lst_17) l_16))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 lst_20)"
"(if(pair? lst_20)"
"(let-values(((id_21)(unsafe-car lst_20)))"
"(if #t"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23)"
" fold-var_19))"
"(let-values(((fold-var_24)"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_21"
" v_14"
" phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                    \"duplicate \""
" what_12)"
" s_10"
" v_14))"
"(void)))"
"(void)))))"
"(values fold-var_24)))))"
"(if #t"
"(for-loop_18"
" fold-var_22"
"(unsafe-cdr lst_20))"
" fold-var_22))"
" fold-var_19))"
" fold-var_19))))"
" for-loop_18)"
"(void)"
" lst_17)))"
"(hash-set ht_15(syntax-e$1 v_14)(cons v_14 l_16)))))"
"(if(pair? v_14)"
"(let-values()(loop_13(cdr v_14)(loop_13(car v_14) ht_15)))"
"(let-values() ht_15))))))"
" loop_13)"
" ids_8"
" ht_11)))))))))"
"(define-values"
"(unpack9.1$2)"
"(lambda(given-kws_25 given-args_26 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)"
"(let-values(((what2_32)(pair? given-kws_25)))"
"(let-values(((what1_33)(if what2_32(car given-args_26)(void))))"
"(check-no-duplicate-ids8.1 what1_33 what2_32 ids5_27 phase6_28 s7_29 ht3_30 ht4_31)))))"
"(define-values"
"(check-no-duplicate-ids10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_34 given-argc_35)"
"(if(if(>= given-argc_35 5)(<= given-argc_35 6) #f)"
"(let-values(((l1_36) given-kws_34))"
"(let-values(((l1_37)(if(null? l1_36) l1_36(if(eq?(car l1_36) '#:what)(cdr l1_36) l1_36))))"
"(null? l1_37)))"
" #f))"
"(case-lambda"
"((given-kws_38 given-args_39 ids_40 phase_41 s_42)"
"(unpack9.1$2 given-kws_38 given-args_39 ids_40 phase_41 s_42 #f #f))"
"((given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48)"
"(unpack9.1$2 given-kws_43 given-args_44 ids_45 phase_46 s_47 ht3_48 #t)))"
" null"
" '(#:what)"
"(let-values(((check-no-duplicate-ids_49)"
"(case-lambda"
"((ids_50 phase_51 s_52)(unpack9.1$2 null null ids_50 phase_51 s_52 #f #f))"
"((ids_53 phase_54 s_55 ht3_56)(unpack9.1$2 null null ids_53 phase_54 s_55 ht3_56 #t)))))"
" check-no-duplicate-ids_49)))"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_1 ctx_2)"
"(let-values(((use-sites_3)(root-expand-context-use-site-scopes ctx_2)))"
"(if(if use-sites_3(pair?(unbox use-sites_3)) #f)"
"(if(syntax?$1 s_1)"
"(remove-scopes s_1(unbox use-sites_3))"
"(alt-reverse"
"(let-values(((lst_4) s_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(if #t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_8(unbox use-sites_3)))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if #t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4)))))"
" s_1))))"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'compile-context"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'compile-context)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'namespace)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'self)"
"(make-struct-field-accessor -ref_4 3 'module-self)"
"(make-struct-field-accessor -ref_4 4 'full-module-name)"
"(make-struct-field-accessor -ref_4 5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_4 6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_52"
" full-module-name12_53"
" lazy-syntax-literals?7_54"
" lazy-syntax-literals?13_55"
" module-self5_56"
" module-self11_57"
" namespace2_58"
" namespace8_59"
" phase3_60"
" phase9_61"
" self4_62"
" self10_63)"
"(let-values(((namespace_64)(if namespace8_59 namespace2_58(1/current-namespace))))"
"(let-values(((phase_65)(if phase9_61 phase3_60(namespace-phase namespace_64))))"
"(let-values(((self_66)(if self10_63 self4_62(namespace-mpi namespace_64))))"
"(let-values(((module-self_67)(if module-self11_57 module-self5_56 #f)))"
"(let-values(((full-module-name_68)(if full-module-name12_53 full-module-name6_52 #f)))"
"(let-values(((lazy-syntax-literals?_69)"
"(if lazy-syntax-literals?13_55 lazy-syntax-literals?7_54(if module-self_67 #t #f))))"
"(let-values()"
"(begin"
"(if(if module-self_67(not full-module-name_68) #f)"
"                      (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_64"
" phase_65"
" self_66"
" module-self_67"
" full-module-name_68"
" lazy-syntax-literals?_69"
" #f)))))))))))"
"(define-values"
"(unpack15.1)"
"(lambda(given-kws_70 given-args_71)"
"(let-values(((full-module-name12_72)(if(pair? given-kws_70)(eq? '#:full-module-name(car given-kws_70)) #f)))"
"(let-values(((full-module-name6_73)(if full-module-name12_72(car given-args_71)(void)))"
"((given-kws_74)(if full-module-name12_72(cdr given-kws_70) given-kws_70))"
"((given-args_75)(if full-module-name12_72(cdr given-args_71) given-args_71)))"
"(let-values(((lazy-syntax-literals?13_76)"
"(if(pair? given-kws_74)(eq? '#:lazy-syntax-literals?(car given-kws_74)) #f)))"
"(let-values(((lazy-syntax-literals?7_77)(if lazy-syntax-literals?13_76(car given-args_75)(void)))"
"((given-kws_78)(if lazy-syntax-literals?13_76(cdr given-kws_74) given-kws_74))"
"((given-args_79)(if lazy-syntax-literals?13_76(cdr given-args_75) given-args_75)))"
"(let-values(((module-self11_80)(if(pair? given-kws_78)(eq? '#:module-self(car given-kws_78)) #f)))"
"(let-values(((module-self5_81)(if module-self11_80(car given-args_79)(void)))"
"((given-kws_82)(if module-self11_80(cdr given-kws_78) given-kws_78))"
"((given-args_83)(if module-self11_80(cdr given-args_79) given-args_79)))"
"(let-values(((namespace8_84)(if(pair? given-kws_82)(eq? '#:namespace(car given-kws_82)) #f)))"
"(let-values(((namespace2_85)(if namespace8_84(car given-args_83)(void)))"
"((given-kws_86)(if namespace8_84(cdr given-kws_82) given-kws_82))"
"((given-args_87)(if namespace8_84(cdr given-args_83) given-args_83)))"
"(let-values(((phase9_88)(if(pair? given-kws_86)(eq? '#:phase(car given-kws_86)) #f)))"
"(let-values(((phase3_89)(if phase9_88(car given-args_87)(void)))"
"((given-kws_90)(if phase9_88(cdr given-kws_86) given-kws_86))"
"((given-args_91)(if phase9_88(cdr given-args_87) given-args_87)))"
"(let-values(((self10_92)(pair? given-kws_90)))"
"(let-values(((self4_93)(if self10_92(car given-args_91)(void))))"
"(make-compile-context14.1"
" full-module-name6_73"
" full-module-name12_72"
" lazy-syntax-literals?7_77"
" lazy-syntax-literals?13_76"
" module-self5_81"
" module-self11_80"
" namespace2_85"
" namespace8_84"
" phase3_89"
" phase9_88"
" self4_93"
" self10_92)))))))))))))))"
"(define-values"
"(make-compile-context16.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_94 given-argc_95)"
"(if(= given-argc_95 2)"
"(let-values(((l1_96) given-kws_94))"
"(let-values(((l1_97)(if(null? l1_96) l1_96(if(eq?(car l1_96) '#:full-module-name)(cdr l1_96) l1_96))))"
"(let-values(((l1_98) l1_97))"
"(let-values(((l1_99)"
"(if(null? l1_98) l1_98(if(eq?(car l1_98) '#:lazy-syntax-literals?)(cdr l1_98) l1_98))))"
"(let-values(((l1_100) l1_99))"
"(let-values(((l1_101)"
"(if(null? l1_100) l1_100(if(eq?(car l1_100) '#:module-self)(cdr l1_100) l1_100))))"
"(let-values(((l1_102) l1_101))"
"(let-values(((l1_103)"
"(if(null? l1_102) l1_102(if(eq?(car l1_102) '#:namespace)(cdr l1_102) l1_102))))"
"(let-values(((l1_104) l1_103))"
"(let-values(((l1_105)"
"(if(null? l1_104) l1_104(if(eq?(car l1_104) '#:phase)(cdr l1_104) l1_104))))"
"(let-values(((l1_106) l1_105))"
"(let-values(((l1_107)"
"(if(null? l1_106)"
" l1_106"
"(if(eq?(car l1_106) '#:self)(cdr l1_106) l1_106))))"
"(null? l1_107)))))))))))))"
" #f))"
"(case-lambda((given-kws_108 given-args_109)(unpack15.1 given-kws_108 given-args_109)))"
" null"
" '(#:full-module-name #:lazy-syntax-literals? #:module-self #:namespace #:phase #:self)"
"(let-values(((make-compile-context_110)(case-lambda(()(unpack15.1 null null))))) make-compile-context_110)))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values(make-module-path-index-table)(lambda()(make-hasheq)))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_1 mpi_2)"
"(if(not mpi_2)"
"(let-values() #f)"
"(if mpi_2"
"(let-values()"
"(let-values(((pos_3)"
"(let-values(((or-part_4)(hash-ref mpis_1 mpi_2 #f)))"
"(if or-part_4"
" or-part_4"
"(let-values(((pos_5)(hash-count mpis_1)))"
"(begin(hash-set! mpis_1 mpi_2 pos_5) pos_5))))))"
"(list 'vector-ref mpi-vector-id pos_3)))"
"(void)))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_6)"
"(let-values(((gen-order_7)(make-hasheqv)))"
"(let-values(((rev-mpis_8)"
"(let-values(((ht_12) mpis_6))"
"(begin"
"(if((lambda(ht_13)(hash? ht_13)) ht_12)(void)(let-values()(default-in-hash ht_12)))"
"((letrec-values(((for-loop_14)"
"(lambda(table_15 i_16)"
"(if i_16"
"(let-values(((k_17 v_18)(hash-iterate-key+value ht_12 i_16)))"
"(if #t"
"(let-values(((table_19)"
"(let-values(((table_20) table_15))"
"(let-values(((table_21)"
"(let-values()"
"(let-values(((key_22 val_23)"
"(let-values()"
"(values v_18 k_17))))"
"(hash-set"
" table_20"
" key_22"
" val_23)))))"
"(values table_21)))))"
"(if #t"
"(for-loop_14 table_19(hash-iterate-next ht_12 i_16))"
" table_19))"
" table_15))"
" table_15))))"
" for-loop_14)"
" '#hasheqv()"
"(hash-iterate-first ht_12))))))"
"(let-values((()"
"(begin"
"(let-values(((start_24) 0)((end_25)(hash-count rev-mpis_8))((inc_26) 1))"
"(begin"
"(if(if(real? start_24)(if(real? end_25)(real? inc_26) #f) #f)"
"(void)"
"(let-values()(in-range start_24 end_25 inc_26)))"
"((letrec-values(((for-loop_27)"
"(lambda(fold-var_28 pos_29)"
"(if(< pos_29 end_25)"
"(let-values(((i_30) pos_29))"
"(if #t"
"(let-values(((fold-var_31)"
"(let-values(((fold-var_32) fold-var_28))"
"(let-values(((fold-var_33)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_34)"
"(hash-ref"
" rev-mpis_8"
" i_30)))"
"((letrec-values(((loop_35)"
"(lambda(mpi_36)"
"(if(hash-ref"
" gen-order_7"
" mpi_36"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_37"
" base_38)"
"(1/module-path-index-split"
" mpi_36)))"
"(begin"
"(if base_38"
"(let-values()"
"(loop_35"
" base_38))"
"(void))"
"(hash-set!"
" gen-order_7"
" mpi_36"
"(hash-count"
" gen-order_7)))))))))"
" loop_35)"
" mpi_34)))"
"(void)))))"
"(values fold-var_33)))))"
"(if #t(for-loop_27 fold-var_31(+ pos_29 inc_26)) fold-var_31))"
" fold-var_28))"
" fold-var_28))))"
" for-loop_27)"
"(void)"
" start_24)))"
"(values))))"
"          (let-values (((mpi-id_9) (lambda (i_39) (string->symbol (format \"mpi~a\" i_39)))))"
"(let-values(((rev-gen-order_10)"
"(let-values(((ht_40) gen-order_7))"
"(begin"
"(if((lambda(ht_41)(hash? ht_41)) ht_40)(void)(let-values()(default-in-hash ht_40)))"
"((letrec-values(((for-loop_42)"
"(lambda(table_43 i_44)"
"(if i_44"
"(let-values(((k_45 v_46)(hash-iterate-key+value ht_40 i_44)))"
"(if #t"
"(let-values(((table_47)"
"(let-values(((table_48) table_43))"
"(let-values(((table_49)"
"(let-values()"
"(let-values(((key_50 val_51)"
"(let-values()"
"(values"
" v_46"
" k_45))))"
"(hash-set"
" table_48"
" key_50"
" val_51)))))"
"(values table_49)))))"
"(if #t"
"(for-loop_42 table_47(hash-iterate-next ht_40 i_44))"
" table_47))"
" table_43))"
" table_43))))"
" for-loop_42)"
" '#hasheqv()"
"(hash-iterate-first ht_40))))))"
"(let-values(((gens_11)"
"(alt-reverse"
"(let-values(((start_52) 0)((end_53)(hash-count gen-order_7))((inc_54) 1))"
"(begin"
"(if(if(real? start_52)(if(real? end_53)(real? inc_54) #f) #f)"
"(void)"
"(let-values()(in-range start_52 end_53 inc_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(fold-var_56 pos_57)"
"(if(< pos_57 end_53)"
"(let-values(((i_58) pos_57))"
"(if #t"
"(let-values(((fold-var_59)"
"(let-values(((fold-var_60) fold-var_56))"
"(let-values(((fold-var_61)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((mpi_62)"
"(hash-ref"
" rev-gen-order_10"
" i_58)))"
"(let-values(((path_63"
" base_64)"
"(1/module-path-index-split"
" mpi_62)))"
"(list"
"(list"
"(mpi-id_9 i_58))"
"(if(top-level-module-path-index?"
" mpi_62)"
"(let-values()"
" '(deserialize-module-path-index))"
"(if(not path_63)"
"(let-values()"
"(list"
" 'deserialize-module-path-index"
"(list"
" 'quote"
"(let-values(((or-part_65)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_62))))"
"(if or-part_65"
" or-part_65"
" 'self)))))"
"(let-values()"
"(list"
" 'deserialize-module-path-index"
"(list"
" 'quote"
" path_63)"
"(if base_64"
"(mpi-id_9"
"(hash-ref"
" gen-order_7"
" base_64))"
" #f)))))))))"
" fold-var_60))))"
"(values fold-var_61)))))"
"(if #t"
"(for-loop_55 fold-var_59(+ pos_57 inc_54))"
" fold-var_59))"
" fold-var_56))"
" fold-var_56))))"
" for-loop_55)"
" null"
" start_52))))))"
"(make-let*"
" gens_11"
"(list*"
" 'vector"
"(alt-reverse"
"(let-values(((start_66) 0)((end_67)(hash-count rev-mpis_8))((inc_68) 1))"
"(begin"
"(if(if(real? start_66)(if(real? end_67)(real? inc_68) #f) #f)"
"(void)"
"(let-values()(in-range start_66 end_67 inc_68)))"
"((letrec-values(((for-loop_69)"
"(lambda(fold-var_70 pos_71)"
"(if(< pos_71 end_67)"
"(let-values(((i_72) pos_71))"
"(if #t"
"(let-values(((fold-var_73)"
"(let-values(((fold-var_74) fold-var_70))"
"(let-values(((fold-var_75)"
"(let-values()"
"(cons"
"(let-values()"
"(mpi-id_9"
"(hash-ref"
" gen-order_7"
"(hash-ref rev-mpis_8 i_72))))"
" fold-var_74))))"
"(values fold-var_75)))))"
"(if #t(for-loop_69 fold-var_73(+ pos_71 inc_68)) fold-var_73))"
" fold-var_70))"
" fold-var_70))))"
" for-loop_69)"
" null"
" start_66))))))))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_76)"
"(let-values(((vec_77)(make-vector(hash-count mpis_76) #f)))"
"(begin"
"(let-values(((ht_78) mpis_76))"
"(begin"
"(if((lambda(ht_79)(hash? ht_79)) ht_78)(void)(let-values()(default-in-hash ht_78)))"
"((letrec-values(((for-loop_80)"
"(lambda(fold-var_81 i_82)"
"(if i_82"
"(let-values(((mpi_83 pos_84)(hash-iterate-key+value ht_78 i_82)))"
"(if #t"
"(let-values(((fold-var_85)"
"(let-values(((fold-var_86) fold-var_81))"
"(let-values(((fold-var_87)"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_77 pos_84 mpi_83))"
"(void)))))"
"(values fold-var_87)))))"
"(if #t(for-loop_80 fold-var_85(hash-iterate-next ht_78 i_82)) fold-var_85))"
" fold-var_81))"
" fold-var_81))))"
" for-loop_80)"
"(void)"
"(hash-iterate-first ht_78))))"
" vec_77))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_88)"
"(let-values(((seen_89)(make-hasheq)))"
"(let-values(((reachable-scopes_90)(seteq)))"
"(let-values(((scope-triggers_91)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_92)"
"(lambda(v_93)"
"(if(interned-literal? v_93)"
"(let-values()(void))"
"(if(hash-ref seen_89 v_93 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_89 v_93 #t)"
"(if(scope-with-bindings? v_93)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_90"
"(set-add reachable-scopes_90 v_93))"
"(values))))"
"(let-values((()(begin((reach-scopes-ref v_93) v_93 loop_92)(values))))"
"(let-values(((l_94)(hash-ref scope-triggers_91 v_93 null)))"
"(begin"
"(let-values(((lst_95) l_94))"
"(begin"
"(if(list? lst_95)(void)(let-values()(in-list lst_95)))"
"((letrec-values(((for-loop_96)"
"(lambda(fold-var_97 lst_98)"
"(if(pair? lst_98)"
"(let-values(((v_99)(unsafe-car lst_98)))"
"(if #t"
"(let-values(((fold-var_100)"
"(let-values(((fold-var_101)"
" fold-var_97))"
"(let-values(((fold-var_102)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_92"
" v_99))"
"(void)))))"
"(values"
" fold-var_102)))))"
"(if #t"
"(for-loop_96"
" fold-var_100"
"(unsafe-cdr lst_98))"
" fold-var_100))"
" fold-var_97))"
" fold-var_97))))"
" for-loop_96)"
"(void)"
" lst_95)))"
"((scope-with-bindings-ref v_93)"
" v_93"
" reachable-scopes_90"
" loop_92"
"(lambda(sc-unreachable_103 b_104)"
"(hash-update!"
" scope-triggers_91"
" sc-unreachable_103"
"(lambda(l_105)(cons b_104 l_105))"
" null))))))))"
"(if(reach-scopes? v_93)"
"(let-values()((reach-scopes-ref v_93) v_93 loop_92))"
"(if(pair? v_93)"
"(let-values()(begin(loop_92(car v_93))(loop_92(cdr v_93))))"
"(if(vector? v_93)"
"(let-values()"
"(let-values(((vec_106 len_107)"
"(let-values(((vec_108) v_93))"
"(begin"
"(if(vector? vec_108)"
"(void)"
"(let-values()(in-vector vec_108)))"
"(values vec_108(unsafe-vector-length vec_108))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_109)"
"(lambda(fold-var_110 pos_111)"
"(if(unsafe-fx< pos_111 len_107)"
"(let-values(((e_112)"
"(unsafe-vector-ref"
" vec_106"
" pos_111)))"
"(if #t"
"(let-values(((fold-var_113)"
"(let-values(((fold-var_114)"
" fold-var_110))"
"(let-values(((fold-var_115)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_92"
" e_112))"
"(void)))))"
"(values"
" fold-var_115)))))"
"(if #t"
"(for-loop_109"
" fold-var_113"
"(unsafe-fx+ 1 pos_111))"
" fold-var_113))"
" fold-var_110))"
" fold-var_110))))"
" for-loop_109)"
"(void)"
" 0))))"
"(if(box? v_93)"
"(let-values()(loop_92(unbox v_93)))"
"(if(hash? v_93)"
"(let-values()"
"(let-values(((ht_116) v_93))"
"(begin"
"(if((lambda(ht_117)(hash? ht_117)) ht_116)"
"(void)"
"(let-values()(default-in-hash ht_116)))"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 i_120)"
"(if i_120"
"(let-values(((k_121 v_122)"
"(hash-iterate-key+value"
" ht_116"
" i_120)))"
"(if #t"
"(let-values(((fold-var_123)"
"(let-values(((fold-var_124)"
" fold-var_119))"
"(let-values(((fold-var_125)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_92"
" k_121)"
"(loop_92"
" v_122)))"
"(void)))))"
"(values"
" fold-var_125)))))"
"(if #t"
"(for-loop_118"
" fold-var_123"
"(hash-iterate-next"
" ht_116"
" i_120))"
" fold-var_123))"
" fold-var_119))"
" fold-var_119))))"
" for-loop_118)"
"(void)"
"(hash-iterate-first ht_116)))))"
"(if(prefab-struct-key v_93)"
"(let-values()"
"(let-values(((v*_126 start*_127 stop*_128 step*_129)"
"(normalise-inputs"
" 'in-vector"
"                                                                       \"vector\""
"(lambda(x_130)(vector? x_130))"
"(lambda(x_131)(unsafe-vector-length x_131))"
"(struct->vector v_93)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_132)"
"(lambda(fold-var_133 idx_134)"
"(if(unsafe-fx< idx_134 stop*_128)"
"(let-values(((e_135)"
"(unsafe-vector-ref"
" v*_126"
" idx_134)))"
"(if #t"
"(let-values(((fold-var_136)"
"(let-values(((fold-var_137)"
" fold-var_133))"
"(let-values(((fold-var_138)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_92"
" e_135))"
"(void)))))"
"(values"
" fold-var_138)))))"
"(if #t"
"(for-loop_132"
" fold-var_136"
"(unsafe-fx+ idx_134 1))"
" fold-var_136))"
" fold-var_133))"
" fold-var_133))))"
" for-loop_132)"
"(void)"
" start*_127))))"
"(let-values()(void))))))))))))))))"
" loop_92)"
" v_88)"
" reachable-scopes_90))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_139)"
"(let-values(((or-part_140)(null? v_139)))"
"(if or-part_140"
" or-part_140"
"(let-values(((or-part_141)(boolean? v_139)))"
"(if or-part_141"
" or-part_141"
"(let-values(((or-part_142)"
"(if(fixnum? v_139)(if(< v_139(sub1(expt 2 30)))(> v_139(-(expt 2 30))) #f) #f)))"
"(if or-part_142"
" or-part_142"
"(let-values(((or-part_143)(if(symbol? v_139)(symbol-interned? v_139) #f)))"
"(if or-part_143"
" or-part_143"
"(let-values(((or-part_144)(char? v_139)))(if or-part_144 or-part_144(keyword? v_139)))))))))))))"
"(define-values"
"(generate-deserialize)"
"(lambda(v_145 mpis_146)"
"(let-values(((reachable-scopes_147)(find-reachable-scopes v_145)))"
"(let-values(((state_148)(make-serialize-state reachable-scopes_147 inspector-id)))"
"(let-values(((mutables_149)(make-hasheq)))"
"(let-values(((objs_150)(make-hasheq)))"
"(let-values(((obj-count_151) 0))"
"(let-values(((shares_152)(make-hasheq)))"
"                (let-values (((shared-id_153) (lambda (n_167) (string->symbol (format \"shared~a\" n_167)))))"
"                  (let-values (((mutable-id_154) (lambda (n_168) (string->symbol (format \"mutable~a\" n_168)))))"
"(let-values(((quoted?_155)(lambda(v_169)(if(pair? v_169)(eq? 'quote(car v_169)) #f))))"
"(let-values(((frontier_156) null))"
"(let-values(((add-frontier!_157)"
"(lambda(v_170)(set! frontier_156(cons v_170 frontier_156)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_171)"
"(lambda(v_172)"
"(begin"
"((letrec-values(((loop_173)"
"(lambda(v_174)"
"(if(let-values(((or-part_175)"
"(interned-literal?"
" v_174)))"
"(if or-part_175"
" or-part_175"
"(1/module-path-index?"
" v_174)))"
"(let-values()(void))"
"(if(hash-ref objs_150 v_174 #f)"
"(let-values()"
"(if(hash-ref"
" mutables_149"
" v_174"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_152"
" v_174"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!? v_174)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_149"
" v_174"
"(hash-count"
" mutables_149))"
"((serialize-fill!-ref"
" v_174)"
" #f"
" v_174"
" add-frontier!_157"
" state_148)))"
"(if(serialize? v_174)"
"(let-values()"
"((serialize-ref v_174)"
" v_174"
" loop_173"
" state_148))"
"(if(pair? v_174)"
"(let-values()"
"(begin"
"(loop_173"
"(car v_174))"
"(loop_173"
"(cdr v_174))))"
"(if(vector? v_174)"
"(let-values()"
"(if(let-values(((or-part_176)"
"(immutable?"
" v_174)))"
"(if or-part_176"
" or-part_176"
"(zero?"
"(vector-length"
" v_174))))"
"(let-values(((vec_177"
" len_178)"
"(let-values(((vec_179)"
" v_174))"
"(begin"
"(if(vector?"
" vec_179)"
"(void)"
"(let-values()"
"(in-vector"
" vec_179)))"
"(values"
" vec_179"
"(unsafe-vector-length"
" vec_179))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_180)"
"(lambda(fold-var_181"
" pos_182)"
"(if(unsafe-fx<"
" pos_182"
" len_178)"
"(let-values(((e_183)"
"(unsafe-vector-ref"
" vec_177"
" pos_182)))"
"(if #t"
"(let-values(((fold-var_184)"
"(let-values(((fold-var_185)"
" fold-var_181))"
"(let-values(((fold-var_186)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_173"
" e_183))"
"(void)))))"
"(values"
" fold-var_186)))))"
"(if #t"
"(for-loop_180"
" fold-var_184"
"(unsafe-fx+"
" 1"
" pos_182))"
" fold-var_184))"
" fold-var_181))"
" fold-var_181))))"
" for-loop_180)"
"(void)"
" 0)))"
"(begin"
"(hash-set!"
" mutables_149"
" v_174"
"(hash-count"
" mutables_149))"
"(let-values(((vec_187"
" len_188)"
"(let-values(((vec_189)"
" v_174))"
"(begin"
"(if(vector?"
" vec_189)"
"(void)"
"(let-values()"
"(in-vector"
" vec_189)))"
"(values"
" vec_189"
"(unsafe-vector-length"
" vec_189))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_190)"
"(lambda(fold-var_191"
" pos_192)"
"(if(unsafe-fx<"
" pos_192"
" len_188)"
"(let-values(((e_193)"
"(unsafe-vector-ref"
" vec_187"
" pos_192)))"
"(if #t"
"(let-values(((fold-var_194)"
"(let-values(((fold-var_195)"
" fold-var_191))"
"(let-values(((fold-var_196)"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_157"
" e_193))"
"(void)))))"
"(values"
" fold-var_196)))))"
"(if #t"
"(for-loop_190"
" fold-var_194"
"(unsafe-fx+"
" 1"
" pos_192))"
" fold-var_194))"
" fold-var_191))"
" fold-var_191))))"
" for-loop_190)"
"(void)"
" 0))))))"
"(if(box? v_174)"
"(let-values()"
"(if(immutable?"
" v_174)"
"(loop_173"
"(unbox"
" v_174))"
"(begin"
"(hash-set!"
" mutables_149"
" v_174"
"(hash-count"
" mutables_149))"
"(add-frontier!_157"
"(unbox"
" v_174)))))"
"(if(hash? v_174)"
"(let-values()"
"(if(immutable?"
" v_174)"
"(let-values(((ht_197)"
" v_174))"
"(begin"
"(if((lambda(ht_198)"
"(hash?"
" ht_198))"
" ht_197)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_197)))"
"((letrec-values(((for-loop_199)"
"(lambda(fold-var_200"
" i_201)"
"(if i_201"
"(let-values(((k_202"
" v_203)"
"(hash-iterate-key+value"
" ht_197"
" i_201)))"
"(if #t"
"(let-values(((fold-var_204)"
"(let-values(((fold-var_205)"
" fold-var_200))"
"(let-values(((fold-var_206)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_173"
" k_202)"
"(loop_173"
" v_203)))"
"(void)))))"
"(values"
" fold-var_206)))))"
"(if #t"
"(for-loop_199"
" fold-var_204"
"(hash-iterate-next"
" ht_197"
" i_201))"
" fold-var_204))"
" fold-var_200))"
" fold-var_200))))"
" for-loop_199)"
"(void)"
"(hash-iterate-first"
" ht_197))))"
"(begin"
"(hash-set!"
" mutables_149"
" v_174"
"(hash-count"
" mutables_149))"
"(let-values(((ht_207)"
" v_174))"
"(begin"
"(if((lambda(ht_208)"
"(hash?"
" ht_208))"
" ht_207)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_207)))"
"((letrec-values(((for-loop_209)"
"(lambda(fold-var_210"
" i_211)"
"(if i_211"
"(let-values(((k_212"
" v_213)"
"(hash-iterate-key+value"
" ht_207"
" i_211)))"
"(if #t"
"(let-values(((fold-var_214)"
"(let-values(((fold-var_215)"
" fold-var_210))"
"(let-values(((fold-var_216)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_157"
" k_212)"
"(add-frontier!_157"
" v_213)))"
"(void)))))"
"(values"
" fold-var_216)))))"
"(if #t"
"(for-loop_209"
" fold-var_214"
"(hash-iterate-next"
" ht_207"
" i_211))"
" fold-var_214))"
" fold-var_210))"
" fold-var_210))))"
" for-loop_209)"
"(void)"
"(hash-iterate-first"
" ht_207)))))))"
"(if(prefab-struct-key"
" v_174)"
"(let-values()"
"(let-values(((v*_217"
" start*_218"
" stop*_219"
" step*_220)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                           \"vector\""
"(lambda(x_221)"
"(vector?"
" x_221))"
"(lambda(x_222)"
"(unsafe-vector-length"
" x_222))"
"(struct->vector"
" v_174)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_223)"
"(lambda(fold-var_224"
" idx_225)"
"(if(unsafe-fx<"
" idx_225"
" stop*_219)"
"(let-values(((e_226)"
"(unsafe-vector-ref"
" v*_217"
" idx_225)))"
"(if #t"
"(let-values(((fold-var_227)"
"(let-values(((fold-var_228)"
" fold-var_224))"
"(let-values(((fold-var_229)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_173"
" e_226))"
"(void)))))"
"(values"
" fold-var_229)))))"
"(if #t"
"(for-loop_223"
" fold-var_227"
"(unsafe-fx+"
" idx_225"
" 1))"
" fold-var_227))"
" fold-var_224))"
" fold-var_224))))"
" for-loop_223)"
"(void)"
" start*_218))))"
"(if(srcloc?"
" v_174)"
"(let-values()"
"(let-values(((v*_230"
" start*_231"
" stop*_232"
" step*_233)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                             \"vector\""
"(lambda(x_234)"
"(vector?"
" x_234))"
"(lambda(x_235)"
"(unsafe-vector-length"
" x_235))"
"(struct->vector"
" v_174)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_236)"
"(lambda(fold-var_237"
" idx_238)"
"(if(unsafe-fx<"
" idx_238"
" stop*_232)"
"(let-values(((e_239)"
"(unsafe-vector-ref"
" v*_230"
" idx_238)))"
"(if #t"
"(let-values(((fold-var_240)"
"(let-values(((fold-var_241)"
" fold-var_237))"
"(let-values(((fold-var_242)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_173"
" e_239))"
"(void)))))"
"(values"
" fold-var_242)))))"
"(if #t"
"(for-loop_236"
" fold-var_240"
"(unsafe-fx+"
" idx_238"
" 1))"
" fold-var_240))"
" fold-var_237))"
" fold-var_237))))"
" for-loop_236)"
"(void)"
" start*_231))))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_150"
" v_174"
" obj-count_151)"
"(set! obj-count_151"
"(add1"
" obj-count_151)))))))))"
" loop_173)"
" v_172)"
"(if(null? frontier_156)"
"(void)"
"(let-values()"
"(let-values(((l_243) frontier_156))"
"(begin"
"(set! frontier_156 null)"
"(let-values(((lst_244) l_243))"
"(begin"
"(if(list? lst_244)"
"(void)"
"(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(fold-var_246"
" lst_247)"
"(if(pair? lst_247)"
"(let-values(((v_248)"
"(unsafe-car"
" lst_247)))"
"(if #t"
"(let-values(((fold-var_249)"
"(let-values(((fold-var_250)"
" fold-var_246))"
"(let-values(((fold-var_251)"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_171"
" v_248))"
"(void)))))"
"(values"
" fold-var_251)))))"
"(if #t"
"(for-loop_245"
" fold-var_249"
"(unsafe-cdr"
" lst_247))"
" fold-var_249))"
" fold-var_246))"
" fold-var_246))))"
" for-loop_245)"
"(void)"
" lst_244)))))))))))"
" frontier-loop_171)"
" v_145)"
"(values))))"
"(letrec-values(((ser_158)"
"(lambda(v_252)"
"(if(hash-ref shares_152 v_252 #f)"
"(let-values()(shared-id_153(hash-ref objs_150 v_252)))"
"(let-values(((c62743_253)(hash-ref mutables_149 v_252 #f)))"
"(if c62743_253"
"((lambda(n_254)(mutable-id_154 n_254)) c62743_253)"
"(let-values()(do-ser_159 v_252)))))))"
"((do-ser_159)"
"(lambda(v_255)"
"(if(1/module-path-index? v_255)"
"(let-values()(add-module-path-index! mpis_146 v_255))"
"(if(serialize? v_255)"
"(let-values()((serialize-ref v_255) v_255 ser_158 state_148))"
"(if(pair? v_255)"
"(let-values()"
"(let-values(((a_256)(ser_158(car v_255))))"
"(let-values(((d_257)(ser_158(cdr v_255))))"
"(if(if(quoted?_155 a_256)(quoted?_155 d_257) #f)"
"(let-values()(list 'quote v_255))"
"(if(if(pair? d_257)(eq? 'list(car d_257)) #f)"
"(let-values()(list* 'list a_256(cdr d_257)))"
"(if(if(pair? d_257)"
"(if(eq? 'quote(car d_257))"
"(eq? '()(cadr d_257))"
" #f)"
" #f)"
"(let-values()(list 'list a_256))"
"(let-values()(list 'cons a_256 d_257))))))))"
"(if(null? v_255)"
"(let-values() ''())"
"(if(box? v_255)"
"(let-values()"
"(let-values(((content_258)(ser_158(unbox v_255))))"
"(if(quoted?_155 content_258)"
"(list 'quote v_255)"
"(list 'box-immutable content_258))))"
"(if(vector? v_255)"
"(let-values()"
"(let-values(((content_259)"
"(alt-reverse"
"(let-values(((vec_260 len_261)"
"(let-values(((vec_262)"
" v_255))"
"(begin"
"(if(vector? vec_262)"
"(void)"
"(let-values()"
"(in-vector vec_262)))"
"(values"
" vec_262"
"(unsafe-vector-length"
" vec_262))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_263)"
"(lambda(fold-var_264"
" pos_265)"
"(if(unsafe-fx<"
" pos_265"
" len_261)"
"(let-values(((e_266)"
"(unsafe-vector-ref"
" vec_260"
" pos_265)))"
"(if #t"
"(let-values(((fold-var_267)"
"(let-values(((fold-var_268)"
" fold-var_264))"
"(let-values(((fold-var_269)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_158"
" e_266))"
" fold-var_268))))"
"(values"
" fold-var_269)))))"
"(if #t"
"(for-loop_263"
" fold-var_267"
"(unsafe-fx+"
" 1"
" pos_265))"
" fold-var_267))"
" fold-var_264))"
" fold-var_264))))"
" for-loop_263)"
" null"
" 0))))))"
"(if(andmap2 quoted?_155 content_259)"
"(list 'quote v_255)"
"(cons 'vector-immutable content_259))))"
"(if(hash? v_255)"
"(let-values()"
"(let-values(((k-content_270)"
"(alt-reverse"
"(let-values(((ht_272) v_255))"
"(begin"
"(if((lambda(ht_273)(hash? ht_273))"
" ht_272)"
"(void)"
"(let-values()"
"(default-in-hash-keys ht_272)))"
"((letrec-values(((for-loop_274)"
"(lambda(fold-var_275"
" i_276)"
"(if i_276"
"(let-values(((k_277)"
"(hash-iterate-key"
" ht_272"
" i_276)))"
"(if #t"
"(let-values(((fold-var_278)"
"(let-values(((fold-var_279)"
" fold-var_275))"
"(let-values(((fold-var_280)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_158"
" k_277))"
" fold-var_279))))"
"(values"
" fold-var_280)))))"
"(if #t"
"(for-loop_274"
" fold-var_278"
"(hash-iterate-next"
" ht_272"
" i_276))"
" fold-var_278))"
" fold-var_275))"
" fold-var_275))))"
" for-loop_274)"
" null"
"(hash-iterate-first ht_272)))))))"
"(let-values(((v-content_271)"
"(alt-reverse"
"(let-values(((ht_281) v_255))"
"(begin"
"(if((lambda(ht_282)"
"(hash? ht_282))"
" ht_281)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_281)))"
"((letrec-values(((for-loop_283)"
"(lambda(fold-var_284"
" i_285)"
"(if i_285"
"(let-values(((v_286)"
"(hash-iterate-value"
" ht_281"
" i_285)))"
"(if #t"
"(let-values(((fold-var_287)"
"(let-values(((fold-var_288)"
" fold-var_284))"
"(let-values(((fold-var_289)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_158"
" v_286))"
" fold-var_288))))"
"(values"
" fold-var_289)))))"
"(if #t"
"(for-loop_283"
" fold-var_287"
"(hash-iterate-next"
" ht_281"
" i_285))"
" fold-var_287))"
" fold-var_284))"
" fold-var_284))))"
" for-loop_283)"
" null"
"(hash-iterate-first ht_281)))))))"
"(if(if(andmap2 quoted?_155 k-content_270)"
"(andmap2 quoted?_155 v-content_271)"
" #f)"
"(list 'quote v_255)"
"(list*"
"(if(hash-eq? v_255)"
"(let-values() 'hasheq)"
"(if(hash-eqv? v_255)"
"(let-values() 'hasheqv)"
"(let-values() 'hash)))"
"((letrec-values(((loop_290)"
"(lambda(k-content_291"
" v-content_292)"
"(if(null? k-content_291)"
"(let-values() null)"
"(let-values()"
"(list*"
"(car k-content_291)"
"(car v-content_292)"
"(loop_290"
"(cdr k-content_291)"
"(cdr"
" v-content_292))))))))"
" loop_290)"
" k-content_270"
" v-content_271))))))"
"(let-values(((c62744_293)(prefab-struct-key v_255)))"
"(if c62744_293"
"((lambda(k_294)"
"(let-values(((content_295)"
"(alt-reverse"
"(let-values(((v*_296"
" start*_297"
" stop*_298"
" step*_299)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                  \"vector\""
"(lambda(x_300)"
"(vector? x_300))"
"(lambda(x_301)"
"(unsafe-vector-length"
" x_301))"
"(struct->vector v_255)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_302)"
"(lambda(fold-var_303"
" idx_304)"
"(if(unsafe-fx<"
" idx_304"
" stop*_298)"
"(let-values(((e_305)"
"(unsafe-vector-ref"
" v*_296"
" idx_304)))"
"(if #t"
"(let-values(((fold-var_306)"
"(let-values(((fold-var_307)"
" fold-var_303))"
"(let-values(((fold-var_308)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_158"
" e_305))"
" fold-var_307))))"
"(values"
" fold-var_308)))))"
"(if #t"
"(for-loop_302"
" fold-var_306"
"(unsafe-fx+"
" idx_304"
" 1))"
" fold-var_306))"
" fold-var_303))"
" fold-var_303))))"
" for-loop_302)"
" null"
" start*_297))))))"
"(if(andmap2 quoted?_155 content_295)"
"(list 'quote v_255)"
"(list*"
" 'make-prefab-struct"
"(list 'quote k_294)"
" content_295))))"
" c62744_293)"
"(if(srcloc? v_255)"
"(let-values()"
"(list*"
" 'srcloc"
"(alt-reverse"
"(let-values(((v*_309"
" start*_310"
" stop*_311"
" step*_312)"
"(normalise-inputs"
" 'in-vector"
"                                                                                      \"vector\""
"(lambda(x_313)(vector? x_313))"
"(lambda(x_314)"
"(unsafe-vector-length x_314))"
"(struct->vector v_255)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_315)"
"(lambda(fold-var_316"
" idx_317)"
"(if(unsafe-fx<"
" idx_317"
" stop*_311)"
"(let-values(((e_318)"
"(unsafe-vector-ref"
" v*_309"
" idx_317)))"
"(if #t"
"(let-values(((fold-var_319)"
"(let-values(((fold-var_320)"
" fold-var_316))"
"(let-values(((fold-var_321)"
"(let-values()"
"(cons"
"(let-values()"
"(ser_158"
" e_318))"
" fold-var_320))))"
"(values"
" fold-var_321)))))"
"(if #t"
"(for-loop_315"
" fold-var_319"
"(unsafe-fx+"
" idx_317"
" 1))"
" fold-var_319))"
" fold-var_316))"
" fold-var_316))))"
" for-loop_315)"
" null"
" start*_310))))))"
"(let-values()(list 'quote v_255)))))))))))))))"
"(let-values(((ser-shell_160)"
"(lambda(v_322)"
"(if(serialize-fill!? v_322)"
"(let-values()((serialize-ref v_322) v_322 ser_158 state_148))"
"(if(box? v_322)"
"(let-values() '(box #f))"
"(if(vector? v_322)"
"(let-values()(list* 'make-vector(vector-length v_322) '(#f)))"
"(if(hash? v_322)"
"(let-values()"
"(if(hash-eq? v_322)"
"(let-values() '(make-hasheq))"
"(if(hash-eqv? v_322)"
"(let-values() '(make-hasheqv))"
"(let-values() '(make-hash)))))"
"(let-values()"
"                                                        (error 'ser-shell \"unknown mutable: ~e\" v_322)))))))))"
"(let-values(((ser-shell-fill_161)"
"(lambda(id_323 v_324)"
"(if(serialize-fill!? v_324)"
"(let-values()"
"((serialize-fill!-ref v_324) id_323 v_324 ser_158 state_148))"
"(if(box? v_324)"
"(let-values()(list 'set-box! id_323(ser_158(unbox v_324))))"
"(if(vector? v_324)"
"(let-values()"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((vec_325 len_326)"
"(let-values(((vec_330) v_324))"
"(begin"
"(if(vector? vec_330)"
"(void)"
"(let-values()(in-vector vec_330)))"
"(values"
" vec_330"
"(unsafe-vector-length vec_330)))))"
"((start_327) 0)"
"((end_328)(vector-length v_324))"
"((inc_329) 1))"
"(begin"
" #f"
"(if(if(real? start_327)"
"(if(real? end_328)(real? inc_329) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_327 end_328 inc_329)))"
"((letrec-values(((for-loop_331)"
"(lambda(fold-var_332 pos_333 pos_334)"
"(if(if(unsafe-fx< pos_333 len_326)"
"(< pos_334 end_328)"
" #f)"
"(let-values(((v_335)"
"(unsafe-vector-ref"
" vec_325"
" pos_333))"
"((i_336) pos_334))"
"(if(if #t #t #f)"
"(let-values(((fold-var_337)"
"(let-values(((fold-var_338)"
" fold-var_332))"
"(let-values(((fold-var_339)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'vector-set!"
" id_323"
" i_336"
"(ser_158"
" v_335)))"
" fold-var_338))))"
"(values"
" fold-var_339)))))"
"(if(if #t #t #f)"
"(for-loop_331"
" fold-var_337"
"(unsafe-fx+ 1 pos_333)"
"(+ pos_334 inc_329))"
" fold-var_337))"
" fold-var_332))"
" fold-var_332))))"
" for-loop_331)"
" null"
" 0"
" start_327))))))"
"(if(hash? v_324)"
"(let-values()"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((ht_340) v_324))"
"(begin"
"(if((lambda(ht_341)(hash? ht_341)) ht_340)"
"(void)"
"(let-values()(default-in-hash ht_340)))"
"((letrec-values(((for-loop_342)"
"(lambda(fold-var_343 i_344)"
"(if i_344"
"(let-values(((k_345 v_346)"
"(hash-iterate-key+value"
" ht_340"
" i_344)))"
"(if #t"
"(let-values(((fold-var_347)"
"(let-values(((fold-var_348)"
" fold-var_343))"
"(let-values(((fold-var_349)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'hash-set!"
" id_323"
"(ser_158"
" k_345)"
"(ser_158"
" v_346)))"
" fold-var_348))))"
"(values"
" fold-var_349)))))"
"(if #t"
"(for-loop_342"
" fold-var_347"
"(hash-iterate-next"
" ht_340"
" i_344))"
" fold-var_347))"
" fold-var_343))"
" fold-var_343))))"
" for-loop_342)"
" null"
"(hash-iterate-first ht_340)))))))"
"(let-values()"
"                                                          (error 'ser-shell-fill \"unknown mutable: ~e\" v_324)))))))))"
"(let-values(((rev-mutables_162)"
"(let-values(((ht_350) mutables_149))"
"(begin"
"(if((lambda(ht_351)(hash? ht_351)) ht_350)"
"(void)"
"(let-values()(default-in-hash ht_350)))"
"((letrec-values(((for-loop_352)"
"(lambda(table_353 i_354)"
"(if i_354"
"(let-values(((k_355 v_356)"
"(hash-iterate-key+value"
" ht_350"
" i_354)))"
"(if #t"
"(let-values(((table_357)"
"(let-values(((table_358)"
" table_353))"
"(let-values(((table_359)"
"(let-values()"
"(let-values(((key_360"
" val_361)"
"(let-values()"
"(values"
" v_356"
" k_355))))"
"(hash-set"
" table_358"
" key_360"
" val_361)))))"
"(values table_359)))))"
"(if #t"
"(for-loop_352"
" table_357"
"(hash-iterate-next ht_350 i_354))"
" table_357))"
" table_353))"
" table_353))))"
" for-loop_352)"
" '#hasheqv()"
"(hash-iterate-first ht_350))))))"
"(let-values(((mutable-shell-bindings_163)"
"(alt-reverse"
"(let-values(((start_362) 0)"
"((end_363)(hash-count mutables_149))"
"((inc_364) 1))"
"(begin"
"(if(if(real? start_362)"
"(if(real? end_363)(real? inc_364) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_362 end_363 inc_364)))"
"((letrec-values(((for-loop_365)"
"(lambda(fold-var_366 pos_367)"
"(if(< pos_367 end_363)"
"(let-values(((i_368) pos_367))"
"(if #t"
"(let-values(((fold-var_369)"
"(let-values(((fold-var_370)"
" fold-var_366))"
"(let-values(((fold-var_371)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(list"
"(mutable-id_154"
" i_368))"
"(ser-shell_160"
"(hash-ref"
" rev-mutables_162"
" i_368))))"
" fold-var_370))))"
"(values"
" fold-var_371)))))"
"(if #t"
"(for-loop_365"
" fold-var_369"
"(+ pos_367 inc_364))"
" fold-var_369))"
" fold-var_366))"
" fold-var_366))))"
" for-loop_365)"
" null"
" start_362))))))"
"(let-values(((rev-shares_164)"
"(let-values(((ht_372) shares_152))"
"(begin"
"(if((lambda(ht_373)(hash? ht_373)) ht_372)"
"(void)"
"(let-values()(default-in-hash-keys ht_372)))"
"((letrec-values(((for-loop_374)"
"(lambda(table_375 i_376)"
"(if i_376"
"(let-values(((v_377)"
"(hash-iterate-key"
" ht_372"
" i_376)))"
"(if #t"
"(let-values(((table_378)"
"(let-values(((table_379)"
" table_375))"
"(let-values(((table_380)"
"(let-values()"
"(let-values(((key_381"
" val_382)"
"(let-values()"
"(values"
"(hash-ref"
" objs_150"
" v_377)"
" v_377))))"
"(hash-set"
" table_379"
" key_381"
" val_382)))))"
"(values"
" table_380)))))"
"(if #t"
"(for-loop_374"
" table_378"
"(hash-iterate-next ht_372 i_376))"
" table_378))"
" table_375))"
" table_375))))"
" for-loop_374)"
" '#hasheqv()"
"(hash-iterate-first ht_372))))))"
"(let-values(((shared-bindings_165)"
"(alt-reverse"
"(let-values(((start_383) 0)"
"((end_384) obj-count_151)"
"((inc_385) 1))"
"(begin"
"(if(if(real? start_383)"
"(if(real? end_384)(real? inc_385) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_383 end_384 inc_385)))"
"((letrec-values(((for-loop_386)"
"(lambda(fold-var_387 pos_388)"
"(if(< pos_388 end_384)"
"(let-values(((i_389) pos_388))"
"(if #t"
"(let-values(((fold-var_390)"
"(let-values(((fold-var_391)"
" fold-var_387))"
"(if(hash-ref"
" rev-shares_164"
" i_389"
" #f)"
"(let-values(((fold-var_392)"
" fold-var_391))"
"(let-values(((fold-var_393)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(list"
"(shared-id_153"
" i_389))"
"(do-ser_159"
"(hash-ref"
" rev-shares_164"
" i_389))))"
" fold-var_392))))"
"(values"
" fold-var_393)))"
" fold-var_391))))"
"(if #t"
"(for-loop_386"
" fold-var_390"
"(+ pos_388 inc_385))"
" fold-var_390))"
" fold-var_387))"
" fold-var_387))))"
" for-loop_386)"
" null"
" start_383))))))"
"(let-values(((mutable-fills_166)"
"(alt-reverse"
"(let-values(((start_394) 0)"
"((end_395)(hash-count mutables_149))"
"((inc_396) 1))"
"(begin"
"(if(if(real? start_394)"
"(if(real? end_395)(real? inc_396) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_394 end_395 inc_396)))"
"((letrec-values(((for-loop_397)"
"(lambda(fold-var_398 pos_399)"
"(if(< pos_399 end_395)"
"(let-values(((i_400) pos_399))"
"(if #t"
"(let-values(((fold-var_401)"
"(let-values(((fold-var_402)"
" fold-var_398))"
"(let-values(((fold-var_403)"
"(let-values()"
"(cons"
"(let-values()"
"(ser-shell-fill_161"
"(mutable-id_154"
" i_400)"
"(hash-ref"
" rev-mutables_162"
" i_400)))"
" fold-var_402))))"
"(values"
" fold-var_403)))))"
"(if #t"
"(for-loop_397"
" fold-var_401"
"(+ pos_399 inc_396))"
" fold-var_401))"
" fold-var_398))"
" fold-var_398))))"
" for-loop_397)"
" null"
" start_394))))))"
"(list"
" 'let-values"
" mutable-shell-bindings_163"
"(make-let*"
" shared-bindings_165"
"(list*"
" 'begin"
"(qq-append"
" mutable-fills_166"
"(list(ser_158 v_145))))))))))))))))))))))))))))"
"(define-values"
"(make-let*)"
"(lambda(bindings_404 body_405)"
"((letrec-values(((loop_406)"
"(lambda(vars_407 group_408 bindings_409)"
"(if(null? bindings_409)"
"(let-values()(list 'let-values(alt-reverse group_408) body_405))"
"(if(has-symbol?(cadar bindings_409) vars_407)"
"(let-values()"
"(list 'let-values(alt-reverse group_408)(loop_406 '#hasheq() null bindings_409)))"
"(let-values()"
"(loop_406"
"(hash-set vars_407(caaar bindings_409) #t)"
"(cons(car bindings_409) group_408)"
"(cdr bindings_409))))))))"
" loop_406)"
" '#hasheq()"
" null"
" bindings_404)))"
"(define-values"
"(has-symbol?)"
"(lambda(d_410 vars_411)"
"(let-values(((or-part_412)(if(symbol? d_410)(hash-ref vars_411 d_410 #f) #f)))"
"(if or-part_412"
" or-part_412"
"(if(pair? d_410)"
"(let-values(((or-part_413)(has-symbol?(car d_410) vars_411)))"
"(if or-part_413 or-part_413(has-symbol?(cdr d_410) vars_411)))"
" #f)))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_414 mpis_415)"
"(alt-reverse"
"(let-values(((lst_416) mus_414))"
"(begin"
"(if(list? lst_416)(void)(let-values()(in-list lst_416)))"
"((letrec-values(((for-loop_417)"
"(lambda(fold-var_418 lst_419)"
"(if(pair? lst_419)"
"(let-values(((mu_420)(unsafe-car lst_419)))"
"(if #t"
"(let-values(((fold-var_421)"
"(let-values(((fold-var_422) fold-var_418))"
"(let-values(((fold-var_423)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_415"
"(module-use-module mu_420))"
"(module-use-phase mu_420)))"
" fold-var_422))))"
"(values fold-var_423)))))"
"(if #t(for-loop_417 fold-var_421(unsafe-cdr lst_419)) fold-var_421))"
" fold-var_418))"
" fold-var_418))))"
" for-loop_417)"
" null"
" lst_416))))))"
"(define-values(deserialize-instance)(1/make-instance 'deserialize))"
"(define-values(deserialize-imports) null)"
"(define-values"
"(add!)"
"(lambda(sym_424 val_425)"
"(begin"
"(1/instance-set-variable-value! deserialize-instance sym_424 val_425)"
"(set! deserialize-imports(cons sym_424 deserialize-imports))"
"(register-built-in-symbol! sym_424))))"
"(call-with-values(lambda()(add! 'deserialize-module-path-index 1/deserialize-module-path-index)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-syntax 1/deserialize-syntax)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-scope 1/deserialize-scope)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-scope-fill! 1/deserialize-scope-fill!)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-multi-scope 1/deserialize-multi-scope)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-shifted-multi-scope 1/deserialize-shifted-multi-scope)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-representative-scope 1/deserialize-representative-scope)) print-values)"
"(call-with-values"
"(lambda()(add! 'deserialize-representative-scope-fill! 1/deserialize-representative-scope-fill!))"
" print-values)"
"(call-with-values(lambda()(add! 'deserialize-bulk-binding-at 1/deserialize-bulk-binding-at)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-full-module-binding 1/deserialize-full-module-binding)) print-values)"
"(call-with-values"
"(lambda()(add! 'deserialize-simple-module-binding 1/deserialize-simple-module-binding))"
" print-values)"
"(call-with-values(lambda()(add! 'deserialize-full-local-binding 1/deserialize-full-local-binding)) print-values)"
"(call-with-values(lambda()(add! 'deserialize-bulk-binding 1/deserialize-bulk-binding)) print-values)"
"(call-with-values(lambda()(add! 'syntax-module-path-index-shift 1/syntax-module-path-index-shift)) print-values)"
"(call-with-values(lambda()(add! 'syntax-shift-phase-level syntax-shift-phase-level$1)) print-values)"
"(call-with-values(lambda()(add! 'module-use module-use1.1)) print-values)"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-phase"
" compiled-in-memory-max-phase"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literalss"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 10"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_67 port_68 mode_69)(write(compiled-in-memory-linklet-directory cim_67) port_68))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'compiled-in-memory)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'linklet-directory)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'max-phase)"
"(make-struct-field-accessor -ref_4 3 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_4 4 'compile-time-inspector)"
"(make-struct-field-accessor -ref_4 5 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_4 6 'mpis)"
"(make-struct-field-accessor -ref_4 7 'syntax-literalss)"
"(make-struct-field-accessor -ref_4 8 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 9 'post-compiled-in-memorys))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_1 original-scopes-s_2 new-ns_3)"
"(let-values(((old-scs-post_4 old-scs-other_5)(decode-namespace-scopes original-scopes-s_2)))"
"(let-values(((new-scs-post_6 new-scs-other_7)(extract-namespace-scopes new-ns_3)))"
"(syntax-swap-scopes(syntax-swap-scopes s_1 old-scs-post_4 new-scs-post_6) old-scs-other_5 new-scs-other_7)))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_8)"
"(let-values(((root-ctx_9)(namespace-get-root-expand-ctx ns_8)))"
"(let-values(((post-expansion-sc_10)(root-expand-context-post-expansion-scope root-ctx_9)))"
"(values"
"(set post-expansion-sc_10)"
"(set-remove(list->set(root-expand-context-module-scopes root-ctx_9)) post-expansion-sc_10))))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_11)"
"(let-values(((post-expansion-scs_12 other-scs_13)(extract-namespace-scopes ns_11)))"
"(let-values(((post-expansion-s_14)(add-scopes(datum->syntax$2 #f 'post)(set->list post-expansion-scs_12))))"
"(let-values(((other-s_15)(add-scopes(datum->syntax$2 #f 'other)(set->list other-scs_13))))"
"(datum->syntax$2 #f(vector post-expansion-s_14 other-s_15)))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_16)"
"(let-values(((vec_17)(syntax-e$1 stx_16)))"
"(values(syntax-scope-set(vector-ref vec_17 0) 0)(syntax-scope-set(vector-ref vec_17 1) 0)))))"
"(define-values"
"(struct:header"
" header1.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" header-num-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!"
" set-header-num-syntax-literals!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'header #f 9 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_4 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_4 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_4 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_4 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_4 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_4 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_4 7 'syntax-literals)"
"(make-struct-field-accessor -ref_4 8 'num-syntax-literals)"
"(make-struct-field-mutator -set!_5 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_5 5 'require-vars-in-order)"
"(make-struct-field-mutator -set!_5 8 'num-syntax-literals))))"
"(define-values"
"(struct:variable-use variable-use2.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_62 make-_63 ?_64 -ref_65 -set!_66)"
"(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))"
"(values"
" struct:_62"
" make-_63"
" ?_64"
"(make-struct-field-accessor -ref_65 0 'module-use)"
"(make-struct-field-accessor -ref_65 1 'sym))))"
"(define-values"
"(make-header)"
"(lambda(mpis_88)"
"(header1.1 mpis_88(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq)(box null) 0)))"
"(define-values(make-variable-uses)(lambda()(make-hash)))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header_89 q_90)"
"(let-values(((pos_91)(header-num-syntax-literals header_89)))"
"(let-values((()(begin(set-header-num-syntax-literals! header_89(add1 pos_91))(values))))"
"(let-values(((b_92)(header-syntax-literals header_89)))"
"(begin(set-box! b_92(cons q_90(unbox b_92))) pos_91))))))"
"(define-values(empty-syntax-literals) '#&())"
"(define-values(header-empty-syntax-literals?)(lambda(header_93)(null?(unbox(header-syntax-literals header_93)))))"
"(define-values"
"(generate-lazy-syntax-literals!8.1)"
"(lambda(skip-deserialize?3_94 skip-deserialize?4_95 syntax-literals-boxes5_96 mpis6_97 self7_98)"
"(let-values(((syntax-literals-boxes_99) syntax-literals-boxes5_96))"
"(let-values(((mpis_100) mpis6_97))"
"(let-values(((self_101) self7_98))"
"(let-values(((skip-deserialize?_102)(if skip-deserialize?4_95 skip-deserialize?3_94 #f)))"
"(let-values()"
"(let-values(((syntax-literalss_103)(map2 unbox syntax-literals-boxes_99)))"
"(if(andmap2 null? syntax-literalss_103)"
"(let-values() null)"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list syntax-literalss-id)"
"(list*"
" 'vector"
"(alt-reverse"
"(let-values(((lst_104) syntax-literalss_103))"
"(begin"
"(if(list? lst_104)(void)(let-values()(in-list lst_104)))"
"((letrec-values(((for-loop_105)"
"(lambda(fold-var_106 lst_107)"
"(if(pair? lst_107)"
"(let-values(((syntax-literals_108)(unsafe-car lst_107)))"
"(if #t"
"(let-values(((fold-var_109)"
"(let-values(((fold-var_110) fold-var_106))"
"(let-values(((fold-var_111)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'make-vector"
"(length syntax-literals_108)"
" '(#f)))"
" fold-var_110))))"
"(values fold-var_111)))))"
"(if #t"
"(for-loop_105 fold-var_109(unsafe-cdr lst_107))"
" fold-var_109))"
" fold-var_106))"
" fold-var_106))))"
" for-loop_105)"
" null"
" lst_104))))))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(phase pos)"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_102"
" null"
"(list"
"(list"
" 'if"
"(list* 'vector-ref deserialized-syntax-id '(phase))"
" '(void)"
"(list"
" 'vector-copy!"
" deserialized-syntax-id"
" ''0"
"(generate-deserialize"
"(vector->immutable-vector"
"(list->vector"
"(map2"
" vector->immutable-vector"
"(map2 list->vector(map2 alt-reverse syntax-literalss_103)))))"
" mpis_100)))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'vector-ref(list* 'vector-ref deserialized-syntax-id '(phase)) '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_100 self_101)"
" self-id)))"
"(list*"
" 'begin"
"(list* 'vector-set!(list* 'vector-ref syntax-literalss-id '(phase)) '(pos stx))"
" '(stx)))))))))))))))))))"
"(define-values"
"(unpack9.1$1)"
"(lambda(given-kws_112 given-args_113 syntax-literals-boxes5_114 mpis6_115 self7_116)"
"(let-values(((skip-deserialize?4_117)(pair? given-kws_112)))"
"(let-values(((skip-deserialize?3_118)(if skip-deserialize?4_117(car given-args_113)(void))))"
"(generate-lazy-syntax-literals!8.1"
" skip-deserialize?3_118"
" skip-deserialize?4_117"
" syntax-literals-boxes5_114"
" mpis6_115"
" self7_116)))))"
"(define-values"
"(generate-lazy-syntax-literals!10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_119 given-argc_120)"
"(if(= given-argc_120 5)"
"(let-values(((l1_121) given-kws_119))"
"(let-values(((l1_122)"
"(if(null? l1_121) l1_121(if(eq?(car l1_121) '#:skip-deserialize?)(cdr l1_121) l1_121))))"
"(null? l1_122)))"
" #f))"
"(case-lambda"
"((given-kws_123 given-args_124 syntax-literals-boxes_125 mpis_126 self_127)"
"(unpack9.1$1 given-kws_123 given-args_124 syntax-literals-boxes_125 mpis_126 self_127)))"
" null"
" '(#:skip-deserialize?)"
"(let-values(((generate-lazy-syntax-literals!_128)"
"(case-lambda"
"((syntax-literals-boxes_129 mpis_130 self_131)"
"(unpack9.1$1 null null syntax-literals-boxes_129 mpis_130 self_131)))))"
" generate-lazy-syntax-literals!_128)))"
"(define-values"
"(generate-lazy-syntax-literal-lookup)"
"(lambda(phase_132 pos_133)"
"(list"
" 'let-values"
"(list(list '(stx)(generate-eager-syntax-literal-lookup phase_132 pos_133)))"
"(list 'if 'stx 'stx(list get-syntax-literal!-id(list 'quote phase_132)(list 'quote pos_133))))))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(syntax-literals-boxes_134 mpis_135 base-phase_136 self_137 ns_138)"
"(let-values(((syntax-literalss_139)(map2 unbox syntax-literals-boxes_134)))"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(generate-deserialize"
"(cons"
"(encode-namespace-scopes ns_138)"
"(append"
"(alt-reverse"
"(let-values(((start_140) 0)((end_141) base-phase_136)((inc_142) 1))"
"(begin"
"(if(if(real? start_140)(if(real? end_141)(real? inc_142) #f) #f)"
"(void)"
"(let-values()(in-range start_140 end_141 inc_142)))"
"((letrec-values(((for-loop_143)"
"(lambda(fold-var_144 pos_145)"
"(if(< pos_145 end_141)"
"(let-values(((i_146) pos_145))"
"(if #t"
"(let-values(((fold-var_147)"
"(let-values(((fold-var_148) fold-var_144))"
"(let-values(((fold-var_149)"
"(let-values()"
"(cons(let-values() null) fold-var_148))))"
"(values fold-var_149)))))"
"(if #t(for-loop_143 fold-var_147(+ pos_145 inc_142)) fold-var_147))"
" fold-var_144))"
" fold-var_144))))"
" for-loop_143)"
" null"
" start_140))))"
"(map2 alt-reverse syntax-literalss_139)))"
" mpis_135)))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stxs)"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_136 dest-phase-id))"
"(add-module-path-index! mpis_135 self_137)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '(stxs))))"
" '((cdr ns+stxss)))))))))"
"(define-values"
"(generate-eager-syntax-literal-lookup)"
"(lambda(phase_150 pos_151)"
"(list 'vector-ref(list 'vector-ref syntax-literalss-id(list 'quote phase_150))(list 'quote pos_151))))"
"(define-values"
"(syntax-literals-as-vectors)"
"(lambda(syntax-literals-boxes_152 base-phase_153)"
"(list->vector"
"(append"
"(alt-reverse"
"(let-values(((start_154) 0)((end_155) base-phase_153)((inc_156) 1))"
"(begin"
"(if(if(real? start_154)(if(real? end_155)(real? inc_156) #f) #f)"
"(void)"
"(let-values()(in-range start_154 end_155 inc_156)))"
"((letrec-values(((for-loop_157)"
"(lambda(fold-var_158 pos_159)"
"(if(< pos_159 end_155)"
"(let-values(((i_160) pos_159))"
"(if #t"
"(let-values(((fold-var_161)"
"(let-values(((fold-var_162) fold-var_158))"
"(let-values(((fold-var_163)"
"(let-values()"
"(cons(let-values() #f) fold-var_162))))"
"(values fold-var_163)))))"
"(if #t(for-loop_157 fold-var_161(+ pos_159 inc_156)) fold-var_161))"
" fold-var_158))"
" fold-var_158))))"
" for-loop_157)"
" null"
" start_154))))"
"(map2 list->vector(map2 alt-reverse(map2 unbox syntax-literals-boxes_152)))))))"
"(define-values(local-key->symbol)(lambda(key_164) key_164))"
"(define-values"
"(select-fresh)"
"(lambda(sym_165 header_166)"
"(if(symbol-conflicts? sym_165 header_166)"
"((letrec-values(((loop_167)"
"(lambda(pos_168)"
"                          (let-values (((new-sym_169) (string->symbol (format \"~a/~a\" pos_168 sym_165))))"
"(if(symbol-conflicts? new-sym_169 header_166)(loop_167(add1 pos_168)) new-sym_169)))))"
" loop_167)"
" 1)"
" sym_165)))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_170 header_171)"
"(let-values(((or-part_172)(built-in-symbol? sym_170)))"
"(if or-part_172 or-part_172(hash-ref(header-define-and-import-syms header_171) sym_170 #f)))))"
"(define-values"
"(register-required-variable-use!18.1)"
"(lambda(defined?11_173 defined?12_174 header13_175 mpi14_176 phase15_177 sym16_178 extra-inspector17_179)"
"(let-values(((header_180) header13_175))"
"(let-values(((mpi_181) mpi14_176))"
"(let-values(((phase_182) phase15_177))"
"(let-values(((sym_183) sym16_178))"
"(let-values(((extra-inspector_184) extra-inspector17_179))"
"(let-values(((defined?_185)(if defined?12_174 defined?11_173 #f)))"
"(let-values()"
"(let-values(((key_186)(variable-use2.1(module-use1.1 mpi_181 phase_182) sym_183)))"
"(let-values(((variable-uses_187)(header-require-var-to-import-sym header_180)))"
"(let-values(((var-sym_188)"
"(let-values(((or-part_189)(hash-ref variable-uses_187 key_186 #f)))"
"(if or-part_189"
" or-part_189"
"(let-values(((sym_190)(select-fresh(variable-use-sym key_186) header_180)))"
"(begin"
"(hash-set! variable-uses_187 key_186 sym_190)"
"(set-header-require-vars-in-order!"
" header_180"
"(cons key_186(header-require-vars-in-order header_180)))"
"(hash-set!"
"(header-define-and-import-syms header_180)"
" sym_190"
"(if defined?_185 'defined 'required))"
" sym_190))))))"
"(begin"
"(if extra-inspector_184"
"(let-values()"
"(let-values(((extra-inspectors_191)(header-import-sym-to-extra-inspectors header_180)))"
"(hash-update!"
" extra-inspectors_191"
" var-sym_188"
"(lambda(s_192)(set-add s_192 extra-inspector_184))"
" '#hasheq())))"
"(void))"
" var-sym_188)))))))))))))"
"(define-values"
"(unpack19.1$1)"
"(lambda(given-kws_193 given-args_194 header13_195 mpi14_196 phase15_197 sym16_198 extra-inspector17_199)"
"(let-values(((defined?12_200)(pair? given-kws_193)))"
"(let-values(((defined?11_201)(if defined?12_200(car given-args_194)(void))))"
"(register-required-variable-use!18.1"
" defined?11_201"
" defined?12_200"
" header13_195"
" mpi14_196"
" phase15_197"
" sym16_198"
" extra-inspector17_199)))))"
"(define-values"
"(register-required-variable-use!20.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_202 given-argc_203)"
"(if(= given-argc_203 7)"
"(let-values(((l1_204) given-kws_202))"
"(let-values(((l1_205)(if(null? l1_204) l1_204(if(eq?(car l1_204) '#:defined?)(cdr l1_204) l1_204))))"
"(null? l1_205)))"
" #f))"
"(case-lambda"
"((given-kws_206 given-args_207 header_208 mpi_209 phase_210 sym_211 extra-inspector_212)"
"(unpack19.1$1 given-kws_206 given-args_207 header_208 mpi_209 phase_210 sym_211 extra-inspector_212)))"
" null"
" '(#:defined?)"
"(let-values(((register-required-variable-use!_213)"
"(case-lambda"
"((header_214 mpi_215 phase_216 sym_217 extra-inspector_218)"
"(unpack19.1$1 null null header_214 mpi_215 phase_216 sym_217 extra-inspector_218)))))"
" register-required-variable-use!_213)))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_219 def-sym_220)(hash-set!(header-define-and-import-syms header_219) def-sym_220 'defined)))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_221 var-sym_222)"
"(eq? 'required(hash-ref(header-define-and-import-syms header_221) var-sym_222 #f))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_223 phase_224 cctx_225)"
"(let-values(((mod-use-to-link-sym_226)"
"(let-values(((lst_228)(header-require-vars-in-order header_223)))"
"(begin"
"(if(list? lst_228)(void)(let-values()(in-list lst_228)))"
"((letrec-values(((for-loop_229)"
"(lambda(ht_230 lst_231)"
"(if(pair? lst_231)"
"(let-values(((vu_232)(unsafe-car lst_231)))"
"(if #t"
"(let-values(((ht_233)"
"(let-values(((ht_234) ht_230))"
"(let-values(((ht_235)"
"(let-values()"
"(let-values(((mu_236)"
"(variable-use-module-use"
" vu_232)))"
"(if(let-values(((or-part_237)"
"(hash-ref"
" ht_234"
" mu_236"
" #f)))"
"(if or-part_237"
" or-part_237"
"(eq?"
"(module-use-module mu_236)"
"(compile-context-self"
" cctx_225))))"
" ht_234"
"(hash-set"
" ht_234"
" mu_236"
"(string->symbol"
"(format"
"                                                                                       \"~a_~a_~a\""
"(extract-name"
"(module-use-module mu_236))"
"(module-use-phase mu_236)"
"(hash-count ht_234)))))))))"
"(values ht_235)))))"
"(if #t(for-loop_229 ht_233(unsafe-cdr lst_231)) ht_233))"
" ht_230))"
" ht_230))))"
" for-loop_229)"
" '#hash()"
" lst_228)))))"
"(let-values(((link-mod-uses_227)(hash-keys mod-use-to-link-sym_226)))"
"(values"
" link-mod-uses_227"
"(alt-reverse"
"(let-values(((lst_238) link-mod-uses_227))"
"(begin"
"(if(list? lst_238)(void)(let-values()(in-list lst_238)))"
"((letrec-values(((for-loop_239)"
"(lambda(fold-var_240 lst_241)"
"(if(pair? lst_241)"
"(let-values(((mu_242)(unsafe-car lst_241)))"
"(if #t"
"(let-values(((fold-var_243)"
"(let-values(((fold-var_244) fold-var_240))"
"(let-values(((fold-var_245)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_246)"
"(header-require-vars-in-order"
" header_223)))"
"(begin"
"(if(list? lst_246)"
"(void)"
"(let-values()(in-list lst_246)))"
"((letrec-values(((for-loop_247)"
"(lambda(fold-var_248"
" lst_249)"
"(if(pair? lst_249)"
"(let-values(((vu_250)"
"(unsafe-car"
" lst_249)))"
"(if #t"
"(let-values(((fold-var_251)"
"(let-values(((fold-var_252)"
" fold-var_248))"
"(if(equal?"
" mu_242"
"(variable-use-module-use"
" vu_250))"
"(let-values(((fold-var_253)"
" fold-var_252))"
"(let-values(((fold-var_254)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_255)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_223)"
" vu_250)))"
"(list"
"(variable-use-sym"
" vu_250)"
" var-sym_255)))"
" fold-var_253))))"
"(values"
" fold-var_254)))"
" fold-var_252))))"
"(if #t"
"(for-loop_247"
" fold-var_251"
"(unsafe-cdr"
" lst_249))"
" fold-var_251))"
" fold-var_248))"
" fold-var_248))))"
" for-loop_247)"
" null"
" lst_246)))))"
" fold-var_244))))"
"(values fold-var_245)))))"
"(if #t(for-loop_239 fold-var_243(unsafe-cdr lst_241)) fold-var_243))"
" fold-var_240))"
" fold-var_240))))"
" for-loop_239)"
" null"
" lst_238))))"
"(alt-reverse"
"(let-values(((lst_256) link-mod-uses_227))"
"(begin"
"(if(list? lst_256)(void)(let-values()(in-list lst_256)))"
"((letrec-values(((for-loop_257)"
"(lambda(fold-var_258 lst_259)"
"(if(pair? lst_259)"
"(let-values(((mu_260)(unsafe-car lst_259)))"
"(if #t"
"(let-values(((fold-var_261)"
"(let-values(((fold-var_262) fold-var_258))"
"(let-values(((fold-var_263)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_264)"
"(alt-reverse"
"(let-values(((lst_265)"
"(header-require-vars-in-order"
" header_223)))"
"(begin"
"(if(list? lst_265)"
"(void)"
"(let-values()"
"(in-list lst_265)))"
"((letrec-values(((for-loop_266)"
"(lambda(fold-var_267"
" lst_268)"
"(if(pair?"
" lst_268)"
"(let-values(((vu_269)"
"(unsafe-car"
" lst_268)))"
"(if #t"
"(let-values(((fold-var_270)"
"(let-values(((fold-var_271)"
" fold-var_267))"
"(if(equal?"
" mu_260"
"(variable-use-module-use"
" vu_269))"
"(let-values(((fold-var_272)"
" fold-var_271))"
"(let-values(((fold-var_273)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_274)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_223)"
" vu_269)))"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_223)"
" var-sym_274"
" #f)))"
" fold-var_272))))"
"(values"
" fold-var_273)))"
" fold-var_271))))"
"(if #t"
"(for-loop_266"
" fold-var_270"
"(unsafe-cdr"
" lst_268))"
" fold-var_270))"
" fold-var_267))"
" fold-var_267))))"
" for-loop_266)"
" null"
" lst_265))))))"
"(if(ormap2 values extra-inspectorss_264)"
" extra-inspectorss_264"
" #f)))"
" fold-var_262))))"
"(values fold-var_263)))))"
"(if #t(for-loop_257 fold-var_261(unsafe-cdr lst_259)) fold-var_261))"
" fold-var_258))"
" fold-var_258))))"
" for-loop_257)"
" null"
" lst_256))))"
"(alt-reverse"
"(let-values(((lst_275)(header-require-vars-in-order header_223)))"
"(begin"
"(if(list? lst_275)(void)(let-values()(in-list lst_275)))"
"((letrec-values(((for-loop_276)"
"(lambda(fold-var_277 lst_278)"
"(if(pair? lst_278)"
"(let-values(((vu_279)(unsafe-car lst_278)))"
"(if #t"
"(let-values(((fold-var_280)"
"(let-values(((fold-var_281) fold-var_277))"
"(if(eq?"
"(module-use-module(variable-use-module-use vu_279))"
"(compile-context-self cctx_225))"
"(let-values(((fold-var_282) fold-var_281))"
"(let-values(((fold-var_283)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_284)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_223)"
" vu_279)))"
"(list"
" var-sym_284"
"(variable-use-sym vu_279))))"
" fold-var_282))))"
"(values fold-var_283)))"
" fold-var_281))))"
"(if #t(for-loop_276 fold-var_280(unsafe-cdr lst_278)) fold-var_280))"
" fold-var_277))"
" fold-var_277))))"
" for-loop_276)"
" null"
" lst_275)))))))))"
"(define-values"
"(extract-name)"
"(lambda(mpi_285)"
"(let-values(((p_286 base_287)(1/module-path-index-split mpi_285)))"
"(if(symbol? p_286)"
"(let-values() p_286)"
"(if(path? p_286)"
"(let-values()"
"            (let-values (((base_288 name_289 dir?_290) (split-path p_286))) (path-replace-extension name_289 #\"\")))"
"(if(string? p_286)"
"            (let-values () (path-replace-extension p_286 #\"\"))"
"(if(if(pair? p_286)(eq?(car p_286) 'quote) #f)"
"(let-values()(cadr p_286))"
"(if(if(pair? p_286)(eq?(car p_286) 'file) #f)"
"(let-values()"
"(let-values(((base_291 name_292 dir?_293)(split-path(cadr p_286))))"
"                    (path-replace-extension name_292 #\"\")))"
"(if(if(pair? p_286)(eq?(car p_286) 'lib) #f)"
"                  (let-values () (path-replace-extension (cadr p_286) #\"\"))"
"(let-values() 'module))))))))))"
"(define-values"
"(instance-imports)"
"(list"
"(list 'namespace ns-id)"
"(list 'phase-shift phase-shift-id)"
"(list 'self self-id)"
"(list 'bulk-binding-registry bulk-binding-registry-id)"
"(list 'inspector inspector-id)"
"(list 'set-transformer! set-transformer!-id)))"
"(define-values"
"(lifted/1.1$15)"
"(make-required 'make-instance-instance(case-lambda((self_2)(apply missing-kw self_2 null))) #f #f))"
"(define-values"
"(make-instance-instance15.1)"
"(lambda(bulk-binding-registry4_3"
" inspector5_4"
" namespace1_5"
" phase-shift2_6"
" record-root-context!7_7"
" record-root-context!14_8"
" self3_9"
" set-transformer!6_10)"
"(let-values(((ns_11) namespace1_5))"
"(let-values(((phase-shift_12) phase-shift2_6))"
"(let-values(((self_13) self3_9))"
"(let-values(((bulk-binding-registry_14) bulk-binding-registry4_3))"
"(let-values(((inspector_15) inspector5_4))"
"(let-values(((set-transformer!_16) set-transformer!6_10))"
"(let-values(((record-root-context!_17)(if record-root-context!14_8 record-root-context!7_7 #f)))"
"(let-values()"
"(let-values(((i_18)(1/make-instance 'instance)))"
"(begin"
"(1/instance-set-variable-value! i_18 'namespace ns_11)"
"(1/instance-set-variable-value! i_18 'phase-shift phase-shift_12)"
"(1/instance-set-variable-value! i_18 'self self_13)"
"(1/instance-set-variable-value! i_18 'bulk-binding-registry bulk-binding-registry_14)"
"(1/instance-set-variable-value! i_18 'inspector inspector_15)"
"(1/instance-set-variable-value! i_18 'set-transformer! set-transformer!_16)"
"(if record-root-context!_17"
"(let-values()"
"(1/instance-set-variable-value! i_18 'record-root-context! record-root-context!_17))"
"(void))"
" i_18))))))))))))"
"(define-values"
"(unpack16.1$1)"
"(lambda(given-kws_19 given-args_20)"
"(let-values(((bulk-binding-registry4_21)(car given-args_20))"
"((given-kws_22)(cdr given-kws_19))"
"((given-args_23)(cdr given-args_20)))"
"(let-values(((inspector5_24)(car given-args_23))"
"((given-kws_25)(cdr given-kws_22))"
"((given-args_26)(cdr given-args_23)))"
"(let-values(((namespace1_27)(car given-args_26))"
"((given-kws_28)(cdr given-kws_25))"
"((given-args_29)(cdr given-args_26)))"
"(let-values(((phase-shift2_30)(car given-args_29))"
"((given-kws_31)(cdr given-kws_28))"
"((given-args_32)(cdr given-args_29)))"
"(let-values(((record-root-context!14_33)"
"(if(pair? given-kws_31)(eq? '#:record-root-context!(car given-kws_31)) #f)))"
"(let-values(((record-root-context!7_34)(if record-root-context!14_33(car given-args_32)(void)))"
"((given-kws_35)(if record-root-context!14_33(cdr given-kws_31) given-kws_31))"
"((given-args_36)(if record-root-context!14_33(cdr given-args_32) given-args_32)))"
"(let-values(((self3_37)(car given-args_36))"
"((given-kws_38)(cdr given-kws_35))"
"((given-args_39)(cdr given-args_36)))"
"(let-values(((set-transformer!6_40)(car given-args_39)))"
"(make-instance-instance15.1"
" bulk-binding-registry4_21"
" inspector5_24"
" namespace1_27"
" phase-shift2_30"
" record-root-context!7_34"
" record-root-context!14_33"
" self3_37"
" set-transformer!6_40)))))))))))"
"(define-values"
"(make-instance-instance17.1)"
"(lifted/1.1$15"
"(lambda(given-kws_41 given-argc_42)"
"(if(= given-argc_42 2)"
"(subsets?"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" given-kws_41"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:record-root-context!"
" #:self"
" #:set-transformer!))"
" #f))"
"(case-lambda((given-kws_43 given-args_44)(unpack16.1$1 given-kws_43 given-args_44)))"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:record-root-context! #:self #:set-transformer!)))"
"(define-values"
"(eager-instance-imports)"
"(list*"
"(list 'namespace ns-id)"
"(list 'dest-phase dest-phase-id)"
"(list 'self self-id)"
"(list 'bulk-binding-registry bulk-binding-registry-id)"
"(list 'inspector inspector-id)"
" '(swap-top-level-scopes)))"
"(define-values"
"(lifted/1.1$12)"
"(make-required 'make-eager-instance-instance(case-lambda((self_2)(apply missing-kw self_2 null))) #f #f))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_3 dest-phase2_4 inspector5_5 namespace1_6 self3_7)"
"(let-values(((ns_8) namespace1_6))"
"(let-values(((dest-phase_9) dest-phase2_4))"
"(let-values(((self_10) self3_7))"
"(let-values(((bulk-binding-registry_11) bulk-binding-registry4_3))"
"(let-values(((inspector_12) inspector5_5))"
"(let-values()"
"(let-values(((i_13)(1/make-instance 'instance)))"
"(begin"
"(1/instance-set-variable-value! i_13 'namespace ns_8)"
"(1/instance-set-variable-value! i_13 'dest-phase dest-phase_9)"
"(1/instance-set-variable-value! i_13 'self self_10)"
"(1/instance-set-variable-value! i_13 'bulk-binding-registry bulk-binding-registry_11)"
"(1/instance-set-variable-value! i_13 'inspector inspector_12)"
"(1/instance-set-variable-value! i_13 'swap-top-level-scopes swap-top-level-scopes)"
" i_13))))))))))"
"(define-values"
"(unpack12.1)"
"(lambda(given-kws_14 given-args_15)"
"(let-values(((bulk-binding-registry4_16)(car given-args_15))"
"((given-kws_17)(cdr given-kws_14))"
"((given-args_18)(cdr given-args_15)))"
"(let-values(((dest-phase2_19)(car given-args_18))"
"((given-kws_20)(cdr given-kws_17))"
"((given-args_21)(cdr given-args_18)))"
"(let-values(((inspector5_22)(car given-args_21))"
"((given-kws_23)(cdr given-kws_20))"
"((given-args_24)(cdr given-args_21)))"
"(let-values(((namespace1_25)(car given-args_24))"
"((given-kws_26)(cdr given-kws_23))"
"((given-args_27)(cdr given-args_24)))"
"(let-values(((self3_28)(car given-args_27)))"
"(make-eager-instance-instance11.1"
" bulk-binding-registry4_16"
" dest-phase2_19"
" inspector5_22"
" namespace1_25"
" self3_28))))))))"
"(define-values"
"(make-eager-instance-instance13.1)"
"(lifted/1.1$12"
"(lambda(given-kws_29 given-argc_30)"
"(if(= given-argc_30 2)"
"(let-values(((l2_31) given-kws_29))"
"(if(pair? l2_31)"
"(if(eq?(car l2_31) '#:bulk-binding-registry)"
"(let-values(((l2_32)(cdr l2_31)))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:dest-phase)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)"
"(if(eq?(car l2_33) '#:inspector)"
"(let-values(((l2_34)(cdr l2_33)))"
"(if(pair? l2_34)"
"(if(eq?(car l2_34) '#:namespace)"
"(let-values(((l2_35)(cdr l2_34)))"
"(if(pair? l2_35)(if(eq?(car l2_35) '#:self)(null?(cdr l2_35)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_36 given-args_37)(unpack12.1 given-kws_36 given-args_37)))"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)))"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_1)"
"(let-values(((or-part_2)(number? datum_1)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(boolean? datum_1)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(string? datum_1)))(if or-part_4 or-part_4(bytes? datum_1)))))))))"
"(define-values(kernel-primitive-table)(primitive-table '#%kernel))"
"(define-values(read-syntax$2)(hash-ref kernel-primitive-table 'read-syntax))"
"(define-values(read-syntax/recursive$2)(hash-ref kernel-primitive-table 'read-syntax/recursive))"
"(define-values(datum->syntax$1)(hash-ref kernel-primitive-table 'datum->syntax))"
"(define-values(syntax->datum$2)(hash-ref kernel-primitive-table 'syntax->datum))"
"(define-values(1/syntax-property-symbol-keys)(hash-ref kernel-primitive-table 'syntax-property-symbol-keys))"
"(define-values(1/syntax-property)(hash-ref kernel-primitive-table 'syntax-property))"
"(define-values(syntax-span$1)(hash-ref kernel-primitive-table 'syntax-span))"
"(define-values(1/syntax-position)(hash-ref kernel-primitive-table 'syntax-position))"
"(define-values(1/syntax-column)(hash-ref kernel-primitive-table 'syntax-column))"
"(define-values(syntax-line$1)(hash-ref kernel-primitive-table 'syntax-line))"
"(define-values(1/syntax-source)(hash-ref kernel-primitive-table 'syntax-source))"
"(define-values(1/syntax-e)(hash-ref kernel-primitive-table 'syntax-e))"
"(define-values(1/syntax?)(hash-ref kernel-primitive-table 'syntax?))"
"(define-values"
"(correlate)"
"(lambda(src-e_287 s-exp_288)"
"(let-values(((e_289)"
"(if(datum-has-elements? s-exp_288)"
"(let-values()(datum->correlated(correlated-e(datum->correlated s-exp_288)) src-e_287))"
"(let-values()(datum->correlated s-exp_288 src-e_287)))))"
"(let-values(((maybe-n_290)(1/syntax-property src-e_287 'inferred-name)))"
"(if maybe-n_290(1/syntax-property e_289 'inferred-name maybe-n_290) e_289)))))"
"(define-values(correlated?)(lambda(e_291)(1/syntax? e_291)))"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_292)"
"(lambda(d3_293 srcloc1_294 srcloc2_295)"
"(let-values(((d_296) d3_293))"
"(let-values(((srcloc_297)(if srcloc2_295 srcloc1_294 #f)))"
"(let-values()(datum->syntax$1 #f d_296 srcloc_297)))))))"
"(case-lambda"
"((d_298)(datum->correlated4_292 d_298 #f #f))"
"((d_299 srcloc1_300)(datum->correlated4_292 d_299 srcloc1_300 #t)))))"
"(define-values(correlated-e)(lambda(e_301)(if(1/syntax? e_301)(1/syntax-e e_301) e_301)))"
"(define-values(correlated-cadr)(lambda(e_302)(car(correlated-e(cdr(correlated-e e_302))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_303)(let-values(((l_304)(correlated-e e_303)))(if(list? l_304)(length l_304) #f))))"
"(define-values"
"(correlated->list)"
"(lambda(e_305)"
"((letrec-values(((loop_306)"
"(lambda(e_307)"
"(if(pair? e_307)"
"(let-values()(cons(car e_307)(loop_306(cdr e_307))))"
"(if(null? e_307)"
"(let-values() null)"
"(if(1/syntax? e_307)"
"(let-values()(loop_306(1/syntax-e e_307)))"
"                              (let-values () (error 'correlate->list \"not a list\"))))))))"
" loop_306)"
" e_305)))"
"(define-values"
"(correlated->datum)"
"(lambda(e_308)(datum-map e_308(lambda(tail?_309 d_310)(if(1/syntax? d_310)(syntax->datum$2 d_310) d_310)))))"
"(define-values"
"(correlated-property)"
"(case-lambda"
"((e_311 k_312)(1/syntax-property e_311 k_312))"
"((e_313 k_314 v_315)(1/syntax-property e_313 k_314 v_315))))"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_316)"
"(if(pair? s_316)"
"(let-values()(let-values(((r_317)(to-syntax-list.1(cdr s_316))))(if r_317(cons(car s_316) r_317) #f)))"
"(if(1/syntax? s_316)"
"(let-values()(to-syntax-list.1(1/syntax-e s_316)))"
"(if(list? s_316)(let-values() s_316)(let-values() #f))))))"
"(define-values"
"(syntax->host-syntax)"
"(lambda(v_1)"
"(syntax-map"
" v_1"
"(lambda(tail?_2 v_3) v_3)"
"(lambda(orig-s_4 d_5)"
"(let-values(((s_6)(datum->syntax$1 #f d_5(srcloc->vector(syntax-srcloc orig-s_4)))))"
"(let-values(((keys_7)(syntax-property-symbol-keys$1 orig-s_4)))"
"(let-values(((lst_8) keys_7))"
"(begin"
"(if(list? lst_8)(void)(let-values()(in-list lst_8)))"
"((letrec-values(((for-loop_9)"
"(lambda(s_10 lst_11)"
"(if(pair? lst_11)"
"(let-values(((key_12)(unsafe-car lst_11)))"
"(if #t"
"(let-values(((s_13)"
"(let-values(((s_14) s_10))"
"(let-values(((s_15)"
"(let-values()"
"(1/syntax-property"
" s_14"
" key_12"
"(syntax-property$1 orig-s_4 key_12)))))"
"(values s_15)))))"
"(if #t(for-loop_9 s_13(unsafe-cdr lst_11)) s_13))"
" s_10))"
" s_10))))"
" for-loop_9)"
" s_6"
" lst_8))))))"
" syntax-e$1)))"
"(define-values"
"(srcloc->vector)"
"(lambda(s_16)"
"(if s_16"
"(vector(srcloc-source s_16)(srcloc-line s_16)(srcloc-column s_16)(srcloc-position s_16)(srcloc-span s_16))"
" #f)))"
"(define-values"
"(correlate*)"
"(lambda(stx_1 s-exp_2)"
"(let-values(((e_3)"
"(if(if(datum-has-elements? s-exp_2)(syntax-srcloc stx_1) #f)"
"(let-values()"
"(datum->correlated"
"(correlated-e(datum->correlated s-exp_2))"
"(srcloc->vector(syntax-srcloc stx_1))))"
"(let-values()(datum->correlated s-exp_2(srcloc->vector(syntax-srcloc stx_1)))))))"
"(let-values(((maybe-n_4)(syntax-property$1 stx_1 'inferred-name)))"
"(if maybe-n_4"
"(correlated-property e_3 'inferred-name(if(syntax?$1 maybe-n_4)(syntax->datum$1 maybe-n_4) maybe-n_4))"
" e_3)))))"
"(define-values"
"(1/compile)"
"(let-values(((compile5_1)"
"(lambda(in-s3_2 cctx4_3 result-used?1_4 result-used?2_5)"
"(let-values(((in-s_6) in-s3_2))"
"(let-values(((cctx_7) cctx4_3))"
"(let-values(((result-used?_8)(if result-used?2_5 result-used?1_4 #t)))"
"(let-values()"
"(let-values(((compile_9)"
"(lambda(s_10 result-used?_11)(1/compile s_10 cctx_7 result-used?_11))))"
"(let-values(((s_12)(syntax-disarm$1 in-s_6)))"
"(if(pair?(syntax-e$1 s_12))"
"(let-values()"
"(let-values(((phase_13)(compile-context-phase cctx_7)))"
"(let-values(((core-sym_14)(core-form-sym s_12 phase_13)))"
"(let-values(((tmp_15) core-sym_14))"
"(let-values(((index_16)"
"(if(symbol? tmp_15)"
"(hash-ref"
" '#hasheq((#%app . 5)"
"(with-continuation-mark . 7)"
"(begin . 8)"
"(module . 2)"
"(#%expression . 11)"
"(set! . 9)"
"(let-values . 10)"
"(if . 6)"
"(quote-syntax . 13)"
"(quote . 12)"
"(letrec-values . 10)"
"(begin0 . 8)"
"(#%variable-reference . 14)"
"(lambda . 3)"
"(case-lambda . 4)"
"(#%top . 15)"
"(module* . 2))"
" tmp_15"
"(lambda() 0))"
"(if(equal? tmp_15 #f)(let-values() 1)(let-values() 0)))))"
"(if(unsafe-fx< index_16 7)"
"(if(unsafe-fx< index_16 3)"
"(if(unsafe-fx< index_16 1)"
"                                                (let-values () (error \"unrecognized core form:\" core-sym_14))"
"(if(unsafe-fx< index_16 2)"
"(let-values()"
"(error"
"                                                     \"internal error; not a core form:\""
" s_12"
"                                                     \"at phase:\""
" phase_13))"
"                                                  (let-values () (error \"not a core expression form:\" s_12))))"
"(if(unsafe-fx< index_16 4)"
"(let-values()"
"(if result-used?_8"
"(let-values()"
"(let-values(((ok?_17 lambda16_18 formals17_19 body18_20)"
"(let-values(((s_33) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_34) s_33))"
"(let-values(((lambda16_35"
" formals17_36"
" body18_37)"
"(let-values(((s_38)"
"(if(syntax?$1"
" s_33)"
"(syntax-e$1"
" s_33)"
" s_33)))"
"(if(pair? s_38)"
"(let-values(((lambda19_39)"
"(let-values(((s_42)"
"(car"
" s_38)))"
" s_42))"
"((formals20_40"
" body21_41)"
"(let-values(((s_43)"
"(cdr"
" s_38)))"
"(let-values(((s_44)"
"(if(syntax?$1"
" s_43)"
"(syntax-e$1"
" s_43)"
" s_43)))"
"(if(pair?"
" s_44)"
"(let-values(((formals22_45)"
"(let-values(((s_47)"
"(car"
" s_44)))"
" s_47))"
"((body23_46)"
"(let-values(((s_48)"
"(cdr"
" s_44)))"
"(let-values(((s_49)"
"(if(syntax?$1"
" s_48)"
"(syntax-e$1"
" s_48)"
" s_48)))"
"(if(pair?"
" s_49)"
"(let-values(((body24_50)"
"(let-values(((s_51)"
"(car"
" s_49)))"
" s_51))"
"(()"
"(let-values(((s_52)"
"(cdr"
" s_49)))"
"(let-values(((s_53)"
"(if(syntax?$1"
" s_52)"
"(syntax-e$1"
" s_52)"
" s_52)))"
"(if(null?"
" s_53)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_34))))))"
"(values"
" body24_50))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_34))))))"
"(values"
" formals22_45"
" body23_46))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_34))))))"
"(values"
" lambda19_39"
" formals20_40"
" body21_41))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_34)))))"
"(values"
" #t"
" lambda16_35"
" formals17_36"
" body18_37)))"
"(values #f #f #f #f)))))"
"(correlate*"
" s_12"
"(list*"
" 'lambda"
"(compile-lambda formals17_19 body18_20 cctx_7)))))"
"(let-values()"
"(correlate* s_12(list 'quote(syntax->datum$1 s_12))))))"
"(if(unsafe-fx< index_16 5)"
"(let-values()"
"(if result-used?_8"
"(let-values()"
"(let-values(((ok?_54 case-lambda25_55 formals26_56 body27_57)"
"(let-values(((s_70) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_71) s_70))"
"(let-values(((case-lambda25_72"
" formals26_73"
" body27_74)"
"(let-values(((s_75)"
"(if(syntax?$1"
" s_70)"
"(syntax-e$1"
" s_70)"
" s_70)))"
"(if(pair? s_75)"
"(let-values(((case-lambda28_76)"
"(let-values(((s_79)"
"(car"
" s_75)))"
" s_79))"
"((formals29_77"
" body30_78)"
"(let-values(((s_80)"
"(cdr"
" s_75)))"
"(let-values(((s_81)"
"(if(syntax?$1"
" s_80)"
"(syntax-e$1"
" s_80)"
" s_80)))"
"(let-values(((flat-s_82)"
"(to-syntax-list.1$1"
" s_81)))"
"(if(not"
" flat-s_82)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_71))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_71))"
"(let-values()"
"(let-values(((formals_83"
" body_84)"
"(let-values(((lst_85)"
" flat-s_82))"
"(begin"
"(if(list?"
" lst_85)"
"(void)"
"(let-values()"
"(in-list"
" lst_85)))"
"((letrec-values(((for-loop_86)"
"(lambda(formals_87"
" body_88"
" lst_89)"
"(if(pair?"
" lst_89)"
"(let-values(((s_90)"
"(unsafe-car"
" lst_89)))"
"(if #t"
"(let-values(((formals_91"
" body_92)"
"(let-values(((formals_93)"
" formals_87)"
"((body_94)"
" body_88))"
"(let-values(((formals_95"
" body_96)"
"(let-values()"
"(let-values(((formals34_97"
" body35_98)"
"(let-values()"
"(let-values(((s_99)"
"(if(syntax?$1"
" s_90)"
"(syntax-e$1"
" s_90)"
" s_90)))"
"(if(pair?"
" s_99)"
"(let-values(((formals31_100)"
"(let-values(((s_102)"
"(car"
" s_99)))"
" s_102))"
"((body32_101)"
"(let-values(((s_103)"
"(cdr"
" s_99)))"
"(let-values(((s_104)"
"(if(syntax?$1"
" s_103)"
"(syntax-e$1"
" s_103)"
" s_103)))"
"(if(pair?"
" s_104)"
"(let-values(((body33_105)"
"(let-values(((s_106)"
"(car"
" s_104)))"
" s_106))"
"(()"
"(let-values(((s_107)"
"(cdr"
" s_104)))"
"(let-values(((s_108)"
"(if(syntax?$1"
" s_107)"
"(syntax-e$1"
" s_107)"
" s_107)))"
"(if(null?"
" s_108)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_71))))))"
"(values"
" body33_105))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_71))))))"
"(values"
" formals31_100"
" body32_101))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_71))))))"
"(values"
"(cons"
" formals34_97"
" formals_93)"
"(cons"
" body35_98"
" body_94))))))"
"(values"
" formals_95"
" body_96)))))"
"(if #t"
"(for-loop_86"
" formals_91"
" body_92"
"(unsafe-cdr"
" lst_89))"
"(values"
" formals_91"
" body_92)))"
"(values"
" formals_87"
" body_88)))"
"(values"
" formals_87"
" body_88)))))"
" for-loop_86)"
" null"
" null"
" lst_85)))))"
"(values"
"(alt-reverse"
" formals_83)"
"(alt-reverse"
" body_84)))))))))))"
"(values"
" case-lambda28_76"
" formals29_77"
" body30_78))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_71)))))"
"(values"
" #t"
" case-lambda25_72"
" formals26_73"
" body27_74)))"
"(values #f #f #f #f)))))"
"(correlate*"
" s_12"
"(list*"
" 'case-lambda"
"(alt-reverse"
"(let-values(((lst_109) formals26_56)"
"((lst_110) body27_57))"
"(begin"
"(if(list? lst_109)"
"(void)"
"(let-values()(in-list lst_109)))"
"(if(list? lst_110)"
"(void)"
"(let-values()(in-list lst_110)))"
"((letrec-values(((for-loop_111)"
"(lambda(fold-var_112"
" lst_113"
" lst_114)"
"(if(if(pair? lst_113)"
"(pair? lst_114)"
" #f)"
"(let-values(((formals_115)"
"(unsafe-car"
" lst_113))"
"((body_116)"
"(unsafe-car"
" lst_114)))"
"(if(if #t #t #f)"
"(let-values(((fold-var_117)"
"(let-values(((fold-var_118)"
" fold-var_112))"
"(let-values(((fold-var_119)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
" formals_115"
" body_116"
" cctx_7))"
" fold-var_118))))"
"(values"
" fold-var_119)))))"
"(if(if #t #t #f)"
"(for-loop_111"
" fold-var_117"
"(unsafe-cdr lst_113)"
"(unsafe-cdr lst_114))"
" fold-var_117))"
" fold-var_112))"
" fold-var_112))))"
" for-loop_111)"
" null"
" lst_109"
" lst_110))))))))"
"(let-values()"
"(correlate* s_12(list 'quote(syntax->datum$1 s_12))))))"
"(if(unsafe-fx< index_16 6)"
"(let-values()"
"(let-values(((ok?_120 #%app36_121 rest37_122)"
"(let-values(((s_134) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_135) s_134))"
"(let-values(((#%app36_136 rest37_137)"
"(let-values(((s_138)"
"(if(syntax?$1"
" s_134)"
"(syntax-e$1"
" s_134)"
" s_134)))"
"(if(pair? s_138)"
"(let-values(((#%app38_139)"
"(let-values(((s_141)"
"(car"
" s_138)))"
" s_141))"
"((rest39_140)"
"(let-values(((s_142)"
"(cdr"
" s_138)))"
" s_142)))"
"(values"
" #%app38_139"
" rest39_140))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_135)))))"
"(values #t #%app36_136 rest37_137)))"
"(values #f #f #f)))))"
"(let-values(((es_133)"
"(let-values(((es_143) rest37_122))"
"(if(syntax?$1 es_143)"
"(syntax->list$1(syntax-disarm$1 es_143))"
" es_143))))"
"(alt-reverse"
"(let-values(((lst_144) es_133))"
"(begin"
"(if(list? lst_144)"
"(void)"
"(let-values()(in-list lst_144)))"
"((letrec-values(((for-loop_145)"
"(lambda(fold-var_146 lst_147)"
"(if(pair? lst_147)"
"(let-values(((s_148)"
"(unsafe-car"
" lst_147)))"
"(if #t"
"(let-values(((fold-var_149)"
"(let-values(((fold-var_150)"
" fold-var_146))"
"(let-values(((fold-var_151)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_9"
" s_148"
" #t))"
" fold-var_150))))"
"(values"
" fold-var_151)))))"
"(if #t"
"(for-loop_145"
" fold-var_149"
"(unsafe-cdr lst_147))"
" fold-var_149))"
" fold-var_146))"
" fold-var_146))))"
" for-loop_145)"
" null"
" lst_144)))))))"
"(let-values()"
"(let-values(((ok?_152 if40_153 tst41_154 thn42_155 els43_156)"
"(let-values(((s_171) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_172) s_171))"
"(let-values(((if40_173"
" tst41_174"
" thn42_175"
" els43_176)"
"(let-values(((s_177)"
"(if(syntax?$1"
" s_171)"
"(syntax-e$1"
" s_171)"
" s_171)))"
"(if(pair? s_177)"
"(let-values(((if44_178)"
"(let-values(((s_182)"
"(car"
" s_177)))"
" s_182))"
"((tst45_179"
" thn46_180"
" els47_181)"
"(let-values(((s_183)"
"(cdr"
" s_177)))"
"(let-values(((s_184)"
"(if(syntax?$1"
" s_183)"
"(syntax-e$1"
" s_183)"
" s_183)))"
"(if(pair?"
" s_184)"
"(let-values(((tst48_185)"
"(let-values(((s_188)"
"(car"
" s_184)))"
" s_188))"
"((thn49_186"
" els50_187)"
"(let-values(((s_189)"
"(cdr"
" s_184)))"
"(let-values(((s_190)"
"(if(syntax?$1"
" s_189)"
"(syntax-e$1"
" s_189)"
" s_189)))"
"(if(pair?"
" s_190)"
"(let-values(((thn51_191)"
"(let-values(((s_193)"
"(car"
" s_190)))"
" s_193))"
"((els52_192)"
"(let-values(((s_194)"
"(cdr"
" s_190)))"
"(let-values(((s_195)"
"(if(syntax?$1"
" s_194)"
"(syntax-e$1"
" s_194)"
" s_194)))"
"(if(pair?"
" s_195)"
"(let-values(((els53_196)"
"(let-values(((s_197)"
"(car"
" s_195)))"
" s_197))"
"(()"
"(let-values(((s_198)"
"(cdr"
" s_195)))"
"(let-values(((s_199)"
"(if(syntax?$1"
" s_198)"
"(syntax-e$1"
" s_198)"
" s_198)))"
"(if(null?"
" s_199)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_172))))))"
"(values"
" els53_196))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_172))))))"
"(values"
" thn51_191"
" els52_192))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_172))))))"
"(values"
" tst48_185"
" thn49_186"
" els50_187))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_172))))))"
"(values"
" if44_178"
" tst45_179"
" thn46_180"
" els47_181))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_172)))))"
"(values"
" #t"
" if40_173"
" tst41_174"
" thn42_175"
" els43_176)))"
"(values #f #f #f #f #f)))))"
"(correlate*"
" s_12"
"(list"
" 'if"
"(compile_9 tst41_154 #f)"
"(compile_9 thn42_155 result-used?_8)"
"(compile_9 els43_156 result-used?_8)))))))))"
"(if(unsafe-fx< index_16 11)"
"(if(unsafe-fx< index_16 8)"
"(let-values()"
"(let-values(((ok?_200 if54_201 key55_202 val56_203 body57_204)"
"(let-values(((s_219) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_220) s_219))"
"(let-values(((if54_221"
" key55_222"
" val56_223"
" body57_224)"
"(let-values(((s_225)"
"(if(syntax?$1 s_219)"
"(syntax-e$1 s_219)"
" s_219)))"
"(if(pair? s_225)"
"(let-values(((if58_226)"
"(let-values(((s_230)"
"(car"
" s_225)))"
" s_230))"
"((key59_227"
" val60_228"
" body61_229)"
"(let-values(((s_231)"
"(cdr"
" s_225)))"
"(let-values(((s_232)"
"(if(syntax?$1"
" s_231)"
"(syntax-e$1"
" s_231)"
" s_231)))"
"(if(pair?"
" s_232)"
"(let-values(((key62_233)"
"(let-values(((s_236)"
"(car"
" s_232)))"
" s_236))"
"((val63_234"
" body64_235)"
"(let-values(((s_237)"
"(cdr"
" s_232)))"
"(let-values(((s_238)"
"(if(syntax?$1"
" s_237)"
"(syntax-e$1"
" s_237)"
" s_237)))"
"(if(pair?"
" s_238)"
"(let-values(((val65_239)"
"(let-values(((s_241)"
"(car"
" s_238)))"
" s_241))"
"((body66_240)"
"(let-values(((s_242)"
"(cdr"
" s_238)))"
"(let-values(((s_243)"
"(if(syntax?$1"
" s_242)"
"(syntax-e$1"
" s_242)"
" s_242)))"
"(if(pair?"
" s_243)"
"(let-values(((body67_244)"
"(let-values(((s_245)"
"(car"
" s_243)))"
" s_245))"
"(()"
"(let-values(((s_246)"
"(cdr"
" s_243)))"
"(let-values(((s_247)"
"(if(syntax?$1"
" s_246)"
"(syntax-e$1"
" s_246)"
" s_246)))"
"(if(null?"
" s_247)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_220))))))"
"(values"
" body67_244))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_220))))))"
"(values"
" val65_239"
" body66_240))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_220))))))"
"(values"
" key62_233"
" val63_234"
" body64_235))"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_220))))))"
"(values"
" if58_226"
" key59_227"
" val60_228"
" body61_229))"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_220)))))"
"(values"
" #t"
" if54_221"
" key55_222"
" val56_223"
" body57_224)))"
"(values #f #f #f #f #f)))))"
"(correlate*"
" s_12"
"(list"
" 'with-continuation-mark"
"(compile_9 key55_202 #t)"
"(compile_9 val56_203 #t)"
"(compile_9 body57_204 result-used?_8)))))"
"(if(unsafe-fx< index_16 9)"
"(let-values()"
"(let-values(((ok?_248 begin68_249 e69_250)"
"(let-values(((s_262) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_263) s_262))"
"(let-values(((begin68_264 e69_265)"
"(let-values(((s_266)"
"(if(syntax?$1"
" s_262)"
"(syntax-e$1 s_262)"
" s_262)))"
"(if(pair? s_266)"
"(let-values(((begin70_267)"
"(let-values(((s_269)"
"(car"
" s_266)))"
" s_269))"
"((e71_268)"
"(let-values(((s_270)"
"(cdr"
" s_266)))"
"(let-values(((s_271)"
"(if(syntax?$1"
" s_270)"
"(syntax-e$1"
" s_270)"
" s_270)))"
"(let-values(((flat-s_272)"
"(to-syntax-list.1$1"
" s_271)))"
"(if(not"
" flat-s_272)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_263))"
"(if(null?"
" flat-s_272)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_263))"
"(let-values()"
"(let-values(((e_273)"
"(let-values(((lst_274)"
" flat-s_272))"
"(begin"
"(if(list?"
" lst_274)"
"(void)"
"(let-values()"
"(in-list"
" lst_274)))"
"((letrec-values(((for-loop_275)"
"(lambda(e_276"
" lst_277)"
"(if(pair?"
" lst_277)"
"(let-values(((s_278)"
"(unsafe-car"
" lst_277)))"
"(if #t"
"(let-values(((e_279)"
"(let-values(((e_280)"
" e_276))"
"(let-values(((e_281)"
"(let-values()"
"(let-values(((e72_282)"
"(let-values()"
" s_278)))"
"(cons"
" e72_282"
" e_280)))))"
"(values"
" e_281)))))"
"(if #t"
"(for-loop_275"
" e_279"
"(unsafe-cdr"
" lst_277))"
" e_279))"
" e_276))"
" e_276))))"
" for-loop_275)"
" null"
" lst_274)))))"
"(alt-reverse"
" e_273))))))))))"
"(values"
" begin70_267"
" e71_268))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_263)))))"
"(values #t begin68_264 e69_265)))"
"(values #f #f #f)))))"
"(let-values(((used-pos_261)"
"(let-values(((tmp_283) core-sym_14))"
"(if(equal? tmp_283 'begin0)"
"(let-values() 0)"
"(let-values()(sub1(length e69_250)))))))"
"(correlate*"
" s_12"
"(list*"
" core-sym_14"
"(alt-reverse"
"(let-values(((lst_284) e69_250)((start_285) 0))"
"(begin"
"(if(list? lst_284)"
"(void)"
"(let-values()(in-list lst_284)))"
"(if(exact-nonnegative-integer? start_285)"
"(void)"
"(let-values()(in-naturals start_285)))"
"((letrec-values(((for-loop_286)"
"(lambda(fold-var_287 lst_288 pos_289)"
"(if(if(pair? lst_288) #t #f)"
"(let-values(((e_290)"
"(unsafe-car lst_288))"
"((i_291) pos_289))"
"(if(if #t #t #f)"
"(let-values(((fold-var_292)"
"(let-values(((fold-var_293)"
" fold-var_287))"
"(let-values(((fold-var_294)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_9"
" e_290"
"(="
" i_291"
" used-pos_261)))"
" fold-var_293))))"
"(values"
" fold-var_294)))))"
"(if(if #t #t #f)"
"(for-loop_286"
" fold-var_292"
"(unsafe-cdr lst_288)"
"(+ pos_289 1))"
" fold-var_292))"
" fold-var_287))"
" fold-var_287))))"
" for-loop_286)"
" null"
" lst_284"
" start_285)))))))))"
"(if(unsafe-fx< index_16 10)"
"(let-values()"
"(let-values(((ok?_295 set!73_296 id74_297 rhs75_298)"
"(let-values(((s_311) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_312) s_311))"
"(let-values(((set!73_313 id74_314 rhs75_315)"
"(let-values(((s_316)"
"(if(syntax?$1"
" s_311)"
"(syntax-e$1"
" s_311)"
" s_311)))"
"(if(pair? s_316)"
"(let-values(((set!76_317)"
"(let-values(((s_320)"
"(car"
" s_316)))"
" s_320))"
"((id77_318"
" rhs78_319)"
"(let-values(((s_321)"
"(cdr"
" s_316)))"
"(let-values(((s_322)"
"(if(syntax?$1"
" s_321)"
"(syntax-e$1"
" s_321)"
" s_321)))"
"(if(pair?"
" s_322)"
"(let-values(((id79_323)"
"(let-values(((s_325)"
"(car"
" s_322)))"
"(if(let-values(((or-part_326)"
"(if(syntax?$1"
" s_325)"
"(symbol?"
"(syntax-e$1"
" s_325))"
" #f)))"
"(if or-part_326"
" or-part_326"
"(symbol?"
" s_325)))"
" s_325"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"not an identifier\""
" orig-s_312"
" s_325))))"
"((rhs80_324)"
"(let-values(((s_327)"
"(cdr"
" s_322)))"
"(let-values(((s_328)"
"(if(syntax?$1"
" s_327)"
"(syntax-e$1"
" s_327)"
" s_327)))"
"(if(pair?"
" s_328)"
"(let-values(((rhs81_329)"
"(let-values(((s_330)"
"(car"
" s_328)))"
" s_330))"
"(()"
"(let-values(((s_331)"
"(cdr"
" s_328)))"
"(let-values(((s_332)"
"(if(syntax?$1"
" s_331)"
"(syntax-e$1"
" s_331)"
" s_331)))"
"(if(null?"
" s_332)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_312))))))"
"(values"
" rhs81_329))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_312))))))"
"(values"
" id79_323"
" rhs80_324))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_312))))))"
"(values"
" set!76_317"
" id77_318"
" rhs78_319))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_312)))))"
"(values #t set!73_313 id74_314 rhs75_315)))"
"(values #f #f #f #f)))))"
"(correlate*"
" s_12"
"(let-values(((...der/compile/expr.rkt:92:27_333)"
" compile-identifier15.1)"
"((temp82_334) id74_297)"
"((cctx83_335) cctx_7)"
"((temp84_336)(compile_9 rhs75_298 #t)))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier15.1))"
"(compile-identifier13.1"
" temp84_336"
" #t"
" #f"
" #f"
" temp82_334"
" cctx83_335)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:92:27_333"
" keyword-procedure-extract"
" '(#:set-to)"
" 4)"
" '(#:set-to)"
"(list temp84_336)"
" temp82_334"
" cctx83_335))))))"
"(let-values()"
"(compile-let core-sym_14 s_12 cctx_7 result-used?_8)))))"
"(if(unsafe-fx< index_16 13)"
"(if(unsafe-fx< index_16 12)"
"(let-values()"
"(let-values(((ok?_337 #%expression85_338 e86_339)"
"(let-values(((s_350) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_351) s_350))"
"(let-values(((#%expression85_352 e86_353)"
"(let-values(((s_354)"
"(if(syntax?$1"
" s_350)"
"(syntax-e$1 s_350)"
" s_350)))"
"(if(pair? s_354)"
"(let-values(((#%expression87_355)"
"(let-values(((s_357)"
"(car"
" s_354)))"
" s_357))"
"((e88_356)"
"(let-values(((s_358)"
"(cdr"
" s_354)))"
"(let-values(((s_359)"
"(if(syntax?$1"
" s_358)"
"(syntax-e$1"
" s_358)"
" s_358)))"
"(if(pair?"
" s_359)"
"(let-values(((e89_360)"
"(let-values(((s_361)"
"(car"
" s_359)))"
" s_361))"
"(()"
"(let-values(((s_362)"
"(cdr"
" s_359)))"
"(let-values(((s_363)"
"(if(syntax?$1"
" s_362)"
"(syntax-e$1"
" s_362)"
" s_362)))"
"(if(null?"
" s_363)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_351))))))"
"(values"
" e89_360))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_351))))))"
"(values"
" #%expression87_355"
" e88_356))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_351)))))"
"(values #t #%expression85_352 e86_353)))"
"(values #f #f #f)))))"
"(compile_9 e86_339 result-used?_8)))"
"(let-values()"
"(let-values(((ok?_364 quote90_365 datum91_366)"
"(let-values(((s_378) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_379) s_378))"
"(let-values(((quote90_380 datum91_381)"
"(let-values(((s_382)"
"(if(syntax?$1"
" s_378)"
"(syntax-e$1 s_378)"
" s_378)))"
"(if(pair? s_382)"
"(let-values(((quote92_383)"
"(let-values(((s_385)"
"(car"
" s_382)))"
" s_385))"
"((datum93_384)"
"(let-values(((s_386)"
"(cdr"
" s_382)))"
"(let-values(((s_387)"
"(if(syntax?$1"
" s_386)"
"(syntax-e$1"
" s_386)"
" s_386)))"
"(if(pair?"
" s_387)"
"(let-values(((datum94_388)"
"(let-values(((s_389)"
"(car"
" s_387)))"
" s_389))"
"(()"
"(let-values(((s_390)"
"(cdr"
" s_387)))"
"(let-values(((s_391)"
"(if(syntax?$1"
" s_390)"
"(syntax-e$1"
" s_390)"
" s_390)))"
"(if(null?"
" s_391)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_379))))))"
"(values"
" datum94_388))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_379))))))"
"(values"
" quote92_383"
" datum93_384))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_379)))))"
"(values #t quote90_380 datum91_381)))"
"(values #f #f #f)))))"
"(let-values(((datum_377)(syntax->datum$1 datum91_366)))"
"(if(self-quoting-in-linklet? datum_377)"
"(let-values()(correlate* s_12 datum_377))"
"(let-values()(correlate* s_12(list 'quote datum_377))))))))"
"(if(unsafe-fx< index_16 14)"
"(let-values()"
"(let-values(((ok?_392 quote-syntax95_393 datum96_394 _97_395)"
"(let-values(((s_408) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_409) s_408))"
"(let-values(((quote-syntax95_410"
" datum96_411"
" _97_412)"
"(let-values(((s_413)"
"(if(syntax?$1"
" s_408)"
"(syntax-e$1 s_408)"
" s_408)))"
"(if(pair? s_413)"
"(let-values(((quote-syntax98_414)"
"(let-values(((s_417)"
"(car"
" s_413)))"
" s_417))"
"((datum99_415"
" _100_416)"
"(let-values(((s_418)"
"(cdr"
" s_413)))"
"(let-values(((s_419)"
"(if(syntax?$1"
" s_418)"
"(syntax-e$1"
" s_418)"
" s_418)))"
"(if(pair?"
" s_419)"
"(let-values(((datum101_420)"
"(let-values(((s_422)"
"(car"
" s_419)))"
" s_422))"
"((_102_421)"
"(let-values(((s_423)"
"(cdr"
" s_419)))"
" s_423)))"
"(values"
" datum101_420"
" _102_421))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_409))))))"
"(values"
" quote-syntax98_414"
" datum99_415"
" _100_416))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_409)))))"
"(values"
" #t"
" quote-syntax95_410"
" datum96_411"
" _97_412)))"
"(values #f #f #f #f)))))"
"(if result-used?_8"
"(compile-quote-syntax datum96_394 phase_13 cctx_7)"
"(correlate* s_12(list 'quote(syntax->datum$1 datum96_394))))))"
"(if(unsafe-fx< index_16 15)"
"(let-values()"
"(let-values(((ok?_424 #%variable-reference103_425 id104_426)"
"(let-values(((s_454) s_12))"
"(if(if #t"
"(let-values(((s_455)"
"(if(syntax?$1 s_454)"
"(syntax-e$1 s_454)"
" s_454)))"
"(if(pair? s_455)"
"(if(let-values(((s_456)(car s_455)))"
" #t)"
"(let-values(((s_457)(cdr s_455)))"
"(let-values(((s_458)"
"(if(syntax?$1 s_457)"
"(syntax-e$1 s_457)"
" s_457)))"
"(if(pair? s_458)"
"(if(let-values(((s_459)"
"(car s_458)))"
"(if(syntax?$1 s_459)"
"(symbol?"
"(syntax-e$1 s_459))"
" #f))"
"(let-values(((s_460)"
"(cdr s_458)))"
"(let-values(((s_461)"
"(if(syntax?$1"
" s_460)"
"(syntax-e$1"
" s_460)"
" s_460)))"
"(null? s_461)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_462) s_454))"
"(let-values(((#%variable-reference103_463"
" id104_464)"
"(let-values(((s_465)"
"(if(syntax?$1"
" s_454)"
"(syntax-e$1"
" s_454)"
" s_454)))"
"(if #t"
"(let-values(((#%variable-reference105_466)"
"(let-values(((s_468)"
"(car"
" s_465)))"
" s_468))"
"((id106_467)"
"(let-values(((s_469)"
"(cdr"
" s_465)))"
"(let-values(((s_470)"
"(if(syntax?$1"
" s_469)"
"(syntax-e$1"
" s_469)"
" s_469)))"
"(if #t"
"(let-values(((id107_471)"
"(let-values(((s_472)"
"(car"
" s_470)))"
" s_472))"
"(()"
"(let-values(((s_473)"
"(cdr"
" s_470)))"
"(let-values(((s_474)"
"(if(syntax?$1"
" s_473)"
"(syntax-e$1"
" s_473)"
" s_473)))"
"(values)))))"
"(values"
" id107_471))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_462))))))"
"(values"
" #%variable-reference105_466"
" id106_467))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_462)))))"
"(values"
" #t"
" #%variable-reference103_463"
" id104_464)))"
"(values #f #f #f)))))"
"(let-values(((ok?_437"
" #%variable-reference108_438"
" #%top109_439"
" id110_440)"
"(let-values(((s_475) s_12))"
"(if(if(not ok?_424)"
"(let-values(((s_476)"
"(if(syntax?$1 s_475)"
"(syntax-e$1 s_475)"
" s_475)))"
"(if(pair? s_476)"
"(if(let-values(((s_477)"
"(car s_476)))"
" #t)"
"(let-values(((s_478)(cdr s_476)))"
"(let-values(((s_479)"
"(if(syntax?$1"
" s_478)"
"(syntax-e$1 s_478)"
" s_478)))"
"(if(pair? s_479)"
"(if(let-values(((s_480)"
"(car"
" s_479)))"
"(let-values(((s_481)"
"(if(syntax?$1"
" s_480)"
"(syntax-e$1"
" s_480)"
" s_480)))"
"(if(pair? s_481)"
"(if(let-values(((s_482)"
"(car"
" s_481)))"
" #t)"
"(let-values(((s_483)"
"(cdr"
" s_481)))"
"(if(syntax?$1"
" s_483)"
"(symbol?"
"(syntax-e$1"
" s_483))"
" #f))"
" #f)"
" #f)))"
"(let-values(((s_484)"
"(cdr s_479)))"
"(let-values(((s_485)"
"(if(syntax?$1"
" s_484)"
"(syntax-e$1"
" s_484)"
" s_484)))"
"(null? s_485)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_486) s_475))"
"(let-values(((#%variable-reference108_487"
" #%top109_488"
" id110_489)"
"(let-values(((s_490)"
"(if(syntax?$1"
" s_475)"
"(syntax-e$1"
" s_475)"
" s_475)))"
"(if #t"
"(let-values(((#%variable-reference111_491)"
"(let-values(((s_494)"
"(car"
" s_490)))"
" s_494))"
"((#%top112_492"
" id113_493)"
"(let-values(((s_495)"
"(cdr"
" s_490)))"
"(let-values(((s_496)"
"(if(syntax?$1"
" s_495)"
"(syntax-e$1"
" s_495)"
" s_495)))"
"(if #t"
"(let-values(((#%top114_497"
" id115_498)"
"(let-values(((s_499)"
"(car"
" s_496)))"
"(let-values(((s_500)"
"(if(syntax?$1"
" s_499)"
"(syntax-e$1"
" s_499)"
" s_499)))"
"(if #t"
"(let-values(((#%top116_501)"
"(let-values(((s_503)"
"(car"
" s_500)))"
" s_503))"
"((id117_502)"
"(let-values(((s_504)"
"(cdr"
" s_500)))"
" s_504)))"
"(values"
" #%top116_501"
" id117_502))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_486)))))"
"(()"
"(let-values(((s_505)"
"(cdr"
" s_496)))"
"(let-values(((s_506)"
"(if(syntax?$1"
" s_505)"
"(syntax-e$1"
" s_505)"
" s_505)))"
"(values)))))"
"(values"
" #%top114_497"
" id115_498))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_486))))))"
"(values"
" #%variable-reference111_491"
" #%top112_492"
" id113_493))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_486)))))"
"(values"
" #t"
" #%variable-reference108_487"
" #%top109_488"
" id110_489)))"
"(values #f #f #f #f)))))"
"(let-values(((id_453)"
"(let-values(((or-part_507)"
"(if ok?_424 id104_426 #f)))"
"(if or-part_507"
" or-part_507"
"(if ok?_437 id110_440 #f)))))"
"(correlate*"
" s_12"
"(if id_453"
"(list"
" '#%variable-reference"
"(let-values(((id118_508) id_453)"
"((cctx119_509) cctx_7))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier15.1))"
"(compile-identifier13.1"
" #f"
" #f"
" #f"
" #f"
" id118_508"
" cctx119_509)"
"(compile-identifier15.1 id118_508 cctx119_509))))"
" '(#%variable-reference)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_7)"
"(let-values()"
"(error"
"                                                                           \"found `#%top` in a module body:\""
" s_12))"
"(void))"
"(values))))"
"(let-values(((ok?_510 #%top120_511 id121_512)"
"(let-values(((s_523) s_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_524) s_523))"
"(let-values(((#%top120_525 id121_526)"
"(let-values(((s_527)"
"(if(syntax?$1"
" s_523)"
"(syntax-e$1"
" s_523)"
" s_523)))"
"(if(pair? s_527)"
"(let-values(((#%top122_528)"
"(let-values(((s_530)"
"(car"
" s_527)))"
" s_530))"
"((id123_529)"
"(let-values(((s_531)"
"(cdr"
" s_527)))"
"(if(let-values(((or-part_532)"
"(if(syntax?$1"
" s_531)"
"(symbol?"
"(syntax-e$1"
" s_531))"
" #f)))"
"(if or-part_532"
" or-part_532"
"(symbol?"
" s_531)))"
" s_531"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"not an identifier\""
" orig-s_524"
" s_531)))))"
"(values"
" #%top122_528"
" id123_529))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_524)))))"
"(values #t #%top120_525 id121_526)))"
"(values #f #f #f)))))"
"(let-values(((...der/compile/expr.rkt:125:9_533)"
" compile-identifier15.1)"
"((temp124_534) id121_512)"
"((cctx125_535) cctx_7)"
"((temp126_536) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-identifier15.1))"
"(compile-identifier13.1"
" #f"
" #f"
" temp126_536"
" #t"
" temp124_534"
" cctx125_535)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/expr.rkt:125:9_533"
" keyword-procedure-extract"
" '(#:top?)"
" 4)"
" '(#:top?)"
"(list temp126_536)"
" temp124_534"
" cctx125_535))))))))))))))))"
"(if(identifier? s_12)"
"(let-values()"
"(let-values(((s127_537) s_12)((cctx128_538) cctx_7))"
"(if(variable-reference-constant?(#%variable-reference compile-identifier15.1))"
"(compile-identifier13.1 #f #f #f #f s127_537 cctx128_538)"
"(compile-identifier15.1 s127_537 cctx128_538))))"
"                                  (let-values () (error \"bad syntax after expansion:\" s_12)))))))))))))"
"(case-lambda"
"((in-s_539 cctx_540)(compile5_1 in-s_539 cctx_540 #f #f))"
"((in-s_541 cctx_542 result-used?1_543)(compile5_1 in-s_541 cctx_542 result-used?1_543 #t)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_544 body_545 cctx_546)"
"(let-values(((phase_547)(compile-context-phase cctx_546)))"
"(let-values(((gen-formals_548)"
"((letrec-values(((loop_549)"
"(lambda(formals_550)"
"(if(identifier? formals_550)"
"(let-values()(local-id->symbol formals_550 phase_547))"
"(if(syntax?$1 formals_550)"
"(let-values()(loop_549(syntax-e$1 formals_550)))"
"(if(pair? formals_550)"
"(let-values()"
"(cons(loop_549(car formals_550))(loop_549(cdr formals_550))))"
"(let-values() null)))))))"
" loop_549)"
" formals_544)))"
"(list gen-formals_548(1/compile body_545 cctx_546))))))"
"(define-values"
"(compile-let)"
"(lambda(core-sym_551 s_552 cctx_553 result-used?_554)"
"(let-values(((rec?_555)(eq? core-sym_551 'letrec-values)))"
"(let-values(((ok?_556 let-values129_557 id130_558 rhs131_559 body132_560)"
"(let-values(((s_578) s_552))"
"(if(if #t #t #f)"
"(let-values(((orig-s_579) s_578))"
"(let-values(((let-values129_580 id130_581 rhs131_582 body132_583)"
"(let-values(((s_584)(if(syntax?$1 s_578)(syntax-e$1 s_578) s_578)))"
"(if(pair? s_584)"
"(let-values(((let-values133_585)"
"(let-values(((s_589)(car s_584))) s_589))"
"((id134_586 rhs135_587 body136_588)"
"(let-values(((s_590)(cdr s_584)))"
"(let-values(((s_591)"
"(if(syntax?$1 s_590)"
"(syntax-e$1 s_590)"
" s_590)))"
"(if(pair? s_591)"
"(let-values(((id137_592 rhs138_593)"
"(let-values(((s_595)(car s_591)))"
"(let-values(((s_596)"
"(if(syntax?$1 s_595)"
"(syntax-e$1 s_595)"
" s_595)))"
"(let-values(((flat-s_597)"
"(to-syntax-list.1$1"
" s_596)))"
"(if(not flat-s_597)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_579))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_579))"
"(let-values()"
"(let-values(((id_598 rhs_599)"
"(let-values(((lst_600)"
" flat-s_597))"
"(begin"
"(if(list?"
" lst_600)"
"(void)"
"(let-values()"
"(in-list"
" lst_600)))"
"((letrec-values(((for-loop_601)"
"(lambda(id_602"
" rhs_603"
" lst_604)"
"(if(pair?"
" lst_604)"
"(let-values(((s_605)"
"(unsafe-car"
" lst_604)))"
"(if #t"
"(let-values(((id_606"
" rhs_607)"
"(let-values(((id_608)"
" id_602)"
"((rhs_609)"
" rhs_603))"
"(let-values(((id_610"
" rhs_611)"
"(let-values()"
"(let-values(((id144_612"
" rhs145_613)"
"(let-values()"
"(let-values(((s_614)"
"(if(syntax?$1"
" s_605)"
"(syntax-e$1"
" s_605)"
" s_605)))"
"(if(pair?"
" s_614)"
"(let-values(((id140_615)"
"(let-values(((s_617)"
"(car"
" s_614)))"
"(let-values(((s_618)"
"(if(syntax?$1"
" s_617)"
"(syntax-e$1"
" s_617)"
" s_617)))"
"(let-values(((flat-s_619)"
"(to-syntax-list.1$1"
" s_618)))"
"(if(not"
" flat-s_619)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_579))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_579))"
"(let-values()"
"(let-values(((id_620)"
"(let-values(((lst_621)"
" flat-s_619))"
"(begin"
"(if(list?"
" lst_621)"
"(void)"
"(let-values()"
"(in-list"
" lst_621)))"
"((letrec-values(((for-loop_622)"
"(lambda(id_623"
" lst_624)"
"(if(pair?"
" lst_624)"
"(let-values(((s_625)"
"(unsafe-car"
" lst_624)))"
"(if #t"
"(let-values(((id_626)"
"(let-values(((id_627)"
" id_623))"
"(let-values(((id_628)"
"(let-values()"
"(let-values(((id146_629)"
"(let-values()"
"(if(let-values(((or-part_630)"
"(if(syntax?$1"
" s_625)"
"(symbol?"
"(syntax-e$1"
" s_625))"
" #f)))"
"(if or-part_630"
" or-part_630"
"(symbol?"
" s_625)))"
" s_625"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_579"
" s_625)))))"
"(cons"
" id146_629"
" id_627)))))"
"(values"
" id_628)))))"
"(if #t"
"(for-loop_622"
" id_626"
"(unsafe-cdr"
" lst_624))"
" id_626))"
" id_623))"
" id_623))))"
" for-loop_622)"
" null"
" lst_621)))))"
"(alt-reverse"
" id_620)))))))))"
"((rhs141_616)"
"(let-values(((s_631)"
"(cdr"
" s_614)))"
"(let-values(((s_632)"
"(if(syntax?$1"
" s_631)"
"(syntax-e$1"
" s_631)"
" s_631)))"
"(if(pair?"
" s_632)"
"(let-values(((rhs142_633)"
"(let-values(((s_634)"
"(car"
" s_632)))"
" s_634))"
"(()"
"(let-values(((s_635)"
"(cdr"
" s_632)))"
"(let-values(((s_636)"
"(if(syntax?$1"
" s_635)"
"(syntax-e$1"
" s_635)"
" s_635)))"
"(if(null?"
" s_636)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_579))))))"
"(values"
" rhs142_633))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_579))))))"
"(values"
" id140_615"
" rhs141_616))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_579))))))"
"(values"
"(cons"
" id144_612"
" id_608)"
"(cons"
" rhs145_613"
" rhs_609))))))"
"(values"
" id_610"
" rhs_611)))))"
"(if #t"
"(for-loop_601"
" id_606"
" rhs_607"
"(unsafe-cdr"
" lst_604))"
"(values"
" id_606"
" rhs_607)))"
"(values"
" id_602"
" rhs_603)))"
"(values"
" id_602"
" rhs_603)))))"
" for-loop_601)"
" null"
" null"
" lst_600)))))"
"(values"
"(alt-reverse id_598)"
"(alt-reverse"
" rhs_599))))))))))"
"((body139_594)"
"(let-values(((s_637)(cdr s_591)))"
"(let-values(((s_638)"
"(if(syntax?$1 s_637)"
"(syntax-e$1 s_637)"
" s_637)))"
"(if(pair? s_638)"
"(let-values(((body143_639)"
"(let-values(((s_640)"
"(car"
" s_638)))"
" s_640))"
"(()"
"(let-values(((s_641)"
"(cdr"
" s_638)))"
"(let-values(((s_642)"
"(if(syntax?$1"
" s_641)"
"(syntax-e$1"
" s_641)"
" s_641)))"
"(if(null? s_642)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_579))))))"
"(values body143_639))"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_579))))))"
"(values id137_592 rhs138_593 body139_594))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_579))))))"
"(values let-values133_585 id134_586 rhs135_587 body136_588))"
"                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_579)))))"
"(values #t let-values129_580 id130_581 rhs131_582 body132_583)))"
"(values #f #f #f #f #f)))))"
"(let-values(((phase_575)(compile-context-phase cctx_553)))"
"(let-values(((idss_576) id130_558))"
"(let-values(((symss_577)"
"(alt-reverse"
"(let-values(((lst_643) idss_576))"
"(begin"
"(if(list? lst_643)(void)(let-values()(in-list lst_643)))"
"((letrec-values(((for-loop_644)"
"(lambda(fold-var_645 lst_646)"
"(if(pair? lst_646)"
"(let-values(((ids_647)(unsafe-car lst_646)))"
"(if #t"
"(let-values(((fold-var_648)"
"(let-values(((fold-var_649) fold-var_645))"
"(let-values(((fold-var_650)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_651)"
" ids_647))"
"(begin"
"(if(list? lst_651)"
"(void)"
"(let-values()"
"(in-list lst_651)))"
"((letrec-values(((for-loop_652)"
"(lambda(fold-var_653"
" lst_654)"
"(if(pair?"
" lst_654)"
"(let-values(((id_655)"
"(unsafe-car"
" lst_654)))"
"(if #t"
"(let-values(((fold-var_656)"
"(let-values(((fold-var_657)"
" fold-var_653))"
"(let-values(((fold-var_658)"
"(let-values()"
"(cons"
"(let-values()"
"(local-id->symbol"
" id_655"
" phase_575))"
" fold-var_657))))"
"(values"
" fold-var_658)))))"
"(if #t"
"(for-loop_652"
" fold-var_656"
"(unsafe-cdr"
" lst_654))"
" fold-var_656))"
" fold-var_653))"
" fold-var_653))))"
" for-loop_652)"
" null"
" lst_651)))))"
" fold-var_649))))"
"(values fold-var_650)))))"
"(if #t"
"(for-loop_644 fold-var_648(unsafe-cdr lst_646))"
" fold-var_648))"
" fold-var_645))"
" fold-var_645))))"
" for-loop_644)"
" null"
" lst_643))))))"
"(correlate*"
" s_552"
"(list"
" core-sym_551"
"(alt-reverse"
"(let-values(((lst_659) symss_577)((lst_660) rhs131_559))"
"(begin"
"(if(list? lst_659)(void)(let-values()(in-list lst_659)))"
"(if(list? lst_660)(void)(let-values()(in-list lst_660)))"
"((letrec-values(((for-loop_661)"
"(lambda(fold-var_662 lst_663 lst_664)"
"(if(if(pair? lst_663)(pair? lst_664) #f)"
"(let-values(((syms_665)(unsafe-car lst_663))"
"((rhs_666)(unsafe-car lst_664)))"
"(if(if #t #t #f)"
"(let-values(((fold-var_667)"
"(let-values(((fold-var_668) fold-var_662))"
"(let-values(((fold-var_669)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" syms_665"
"(1/compile rhs_666 cctx_553)))"
" fold-var_668))))"
"(values fold-var_669)))))"
"(if(if #t #t #f)"
"(for-loop_661 fold-var_667(unsafe-cdr lst_663)(unsafe-cdr lst_664))"
" fold-var_667))"
" fold-var_662))"
" fold-var_662))))"
" for-loop_661)"
" null"
" lst_659"
" lst_660))))"
"(1/compile body132_560 cctx_553 result-used?_554))))))))))"
"(define-values"
"(compile-identifier13.1)"
"(lambda(set-to7_670 set-to9_671 top?8_672 top?10_673 s11_674 cctx12_675)"
"(let-values(((s_676) s11_674))"
"(let-values(((cctx_677) cctx12_675))"
"(let-values(((rhs_678)(if set-to9_671 set-to7_670 #f)))"
"(let-values(((top?_679)(if top?10_673 top?8_672 #f)))"
"(let-values()"
"(let-values(((phase_680)(compile-context-phase cctx_677)))"
"(let-values(((normal-b_681)"
"(let-values(((s147_684) s_676)((phase148_685) phase_680))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f s147_684 phase148_685)"
"(resolve+shift15.1 s147_684 phase148_685)))))"
"(let-values(((b_682)"
"(let-values(((or-part_686) normal-b_681))"
"(if or-part_686"
" or-part_686"
"(let-values(((temp149_687)(compile-context-self cctx_677))"
"((phase150_688) phase_680)"
"((temp151_689)(syntax-e$1 s_676)))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp149_687"
" phase150_688"
" temp151_689)"
"(make-module-binding22.1 temp149_687 phase150_688 temp151_689)))))))"
"(let-values(((sym_683)"
"(if(local-binding? b_682)"
"(let-values()"
"(let-values(((sym_690)(local-key->symbol(local-binding-key b_682))))"
"(begin"
"(if sym_690"
"(void)"
"                                            (let-values () (error \"missing a binding after expansion:\" s_676)))"
" sym_690)))"
"(if(module-binding? b_682)"
"(let-values()"
"(let-values(((mpi_691)"
"(if top?_679"
"(compile-context-self cctx_677)"
"(module-binding-module b_682))))"
"(let-values(((mod-name_692)(1/module-path-index-resolve mpi_691)))"
"(let-values(((ns_693)(compile-context-namespace cctx_677)))"
"(let-values(((mod_694)(namespace->module ns_693 mod-name_692)))"
"(if(if mod_694(module-primitive? mod_694) #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(zero?(module-binding-phase b_682))"
"(void)"
"(let-values()"
"(error"
"                                                                         \"internal error: non-zero phase for a primitive\")))"
"(values))))"
"(let-values((()"
"(begin"
"(if rhs_678"
"(let-values()"
"(error"
"                                                                           \"internal error: cannot assign to a primitive:\""
" s_676))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ns152_696) ns_693)"
"((mpi153_697) mpi_691)"
"((temp154_698) 0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!93.1))"
"(namespace-module-instantiate!91.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns152_696"
" mpi153_697"
" temp154_698)"
"(namespace-module-instantiate!93.1"
" ns152_696"
" mpi153_697"
" temp154_698)))"
"(values))))"
"(let-values(((m-ns_695)"
"(let-values(((ns155_699) ns_693)"
"((mod-name156_700) mod-name_692)"
"((temp157_701) 0))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace79.1))"
"(namespace->module-namespace77.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns155_699"
" mod-name156_700"
" temp157_701)"
"(namespace->module-namespace79.1"
" ns155_699"
" mod-name156_700"
" temp157_701)))))"
"(module-binding-sym b_682))))))"
"(if(eq? mpi_691(compile-context-module-self cctx_677))"
"(let-values()"
"(let-values(((header_702)(compile-context-header cctx_677)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_702)"
"(module-binding-sym b_682))))"
"(let-values()"
"(let-values(((temp158_703)(compile-context-header cctx_677))"
"((mpi159_704) mpi_691)"
"((temp160_705)(module-binding-phase b_682))"
"((temp161_706)(module-binding-sym b_682))"
"((temp162_707)"
"(let-values(((or-part_708)"
"(module-binding-extra-inspector"
" b_682)))"
"(if or-part_708"
" or-part_708"
"(syntax-inspector s_676)))))"
"(if(variable-reference-constant?"
"(#%variable-reference register-required-variable-use!20.1))"
"(register-required-variable-use!18.1"
" #f"
" #f"
" temp158_703"
" mpi159_704"
" temp160_705"
" temp161_706"
" temp162_707)"
"(register-required-variable-use!20.1"
" temp158_703"
" mpi159_704"
" temp160_705"
" temp161_706"
" temp162_707)))))))))))"
"                                      (let-values () (error \"not a reference to a module or local binding:\" s_676))))))"
"(correlate* s_676(if rhs_678(list 'set! sym_683 rhs_678) sym_683)))))))))))))"
"(define-values"
"(unpack14.1$1)"
"(lambda(given-kws_709 given-args_710 s11_711 cctx12_712)"
"(let-values(((set-to9_713)(if(pair? given-kws_709)(eq? '#:set-to(car given-kws_709)) #f)))"
"(let-values(((set-to7_714)(if set-to9_713(car given-args_710)(void)))"
"((given-kws_715)(if set-to9_713(cdr given-kws_709) given-kws_709))"
"((given-args_716)(if set-to9_713(cdr given-args_710) given-args_710)))"
"(let-values(((top?10_717)(pair? given-kws_715)))"
"(let-values(((top?8_718)(if top?10_717(car given-args_716)(void))))"
"(compile-identifier13.1 set-to7_714 set-to9_713 top?8_718 top?10_717 s11_711 cctx12_712)))))))"
"(define-values"
"(compile-identifier15.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_719 given-argc_720)"
"(if(= given-argc_720 4)"
"(let-values(((l1_721) given-kws_719))"
"(let-values(((l1_722)(if(null? l1_721) l1_721(if(eq?(car l1_721) '#:set-to)(cdr l1_721) l1_721))))"
"(let-values(((l1_723) l1_722))"
"(let-values(((l1_724)(if(null? l1_723) l1_723(if(eq?(car l1_723) '#:top?)(cdr l1_723) l1_723))))"
"(null? l1_724)))))"
" #f))"
"(case-lambda"
"((given-kws_725 given-args_726 s_727 cctx_728)(unpack14.1$1 given-kws_725 given-args_726 s_727 cctx_728)))"
" null"
" '(#:set-to #:top?)"
"(let-values(((compile-identifier_729)(case-lambda((s_730 cctx_731)(unpack14.1$1 null null s_730 cctx_731)))))"
" compile-identifier_729)))"
"(define-values"
"(local-id->symbol)"
"(lambda(id_732 phase_733)"
"(let-values(((b_734)"
"(let-values(((id163_735) id_732)((phase164_736) phase_733))"
"(if(variable-reference-constant?(#%variable-reference resolve23.1))"
"(resolve21.1 #f #f #f #f #f #f id163_735 phase164_736)"
"(resolve23.1 id163_735 phase164_736)))))"
"(begin"
"        (if (local-binding? b_734) (void) (let-values () (error \"bad binding:\" id_732 phase_733)))"
"(local-key->symbol(local-binding-key b_734))))))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_737 phase_738 cctx_739)"
"(let-values(((pos_740)(add-syntax-literal!(compile-context-header cctx_739) q_737)))"
"(if(compile-context-lazy-syntax-literals? cctx_739)"
"(let-values()(generate-lazy-syntax-literal-lookup phase_738 pos_740))"
"(let-values()(generate-eager-syntax-literal-lookup phase_738 pos_740))))))"
"(define-values"
"(def-ids-to-binding-syms)"
"(lambda(ids_1 phase_2 self_3)"
"(alt-reverse"
"(let-values(((lst_4) ids_1))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((id_8)(unsafe-car lst_7)))"
"(if #t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_12)"
"(let-values(((...ile/id-to-symbol.rkt:12:14_13)"
" resolve+shift15.1)"
"((id1_14) id_8)"
"((phase2_15) phase_2)"
"((temp3_16) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp3_16"
" #t"
" #f"
" #f"
" id1_14"
" phase2_15)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ile/id-to-symbol.rkt:12:14_13"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp3_16)"
" id1_14"
" phase2_15)))))"
"(begin"
"(if(if(module-binding? b_12)"
"(if(eq?"
" self_3"
"(module-binding-module b_12))"
"(eqv?"
" phase_2"
"(module-binding-phase b_12))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(error"
"                                                                               \"bad binding for definition:\""
" id_8"
" self_3"
"                                                                               \"vs.\""
"(if b_12(module-binding-module b_12) #f)"
" phase_2)))"
"(module-binding-sym b_12))))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if #t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))"
"(define-values"
"(compile-forms14.1)"
"(lambda(compiled-expression-callback3_1"
" compiled-expression-callback8_2"
" encoded-root-expand-ctx-box1_3"
" encoded-root-expand-ctx-box6_4"
" other-form-callback4_5"
" other-form-callback9_6"
" root-ctx-only-if-syntax?2_7"
" root-ctx-only-if-syntax?7_8"
" to-source?5_9"
" to-source?10_10"
" bodys11_11"
" cctx12_12"
" mpis13_13)"
"(let-values(((bodys_14) bodys11_11))"
"(let-values(((cctx_15) cctx12_12))"
"(let-values(((mpis_16) mpis13_13))"
"(let-values(((encoded-root-expand-ctx-box_17)"
"(if encoded-root-expand-ctx-box6_4 encoded-root-expand-ctx-box1_3 #f)))"
"(let-values(((root-ctx-only-if-syntax?_18)"
"(if root-ctx-only-if-syntax?7_8 root-ctx-only-if-syntax?2_7 #f)))"
"(let-values(((compiled-expression-callback_19)"
"(if compiled-expression-callback8_2 compiled-expression-callback3_1 void)))"
"(let-values(((other-form-callback_20)(if other-form-callback9_6 other-form-callback4_5 void)))"
"(let-values(((to-source?_21)(if to-source?10_10 to-source?5_9 #f)))"
"(let-values()"
"(let-values(((phase_22)(compile-context-phase cctx_15)))"
"(let-values(((self_23)(compile-context-self cctx_15)))"
"(let-values(((phase-to-body_24)(make-hasheqv)))"
"(let-values(((add-body!_25)"
"(lambda(phase_49 body_50)"
"(hash-update!"
" phase-to-body_24"
" phase_49"
"(lambda(l_51)(cons body_50 l_51))"
" null))))"
"(let-values(((phase-to-header_26)(make-hasheqv)))"
"(let-values(((find-or-create-header!_27)"
"(lambda(phase_52)"
"(let-values(((or-part_53)(hash-ref phase-to-header_26 phase_52 #f)))"
"(if or-part_53"
" or-part_53"
"(let-values(((header_54)(make-header mpis_16)))"
"(begin"
"(hash-set! phase-to-header_26 phase_52 header_54)"
" header_54)))))))"
"(let-values(((saw-define-syntaxes?_28) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_15)"
"(let-values()"
"((letrec-values(((loop!_55)"
"(lambda(bodys_56 phase_57 header_58)"
"(let-values(((lst_59) bodys_56))"
"(begin"
"(if(list? lst_59)"
"(void)"
"(let-values()(in-list lst_59)))"
"((letrec-values(((for-loop_60)"
"(lambda(fold-var_61"
" lst_62)"
"(if(pair? lst_62)"
"(let-values(((body_63)"
"(unsafe-car"
" lst_62)))"
"(if #t"
"(let-values(((fold-var_64)"
"(let-values(((fold-var_65)"
" fold-var_61))"
"(let-values(((fold-var_66)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_67)"
"(core-form-sym"
" body_63"
" phase_57)))"
"(if(equal?"
" tmp_67"
" 'define-values)"
"(let-values()"
"(let-values(((ok?_68"
" define-values18_69"
" id19_70"
" rhs20_71)"
"(let-values(((s_84)"
" body_63))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_85)"
" s_84))"
"(let-values(((define-values18_86"
" id19_87"
" rhs20_88)"
"(let-values(((s_89)"
"(if(syntax?$1"
" s_84)"
"(syntax-e$1"
" s_84)"
" s_84)))"
"(if(pair?"
" s_89)"
"(let-values(((define-values21_90)"
"(let-values(((s_93)"
"(car"
" s_89)))"
" s_93))"
"((id22_91"
" rhs23_92)"
"(let-values(((s_94)"
"(cdr"
" s_89)))"
"(let-values(((s_95)"
"(if(syntax?$1"
" s_94)"
"(syntax-e$1"
" s_94)"
" s_94)))"
"(if(pair?"
" s_95)"
"(let-values(((id24_96)"
"(let-values(((s_98)"
"(car"
" s_95)))"
"(let-values(((s_99)"
"(if(syntax?$1"
" s_98)"
"(syntax-e$1"
" s_98)"
" s_98)))"
"(let-values(((flat-s_100)"
"(to-syntax-list.1$1"
" s_99)))"
"(if(not"
" flat-s_100)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_85))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_85))"
"(let-values()"
"(let-values(((id_101)"
"(let-values(((lst_102)"
" flat-s_100))"
"(begin"
"(if(list?"
" lst_102)"
"(void)"
"(let-values()"
"(in-list"
" lst_102)))"
"((letrec-values(((for-loop_103)"
"(lambda(id_104"
" lst_105)"
"(if(pair?"
" lst_105)"
"(let-values(((s_106)"
"(unsafe-car"
" lst_105)))"
"(if #t"
"(let-values(((id_107)"
"(let-values(((id_108)"
" id_104))"
"(let-values(((id_109)"
"(let-values()"
"(let-values(((id27_110)"
"(let-values()"
"(if(let-values(((or-part_111)"
"(if(syntax?$1"
" s_106)"
"(symbol?"
"(syntax-e$1"
" s_106))"
" #f)))"
"(if or-part_111"
" or-part_111"
"(symbol?"
" s_106)))"
" s_106"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_85"
" s_106)))))"
"(cons"
" id27_110"
" id_108)))))"
"(values"
" id_109)))))"
"(if #t"
"(for-loop_103"
" id_107"
"(unsafe-cdr"
" lst_105))"
" id_107))"
" id_104))"
" id_104))))"
" for-loop_103)"
" null"
" lst_102)))))"
"(alt-reverse"
" id_101)))))))))"
"((rhs25_97)"
"(let-values(((s_112)"
"(cdr"
" s_95)))"
"(let-values(((s_113)"
"(if(syntax?$1"
" s_112)"
"(syntax-e$1"
" s_112)"
" s_112)))"
"(if(pair?"
" s_113)"
"(let-values(((rhs26_114)"
"(let-values(((s_115)"
"(car"
" s_113)))"
" s_115))"
"(()"
"(let-values(((s_116)"
"(cdr"
" s_113)))"
"(let-values(((s_117)"
"(if(syntax?$1"
" s_116)"
"(syntax-e$1"
" s_116)"
" s_116)))"
"(if(null?"
" s_117)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_85))))))"
"(values"
" rhs26_114))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_85))))))"
"(values"
" id24_96"
" rhs25_97))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_85))))))"
"(values"
" define-values21_90"
" id22_91"
" rhs23_92))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_85)))))"
"(values"
" #t"
" define-values18_86"
" id19_87"
" rhs20_88)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((lst_118)"
"(def-ids-to-binding-syms"
" id19_70"
" phase_57"
" self_23)))"
"(begin"
"(if(list?"
" lst_118)"
"(void)"
"(let-values()"
"(in-list"
" lst_118)))"
"((letrec-values(((for-loop_119)"
"(lambda(fold-var_120"
" lst_121)"
"(if(pair?"
" lst_121)"
"(let-values(((sym_122)"
"(unsafe-car"
" lst_121)))"
"(if #t"
"(let-values(((fold-var_123)"
"(let-values(((fold-var_124)"
" fold-var_120))"
"(let-values(((fold-var_125)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_126)"
"(select-fresh"
" sym_122"
" header_58)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_58)"
" sym_122"
" def-sym_126)"
"(set-header-binding-syms-in-order!"
" header_58"
"(cons"
" sym_122"
"(header-binding-syms-in-order"
" header_58)))"
"(register-as-defined!"
" header_58"
" def-sym_126))))"
"(void)))))"
"(values"
" fold-var_125)))))"
"(if #t"
"(for-loop_119"
" fold-var_123"
"(unsafe-cdr"
" lst_121))"
" fold-var_123))"
" fold-var_120))"
" fold-var_120))))"
" for-loop_119)"
"(void)"
" lst_118)))))"
"(if(equal?"
" tmp_67"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_127"
" begin-for-syntax28_128"
" e29_129)"
"(let-values(((s_140)"
" body_63))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_141)"
" s_140))"
"(let-values(((begin-for-syntax28_142"
" e29_143)"
"(let-values(((s_144)"
"(if(syntax?$1"
" s_140)"
"(syntax-e$1"
" s_140)"
" s_140)))"
"(if(pair?"
" s_144)"
"(let-values(((begin-for-syntax30_145)"
"(let-values(((s_147)"
"(car"
" s_144)))"
" s_147))"
"((e31_146)"
"(let-values(((s_148)"
"(cdr"
" s_144)))"
"(let-values(((s_149)"
"(if(syntax?$1"
" s_148)"
"(syntax-e$1"
" s_148)"
" s_148)))"
"(let-values(((flat-s_150)"
"(to-syntax-list.1$1"
" s_149)))"
"(if(not"
" flat-s_150)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_141))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_141))"
"(let-values()"
"(let-values(((e_151)"
"(let-values(((lst_152)"
" flat-s_150))"
"(begin"
"(if(list?"
" lst_152)"
"(void)"
"(let-values()"
"(in-list"
" lst_152)))"
"((letrec-values(((for-loop_153)"
"(lambda(e_154"
" lst_155)"
"(if(pair?"
" lst_155)"
"(let-values(((s_156)"
"(unsafe-car"
" lst_155)))"
"(if #t"
"(let-values(((e_157)"
"(let-values(((e_158)"
" e_154))"
"(let-values(((e_159)"
"(let-values()"
"(let-values(((e32_160)"
"(let-values()"
" s_156)))"
"(cons"
" e32_160"
" e_158)))))"
"(values"
" e_159)))))"
"(if #t"
"(for-loop_153"
" e_157"
"(unsafe-cdr"
" lst_155))"
" e_157))"
" e_154))"
" e_154))))"
" for-loop_153)"
" null"
" lst_152)))))"
"(alt-reverse"
" e_151))))))))))"
"(values"
" begin-for-syntax30_145"
" e31_146))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_141)))))"
"(values"
" #t"
" begin-for-syntax28_142"
" e29_143)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop!_55"
" e29_129"
"(add1"
" phase_57)"
"(find-or-create-header!_27"
"(add1"
" phase_57)))))"
"(let-values()"
"(void))))))"
"(void)))))"
"(values"
" fold-var_66)))))"
"(if #t"
"(for-loop_60"
" fold-var_64"
"(unsafe-cdr"
" lst_62))"
" fold-var_64))"
" fold-var_61))"
" fold-var_61))))"
" for-loop_60)"
"(void)"
" lst_59))))))"
" loop!_55)"
" bodys_14"
" phase_22"
"(find-or-create-header!_27 phase_22)))"
"(void))"
"(values))))"
"(let-values(((as-required?_29)"
"(lambda(header_161)"
"(lambda(sym_162)(registered-as-required? header_161 sym_162)))))"
"(let-values(((last-i_30)(sub1(length bodys_14))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_163)"
"(lambda(bodys_164 phase_165 header_166)"
"(let-values(((lst_167) bodys_164)"
"((start_168) 0))"
"(begin"
"(if(list? lst_167)"
"(void)"
"(let-values()(in-list lst_167)))"
"(if(exact-nonnegative-integer?"
" start_168)"
"(void)"
"(let-values()"
"(in-naturals start_168)))"
"((letrec-values(((for-loop_169)"
"(lambda(fold-var_170"
" lst_171"
" pos_172)"
"(if(if(pair?"
" lst_171)"
" #t"
" #f)"
"(let-values(((in-body_173)"
"(unsafe-car"
" lst_171))"
"((i_174)"
" pos_172))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_175)"
"(let-values(((fold-var_176)"
" fold-var_170))"
"(let-values(((fold-var_177)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((body_178)"
"(syntax-disarm$1"
" in-body_173)))"
"(let-values(((tmp_179)"
"(core-form-sym"
" body_178"
" phase_165)))"
"(if(equal?"
" tmp_179"
" 'define-values)"
"(let-values()"
"(let-values(((ok?_180"
" define-values33_181"
" id34_182"
" rhs35_183)"
"(let-values(((s_200)"
" body_178))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_201)"
" s_200))"
"(let-values(((define-values33_202"
" id34_203"
" rhs35_204)"
"(let-values(((s_205)"
"(if(syntax?$1"
" s_200)"
"(syntax-e$1"
" s_200)"
" s_200)))"
"(if(pair?"
" s_205)"
"(let-values(((define-values36_206)"
"(let-values(((s_209)"
"(car"
" s_205)))"
" s_209))"
"((id37_207"
" rhs38_208)"
"(let-values(((s_210)"
"(cdr"
" s_205)))"
"(let-values(((s_211)"
"(if(syntax?$1"
" s_210)"
"(syntax-e$1"
" s_210)"
" s_210)))"
"(if(pair?"
" s_211)"
"(let-values(((id39_212)"
"(let-values(((s_214)"
"(car"
" s_211)))"
"(let-values(((s_215)"
"(if(syntax?$1"
" s_214)"
"(syntax-e$1"
" s_214)"
" s_214)))"
"(let-values(((flat-s_216)"
"(to-syntax-list.1$1"
" s_215)))"
"(if(not"
" flat-s_216)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_201))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_201))"
"(let-values()"
"(let-values(((id_217)"
"(let-values(((lst_218)"
" flat-s_216))"
"(begin"
"(if(list?"
" lst_218)"
"(void)"
"(let-values()"
"(in-list"
" lst_218)))"
"((letrec-values(((for-loop_219)"
"(lambda(id_220"
" lst_221)"
"(if(pair?"
" lst_221)"
"(let-values(((s_222)"
"(unsafe-car"
" lst_221)))"
"(if #t"
"(let-values(((id_223)"
"(let-values(((id_224)"
" id_220))"
"(let-values(((id_225)"
"(let-values()"
"(let-values(((id42_226)"
"(let-values()"
"(if(let-values(((or-part_227)"
"(if(syntax?$1"
" s_222)"
"(symbol?"
"(syntax-e$1"
" s_222))"
" #f)))"
"(if or-part_227"
" or-part_227"
"(symbol?"
" s_222)))"
" s_222"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_201"
" s_222)))))"
"(cons"
" id42_226"
" id_224)))))"
"(values"
" id_225)))))"
"(if #t"
"(for-loop_219"
" id_223"
"(unsafe-cdr"
" lst_221))"
" id_223))"
" id_220))"
" id_220))))"
" for-loop_219)"
" null"
" lst_218)))))"
"(alt-reverse"
" id_217)))))))))"
"((rhs40_213)"
"(let-values(((s_228)"
"(cdr"
" s_211)))"
"(let-values(((s_229)"
"(if(syntax?$1"
" s_228)"
"(syntax-e$1"
" s_228)"
" s_228)))"
"(if(pair?"
" s_229)"
"(let-values(((rhs41_230)"
"(let-values(((s_231)"
"(car"
" s_229)))"
" s_231))"
"(()"
"(let-values(((s_232)"
"(cdr"
" s_229)))"
"(let-values(((s_233)"
"(if(syntax?$1"
" s_232)"
"(syntax-e$1"
" s_232)"
" s_232)))"
"(if(null?"
" s_233)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_201))))))"
"(values"
" rhs41_230))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_201))))))"
"(values"
" id39_212"
" rhs40_213))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_201))))))"
"(values"
" define-values36_206"
" id37_207"
" rhs38_208))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_201)))))"
"(values"
" #t"
" define-values33_202"
" id34_203"
" rhs35_204)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_196)"
" id34_182))"
"(let-values(((binding-syms_197)"
"(def-ids-to-binding-syms"
" ids_196"
" phase_165"
" self_23)))"
"(let-values(((def-syms_198)"
"(if(compile-context-module-self"
" cctx_15)"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_234)"
" binding-syms_197))"
"(begin"
"(if(list?"
" lst_234)"
"(void)"
"(let-values()"
"(in-list"
" lst_234)))"
"((letrec-values(((for-loop_235)"
"(lambda(fold-var_236"
" lst_237)"
"(if(pair?"
" lst_237)"
"(let-values(((binding-sym_238)"
"(unsafe-car"
" lst_237)))"
"(if #t"
"(let-values(((fold-var_239)"
"(let-values(((fold-var_240)"
" fold-var_236))"
"(let-values(((fold-var_241)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_166)"
" binding-sym_238))"
" fold-var_240))))"
"(values"
" fold-var_241)))))"
"(if #t"
"(for-loop_235"
" fold-var_239"
"(unsafe-cdr"
" lst_237))"
" fold-var_239))"
" fold-var_236))"
" fold-var_236))))"
" for-loop_235)"
" null"
" lst_234)))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_242)"
" binding-syms_197))"
"(begin"
"(if(list?"
" lst_242)"
"(void)"
"(let-values()"
"(in-list"
" lst_242)))"
"((letrec-values(((for-loop_243)"
"(lambda(fold-var_244"
" lst_245)"
"(if(pair?"
" lst_245)"
"(let-values(((binding-sym_246)"
"(unsafe-car"
" lst_245)))"
"(if #t"
"(let-values(((fold-var_247)"
"(let-values(((fold-var_248)"
" fold-var_244))"
"(let-values(((fold-var_249)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...der/compile/form.rkt:103:15_250)"
" register-required-variable-use!20.1)"
"((header43_251)"
" header_166)"
"((temp44_252)"
"(compile-context-self"
" cctx_15))"
"((phase45_253)"
" phase_165)"
"((binding-sym46_254)"
" binding-sym_246)"
"((temp47_255)"
" #f)"
"((temp48_256)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" register-required-variable-use!20.1))"
"(register-required-variable-use!18.1"
" temp48_256"
" #t"
" header43_251"
" temp44_252"
" phase45_253"
" binding-sym46_254"
" temp47_255)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...der/compile/form.rkt:103:15_250"
" keyword-procedure-extract"
" '(#:defined?)"
" 7)"
" '(#:defined?)"
"(list"
" temp48_256)"
" header43_251"
" temp44_252"
" phase45_253"
" binding-sym46_254"
" temp47_255))))"
" fold-var_248))))"
"(values"
" fold-var_249)))))"
"(if #t"
"(for-loop_243"
" fold-var_247"
"(unsafe-cdr"
" lst_245))"
" fold-var_247))"
" fold-var_244))"
" fold-var_244))))"
" for-loop_243)"
" null"
" lst_242))))))))"
"(let-values(((rhs_199)"
"(1/compile"
" rhs35_183"
"(let-values(((the-struct_257)"
" cctx_15))"
"(if(compile-context?"
" the-struct_257)"
"(let-values(((phase49_258)"
" phase_165)"
"((header50_259)"
" header_166))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_257)"
" phase49_258"
"(compile-context-self"
" the-struct_257)"
"(compile-context-module-self"
" the-struct_257)"
"(compile-context-full-module-name"
" the-struct_257)"
"(compile-context-lazy-syntax-literals?"
" the-struct_257)"
" header50_259))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                    \"compile-context?\""
" the-struct_257))))))"
"(begin"
"(compiled-expression-callback_19"
" rhs_199"
"(length"
" def-syms_198)"
" phase_165"
"(as-required?_29"
" header_166))"
"(add-body!_25"
" phase_165"
"(list"
" 'define-values"
" def-syms_198"
" rhs_199))"
"(if(let-values(((or-part_260)"
"(compile-context-module-self"
" cctx_15)))"
"(if or-part_260"
" or-part_260"
"(null?"
" ids_196)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_25"
" phase_165"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_261)"
" def-syms_198))"
"(begin"
"(if(list?"
" lst_261)"
"(void)"
"(let-values()"
"(in-list"
" lst_261)))"
"((letrec-values(((for-loop_262)"
"(lambda(fold-var_263"
" lst_264)"
"(if(pair?"
" lst_264)"
"(let-values(((def-sym_265)"
"(unsafe-car"
" lst_264)))"
"(if #t"
"(let-values(((fold-var_266)"
"(let-values(((fold-var_267)"
" fold-var_263))"
"(let-values(((fold-var_268)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'set!"
" def-sym_265"
" '(#f)))"
" fold-var_267))))"
"(values"
" fold-var_268)))))"
"(if #t"
"(for-loop_262"
" fold-var_266"
"(unsafe-cdr"
" lst_264))"
" fold-var_266))"
" fold-var_263))"
" fold-var_263))))"
" for-loop_262)"
" null"
" lst_261)))))"
" '((void))))"
"(add-body!_25"
" phase_165"
"(compile-top-level-bind"
" ids_196"
" binding-syms_197"
"(let-values(((the-struct_269)"
" cctx_15))"
"(if(compile-context?"
" the-struct_269)"
"(let-values(((phase51_270)"
" phase_165)"
"((header52_271)"
" header_166))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_269)"
" phase51_270"
"(compile-context-self"
" the-struct_269)"
"(compile-context-module-self"
" the-struct_269)"
"(compile-context-full-module-name"
" the-struct_269)"
"(compile-context-lazy-syntax-literals?"
" the-struct_269)"
" header52_271))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                 \"compile-context?\""
" the-struct_269)))"
" #f))))))))))))"
"(if(equal?"
" tmp_179"
" 'define-syntaxes)"
"(let-values()"
"(let-values(((ok?_272"
" define-syntaxes53_273"
" id54_274"
" rhs55_275)"
"(let-values(((s_294)"
" body_178))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_295)"
" s_294))"
"(let-values(((define-syntaxes53_296"
" id54_297"
" rhs55_298)"
"(let-values(((s_299)"
"(if(syntax?$1"
" s_294)"
"(syntax-e$1"
" s_294)"
" s_294)))"
"(if(pair?"
" s_299)"
"(let-values(((define-syntaxes56_300)"
"(let-values(((s_303)"
"(car"
" s_299)))"
" s_303))"
"((id57_301"
" rhs58_302)"
"(let-values(((s_304)"
"(cdr"
" s_299)))"
"(let-values(((s_305)"
"(if(syntax?$1"
" s_304)"
"(syntax-e$1"
" s_304)"
" s_304)))"
"(if(pair?"
" s_305)"
"(let-values(((id59_306)"
"(let-values(((s_308)"
"(car"
" s_305)))"
"(let-values(((s_309)"
"(if(syntax?$1"
" s_308)"
"(syntax-e$1"
" s_308)"
" s_308)))"
"(let-values(((flat-s_310)"
"(to-syntax-list.1$1"
" s_309)))"
"(if(not"
" flat-s_310)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_295))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_295))"
"(let-values()"
"(let-values(((id_311)"
"(let-values(((lst_312)"
" flat-s_310))"
"(begin"
"(if(list?"
" lst_312)"
"(void)"
"(let-values()"
"(in-list"
" lst_312)))"
"((letrec-values(((for-loop_313)"
"(lambda(id_314"
" lst_315)"
"(if(pair?"
" lst_315)"
"(let-values(((s_316)"
"(unsafe-car"
" lst_315)))"
"(if #t"
"(let-values(((id_317)"
"(let-values(((id_318)"
" id_314))"
"(let-values(((id_319)"
"(let-values()"
"(let-values(((id62_320)"
"(let-values()"
"(if(let-values(((or-part_321)"
"(if(syntax?$1"
" s_316)"
"(symbol?"
"(syntax-e$1"
" s_316))"
" #f)))"
"(if or-part_321"
" or-part_321"
"(symbol?"
" s_316)))"
" s_316"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_295"
" s_316)))))"
"(cons"
" id62_320"
" id_318)))))"
"(values"
" id_319)))))"
"(if #t"
"(for-loop_313"
" id_317"
"(unsafe-cdr"
" lst_315))"
" id_317))"
" id_314))"
" id_314))))"
" for-loop_313)"
" null"
" lst_312)))))"
"(alt-reverse"
" id_311)))))))))"
"((rhs60_307)"
"(let-values(((s_322)"
"(cdr"
" s_305)))"
"(let-values(((s_323)"
"(if(syntax?$1"
" s_322)"
"(syntax-e$1"
" s_322)"
" s_322)))"
"(if(pair?"
" s_323)"
"(let-values(((rhs61_324)"
"(let-values(((s_325)"
"(car"
" s_323)))"
" s_325))"
"(()"
"(let-values(((s_326)"
"(cdr"
" s_323)))"
"(let-values(((s_327)"
"(if(syntax?$1"
" s_326)"
"(syntax-e$1"
" s_326)"
" s_326)))"
"(if(null?"
" s_327)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_295))))))"
"(values"
" rhs61_324))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_295))))))"
"(values"
" id59_306"
" rhs60_307))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_295))))))"
"(values"
" define-syntaxes56_300"
" id57_301"
" rhs58_302))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_295)))))"
"(values"
" #t"
" define-syntaxes53_296"
" id54_297"
" rhs55_298)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_288)"
" id54_274))"
"(let-values(((binding-syms_289)"
"(def-ids-to-binding-syms"
" ids_288"
" phase_165"
" self_23)))"
"(let-values(((next-header_290)"
"(find-or-create-header!_27"
"(add1"
" phase_165))))"
"(let-values(((gen-syms_291)"
"(alt-reverse"
"(let-values(((lst_328)"
" binding-syms_289))"
"(begin"
"(if(list?"
" lst_328)"
"(void)"
"(let-values()"
"(in-list"
" lst_328)))"
"((letrec-values(((for-loop_329)"
"(lambda(fold-var_330"
" lst_331)"
"(if(pair?"
" lst_331)"
"(let-values(((binding-sym_332)"
"(unsafe-car"
" lst_331)))"
"(if #t"
"(let-values(((fold-var_333)"
"(let-values(((fold-var_334)"
" fold-var_330))"
"(let-values(((fold-var_335)"
"(let-values()"
"(cons"
"(let-values()"
"(select-fresh"
" binding-sym_332"
" next-header_290))"
" fold-var_334))))"
"(values"
" fold-var_335)))))"
"(if #t"
"(for-loop_329"
" fold-var_333"
"(unsafe-cdr"
" lst_331))"
" fold-var_333))"
" fold-var_330))"
" fold-var_330))))"
" for-loop_329)"
" null"
" lst_328))))))"
"(let-values(((rhs_292)"
"(1/compile"
" rhs55_275"
"(let-values(((the-struct_336)"
" cctx_15))"
"(if(compile-context?"
" the-struct_336)"
"(let-values(((phase63_337)"
"(add1"
" phase_165))"
"((header64_338)"
" next-header_290))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_336)"
" phase63_337"
"(compile-context-self"
" the-struct_336)"
"(compile-context-module-self"
" the-struct_336)"
"(compile-context-full-module-name"
" the-struct_336)"
"(compile-context-lazy-syntax-literals?"
" the-struct_336)"
" header64_338))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                        \"compile-context?\""
" the-struct_336))))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_19"
" rhs_292"
"(length"
" gen-syms_291)"
"(add1"
" phase_165)"
"(as-required?_29"
" header_166))"
"(values))))"
"(let-values(((transformer-set!s_293)"
"(alt-reverse"
"(let-values(((lst_339)"
" binding-syms_289)"
"((lst_340)"
" gen-syms_291))"
"(begin"
"(if(list?"
" lst_339)"
"(void)"
"(let-values()"
"(in-list"
" lst_339)))"
"(if(list?"
" lst_340)"
"(void)"
"(let-values()"
"(in-list"
" lst_340)))"
"((letrec-values(((for-loop_341)"
"(lambda(fold-var_342"
" lst_343"
" lst_344)"
"(if(if(pair?"
" lst_343)"
"(pair?"
" lst_344)"
" #f)"
"(let-values(((binding-sym_345)"
"(unsafe-car"
" lst_343))"
"((gen-sym_346)"
"(unsafe-car"
" lst_344)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_347)"
"(let-values(((fold-var_348)"
" fold-var_342))"
"(let-values(((fold-var_349)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_345)"
" gen-sym_346))"
" fold-var_348))))"
"(values"
" fold-var_349)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_341"
" fold-var_347"
"(unsafe-cdr"
" lst_343)"
"(unsafe-cdr"
" lst_344))"
" fold-var_347))"
" fold-var_342))"
" fold-var_342))))"
" for-loop_341)"
" null"
" lst_339"
" lst_340))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_15)"
"(let-values()"
"(add-body!_25"
"(add1"
" phase_165)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_291"
" rhs_292))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_293"
" '((void)))))))"
"(let-values()"
"(add-body!_25"
"(add1"
" phase_165)"
"(generate-top-level-define-syntaxes"
" gen-syms_291"
" rhs_292"
" transformer-set!s_293"
"(compile-top-level-bind"
" ids_288"
" binding-syms_289"
"(let-values(((the-struct_350)"
" cctx_15))"
"(if(compile-context?"
" the-struct_350)"
"(let-values(((phase65_351)"
" phase_165)"
"((header66_352)"
" header_166))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_350)"
" phase65_351"
"(compile-context-self"
" the-struct_350)"
"(compile-context-module-self"
" the-struct_350)"
"(compile-context-full-module-name"
" the-struct_350)"
"(compile-context-lazy-syntax-literals?"
" the-struct_350)"
" header66_352))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                        \"compile-context?\""
" the-struct_350)))"
" gen-syms_291)))))"
"(set! saw-define-syntaxes?_28"
" #t)))))))))))"
"(if(equal?"
" tmp_179"
" 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_353"
" begin-for-syntax67_354"
" e68_355)"
"(let-values(((s_366)"
" body_178))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_367)"
" s_366))"
"(let-values(((begin-for-syntax67_368"
" e68_369)"
"(let-values(((s_370)"
"(if(syntax?$1"
" s_366)"
"(syntax-e$1"
" s_366)"
" s_366)))"
"(if(pair?"
" s_370)"
"(let-values(((begin-for-syntax69_371)"
"(let-values(((s_373)"
"(car"
" s_370)))"
" s_373))"
"((e70_372)"
"(let-values(((s_374)"
"(cdr"
" s_370)))"
"(let-values(((s_375)"
"(if(syntax?$1"
" s_374)"
"(syntax-e$1"
" s_374)"
" s_374)))"
"(let-values(((flat-s_376)"
"(to-syntax-list.1$1"
" s_375)))"
"(if(not"
" flat-s_376)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_367))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_367))"
"(let-values()"
"(let-values(((e_377)"
"(let-values(((lst_378)"
" flat-s_376))"
"(begin"
"(if(list?"
" lst_378)"
"(void)"
"(let-values()"
"(in-list"
" lst_378)))"
"((letrec-values(((for-loop_379)"
"(lambda(e_380"
" lst_381)"
"(if(pair?"
" lst_381)"
"(let-values(((s_382)"
"(unsafe-car"
" lst_381)))"
"(if #t"
"(let-values(((e_383)"
"(let-values(((e_384)"
" e_380))"
"(let-values(((e_385)"
"(let-values()"
"(let-values(((e71_386)"
"(let-values()"
" s_382)))"
"(cons"
" e71_386"
" e_384)))))"
"(values"
" e_385)))))"
"(if #t"
"(for-loop_379"
" e_383"
"(unsafe-cdr"
" lst_381))"
" e_383))"
" e_380))"
" e_380))))"
" for-loop_379)"
" null"
" lst_378)))))"
"(alt-reverse"
" e_377))))))))))"
"(values"
" begin-for-syntax69_371"
" e70_372))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_367)))))"
"(values"
" #t"
" begin-for-syntax67_368"
" e68_369)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop!_163"
" e68_355"
"(add1"
" phase_165)"
"(find-or-create-header!_27"
"(add1"
" phase_165)))))"
"(if(if(equal?"
" tmp_179"
" '#%require)"
" #t"
"(if(equal?"
" tmp_179"
" '#%provide)"
" #t"
"(if(equal?"
" tmp_179"
" '#%declare)"
" #t"
"(if(equal?"
" tmp_179"
" 'module)"
" #t"
"(equal?"
" tmp_179"
" 'module*)))))"
"(let-values()"
"(let-values(((e_387)"
"(other-form-callback_20"
" body_178"
"(let-values(((the-struct_388)"
" cctx_15))"
"(if(compile-context?"
" the-struct_388)"
"(let-values(((phase72_389)"
" phase_165)"
"((header73_390)"
" header_166))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_388)"
" phase72_389"
"(compile-context-self"
" the-struct_388)"
"(compile-context-module-self"
" the-struct_388)"
"(compile-context-full-module-name"
" the-struct_388)"
"(compile-context-lazy-syntax-literals?"
" the-struct_388)"
" header73_390))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                  \"compile-context?\""
" the-struct_388))))))"
"(if e_387"
"(let-values()"
"(begin"
"(compiled-expression-callback_19"
" e_387"
" #f"
" phase_165"
"(as-required?_29"
" header_166))"
"(add-body!_25"
" phase_165"
" e_387)))"
"(void))))"
"(let-values()"
"(let-values(((e_391)"
"(1/compile"
" body_178"
"(let-values(((the-struct_392)"
" cctx_15))"
"(if(compile-context?"
" the-struct_392)"
"(let-values(((phase74_393)"
" phase_165)"
"((header75_394)"
" header_166))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_392)"
" phase74_393"
"(compile-context-self"
" the-struct_392)"
"(compile-context-module-self"
" the-struct_392)"
"(compile-context-full-module-name"
" the-struct_392)"
"(compile-context-lazy-syntax-literals?"
" the-struct_392)"
" header75_394))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                  \"compile-context?\""
" the-struct_392)))"
"(="
" i_174"
" last-i_30))))"
"(begin"
"(compiled-expression-callback_19"
" e_391"
" #f"
" phase_165"
"(as-required?_29"
" header_166))"
"(add-body!_25"
" phase_165"
" e_391)))))))))))"
"(void)))))"
"(values"
" fold-var_177)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_169"
" fold-var_175"
"(unsafe-cdr"
" lst_171)"
"(+"
" pos_172"
" 1))"
" fold-var_175))"
" fold-var_170))"
" fold-var_170))))"
" for-loop_169)"
"(void)"
" lst_167"
" start_168))))))"
" loop!_163)"
" bodys_14"
" phase_22"
"(find-or-create-header!_27 phase_22))"
"(values))))"
"(let-values(((encoded-root-expand-header_31)"
"(if encoded-root-expand-ctx-box_17"
"(if(unbox encoded-root-expand-ctx-box_17)"
"(if(not"
"(if root-ctx-only-if-syntax?_18"
"(if(not saw-define-syntaxes?_28)"
"(let-values(((ht_395) phase-to-header_26))"
"(begin"
"(if((lambda(ht_396)(hash? ht_396)) ht_395)"
"(void)"
"(let-values()"
"(default-in-hash-values ht_395)))"
"((letrec-values(((for-loop_397)"
"(lambda(result_398 i_399)"
"(if i_399"
"(let-values(((h_400)"
"(hash-iterate-value"
" ht_395"
" i_399)))"
"(if #t"
"(let-values(((result_401)"
"(let-values(((result_402)"
" result_398))"
"(let-values(((result_403)"
"(let-values()"
"(let-values()"
"(header-empty-syntax-literals?"
" h_400)))))"
"(values"
" result_403)))))"
"(if(if #t"
"(not"
"((lambda x_404"
"(not"
" result_401))"
" h_400))"
" #f)"
"(for-loop_397"
" result_401"
"(hash-iterate-next"
" ht_395"
" i_399))"
" result_401))"
" result_398))"
" result_398))))"
" for-loop_397)"
" #t"
"(hash-iterate-first ht_395))))"
" #f)"
" #f))"
"(let-values(((h_405)"
"(find-or-create-header!_27 'root-ctx)))"
"(begin"
"(add-syntax-literal!"
" h_405"
"(unbox encoded-root-expand-ctx-box_17))"
" h_405))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_32)"
"(let-values(((temp76_406)(hash-keys phase-to-body_24))"
"((<77_407) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp76_406 <77_407)"
"(sort9.1 temp76_406 <77_407)))))"
"(let-values(((min-phase_33)"
"(if(pair? phases-in-order_32)"
"(car phases-in-order_32)"
" phase_22)))"
"(let-values(((max-phase_34)"
"(if(pair? phases-in-order_32)"
"(car(alt-reverse phases-in-order_32))"
" phase_22)))"
"(let-values(((struct:link-info_35"
" link-info17_36"
" link-info?_37"
" link-info-link-module-uses_38"
" link-info-imports_39"
" link-info-extra-inspectorsss_40"
" link-info-def-decls_41)"
"(let-values(((struct:_408"
" make-_409"
" ?_410"
" -ref_411"
" -set!_412)"
"(make-struct-type"
" 'link-info"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'link-info)))"
"(values"
" struct:_408"
" make-_409"
" ?_410"
"(make-struct-field-accessor"
" -ref_411"
" 0"
" 'link-module-uses)"
"(make-struct-field-accessor -ref_411 1 'imports)"
"(make-struct-field-accessor"
" -ref_411"
" 2"
" 'extra-inspectorsss)"
"(make-struct-field-accessor"
" -ref_411"
" 3"
" 'def-decls)))))"
"(let-values(((phase-to-link-info_43)"
"(let-values(((lst_444) phases-in-order_32))"
"(begin"
"(if(list? lst_444)"
"(void)"
"(let-values()(in-list lst_444)))"
"((letrec-values(((for-loop_445)"
"(lambda(table_446 lst_447)"
"(if(pair? lst_447)"
"(let-values(((phase_448)"
"(unsafe-car"
" lst_447)))"
"(if #t"
"(let-values(((table_449)"
"(let-values(((table_450)"
" table_446))"
"(let-values(((table_451)"
"(let-values()"
"(let-values(((key_452"
" val_453)"
"(let-values()"
"(let-values(((header_454)"
"(hash-ref"
" phase-to-header_26"
" phase_448"
" #f)))"
"(let-values(((link-module-uses_455"
" imports_456"
" extra-inspectorsss_457"
" def-decls_458)"
"(generate-links+imports"
" header_454"
" phase_448"
" cctx_15)))"
"(values"
" phase_448"
"(link-info17_36"
" link-module-uses_455"
" imports_456"
" extra-inspectorsss_457"
" def-decls_458)))))))"
"(hash-set"
" table_450"
" key_452"
" val_453)))))"
"(values"
" table_451)))))"
"(if #t"
"(for-loop_445"
" table_449"
"(unsafe-cdr"
" lst_447))"
" table_449))"
" table_446))"
" table_446))))"
" for-loop_445)"
" '#hash()"
" lst_444)))))"
"(let-values(((body-linklets_44)"
"(let-values(((lst_459) phases-in-order_32))"
"(begin"
"(if(list? lst_459)"
"(void)"
"(let-values()(in-list lst_459)))"
"((letrec-values(((for-loop_460)"
"(lambda(table_461 lst_462)"
"(if(pair? lst_462)"
"(let-values(((phase_463)"
"(unsafe-car"
" lst_462)))"
"(if #t"
"(let-values(((table_464)"
"(let-values(((table_465)"
" table_461))"
"(let-values(((table_466)"
"(let-values()"
"(let-values(((key_467"
" val_468)"
"(let-values()"
"(let-values(((bodys_469)"
"(hash-ref"
" phase-to-body_24"
" phase_463)))"
"(let-values(((li_470)"
"(hash-ref"
" phase-to-link-info_43"
" phase_463)))"
"(let-values(((binding-sym-to-define-sym_471)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_26"
" phase_463))))"
"(values"
" phase_463"
"((if to-source?_21"
" values"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(qq-append"
"(if(compile-context-module-self"
" cctx_15)"
"(list"
"(list"
"(list"
" 'mpi-vector"
" mpi-vector-id))"
"(list"
"(list"
" 'syntax-literalss"
" syntax-literalss-id)"
"(list"
" 'get-syntax-literal!"
" get-syntax-literal!-id)))"
"(list"
"(list"
"(list"
" 'top-level-bind!"
" top-level-bind!-id)"
"(list"
" 'top-level-require!"
" top-level-require!-id))"
"(list"
"(list"
" 'mpi-vector"
" mpi-vector-id)"
"(list"
" 'syntax-literalss"
" syntax-literalss-id))))"
"(list*"
" instance-imports"
"(link-info-imports_39"
" li_470)))"
"(qq-append"
"(link-info-def-decls_41"
" li_470)"
"(alt-reverse"
"(let-values(((lst_472)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_26"
" phase_463))))"
"(begin"
"(if(list?"
" lst_472)"
"(void)"
"(let-values()"
"(in-list"
" lst_472)))"
"((letrec-values(((for-loop_473)"
"(lambda(fold-var_474"
" lst_475)"
"(if(pair?"
" lst_475)"
"(let-values(((binding-sym_476)"
"(unsafe-car"
" lst_475)))"
"(if #t"
"(let-values(((fold-var_477)"
"(let-values(((fold-var_478)"
" fold-var_474))"
"(let-values(((fold-var_479)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_480)"
"(hash-ref"
" binding-sym-to-define-sym_471"
" binding-sym_476)))"
"(list"
" def-sym_480"
" binding-sym_476)))"
" fold-var_478))))"
"(values"
" fold-var_479)))))"
"(if #t"
"(for-loop_473"
" fold-var_477"
"(unsafe-cdr"
" lst_475))"
" fold-var_477))"
" fold-var_474))"
" fold-var_474))))"
" for-loop_473)"
" null"
" lst_472)))))"
"(alt-reverse"
" bodys_469))))))))))"
"(hash-set"
" table_465"
" key_467"
" val_468)))))"
"(values"
" table_466)))))"
"(if #t"
"(for-loop_460"
" table_464"
"(unsafe-cdr"
" lst_462))"
" table_464))"
" table_461))"
" table_461))))"
" for-loop_460)"
" '#hasheq()"
" lst_459)))))"
"(let-values(((phase-to-link-module-uses_45)"
"(let-values(((ht_481) phase-to-link-info_43))"
"(begin"
"(if((lambda(ht_482)(hash? ht_482))"
" ht_481)"
"(void)"
"(let-values()(default-in-hash ht_481)))"
"((letrec-values(((for-loop_483)"
"(lambda(table_484 i_485)"
"(if i_485"
"(let-values(((phase_486"
" li_487)"
"(hash-iterate-key+value"
" ht_481"
" i_485)))"
"(if #t"
"(let-values(((table_488)"
"(let-values(((table_489)"
" table_484))"
"(let-values(((table_490)"
"(let-values()"
"(let-values(((key_491"
" val_492)"
"(let-values()"
"(values"
" phase_486"
"(link-info-link-module-uses_38"
" li_487)))))"
"(hash-set"
" table_489"
" key_491"
" val_492)))))"
"(values"
" table_490)))))"
"(if #t"
"(for-loop_483"
" table_488"
"(hash-iterate-next"
" ht_481"
" i_485))"
" table_488))"
" table_484))"
" table_484))))"
" for-loop_483)"
" '#hash()"
"(hash-iterate-first ht_481))))))"
"(let-values(((phase-to-link-module-uses-expr_46)"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(alt-reverse"
"(let-values(((lst_493)"
" phases-in-order_32))"
"(begin"
"(if(list? lst_493)"
"(void)"
"(let-values()(in-list lst_493)))"
"((letrec-values(((for-loop_494)"
"(lambda(fold-var_495"
" lst_496)"
"(if(pair? lst_496)"
"(let-values(((phase_497)"
"(unsafe-car"
" lst_496)))"
"(if #t"
"(let-values(((fold-var_498)"
"(let-values(((fold-var_499)"
" fold-var_495))"
"(let-values(((fold-var_500)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_497"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_45"
" phase_497)"
" mpis_16))))"
" fold-var_499))))"
"(values"
" fold-var_500)))))"
"(if #t"
"(for-loop_494"
" fold-var_498"
"(unsafe-cdr"
" lst_496))"
" fold-var_498))"
" fold-var_495))"
" fold-var_495))))"
" for-loop_494)"
" null"
" lst_493))))))))"
"(let-values(((phase-to-link-extra-inspectorsss_47)"
"(let-values(((ht_501)"
" phase-to-link-info_43))"
"(begin"
"(if((lambda(ht_502)(hash? ht_502))"
" ht_501)"
"(void)"
"(let-values()"
"(default-in-hash ht_501)))"
"((letrec-values(((for-loop_503)"
"(lambda(table_504"
" i_505)"
"(if i_505"
"(let-values(((phase_506"
" li_507)"
"(hash-iterate-key+value"
" ht_501"
" i_505)))"
"(if #t"
"(let-values(((table_508)"
"(let-values(((table_509)"
" table_504))"
"(let-values(((table_510)"
"(let-values()"
"(let-values(((key_511"
" val_512)"
"(let-values()"
"(values"
" phase_506"
"(link-info-extra-inspectorsss_40"
" li_507)))))"
"(hash-set"
" table_509"
" key_511"
" val_512)))))"
"(values"
" table_510)))))"
"(if #t"
"(for-loop_503"
" table_508"
"(hash-iterate-next"
" ht_501"
" i_505))"
" table_508))"
" table_504))"
" table_504))))"
" for-loop_503)"
" '#hash()"
"(hash-iterate-first ht_501))))))"
"(let-values(((syntax-literalss_48)"
"(alt-reverse"
"(let-values(((start_513) phase_22)"
"((end_514)"
"(add1 max-phase_34))"
"((inc_515) 1))"
"(begin"
"(if(if(real? start_513)"
"(if(real? end_514)"
"(real? inc_515)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(in-range"
" start_513"
" end_514"
" inc_515)))"
"((letrec-values(((for-loop_516)"
"(lambda(fold-var_517"
" pos_518)"
"(if(<"
" pos_518"
" end_514)"
"(let-values(((phase_519)"
" pos_518))"
"(if #t"
"(let-values(((fold-var_520)"
"(let-values(((fold-var_521)"
" fold-var_517))"
"(let-values(((fold-var_522)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((h_523)"
"(hash-ref"
" phase-to-header_26"
" phase_519"
" #f)))"
"(if h_523"
"(header-syntax-literals"
" h_523)"
" empty-syntax-literals)))"
" fold-var_521))))"
"(values"
" fold-var_522)))))"
"(if #t"
"(for-loop_516"
" fold-var_520"
"(+"
" pos_518"
" inc_515))"
" fold-var_520))"
" fold-var_517))"
" fold-var_517))))"
" for-loop_516)"
" null"
" start_513))))))"
"(values"
" body-linklets_44"
" min-phase_33"
" max-phase_34"
" phase-to-link-module-uses_45"
" phase-to-link-module-uses-expr_46"
" phase-to-link-extra-inspectorsss_47"
" syntax-literalss_48"
"(if encoded-root-expand-header_31"
"(header-syntax-literals"
" encoded-root-expand-header_31)"
" #f)))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack15.1$2)"
"(lambda(given-kws_524 given-args_525 bodys11_526 cctx12_527 mpis13_528)"
"(let-values(((compiled-expression-callback8_529)"
"(if(pair? given-kws_524)(eq? '#:compiled-expression-callback(car given-kws_524)) #f)))"
"(let-values(((compiled-expression-callback3_530)"
"(if compiled-expression-callback8_529(car given-args_525)(void)))"
"((given-kws_531)(if compiled-expression-callback8_529(cdr given-kws_524) given-kws_524))"
"((given-args_532)(if compiled-expression-callback8_529(cdr given-args_525) given-args_525)))"
"(let-values(((encoded-root-expand-ctx-box6_533)"
"(if(pair? given-kws_531)(eq? '#:encoded-root-expand-ctx-box(car given-kws_531)) #f)))"
"(let-values(((encoded-root-expand-ctx-box1_534)"
"(if encoded-root-expand-ctx-box6_533(car given-args_532)(void)))"
"((given-kws_535)(if encoded-root-expand-ctx-box6_533(cdr given-kws_531) given-kws_531))"
"((given-args_536)(if encoded-root-expand-ctx-box6_533(cdr given-args_532) given-args_532)))"
"(let-values(((other-form-callback9_537)"
"(if(pair? given-kws_535)(eq? '#:other-form-callback(car given-kws_535)) #f)))"
"(let-values(((other-form-callback4_538)(if other-form-callback9_537(car given-args_536)(void)))"
"((given-kws_539)(if other-form-callback9_537(cdr given-kws_535) given-kws_535))"
"((given-args_540)(if other-form-callback9_537(cdr given-args_536) given-args_536)))"
"(let-values(((root-ctx-only-if-syntax?7_541)"
"(if(pair? given-kws_539)(eq? '#:root-ctx-only-if-syntax?(car given-kws_539)) #f)))"
"(let-values(((root-ctx-only-if-syntax?2_542)"
"(if root-ctx-only-if-syntax?7_541(car given-args_540)(void)))"
"((given-kws_543)(if root-ctx-only-if-syntax?7_541(cdr given-kws_539) given-kws_539))"
"((given-args_544)"
"(if root-ctx-only-if-syntax?7_541(cdr given-args_540) given-args_540)))"
"(let-values(((to-source?10_545)(pair? given-kws_543)))"
"(let-values(((to-source?5_546)(if to-source?10_545(car given-args_544)(void))))"
"(compile-forms14.1"
" compiled-expression-callback3_530"
" compiled-expression-callback8_529"
" encoded-root-expand-ctx-box1_534"
" encoded-root-expand-ctx-box6_533"
" other-form-callback4_538"
" other-form-callback9_537"
" root-ctx-only-if-syntax?2_542"
" root-ctx-only-if-syntax?7_541"
" to-source?5_546"
" to-source?10_545"
" bodys11_526"
" cctx12_527"
" mpis13_528)))))))))))))"
"(define-values"
"(compile-forms16.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_547 given-argc_548)"
"(if(= given-argc_548 5)"
"(let-values(((l1_549) given-kws_547))"
"(let-values(((l1_550)"
"(if(null? l1_549)"
" l1_549"
"(if(eq?(car l1_549) '#:compiled-expression-callback)(cdr l1_549) l1_549))))"
"(let-values(((l1_551) l1_550))"
"(let-values(((l1_552)"
"(if(null? l1_551)"
" l1_551"
"(if(eq?(car l1_551) '#:encoded-root-expand-ctx-box)(cdr l1_551) l1_551))))"
"(let-values(((l1_553) l1_552))"
"(let-values(((l1_554)"
"(if(null? l1_553)"
" l1_553"
"(if(eq?(car l1_553) '#:other-form-callback)(cdr l1_553) l1_553))))"
"(let-values(((l1_555) l1_554))"
"(let-values(((l1_556)"
"(if(null? l1_555)"
" l1_555"
"(if(eq?(car l1_555) '#:root-ctx-only-if-syntax?)(cdr l1_555) l1_555))))"
"(let-values(((l1_557) l1_556))"
"(let-values(((l1_558)"
"(if(null? l1_557)"
" l1_557"
"(if(eq?(car l1_557) '#:to-source?)(cdr l1_557) l1_557))))"
"(null? l1_558)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_559 given-args_560 bodys_561 cctx_562 mpis_563)"
"(unpack15.1$2 given-kws_559 given-args_560 bodys_561 cctx_562 mpis_563)))"
" null"
" '(#:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
"(let-values(((compile-forms_564)"
"(case-lambda((bodys_565 cctx_566 mpis_567)(unpack15.1$2 null null bodys_565 cctx_566 mpis_567)))))"
" compile-forms_564)))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_568 binding-syms_569 cctx_570 trans-exprs_571)"
"(let-values(((phase_572)(compile-context-phase cctx_570)))"
"(let-values(((self_573)(compile-context-self cctx_570)))"
"(let-values(((header_574)(compile-context-header cctx_570)))"
"(let-values(((mpis_575)(header-module-path-indexes header_574)))"
"(let-values(((top-level-bind-scope_576)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_570)))))"
"(let-values(((self-expr_577)(add-module-path-index! mpis_575 self_573)))"
"(list*"
" 'begin"
"(alt-reverse"
"(let-values(((lst_578) ids_568)"
"((lst_579) binding-syms_569)"
"((lst_580)"
"(let-values(((or-part_581) trans-exprs_571))"
"(if or-part_581"
" or-part_581"
"(alt-reverse"
"(let-values(((lst_582) ids_568))"
"(begin"
"(if(list? lst_582)(void)(let-values()(in-list lst_582)))"
"((letrec-values(((for-loop_583)"
"(lambda(fold-var_584 lst_585)"
"(if(pair? lst_585)"
"(let-values(((id_586)(unsafe-car lst_585)))"
"(if #t"
"(let-values(((fold-var_587)"
"(let-values(((fold-var_588)"
" fold-var_584))"
"(let-values(((fold-var_589)"
"(let-values()"
"(cons"
"(let-values() ''#f)"
" fold-var_588))))"
"(values fold-var_589)))))"
"(if #t"
"(for-loop_583 fold-var_587(unsafe-cdr lst_585))"
" fold-var_587))"
" fold-var_584))"
" fold-var_584))))"
" for-loop_583)"
" null"
" lst_582))))))))"
"(begin"
"(if(list? lst_578)(void)(let-values()(in-list lst_578)))"
"(if(list? lst_579)(void)(let-values()(in-list lst_579)))"
"(if(list? lst_580)(void)(let-values()(in-list lst_580)))"
"((letrec-values(((for-loop_590)"
"(lambda(fold-var_591 lst_592 lst_593 lst_594)"
"(if(if(pair? lst_592)(if(pair? lst_593)(pair? lst_594) #f) #f)"
"(let-values(((id_595)(unsafe-car lst_592))"
"((binding-sym_596)(unsafe-car lst_593))"
"((trans-expr_597)(unsafe-car lst_594)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_598)"
"(let-values(((fold-var_599) fold-var_591))"
"(let-values(((fold-var_600)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_601)"
"(compile-quote-syntax"
"(remove-scope"
" id_595"
" top-level-bind-scope_576)"
" phase_572"
" cctx_570)))"
"(list"
" top-level-bind!-id"
" id-stx_601"
" self-expr_577"
" phase_572"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_596)"
" trans-expr_597)))"
" fold-var_599))))"
"(values fold-var_600)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_590"
" fold-var_598"
"(unsafe-cdr lst_592)"
"(unsafe-cdr lst_593)"
"(unsafe-cdr lst_594))"
" fold-var_598))"
" fold-var_591))"
" fold-var_591))))"
" for-loop_590)"
" null"
" lst_578"
" lst_579"
" lst_580)))))))))))))"
"(define-values"
"(compile-namespace-scopes)"
"(lambda(phase_602 cctx_603)"
"(let-values(((v_604)(encode-namespace-scopes(compile-context-namespace cctx_603))))"
"(compile-quote-syntax v_604 phase_602 cctx_603))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_605 rhs_606 transformer-set!s_607 finish_608)"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_606)"
"(list"
" 'case-lambda"
"(list gen-syms_605(list* 'begin(qq-append transformer-set!s_607(list* finish_608 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_605"
"(list*"
" 'values"
"(alt-reverse"
"(let-values(((lst_609) gen-syms_605))"
"(begin"
"(if(list? lst_609)(void)(let-values()(in-list lst_609)))"
"((letrec-values(((for-loop_610)"
"(lambda(fold-var_611 lst_612)"
"(if(pair? lst_612)"
"(let-values(((s_613)(unsafe-car lst_612)))"
"(if #t"
"(let-values(((fold-var_614)"
"(let-values(((fold-var_615) fold-var_611))"
"(let-values(((fold-var_616)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_615))))"
"(values fold-var_616)))))"
"(if #t(for-loop_610 fold-var_614(unsafe-cdr lst_612)) fold-var_614))"
" fold-var_611))"
" fold-var_611))))"
" for-loop_610)"
" null"
" lst_609)))))))"
"(list* 'begin finish_608 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_605 '((apply values args)))) '((void))))))))"
"(define-values"
"(compiled-tops->compiled-top4.1)"
"(lambda(to-source?1_1 to-source?2_2 cims3_3)"
"(let-values(((cims_4) cims3_3))"
"(let-values(((to-source?_5)(if to-source?2_2 to-source?1_1 #f)))"
"(let-values()"
"(let-values(((ht_6)"
"(let-values(((lst_7) cims_4)((start_8) 0))"
"(begin"
"(if(list? lst_7)(void)(let-values()(in-list lst_7)))"
"(if(exact-nonnegative-integer? start_8)(void)(let-values()(in-naturals start_8)))"
"((letrec-values(((for-loop_9)"
"(lambda(table_10 lst_11 pos_12)"
"(if(if(pair? lst_11) #t #f)"
"(let-values(((cim_13)(unsafe-car lst_11))((i_14) pos_12))"
"(if(if #t #t #f)"
"(let-values(((table_15)"
"(let-values(((table_16) table_10))"
"(let-values(((table_17)"
"(let-values()"
"(let-values(((key_18 val_19)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_14))"
"((if to-source?_5"
" values"
" compiled-in-memory-linklet-directory)"
" cim_13)))))"
"(hash-set"
" table_16"
" key_18"
" val_19)))))"
"(values table_17)))))"
"(if(if #t #t #f)"
"(for-loop_9 table_15(unsafe-cdr lst_11)(+ pos_12 1))"
" table_15))"
" table_10))"
" table_10))))"
" for-loop_9)"
" '#hasheq()"
" lst_7"
" start_8)))))"
"(if to-source?_5"
"(let-values() ht_6)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_6)"
" 0"
" 0"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_4"
" null)))))))))"
"(define-values"
"(unpack5.1)"
"(lambda(given-kws_20 given-args_21 cims3_22)"
"(let-values(((to-source?2_23)(pair? given-kws_20)))"
"(let-values(((to-source?1_24)(if to-source?2_23(car given-args_21)(void))))"
"(compiled-tops->compiled-top4.1 to-source?1_24 to-source?2_23 cims3_22)))))"
"(define-values"
"(compiled-tops->compiled-top6.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_25 given-argc_26)"
"(if(= given-argc_26 3)"
"(let-values(((l1_27) given-kws_25))"
"(let-values(((l1_28)(if(null? l1_27) l1_27(if(eq?(car l1_27) '#:to-source?)(cdr l1_27) l1_27))))"
"(null? l1_28)))"
" #f))"
"(case-lambda((given-kws_29 given-args_30 cims_31)(unpack5.1 given-kws_29 given-args_30 cims_31)))"
" null"
" '(#:to-source?)"
"(let-values(((compiled-tops->compiled-top_32)(case-lambda((cims_33)(unpack5.1 null null cims_33)))))"
" compiled-tops->compiled-top_32)))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_34)"
"(let-values(((ht_35)(1/linklet-directory->hash ld_34)))"
"(alt-reverse"
"(let-values(((start_36) 0)((end_37)(hash-count ht_35))((inc_38) 1))"
"(begin"
"(if(if(real? start_36)(if(real? end_37)(real? inc_38) #f) #f)"
"(void)"
"(let-values()(in-range start_36 end_37 inc_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_40 pos_41)"
"(if(< pos_41 end_37)"
"(let-values(((i_42) pos_41))"
"(if #t"
"(let-values(((fold-var_43)"
"(let-values(((fold-var_44) fold-var_40))"
"(let-values(((fold-var_45)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" ht_35"
"(string->number(number->string i_42))))"
" fold-var_44))))"
"(values fold-var_45)))))"
"(if #t(for-loop_39 fold-var_43(+ pos_41 inc_38)) fold-var_43))"
" fold-var_40))"
" fold-var_40))))"
" for-loop_39)"
" null"
" start_36)))))))"
"(define-values"
"(compile-single)"
"(lambda(s_1 cctx_2)"
"(let-values(((...nder/compile/top.rkt:24:2_3) compile-top9.1)((s10_4) s_1)((cctx11_5) cctx_2)((temp12_6) #f))"
"(if(variable-reference-constant?(#%variable-reference compile-top9.1))"
"(compile-top7.1 temp12_6 #t #f #f s10_4 cctx11_5)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:24:2_3"
" keyword-procedure-extract"
" '(#:serializable?)"
" 4)"
" '(#:serializable?)"
"(list temp12_6)"
" s10_4"
" cctx11_5)))))"
"(define-values"
"(compile-top7.1)"
"(lambda(serializable?1_7 serializable?3_8 to-source?2_9 to-source?4_10 s5_11 cctx6_12)"
"(let-values(((s_13) s5_11))"
"(let-values(((cctx_14) cctx6_12))"
"(let-values(((serializable?_15)(if serializable?3_8 serializable?1_7 #t)))"
"(let-values(((to-source?_16)(if to-source?4_10 to-source?2_9 #f)))"
"(let-values()"
"(let-values(((phase_17)(compile-context-phase cctx_14)))"
"(let-values(((mpis_18)(make-module-path-index-table)))"
"(let-values(((body-linklets_19"
" min-phase_20"
" max-phase_21"
" phase-to-link-module-uses_22"
" phase-to-link-module-uses-expr_23"
" phase-to-link-extra-inspectorsss_24"
" syntax-literalss_25"
" no-root-context-syntax-literals_26)"
"(let-values(((...nder/compile/top.rkt:49:4_28) compile-forms16.1)"
"((temp13_29)(list s_13))"
"((cctx14_30) cctx_14)"
"((mpis15_31) mpis_18)"
"((to-source?16_32) to-source?_16)"
"((compile-top-level-require17_33) compile-top-level-require))"
"(if(variable-reference-constant?(#%variable-reference compile-forms16.1))"
"(compile-forms14.1"
" #f"
" #f"
" #f"
" #f"
" compile-top-level-require17_33"
" #t"
" #f"
" #f"
" to-source?16_32"
" #t"
" temp13_29"
" cctx14_30"
" mpis15_31)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/compile/top.rkt:49:4_28"
" keyword-procedure-extract"
" '(#:other-form-callback #:to-source?)"
" 5)"
" '(#:other-form-callback #:to-source?)"
"(list compile-top-level-require17_33 to-source?16_32)"
" temp13_29"
" cctx14_30"
" mpis15_31)))))"
"(let-values(((bundle_27)"
"((if to-source?_16 values 1/hash->linklet-bundle)"
"(if serializable?_15"
"(let-values()"
"(let-values(((syntax-literalss-expr_34)"
"(generate-eager-syntax-literals!"
" syntax-literalss_25"
" mpis_18"
" phase_17"
"(compile-context-self cctx_14)"
"(compile-context-namespace cctx_14))))"
"(let-values(((link-linklet_35)"
"((if to-source?_16 values 1/compile-linklet)"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
"(list* mpi-vector-id '(mpi-vector))"
" '(deserialized-syntax"
" original-phase"
" max-phase"
" phase-to-link-modules"
" syntax-literalss))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_18))"
"(list"
" 'define-values"
" '(deserialized-syntax)"
"(list* 'make-vector(add1 phase_17) '(#f)))"
"(list 'define-values '(original-phase) phase_17)"
"(list 'define-values '(max-phase) max-phase_21)"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_23)"
"(list"
" 'define-values"
" '(syntax-literalss)"
" syntax-literalss-expr_34)))))"
"(hash-set body-linklets_19 'link link-linklet_35))))"
"(let-values() body-linklets_19)))))"
"(if to-source?_16"
"(let-values()(hasheq #f bundle_27))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_27))"
" phase_17"
" max-phase_21"
" phase-to-link-module-uses_22"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_24"
"(mpis-as-vector mpis_18)"
"(syntax-literals-as-vectors syntax-literalss_25 phase_17)"
" null"
" null))))))))))))))"
"(define-values"
"(unpack8.1$2)"
"(lambda(given-kws_36 given-args_37 s5_38 cctx6_39)"
"(let-values(((serializable?3_40)(if(pair? given-kws_36)(eq? '#:serializable?(car given-kws_36)) #f)))"
"(let-values(((serializable?1_41)(if serializable?3_40(car given-args_37)(void)))"
"((given-kws_42)(if serializable?3_40(cdr given-kws_36) given-kws_36))"
"((given-args_43)(if serializable?3_40(cdr given-args_37) given-args_37)))"
"(let-values(((to-source?4_44)(pair? given-kws_42)))"
"(let-values(((to-source?2_45)(if to-source?4_44(car given-args_43)(void))))"
"(compile-top7.1 serializable?1_41 serializable?3_40 to-source?2_45 to-source?4_44 s5_38 cctx6_39)))))))"
"(define-values"
"(compile-top9.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_46 given-argc_47)"
"(if(= given-argc_47 4)"
"(let-values(((l1_48) given-kws_46))"
"(let-values(((l1_49)(if(null? l1_48) l1_48(if(eq?(car l1_48) '#:serializable?)(cdr l1_48) l1_48))))"
"(let-values(((l1_50) l1_49))"
"(let-values(((l1_51)(if(null? l1_50) l1_50(if(eq?(car l1_50) '#:to-source?)(cdr l1_50) l1_50))))"
"(null? l1_51)))))"
" #f))"
"(case-lambda((given-kws_52 given-args_53 s_54 cctx_55)(unpack8.1$2 given-kws_52 given-args_53 s_54 cctx_55)))"
" null"
" '(#:serializable? #:to-source?)"
"(let-values(((compile-top_56)(case-lambda((s_57 cctx_58)(unpack8.1$2 null null s_57 cctx_58)))))"
" compile-top_56)))"
"(define-values"
"(compile-top-level-require)"
"(lambda(s_59 cctx_60)"
"(let-values(((phase_61)(compile-context-phase cctx_60)))"
"(let-values(((tmp_62)(core-form-sym s_59 phase_61)))"
"(if(equal? tmp_62 '#%require)"
"(let-values()"
"(let-values(((form-stx_63)(compile-quote-syntax s_59 phase_61 cctx_60)))"
"(list top-level-require!-id form-stx_63 ns-id)))"
"(let-values() #f))))))"
"(define-values"
"(any-side-effects?6.1)"
"(lambda(locals1_1 locals2_2 e3_3 expected-results4_4 required-reference?5_5)"
"(let-values(((e_6) e3_3))"
"(let-values(((expected-results_7) expected-results4_4))"
"(let-values(((required-reference?_8) required-reference?5_5))"
"(let-values(((locals_9)(if locals2_2 locals1_1 '#hasheq())))"
"(let-values()"
"(let-values(((actual-results_10)"
"((letrec-values(((loop_11)"
"(lambda(e_12 locals_13)"
"(let-values(((tmp_14)"
"(if(pair?(correlated-e e_12))"
"(correlated-e(car(correlated-e e_12)))"
" #f)))"
"(if(if(equal? tmp_14 'quote)"
" #t"
"(if(equal? tmp_14 'lambda)"
" #t"
"(if(equal? tmp_14 'case-lambda)"
" #t"
"(equal? tmp_14 '#%variable-reference))))"
"(let-values() 1)"
"(if(if(equal? tmp_14 'letrec-values)"
" #t"
"(equal? tmp_14 'let-values))"
"(let-values()"
"(let-values(((ok?_15 _9_16 ids10_17 rhs11_18 body12_19)"
"(let-values(((s_34) e_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_35) s_34))"
"(let-values(((_9_36"
" ids10_37"
" rhs11_38"
" body12_39)"
"(let-values(((s_40)"
"(if(1/syntax?"
" s_34)"
"(1/syntax-e"
" s_34)"
" s_34)))"
"(if(pair? s_40)"
"(let-values(((_13_41)"
"(let-values(((s_45)"
"(car"
" s_40)))"
" s_45))"
"((ids14_42"
" rhs15_43"
" body16_44)"
"(let-values(((s_46)"
"(cdr"
" s_40)))"
"(let-values(((s_47)"
"(if(1/syntax?"
" s_46)"
"(1/syntax-e"
" s_46)"
" s_46)))"
"(if(pair?"
" s_47)"
"(let-values(((ids17_48"
" rhs18_49)"
"(let-values(((s_51)"
"(car"
" s_47)))"
"(let-values(((s_52)"
"(if(1/syntax?"
" s_51)"
"(1/syntax-e"
" s_51)"
" s_51)))"
"(let-values(((flat-s_53)"
"(to-syntax-list.1"
" s_52)))"
"(if(not"
" flat-s_53)"
"(let-values()"
"((lambda(false_54"
" str_55"
" e_56)"
"(error"
" str_55))"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_35))"
"(if #f"
"(let-values()"
"((lambda(false_57"
" str_58"
" e_59)"
"(error"
" str_58))"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_35))"
"(let-values()"
"(let-values(((ids_60"
" rhs_61)"
"(let-values(((lst_62)"
" flat-s_53))"
"(begin"
"(if(list?"
" lst_62)"
"(void)"
"(let-values()"
"(in-list"
" lst_62)))"
"((letrec-values(((for-loop_63)"
"(lambda(ids_64"
" rhs_65"
" lst_66)"
"(if(pair?"
" lst_66)"
"(let-values(((s_67)"
"(unsafe-car"
" lst_66)))"
"(if #t"
"(let-values(((ids_68"
" rhs_69)"
"(let-values(((ids_70)"
" ids_64)"
"((rhs_71)"
" rhs_65))"
"(let-values(((ids_72"
" rhs_73)"
"(let-values()"
"(let-values(((ids24_74"
" rhs25_75)"
"(let-values()"
"(let-values(((s_76)"
"(if(1/syntax?"
" s_67)"
"(1/syntax-e"
" s_67)"
" s_67)))"
"(if(pair?"
" s_76)"
"(let-values(((ids20_77)"
"(let-values(((s_79)"
"(car"
" s_76)))"
" s_79))"
"((rhs21_78)"
"(let-values(((s_80)"
"(cdr"
" s_76)))"
"(let-values(((s_81)"
"(if(1/syntax?"
" s_80)"
"(1/syntax-e"
" s_80)"
" s_80)))"
"(if(pair?"
" s_81)"
"(let-values(((rhs22_82)"
"(let-values(((s_83)"
"(car"
" s_81)))"
" s_83))"
"(()"
"(let-values(((s_84)"
"(cdr"
" s_81)))"
"(let-values(((s_85)"
"(if(1/syntax?"
" s_84)"
"(1/syntax-e"
" s_84)"
" s_84)))"
"(if(null?"
" s_85)"
"(values)"
"((lambda(false_86"
" str_87"
" e_88)"
"(error"
" str_87))"
" #f"
"                                                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_35))))))"
"(values"
" rhs22_82))"
"((lambda(false_89"
" str_90"
" e_91)"
"(error"
" str_90))"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_35))))))"
"(values"
" ids20_77"
" rhs21_78))"
"((lambda(false_92"
" str_93"
" e_94)"
"(error"
" str_93))"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_35))))))"
"(values"
"(cons"
" ids24_74"
" ids_70)"
"(cons"
" rhs25_75"
" rhs_71))))))"
"(values"
" ids_72"
" rhs_73)))))"
"(if #t"
"(for-loop_63"
" ids_68"
" rhs_69"
"(unsafe-cdr"
" lst_66))"
"(values"
" ids_68"
" rhs_69)))"
"(values"
" ids_64"
" rhs_65)))"
"(values"
" ids_64"
" rhs_65)))))"
" for-loop_63)"
" null"
" null"
" lst_62)))))"
"(values"
"(alt-reverse"
" ids_60)"
"(alt-reverse"
" rhs_61))))))))))"
"((body19_50)"
"(let-values(((s_95)"
"(cdr"
" s_47)))"
"(let-values(((s_96)"
"(if(1/syntax?"
" s_95)"
"(1/syntax-e"
" s_95)"
" s_95)))"
"(if(pair?"
" s_96)"
"(let-values(((body23_97)"
"(let-values(((s_98)"
"(car"
" s_96)))"
" s_98))"
"(()"
"(let-values(((s_99)"
"(cdr"
" s_96)))"
"(let-values(((s_100)"
"(if(1/syntax?"
" s_99)"
"(1/syntax-e"
" s_99)"
" s_99)))"
"(if(null?"
" s_100)"
"(values)"
"((lambda(false_101"
" str_102"
" e_103)"
"(error"
" str_102))"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_35))))))"
"(values"
" body23_97))"
"((lambda(false_104"
" str_105"
" e_106)"
"(error"
" str_105))"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_35))))))"
"(values"
" ids17_48"
" rhs18_49"
" body19_50))"
"((lambda(false_107"
" str_108"
" e_109)"
"(error"
" str_108))"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_35))))))"
"(values"
" _13_41"
" ids14_42"
" rhs15_43"
" body16_44))"
"((lambda(false_110"
" str_111"
" e_112)"
"(error str_111))"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_35)))))"
"(values"
" #t"
" _9_36"
" ids10_37"
" rhs11_38"
" body12_39)))"
"(values #f #f #f #f #f)))))"
"(if(not"
"(let-values(((lst_113) ids10_17)((lst_114) rhs11_18))"
"(begin"
"(if(list? lst_113)"
"(void)"
"(let-values()(in-list lst_113)))"
"(if(list? lst_114)"
"(void)"
"(let-values()(in-list lst_114)))"
"((letrec-values(((for-loop_115)"
"(lambda(result_116"
" lst_117"
" lst_118)"
"(if(if(pair? lst_117)"
"(pair? lst_118)"
" #f)"
"(let-values(((ids_119)"
"(unsafe-car"
" lst_117))"
"((rhs_120)"
"(unsafe-car"
" lst_118)))"
"(if(if #t #t #f)"
"(let-values(((result_121)"
"(let-values(((result_122)"
" result_116))"
"(let-values(((result_123)"
"(let-values()"
"(let-values()"
"(let-values(((...pile/side-effect.rkt:27:21_124)"
" any-side-effects?8.1)"
"((rhs26_125)"
" rhs_120)"
"((temp27_126)"
"(correlated-length"
" ids_119))"
"((required-reference?28_127)"
" required-reference?_8)"
"((locals29_128)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals29_128"
" #t"
" rhs26_125"
" temp27_126"
" required-reference?28_127)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:27:21_124"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals29_128)"
" rhs26_125"
" temp27_126"
" required-reference?28_127)))))))"
"(values"
" result_123)))))"
"(if(if(if #t"
"(not"
"((lambda x_129"
" result_121)"
" ids_119))"
" #f)"
"(if #t"
"(not"
"((lambda x_130"
" result_121)"
" rhs_120))"
" #f)"
" #f)"
"(for-loop_115"
" result_121"
"(unsafe-cdr lst_117)"
"(unsafe-cdr lst_118))"
" result_121))"
" result_116))"
" result_116))))"
" for-loop_115)"
" #f"
" lst_113"
" lst_114))))"
"(loop_11"
" body12_19"
"(add-binding-info locals_13 ids10_17 rhs11_18))"
" #f)))"
"(if(equal? tmp_14 'values)"
"(let-values()"
"(let-values(((ok?_131 _30_132 e31_133)"
"(let-values(((s_144) e_12))"
"(if(if #t #t #f)"
"(let-values(((orig-s_145) s_144))"
"(let-values(((_30_146 e31_147)"
"(let-values(((s_148)"
"(if(1/syntax?"
" s_144)"
"(1/syntax-e"
" s_144)"
" s_144)))"
"(if(pair? s_148)"
"(let-values(((_32_149)"
"(let-values(((s_151)"
"(car"
" s_148)))"
" s_151))"
"((e33_150)"
"(let-values(((s_152)"
"(cdr"
" s_148)))"
"(let-values(((s_153)"
"(if(1/syntax?"
" s_152)"
"(1/syntax-e"
" s_152)"
" s_152)))"
"(let-values(((flat-s_154)"
"(to-syntax-list.1"
" s_153)))"
"(if(not"
" flat-s_154)"
"(let-values()"
"((lambda(false_155"
" str_156"
" e_157)"
"(error"
" str_156))"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_145))"
"(if #f"
"(let-values()"
"((lambda(false_158"
" str_159"
" e_160)"
"(error"
" str_159))"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_145))"
"(let-values()"
"(let-values(((e_161)"
"(let-values(((lst_162)"
" flat-s_154))"
"(begin"
"(if(list?"
" lst_162)"
"(void)"
"(let-values()"
"(in-list"
" lst_162)))"
"((letrec-values(((for-loop_163)"
"(lambda(e_164"
" lst_165)"
"(if(pair?"
" lst_165)"
"(let-values(((s_166)"
"(unsafe-car"
" lst_165)))"
"(if #t"
"(let-values(((e_167)"
"(let-values(((e_168)"
" e_164))"
"(let-values(((e_169)"
"(let-values()"
"(let-values(((e34_170)"
"(let-values()"
" s_166)))"
"(cons"
" e34_170"
" e_168)))))"
"(values"
" e_169)))))"
"(if #t"
"(for-loop_163"
" e_167"
"(unsafe-cdr"
" lst_165))"
" e_167))"
" e_164))"
" e_164))))"
" for-loop_163)"
" null"
" lst_162)))))"
"(alt-reverse"
" e_161))))))))))"
"(values"
" _32_149"
" e33_150))"
"((lambda(false_171"
" str_172"
" e_173)"
"(error str_172))"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_145)))))"
"(values #t _30_146 e31_147)))"
"(values #f #f #f)))))"
"(if(let-values(((lst_174) e31_133))"
"(begin"
"(if(list? lst_174)"
"(void)"
"(let-values()(in-list lst_174)))"
"((letrec-values(((for-loop_175)"
"(lambda(result_176 lst_177)"
"(if(pair? lst_177)"
"(let-values(((e_178)"
"(unsafe-car"
" lst_177)))"
"(if #t"
"(let-values(((result_179)"
"(let-values(((result_180)"
" result_176))"
"(let-values(((result_181)"
"(let-values()"
"(let-values()"
"(not"
"(let-values(((...pile/side-effect.rkt:33:21_182)"
" any-side-effects?8.1)"
"((e35_183)"
" e_178)"
"((temp36_184)"
" 1)"
"((required-reference?37_185)"
" required-reference?_8)"
"((locals38_186)"
" locals_13))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" locals38_186"
" #t"
" e35_183"
" temp36_184"
" required-reference?37_185)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pile/side-effect.rkt:33:21_182"
" keyword-procedure-extract"
" '(#:locals)"
" 5)"
" '(#:locals)"
"(list"
" locals38_186)"
" e35_183"
" temp36_184"
" required-reference?37_185))))))))"
"(values"
" result_181)))))"
"(if(if #t"
"(not"
"((lambda x_187"
"(not"
" result_179))"
" e_178))"
" #f)"
"(for-loop_175"
" result_179"
"(unsafe-cdr lst_177))"
" result_179))"
" result_176))"
" result_176))))"
" for-loop_175)"
" #t"
" lst_174)))"
"(length e31_133)"
" #f)))"
"(if(equal? tmp_14 'make-struct-type)"
"(let-values()"
"(if(ok-make-struct-type? e_12 required-reference?_8) 5 #f))"
"(if(equal? tmp_14 'make-struct-field-accessor)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'accessor)"
" 1"
" #f))"
"(if(equal? tmp_14 'make-struct-field-mutator)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_12"
" locals_13"
" 'mutator)"
" 1"
" #f))"
"(let-values()"
"(let-values(((v_188)(correlated-e e_12)))"
"(if(let-values(((or-part_189)"
"(self-quoting-in-linklet? v_188)))"
"(if or-part_189"
" or-part_189"
"(if(symbol? v_188)"
"(let-values(((or-part_190)"
"(hash-ref"
" locals_13"
" v_188"
" #f)))"
"(if or-part_190"
" or-part_190"
"(let-values(((or-part_191)"
"(built-in-symbol? v_188)))"
"(if or-part_191"
" or-part_191"
"(required-reference?_8 v_188)))))"
" #f)))"
" 1"
" #f)))))))))))))"
" loop_11)"
" e_6"
" locals_9)))"
"(not"
"(if actual-results_10"
"(let-values(((or-part_192)(not expected-results_7)))"
"(if or-part_192 or-part_192(= actual-results_10 expected-results_7)))"
" #f))))))))))"
"(define-values"
"(unpack7.1$3)"
"(lambda(given-kws_193 given-args_194 e3_195 expected-results4_196 required-reference?5_197)"
"(let-values(((locals2_198)(pair? given-kws_193)))"
"(let-values(((locals1_199)(if locals2_198(car given-args_194)(void))))"
"(any-side-effects?6.1 locals1_199 locals2_198 e3_195 expected-results4_196 required-reference?5_197)))))"
"(define-values"
"(any-side-effects?8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_200 given-argc_201)"
"(if(= given-argc_201 5)"
"(let-values(((l1_202) given-kws_200))"
"(let-values(((l1_203)(if(null? l1_202) l1_202(if(eq?(car l1_202) '#:locals)(cdr l1_202) l1_202))))"
"(null? l1_203)))"
" #f))"
"(case-lambda"
"((given-kws_204 given-args_205 e_206 expected-results_207 required-reference?_208)"
"(unpack7.1$3 given-kws_204 given-args_205 e_206 expected-results_207 required-reference?_208)))"
" null"
" '(#:locals)"
"(let-values(((any-side-effects?_209)"
"(case-lambda"
"((e_210 expected-results_211 required-reference?_212)"
"(unpack7.1$3 null null e_210 expected-results_211 required-reference?_212)))))"
" any-side-effects?_209)))"
"(define-values"
"(struct:struct-op make-struct-op struct-op? struct-op-type struct-op-field-count)"
"(let-values(((struct:_213 make-_214 ?_215 -ref_216 -set!_217)"
"(make-struct-type 'struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'struct-op)))"
"(values"
" struct:_213"
" make-_214"
" ?_215"
"(make-struct-field-accessor -ref_216 0 'type)"
"(make-struct-field-accessor -ref_216 1 'field-count))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_239 idss_240 rhss_241)"
"(let-values(((lst_242) idss_240)((lst_243) rhss_241))"
"(begin"
"(if(list? lst_242)(void)(let-values()(in-list lst_242)))"
"(if(list? lst_243)(void)(let-values()(in-list lst_243)))"
"((letrec-values(((for-loop_244)"
"(lambda(locals_245 lst_246 lst_247)"
"(if(if(pair? lst_246)(pair? lst_247) #f)"
"(let-values(((ids_248)(unsafe-car lst_246))((rhs_249)(unsafe-car lst_247)))"
"(if(if #t #t #f)"
"(let-values(((locals_250)"
"(let-values(((locals_251) locals_245))"
"(let-values(((locals_252)"
"(let-values()"
"(let-values(((tmp_253)"
"(if(pair?(correlated-e rhs_249))"
"(correlated-e"
"(car(correlated-e rhs_249)))"
" #f)))"
"(if(equal? tmp_253 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_254)"
"(extract-struct-field-count-lower-bound"
" rhs_249)))"
"(let-values(((lst_255)"
"(correlated->list ids_248))"
"((lst_256)"
" '(struct-type"
" constructor"
" predicate"
" accessor"
" mutator)))"
"(begin"
"(if(list? lst_255)"
"(void)"
"(let-values()(in-list lst_255)))"
"(if(list? lst_256)"
"(void)"
"(let-values()(in-list lst_256)))"
"((letrec-values(((for-loop_257)"
"(lambda(locals_258"
" lst_259"
" lst_260)"
"(if(if(pair?"
" lst_259)"
"(pair? lst_260)"
" #f)"
"(let-values(((id_261)"
"(unsafe-car"
" lst_259))"
"((type_262)"
"(unsafe-car"
" lst_260)))"
"(if(if #t #t #f)"
"(let-values(((locals_263)"
"(let-values(((locals_264)"
" locals_258))"
"(let-values(((locals_265)"
"(let-values()"
"(hash-set"
" locals_264"
"(correlated-e"
" id_261)"
"(make-struct-op"
" type_262"
" field-count_254)))))"
"(values"
" locals_265)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_257"
" locals_263"
"(unsafe-cdr"
" lst_259)"
"(unsafe-cdr"
" lst_260))"
" locals_263))"
" locals_258))"
" locals_258))))"
" for-loop_257)"
" locals_251"
" lst_255"
" lst_256)))))"
"(let-values()"
"(let-values(((lst_266)"
"(correlated->list ids_248)))"
"(begin"
"(if(list? lst_266)"
"(void)"
"(let-values()(in-list lst_266)))"
"((letrec-values(((for-loop_267)"
"(lambda(locals_268"
" lst_269)"
"(if(pair? lst_269)"
"(let-values(((id_270)"
"(unsafe-car"
" lst_269)))"
"(if #t"
"(let-values(((locals_271)"
"(let-values(((locals_272)"
" locals_268))"
"(let-values(((locals_273)"
"(let-values()"
"(hash-set"
" locals_272"
" id_270"
" #t))))"
"(values"
" locals_273)))))"
"(if #t"
"(for-loop_267"
" locals_271"
"(unsafe-cdr"
" lst_269))"
" locals_271))"
" locals_268))"
" locals_268))))"
" for-loop_267)"
" locals_251"
" lst_266)))))))))"
"(values locals_252)))))"
"(if(if #t #t #f)"
"(for-loop_244 locals_250(unsafe-cdr lst_246)(unsafe-cdr lst_247))"
" locals_250))"
" locals_245))"
" locals_245))))"
" for-loop_244)"
" locals_239"
" lst_242"
" lst_243)))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_274 required-reference?_275)"
"(let-values(((l_276)(correlated->list e_274)))"
"(let-values(((init-field-count-expr_277)(if(>(length l_276) 3)(list-ref l_276 3) #f)))"
"(let-values(((immutables-expr_278)"
"(let-values(((or-part_279)(if(>(length l_276) 9)(list-ref l_276 9) #f)))"
"(if or-part_279 or-part_279 'null))))"
"(if(>=(length l_276) 5)"
"(if(<=(length l_276) 12)"
"(let-values(((pos->vals_280 pos-next_281 init_282 pos-cont?_283 val-cont?_284 all-cont?_285)"
"(make-sequence '(arg)(cdr l_276)))"
"((pos->vals_286 pos-next_287 init_288 pos-cont?_289 val-cont?_290 all-cont?_291)"
"(make-sequence"
" '(pred)"
"(list"
"(lambda(v_292)(quoted? symbol? v_292))"
"(lambda(v_293)(quoted? false? v_293))"
"(lambda(v_294)(field-count-expr-to-field-count v_294))"
"(lambda(v_295)(field-count-expr-to-field-count v_295))"
"(lambda(v_296)"
"(not"
"(let-values(((v40_297) v_296)"
"((temp41_298) 1)"
"((required-reference?42_299) required-reference?_275))"
"(if(variable-reference-constant?(#%variable-reference any-side-effects?8.1))"
"(any-side-effects?6.1 #f #f v40_297 temp41_298 required-reference?42_299)"
"(any-side-effects?8.1 v40_297 temp41_298 required-reference?42_299)))))"
"(lambda(v_300)(known-good-struct-properties? v_300 immutables-expr_278))"
"(lambda(v_301)(inspector-or-false? v_301))"
"(lambda(v_302)(procedure-spec? v_302 immutables-expr_278))"
"(lambda(v_303)(immutables-ok? v_303 init-field-count-expr_277))))))"
"(begin"
"(void)"
"(void)"
"((letrec-values(((for-loop_304)"
"(lambda(result_305 pos_306 pos_307)"
"(if(if(if pos-cont?_283(pos-cont?_283 pos_306) #t)"
"(if pos-cont?_289(pos-cont?_289 pos_307) #t)"
" #f)"
"(let-values(((arg_308)(pos->vals_280 pos_306))"
"((pred_309)(pos->vals_286 pos_307)))"
"(if(if(if val-cont?_284(val-cont?_284 arg_308) #t)"
"(if val-cont?_290(val-cont?_290 pred_309) #t)"
" #f)"
"(let-values(((result_310)"
"(let-values(((result_311) result_305))"
"(let-values(((result_312)"
"(let-values()"
"(let-values()(pred_309 arg_308)))))"
"(values result_312)))))"
"(if(if(if(if all-cont?_285(all-cont?_285 pos_306 arg_308) #t)"
"(not((lambda x_313(not result_310)) arg_308))"
" #f)"
"(if(if all-cont?_291(all-cont?_291 pos_307 pred_309) #t)"
"(not((lambda x_314(not result_310)) pred_309))"
" #f)"
" #f)"
"(for-loop_304 result_310(pos-next_281 pos_306)(pos-next_287 pos_307))"
" result_310))"
" result_305))"
" result_305))))"
" for-loop_304)"
" #t"
" init_282"
" init_288)))"
" #f)"
" #f))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_315)"
"(let-values(((l_316)(correlated->list e_315)))"
"(+(field-count-expr-to-field-count(list-ref l_316 3))(field-count-expr-to-field-count(list-ref l_316 4))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_317 v_318)"
"(let-values(((or-part_319)"
"(if(pair?(correlated-e v_318))"
"(if(eq?(correlated-e(car(correlated-e v_318))) 'quote)"
"(val?_317(correlated-e(correlated-cadr v_318)))"
" #f)"
" #f)))"
"(if or-part_319 or-part_319(val?_317(correlated-e v_318))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_320)(if(pair?(correlated-e v_320))(correlated-e(correlated-cadr v_320))(correlated-e v_320))))"
"(define-values(false?)(lambda(v_321)(eq?(correlated-e v_321) #f)))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_322)(if(quoted? exact-nonnegative-integer? v_322)(quoted-value v_322) #f)))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_323)"
"(let-values(((or-part_324)(quoted? false? v_323)))"
"(if or-part_324"
" or-part_324"
"(if(= 1(correlated-length v_323))(eq? 'current-inspector(correlated-e(car(correlated-e v_323)))) #f)))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_325 immutables-expr_326)"
"(let-values(((or-part_327)(quoted? null? v_325)))"
"(if or-part_327"
" or-part_327"
"(let-values(((or-part_328)(eq? 'null(correlated-e v_325))))"
"(if or-part_328"
" or-part_328"
"(if(pair?(correlated-e v_325))"
"(if(eq?(correlated-e(car(correlated-e v_325))) 'list)"
"(if(let-values(((lst_329)(cdr(correlated->list v_325))))"
"(begin"
"(if(list? lst_329)(void)(let-values()(in-list lst_329)))"
"((letrec-values(((for-loop_330)"
"(lambda(result_331 lst_332)"
"(if(pair? lst_332)"
"(let-values(((prop+val_333)(unsafe-car lst_332)))"
"(if #t"
"(let-values(((result_334)"
"(let-values(((result_335) result_331))"
"(let-values(((result_336)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length"
" prop+val_333)"
" 3)"
"(let-values(((prop+val_337)"
"(correlated->list"
" prop+val_333)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_337)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_337 1)"
"(list-ref prop+val_337 2)"
" immutables-expr_326)"
" #f))"
" #f)))))"
"(values result_336)))))"
"(if(if #t(not((lambda x_338(not result_334)) prop+val_333)) #f)"
"(for-loop_330 result_334(unsafe-cdr lst_332))"
" result_334))"
" result_331))"
" result_331))))"
" for-loop_330)"
" #t"
" lst_329)))"
"(="
"(sub1(correlated-length v_325))"
"(set-count"
"(let-values(((lst_339)(cdr(correlated->list v_325))))"
"(begin"
"(if(list? lst_339)(void)(let-values()(in-list lst_339)))"
"((letrec-values(((for-loop_340)"
"(lambda(table_341 lst_342)"
"(if(pair? lst_342)"
"(let-values(((prop+val_343)(unsafe-car lst_342)))"
"(if #t"
"(let-values(((table_344)"
"(let-values(((table_345) table_341))"
"(let-values(((table_346)"
"(let-values()"
"(let-values(((key_347 val_348)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_343)"
" 1)))"
" #t))))"
"(hash-set"
" table_345"
" key_347"
" val_348)))))"
"(values table_346)))))"
"(if #t(for-loop_340 table_344(unsafe-cdr lst_342)) table_344))"
" table_341))"
" table_341))))"
" for-loop_340)"
" '#hash()"
" lst_339)))))"
" #f)"
" #f)"
" #f)))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_349 val-expr_350 immutables-expr_351)"
"(let-values(((tmp_352)(correlated-e prop-expr_349)))"
"(if(equal? tmp_352 'prop:evt)"
"(let-values()(immutable-field? val-expr_350 immutables-expr_351))"
"(if(equal? tmp_352 'prop:procedure)"
"(let-values()(immutable-field? val-expr_350 immutables-expr_351))"
"(let-values() #f))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_353 immutables-expr_354)"
"(if(quoted? exact-nonnegative-integer? val-expr_353)"
"(memv(quoted-value val-expr_353)(immutables-expr-to-immutables immutables-expr_354 null))"
" #f)))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_355 fail-v_356)"
"(let-values(((tmp_357)(if(pair?(correlated-e e_355))(correlated-e(car(correlated-e e_355))) #f)))"
"(if(equal? tmp_357 'quote)"
"(let-values()"
"(let-values(((v_358)(correlated-cadr e_355)))"
"(let-values(((or-part_359)"
"(if(correlated-length v_358)"
"(let-values(((l_360)(map2 correlated-e(correlated->list v_358))))"
"(if(andmap2 exact-nonnegative-integer? l_360)"
"(if(=(length l_360)(set-count(list->set l_360))) l_360 #f)"
" #f))"
" #f)))"
"(if or-part_359 or-part_359 fail-v_356))))"
"(let-values() fail-v_356)))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_361 immutables-expr_362)"
"(let-values(((or-part_363)(quoted? false? e_361)))"
"(if or-part_363"
" or-part_363"
"(if(quoted? exact-nonnegative-integer? e_361)"
"(memv(quoted-value e_361)(immutables-expr-to-immutables immutables-expr_362 null))"
" #f)))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_364 init-field-count-expr_365)"
"(let-values(((l_366)(immutables-expr-to-immutables e_364 #f)))"
"(let-values(((c_367)(field-count-expr-to-field-count init-field-count-expr_365)))"
"(if l_366"
"(let-values(((lst_368) l_366))"
"(begin"
"(if(list? lst_368)(void)(let-values()(in-list lst_368)))"
"((letrec-values(((for-loop_369)"
"(lambda(result_370 lst_371)"
"(if(pair? lst_371)"
"(let-values(((n_372)(unsafe-car lst_371)))"
"(if #t"
"(let-values(((result_373)"
"(let-values(((result_374) result_370))"
"(let-values(((result_375)"
"(let-values()(let-values()(< n_372 c_367)))))"
"(values result_375)))))"
"(if(if #t(not((lambda x_376(not result_373)) n_372)) #f)"
"(for-loop_369 result_373(unsafe-cdr lst_371))"
" result_373))"
" result_370))"
" result_370))))"
" for-loop_369)"
" #t"
" lst_368)))"
" #f)))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_377 locals_378 type_379)"
"(let-values(((l_380)(correlated->list e_377)))"
"(let-values(((a_381)(if(=(length l_380) 4)(hash-ref locals_378(correlated-e(list-ref l_380 1)) #f) #f)))"
"(if(struct-op? a_381)"
"(if(eq?(struct-op-type a_381) type_379)"
"(if(<(field-count-expr-to-field-count(list-ref l_380 2))(struct-op-field-count a_381))"
"(quoted? symbol?(list-ref l_380 3))"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(compile-module11.1)"
"(lambda(as-submodule?2_2"
" as-submodule?6_3"
" self1_4"
" self5_5"
" serializable?3_6"
" serializable?7_7"
" to-source?4_8"
" to-source?8_9"
" s9_10"
" cctx10_11)"
"(let-values(((s_12) s9_10))"
"(let-values(((cctx_13) cctx10_11))"
"(let-values(((given-self_14)(if self5_5 self1_4 #f)))"
"(let-values(((as-submodule?_15)(if as-submodule?6_3 as-submodule?2_2 #f)))"
"(let-values(((serializable?_16)(if serializable?7_7 serializable?3_6(not as-submodule?_15))))"
"(let-values(((to-source?_17)(if to-source?8_9 to-source?4_8 #f)))"
"(let-values()"
"(let-values(((ok?_18 module28_19 name29_20 initial-require30_21 mb31_22)"
"(let-values(((s_82)(syntax-disarm$1 s_12)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_83) s_82))"
"(let-values(((module28_84 name29_85 initial-require30_86 mb31_87)"
"(let-values(((s_88)(if(syntax?$1 s_82)(syntax-e$1 s_82) s_82)))"
"(if(pair? s_88)"
"(let-values(((module32_89)"
"(let-values(((s_93)(car s_88))) s_93))"
"((name33_90 initial-require34_91 mb35_92)"
"(let-values(((s_94)(cdr s_88)))"
"(let-values(((s_95)"
"(if(syntax?$1 s_94)"
"(syntax-e$1 s_94)"
" s_94)))"
"(if(pair? s_95)"
"(let-values(((name36_96)"
"(let-values(((s_99)"
"(car s_95)))"
" s_99))"
"((initial-require37_97 mb38_98)"
"(let-values(((s_100)"
"(cdr s_95)))"
"(let-values(((s_101)"
"(if(syntax?$1"
" s_100)"
"(syntax-e$1"
" s_100)"
" s_100)))"
"(if(pair? s_101)"
"(let-values(((initial-require39_102)"
"(let-values(((s_104)"
"(car"
" s_101)))"
" s_104))"
"((mb40_103)"
"(let-values(((s_105)"
"(cdr"
" s_101)))"
"(let-values(((s_106)"
"(if(syntax?$1"
" s_105)"
"(syntax-e$1"
" s_105)"
" s_105)))"
"(if(pair?"
" s_106)"
"(let-values(((mb41_107)"
"(let-values(((s_108)"
"(car"
" s_106)))"
" s_108))"
"(()"
"(let-values(((s_109)"
"(cdr"
" s_106)))"
"(let-values(((s_110)"
"(if(syntax?$1"
" s_109)"
"(syntax-e$1"
" s_109)"
" s_109)))"
"(if(null?"
" s_110)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_83))))))"
"(values"
" mb41_107))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_83))))))"
"(values"
" initial-require39_102"
" mb40_103))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_83))))))"
"(values"
" name36_96"
" initial-require37_97"
" mb38_98))"
"(raise-syntax-error$1"
" #f"
"                                                                             \"bad syntax\""
" orig-s_83))))))"
"(values module32_89 name33_90 initial-require34_91 mb35_92))"
"                                                        (raise-syntax-error$1 #f \"bad syntax\" orig-s_83)))))"
"(values #t module28_84 name29_85 initial-require30_86 mb31_87)))"
"(values #f #f #f #f #f)))))"
"(let-values(((ok?_37 #%module-begin42_38 body43_39)"
"(let-values(((s_111)(syntax-disarm$1 mb31_22)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_112) s_111))"
"(let-values(((#%module-begin42_113 body43_114)"
"(let-values(((s_115)"
"(if(syntax?$1 s_111)(syntax-e$1 s_111) s_111)))"
"(if(pair? s_115)"
"(let-values(((#%module-begin44_116)"
"(let-values(((s_118)(car s_115))) s_118))"
"((body45_117)"
"(let-values(((s_119)(cdr s_115)))"
"(let-values(((s_120)"
"(if(syntax?$1 s_119)"
"(syntax-e$1 s_119)"
" s_119)))"
"(let-values(((flat-s_121)"
"(to-syntax-list.1$1 s_120)))"
"(if(not flat-s_121)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_112))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_112))"
"(let-values()"
"(let-values(((body_122)"
"(let-values(((lst_123)"
" flat-s_121))"
"(begin"
"(if(list?"
" lst_123)"
"(void)"
"(let-values()"
"(in-list"
" lst_123)))"
"((letrec-values(((for-loop_124)"
"(lambda(body_125"
" lst_126)"
"(if(pair?"
" lst_126)"
"(let-values(((s_127)"
"(unsafe-car"
" lst_126)))"
"(if #t"
"(let-values(((body_128)"
"(let-values(((body_129)"
" body_125))"
"(let-values(((body_130)"
"(let-values()"
"(let-values(((body46_131)"
"(let-values()"
" s_127)))"
"(cons"
" body46_131"
" body_129)))))"
"(values"
" body_130)))))"
"(if #t"
"(for-loop_124"
" body_128"
"(unsafe-cdr"
" lst_126))"
" body_128))"
" body_125))"
" body_125))))"
" for-loop_124)"
" null"
" lst_123)))))"
"(alt-reverse body_122))))))))))"
"(values #%module-begin44_116 body45_117))"
"                                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_112)))))"
"(values #t #%module-begin42_113 body43_114)))"
"(values #f #f #f)))))"
"(let-values(((enclosing-self_50)(compile-context-module-self cctx_13)))"
"(let-values(((self_51)"
"(let-values(((or-part_132) given-self_14))"
"(if or-part_132"
" or-part_132"
"(make-generic-self-module-path-index"
"(make-self-module-path-index(syntax-e$1 name29_20) enclosing-self_50))))))"
"(let-values(((full-module-name_52)"
"(let-values(((parent-full-name_133)(compile-context-full-module-name cctx_13))"
"((name_134)(syntax-e$1 name29_20)))"
"(if parent-full-name_133"
"(append"
"(if(list? parent-full-name_133)"
" parent-full-name_133"
"(list parent-full-name_133))"
"(list name_134))"
" name_134))))"
"(let-values(((requires_53)(syntax-property$1 s_12 'module-requires)))"
"(let-values(((provides_54)(syntax-property$1 s_12 'module-provides)))"
"(let-values(((encoded-root-expand-ctx-box_55)"
"(box(syntax-property$1 s_12 'module-root-expand-context))))"
"(let-values(((body-context-simple?_56)"
"(syntax-property$1 s_12 'module-body-context-simple?)))"
"(let-values(((language-info_57)"
"(filter-language-info(syntax-property$1 s_12 'module-language))))"
"(let-values(((bodys_58) body43_39))"
"(let-values(((empty-result-for-module->namespace?_59) #f))"
"(let-values(((mpis_60)(make-module-path-index-table)))"
"(let-values(((body-cctx_61)"
"(let-values(((the-struct_135) cctx_13))"
"(if(compile-context? the-struct_135)"
"(let-values(((phase47_136) 0)"
"((self48_137) self_51)"
"((module-self49_138) self_51)"
"((full-module-name50_139)"
" full-module-name_52)"
"((lazy-syntax-literals?51_140) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_135)"
" phase47_136"
" self48_137"
" module-self49_138"
" full-module-name50_139"
" lazy-syntax-literals?51_140"
"(compile-context-header the-struct_135)))"
"(raise-argument-error"
" 'struct-copy"
"                                                               \"compile-context?\""
" the-struct_135)))))"
"(let-values(((cross-phase-persistent?_62) #f))"
"(let-values(((side-effects_63)(make-hasheqv)))"
"(let-values(((check-side-effects!_64)"
"(lambda(e_141"
" expected-results_142"
" phase_143"
" required-reference?_144)"
"(if(hash-ref side-effects_63 phase_143 #f)"
"(void)"
"(let-values()"
"(if(let-values(((e52_145) e_141)"
"((expected-results53_146)"
" expected-results_142)"
"((required-reference?54_147)"
" required-reference?_144))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" any-side-effects?8.1))"
"(any-side-effects?6.1"
" #f"
" #f"
" e52_145"
" expected-results53_146"
" required-reference?54_147)"
"(any-side-effects?8.1"
" e52_145"
" expected-results53_146"
" required-reference?54_147)))"
"(let-values()"
"(hash-set! side-effects_63 phase_143 #t))"
"(void)))))))"
"(let-values(((body-linklets_65"
" min-phase_66"
" max-phase_67"
" phase-to-link-module-uses_68"
" phase-to-link-module-uses-expr_69"
" phase-to-link-extra-inspectorsss_70"
" syntax-literalss_71"
" root-ctx-syntax-literals_72)"
"(let-values(((...r/compile/module.rkt:90:4_148)"
" compile-forms16.1)"
"((bodys55_149) bodys_58)"
"((body-cctx56_150) body-cctx_61)"
"((mpis57_151) mpis_60)"
"((encoded-root-expand-ctx-box58_152)"
" encoded-root-expand-ctx-box_55)"
"((body-context-simple?59_153)"
" body-context-simple?_56)"
"((check-side-effects!60_154)"
" check-side-effects!_64)"
"((temp61_155)"
"(lambda(body_157 cctx_158)"
"(let-values(((tmp_159)"
"(core-form-sym"
" body_157"
"(compile-context-phase"
" cctx_158))))"
"(if(equal? tmp_159 '#%declare)"
"(let-values()"
"(let-values(((ok?_160"
" #%declare63_161"
" kw64_162)"
"(let-values(((s_173)"
" body_157))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_174)"
" s_173))"
"(let-values(((#%declare63_175"
" kw64_176)"
"(let-values(((s_177)"
"(if(syntax?$1"
" s_173)"
"(syntax-e$1"
" s_173)"
" s_173)))"
"(if(pair?"
" s_177)"
"(let-values(((#%declare65_178)"
"(let-values(((s_180)"
"(car"
" s_177)))"
" s_180))"
"((kw66_179)"
"(let-values(((s_181)"
"(cdr"
" s_177)))"
"(let-values(((s_182)"
"(if(syntax?$1"
" s_181)"
"(syntax-e$1"
" s_181)"
" s_181)))"
"(let-values(((flat-s_183)"
"(to-syntax-list.1$1"
" s_182)))"
"(if(not"
" flat-s_183)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_174))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_174))"
"(let-values()"
"(let-values(((kw_184)"
"(let-values(((lst_185)"
" flat-s_183))"
"(begin"
"(if(list?"
" lst_185)"
"(void)"
"(let-values()"
"(in-list"
" lst_185)))"
"((letrec-values(((for-loop_186)"
"(lambda(kw_187"
" lst_188)"
"(if(pair?"
" lst_188)"
"(let-values(((s_189)"
"(unsafe-car"
" lst_188)))"
"(if #t"
"(let-values(((kw_190)"
"(let-values(((kw_191)"
" kw_187))"
"(let-values(((kw_192)"
"(let-values()"
"(let-values(((kw67_193)"
"(let-values()"
" s_189)))"
"(cons"
" kw67_193"
" kw_191)))))"
"(values"
" kw_192)))))"
"(if #t"
"(for-loop_186"
" kw_190"
"(unsafe-cdr"
" lst_188))"
" kw_190))"
" kw_187))"
" kw_187))))"
" for-loop_186)"
" null"
" lst_185)))))"
"(alt-reverse"
" kw_184))))))))))"
"(values"
" #%declare65_178"
" kw66_179))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_174)))))"
"(values"
" #t"
" #%declare63_175"
" kw64_176)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(let-values(((lst_194)"
" kw64_162))"
"(begin"
"(if(list? lst_194)"
"(void)"
"(let-values()"
"(in-list lst_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(fold-var_196"
" lst_197)"
"(if(pair?"
" lst_197)"
"(let-values(((kw_198)"
"(unsafe-car"
" lst_197)))"
"(if #t"
"(let-values(((fold-var_199)"
"(let-values(((fold-var_200)"
" fold-var_196))"
"(let-values(((fold-var_201)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_198)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_62"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_198)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_59"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_55"
" #t)))"
"(void))))"
"(void)))))"
"(values"
" fold-var_201)))))"
"(if #t"
"(for-loop_195"
" fold-var_199"
"(unsafe-cdr"
" lst_197))"
" fold-var_199))"
" fold-var_196))"
" fold-var_196))))"
" for-loop_195)"
"(void)"
" lst_194)))"
" #f)))"
"(let-values() #f)))))"
"((to-source?62_156) to-source?_17))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-forms16.1))"
"(compile-forms14.1"
" check-side-effects!60_154"
" #t"
" encoded-root-expand-ctx-box58_152"
" #t"
" temp61_155"
" #t"
" body-context-simple?59_153"
" #t"
" to-source?62_156"
" #t"
" bodys55_149"
" body-cctx56_150"
" mpis57_151)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:90:4_148"
" keyword-procedure-extract"
" '(#:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
" 5)"
" '(#:compiled-expression-callback"
" #:encoded-root-expand-ctx-box"
" #:other-form-callback"
" #:root-ctx-only-if-syntax?"
" #:to-source?)"
"(list"
" check-side-effects!60_154"
" encoded-root-expand-ctx-box58_152"
" temp61_155"
" body-context-simple?59_153"
" to-source?62_156)"
" bodys55_149"
" body-cctx56_150"
" mpis57_151)))))"
"(let-values(((all-syntax-literalss_73)"
"(if root-ctx-syntax-literals_72"
"(append"
" syntax-literalss_71"
"(list root-ctx-syntax-literals_72))"
" syntax-literalss_71)))"
"(let-values(((pre-submodules_74)"
"(let-values(((...r/compile/module.rkt:114:25_202)"
" compile-submodules27.1)"
"((temp68_203) 'module)"
"((bodys69_204) bodys_58)"
"((as-submodule?70_205)"
" as-submodule?_15)"
"((serializable?71_206)"
" serializable?_16)"
"((to-source?72_207) to-source?_17)"
"((body-cctx73_208) body-cctx_61))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules27.1))"
"(compile-submodules25.1"
" as-submodule?70_205"
" bodys69_204"
" body-cctx73_208"
" serializable?71_206"
" to-source?72_207"
" temp68_203)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:114:25_202"
" keyword-procedure-extract"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?)"
" 3)"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?)"
"(list"
" as-submodule?70_205"
" bodys69_204"
" body-cctx73_208"
" serializable?71_206"
" to-source?72_207)"
" temp68_203)))))"
"(let-values(((post-submodules_75)"
"(let-values(((...r/compile/module.rkt:120:26_209)"
" compile-submodules27.1)"
"((temp74_210) 'module*)"
"((bodys75_211) bodys_58)"
"((as-submodule?76_212)"
" as-submodule?_15)"
"((serializable?77_213)"
" serializable?_16)"
"((to-source?78_214) to-source?_17)"
"((body-cctx79_215) body-cctx_61))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" compile-submodules27.1))"
"(compile-submodules25.1"
" as-submodule?76_212"
" bodys75_211"
" body-cctx79_215"
" serializable?77_213"
" to-source?78_214"
" temp74_210)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:120:26_209"
" keyword-procedure-extract"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?)"
" 3)"
" '(#:as-submodule?"
" #:bodys"
" #:cctx"
" #:serializable?"
" #:to-source?)"
"(list"
" as-submodule?76_212"
" bodys75_211"
" body-cctx79_215"
" serializable?77_213"
" to-source?78_214)"
" temp74_210)))))"
"(let-values(((declaration-body_76)"
"(list"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index! mpis_60 self_51))"
"(list"
" 'define-values"
" '(cross-phase-persistent?)"
" cross-phase-persistent?_62)"
"(list"
" 'define-values"
" '(requires)"
"(generate-deserialize requires_53 mpis_60))"
"(list"
" 'define-values"
" '(provides)"
"(generate-deserialize provides_54 mpis_60))"
"(list"
" 'define-values"
" '(side-effects)"
"(list"
" 'quote"
"(let-values(((temp80_216)"
"(hash-keys side-effects_63))"
"((<81_217) <))"
"(if(variable-reference-constant?"
"(#%variable-reference sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp80_216"
" <81_217)"
"(sort9.1 temp80_216 <81_217)))))"
"(list"
" 'define-values"
" '(min-phase)"
" min-phase_66)"
"(list"
" 'define-values"
" '(max-phase)"
" max-phase_67)"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_69)"
"(list"
" 'define-values"
" '(language-info)"
"(list 'quote language-info_57)))))"
"(let-values(((declaration-linklet_77)"
"((if to-source?_17 values 1/compile-linklet)"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list(list 'mpi-vector mpi-vector-id)))"
" '(self-mpi"
" requires"
" provides"
" variables"
" side-effects"
" cross-phase-persistent?"
" min-phase"
" max-phase"
" phase-to-link-modules"
" language-info)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
" declaration-body_76))))"
"(let-values(((syntax-literals-linklet_78)"
"((if to-source?_17"
" values"
" 1/compile-linklet)"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list"
"(list 'mpi-vector mpi-vector-id)"
"(list"
" 'deserialized-syntax"
" deserialized-syntax-id))"
" instance-imports)"
"(list*"
"(list*"
" syntax-literalss-id"
" '(syntax-literalss))"
"(list*"
" get-syntax-literal!-id"
" '(get-syntax-literal!))"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((...r/compile/module.rkt:180:9_218)"
" generate-lazy-syntax-literals!10.1)"
"((all-syntax-literalss82_219)"
" all-syntax-literalss_73)"
"((mpis83_220) mpis_60)"
"((self84_221) self_51)"
"((temp85_222)"
"(not serializable?_16)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" generate-lazy-syntax-literals!10.1))"
"(generate-lazy-syntax-literals!8.1"
" temp85_222"
" #t"
" all-syntax-literalss82_219"
" mpis83_220"
" self84_221)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:180:9_218"
" keyword-procedure-extract"
" '(#:skip-deserialize?)"
" 5)"
" '(#:skip-deserialize?)"
"(list temp85_222)"
" all-syntax-literalss82_219"
" mpis83_220"
" self84_221)))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-syntax-literals_72"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
"(add1 max-phase_67)"
" 0)))"
"(if empty-result-for-module->namespace?_59"
"(let-values() ''empty)"
"(let-values() ''#f))))))))))"
"(let-values(((data-linklet_79)"
"(if serializable?_16"
"((if to-source?_17"
" values"
" 1/compile-linklet)"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list*"
"(list* mpi-vector-id '(mpi-vector))"
" '(deserialized-syntax))"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_60))"
"(list"
" 'define-values"
" '(deserialized-syntax)"
"(list*"
" 'make-vector"
"(+ 2 max-phase_67)"
" '(#f)))))"
" #f)))"
"(let-values(((bundle_80)"
"(let-values(((linklets_223)"
"(hash-set"
" body-linklets_65"
" 'decl"
" declaration-linklet_77)))"
"(let-values(((linklets_224)"
"(if data-linklet_79"
"(hash-set"
" linklets_223"
" 'data"
" data-linklet_79)"
" linklets_223)))"
"(let-values(((linklets_225)"
"(hash-set"
" linklets_224"
" 'stx"
" syntax-literals-linklet_78)))"
"(let-values(((linklets_226)"
"(hash-set"
" linklets_225"
" 'pre"
"(map2"
" car"
" pre-submodules_74))))"
"(let-values(((linklets_227)"
"(hash-set"
" linklets_226"
" 'post"
"(map2"
" car"
" post-submodules_75))))"
"(let-values(((linklets_228)"
"(hash-set"
" linklets_227"
" 'name"
" full-module-name_52)))"
"(1/hash->linklet-bundle"
" linklets_228)))))))))"
"(let-values(((ld_81)"
"((if to-source?_17"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_229)"
"(append"
" pre-submodules_74"
" post-submodules_75)))"
"(begin"
"(if(list? lst_229)"
"(void)"
"(let-values()"
"(in-list lst_229)))"
"((letrec-values(((for-loop_230)"
"(lambda(ht_231"
" lst_232)"
"(if(pair?"
" lst_232)"
"(let-values(((sm_233)"
"(unsafe-car"
" lst_232)))"
"(if #t"
"(let-values(((ht_234)"
"(let-values(((ht_235)"
" ht_231))"
"(let-values(((ht_236)"
"(let-values()"
"(hash-set"
" ht_235"
"(car"
" sm_233)"
"((if to-source?_17"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_233))))))"
"(values"
" ht_236)))))"
"(if #t"
"(for-loop_230"
" ht_234"
"(unsafe-cdr"
" lst_232))"
" ht_234))"
" ht_231))"
" ht_231))))"
" for-loop_230)"
"(hasheq #f bundle_80)"
" lst_229))))))"
"(if to-source?_17"
"(let-values() ld_81)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_81"
" 0"
" max-phase_67"
" phase-to-link-module-uses_68"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_70"
"(mpis-as-vector mpis_60)"
"(syntax-literals-as-vectors"
" all-syntax-literalss_73"
" 0)"
"(map2 cdr pre-submodules_74)"
"(map2"
" cdr"
" post-submodules_75))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack12.1$4)"
"(lambda(given-kws_237 given-args_238 s9_239 cctx10_240)"
"(let-values(((as-submodule?6_241)(if(pair? given-kws_237)(eq? '#:as-submodule?(car given-kws_237)) #f)))"
"(let-values(((as-submodule?2_242)(if as-submodule?6_241(car given-args_238)(void)))"
"((given-kws_243)(if as-submodule?6_241(cdr given-kws_237) given-kws_237))"
"((given-args_244)(if as-submodule?6_241(cdr given-args_238) given-args_238)))"
"(let-values(((self5_245)(if(pair? given-kws_243)(eq? '#:self(car given-kws_243)) #f)))"
"(let-values(((self1_246)(if self5_245(car given-args_244)(void)))"
"((given-kws_247)(if self5_245(cdr given-kws_243) given-kws_243))"
"((given-args_248)(if self5_245(cdr given-args_244) given-args_244)))"
"(let-values(((serializable?7_249)"
"(if(pair? given-kws_247)(eq? '#:serializable?(car given-kws_247)) #f)))"
"(let-values(((serializable?3_250)(if serializable?7_249(car given-args_248)(void)))"
"((given-kws_251)(if serializable?7_249(cdr given-kws_247) given-kws_247))"
"((given-args_252)(if serializable?7_249(cdr given-args_248) given-args_248)))"
"(let-values(((to-source?8_253)(pair? given-kws_251)))"
"(let-values(((to-source?4_254)(if to-source?8_253(car given-args_252)(void))))"
"(compile-module11.1"
" as-submodule?2_242"
" as-submodule?6_241"
" self1_246"
" self5_245"
" serializable?3_250"
" serializable?7_249"
" to-source?4_254"
" to-source?8_253"
" s9_239"
" cctx10_240)))))))))))"
"(define-values"
"(compile-module13.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_255 given-argc_256)"
"(if(= given-argc_256 4)"
"(let-values(((l1_257) given-kws_255))"
"(let-values(((l1_258)"
"(if(null? l1_257) l1_257(if(eq?(car l1_257) '#:as-submodule?)(cdr l1_257) l1_257))))"
"(let-values(((l1_259) l1_258))"
"(let-values(((l1_260)(if(null? l1_259) l1_259(if(eq?(car l1_259) '#:self)(cdr l1_259) l1_259))))"
"(let-values(((l1_261) l1_260))"
"(let-values(((l1_262)"
"(if(null? l1_261) l1_261(if(eq?(car l1_261) '#:serializable?)(cdr l1_261) l1_261))))"
"(let-values(((l1_263) l1_262))"
"(let-values(((l1_264)"
"(if(null? l1_263)"
" l1_263"
"(if(eq?(car l1_263) '#:to-source?)(cdr l1_263) l1_263))))"
"(null? l1_264)))))))))"
" #f))"
"(case-lambda"
"((given-kws_265 given-args_266 s_267 cctx_268)(unpack12.1$4 given-kws_265 given-args_266 s_267 cctx_268)))"
" null"
" '(#:as-submodule? #:self #:serializable? #:to-source?)"
"(let-values(((compile-module_269)(case-lambda((s_270 cctx_271)(unpack12.1$4 null null s_270 cctx_271)))))"
" compile-module_269)))"
"(define-values"
"(lifted/1.1$9)"
"(make-required"
" 'compile-submodules"
"(case-lambda((self_272 form-name_273)(apply missing-kw self_272 form-name_273 null)))"
" #f"
" #f))"
"(define-values"
"(compile-submodules25.1)"
"(lambda(as-submodule?15_274 bodys14_275 cctx18_276 serializable?16_277 to-source?17_278 form-name24_279)"
"(let-values(((form-name_280) form-name24_279))"
"(let-values(((bodys_281) bodys14_275))"
"(let-values(((as-submodule?_282) as-submodule?15_274))"
"(let-values(((serializable?_283) serializable?16_277))"
"(let-values(((to-source?_284) to-source?17_278))"
"(let-values(((body-cctx_285) cctx18_276))"
"(let-values()"
"(if as-submodule?_282"
"(let-values() null)"
"(let-values()"
"((letrec-values(((loop_286)"
"(lambda(bodys_287 phase_288)"
"(if(null? bodys_287)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_289)(syntax-disarm$1(car bodys_287))))"
"(let-values(((f_290)(core-form-sym body_289 phase_288)))"
"(if(eq? f_290 form-name_280)"
"(let-values()"
"(let-values(((ok?_291 _86_292 name87_293 _88_294)"
"(let-values(((s_324) body_289))"
"(if(if #t #t #f)"
"(let-values(((orig-s_325) s_324))"
"(let-values(((_86_326 name87_327 _88_328)"
"(let-values(((s_329)"
"(if(syntax?$1"
" s_324)"
"(syntax-e$1"
" s_324)"
" s_324)))"
"(if(pair? s_329)"
"(let-values(((_89_330)"
"(let-values(((s_333)"
"(car"
" s_329)))"
" s_333))"
"((name90_331"
" _91_332)"
"(let-values(((s_334)"
"(cdr"
" s_329)))"
"(let-values(((s_335)"
"(if(syntax?$1"
" s_334)"
"(syntax-e$1"
" s_334)"
" s_334)))"
"(if(pair?"
" s_335)"
"(let-values(((name92_336)"
"(let-values(((s_338)"
"(car"
" s_335)))"
" s_338))"
"((_93_337)"
"(let-values(((s_339)"
"(cdr"
" s_335)))"
" s_339)))"
"(values"
" name92_336"
" _93_337))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_325))))))"
"(values"
" _89_330"
" name90_331"
" _91_332))"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_325)))))"
"(values #t _86_326 name87_327 _88_328)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_307 module*94_308 name95_309 _96_310)"
"(let-values(((s_340) body_289))"
"(if(if #t"
"(let-values(((s_341)"
"(if(syntax?$1 s_340)"
"(syntax-e$1 s_340)"
" s_340)))"
"(if(pair? s_341)"
"(if(let-values(((s_342)"
"(car s_341)))"
" #t)"
"(let-values(((s_343)(cdr s_341)))"
"(let-values(((s_344)"
"(if(syntax?$1"
" s_343)"
"(syntax-e$1 s_343)"
" s_343)))"
"(if(pair? s_344)"
"(if(let-values(((s_345)"
"(car"
" s_344)))"
" #t)"
"(let-values(((s_346)"
"(cdr s_344)))"
"(let-values(((s_347)"
"(if(syntax?$1"
" s_346)"
"(syntax-e$1"
" s_346)"
" s_346)))"
"(if(pair? s_347)"
"(if(let-values(((s_348)"
"(car"
" s_347)))"
"(let-values(((s_349)"
"(if(syntax?$1"
" s_348)"
"(syntax-e$1"
" s_348)"
" s_348)))"
"(eq?"
" #f"
" s_349)))"
"(let-values(((s_350)"
"(cdr"
" s_347)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_351) s_340))"
"(let-values(((module*94_352"
" name95_353"
" _96_354)"
"(let-values(((s_355)"
"(if(syntax?$1"
" s_340)"
"(syntax-e$1"
" s_340)"
" s_340)))"
"(if #t"
"(let-values(((module*97_356)"
"(let-values(((s_359)"
"(car"
" s_355)))"
" s_359))"
"((name98_357"
" _99_358)"
"(let-values(((s_360)"
"(cdr"
" s_355)))"
"(let-values(((s_361)"
"(if(syntax?$1"
" s_360)"
"(syntax-e$1"
" s_360)"
" s_360)))"
"(if #t"
"(let-values(((name100_362)"
"(let-values(((s_364)"
"(car"
" s_361)))"
" s_364))"
"((_101_363)"
"(let-values(((s_365)"
"(cdr"
" s_361)))"
"(let-values(((s_366)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(if #t"
"(let-values((()"
"(let-values(((s_368)"
"(car"
" s_366)))"
"(let-values(((s_369)"
"(if(syntax?$1"
" s_368)"
"(syntax-e$1"
" s_368)"
" s_368)))"
"(values))))"
"((_102_367)"
"(let-values(((s_370)"
"(cdr"
" s_366)))"
" s_370)))"
"(values"
" _102_367))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_351))))))"
"(values"
" name100_362"
" _101_363))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_351))))))"
"(values"
" module*97_356"
" name98_357"
" _99_358))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_351)))))"
"(values"
" #t"
" module*94_352"
" name95_353"
" _96_354)))"
"(values #f #f #f #f)))))"
"(let-values(((s-shifted_323)"
"(if ok?_307"
"(let-values()"
"(syntax-shift-phase-level$1"
" body_289"
"(phase- 0 phase_288)))"
"(let-values() body_289))))"
"(cons"
"(cons"
"(syntax-e$1 name87_293)"
"(let-values(((...r/compile/module.rkt:278:22_371)"
" compile-module13.1)"
"((s-shifted103_372) s-shifted_323)"
"((body-cctx104_373) body-cctx_285)"
"((serializable?105_374) serializable?_283)"
"((to-source?106_375) to-source?_284))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module13.1))"
"(compile-module11.1"
" #f"
" #f"
" #f"
" #f"
" serializable?105_374"
" #t"
" to-source?106_375"
" #t"
" s-shifted103_372"
" body-cctx104_373)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/compile/module.rkt:278:22_371"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?105_374 to-source?106_375)"
" s-shifted103_372"
" body-cctx104_373))))"
"(loop_286(cdr bodys_287) phase_288))))))"
"(if(eq? f_290 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_376 begin-for-syntax107_377 e108_378)"
"(let-values(((s_389) body_289))"
"(if(if #t #t #f)"
"(let-values(((orig-s_390) s_389))"
"(let-values(((begin-for-syntax107_391"
" e108_392)"
"(let-values(((s_393)"
"(if(syntax?$1"
" s_389)"
"(syntax-e$1"
" s_389)"
" s_389)))"
"(if(pair? s_393)"
"(let-values(((begin-for-syntax109_394)"
"(let-values(((s_396)"
"(car"
" s_393)))"
" s_396))"
"((e110_395)"
"(let-values(((s_397)"
"(cdr"
" s_393)))"
"(let-values(((s_398)"
"(if(syntax?$1"
" s_397)"
"(syntax-e$1"
" s_397)"
" s_397)))"
"(let-values(((flat-s_399)"
"(to-syntax-list.1$1"
" s_398)))"
"(if(not"
" flat-s_399)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_390))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_390))"
"(let-values()"
"(let-values(((e_400)"
"(let-values(((lst_401)"
" flat-s_399))"
"(begin"
"(if(list?"
" lst_401)"
"(void)"
"(let-values()"
"(in-list"
" lst_401)))"
"((letrec-values(((for-loop_402)"
"(lambda(e_403"
" lst_404)"
"(if(pair?"
" lst_404)"
"(let-values(((s_405)"
"(unsafe-car"
" lst_404)))"
"(if #t"
"(let-values(((e_406)"
"(let-values(((e_407)"
" e_403))"
"(let-values(((e_408)"
"(let-values()"
"(let-values(((e111_409)"
"(let-values()"
" s_405)))"
"(cons"
" e111_409"
" e_407)))))"
"(values"
" e_408)))))"
"(if #t"
"(for-loop_402"
" e_406"
"(unsafe-cdr"
" lst_404))"
" e_406))"
" e_403))"
" e_403))))"
" for-loop_402)"
" null"
" lst_401)))))"
"(alt-reverse"
" e_400))))))))))"
"(values"
" begin-for-syntax109_394"
" e110_395))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_390)))))"
"(values"
" #t"
" begin-for-syntax107_391"
" e108_392)))"
"(values #f #f #f)))))"
"(append"
"(loop_286 e108_378(add1 phase_288))"
"(loop_286(cdr bodys_287) phase_288))))"
"(let-values()(loop_286(cdr bodys_287) phase_288)))))))))))"
" loop_286)"
" bodys_281"
" 0))))))))))))"
"(define-values"
"(unpack26.1$1)"
"(lambda(given-kws_410 given-args_411 form-name24_412)"
"(let-values(((as-submodule?15_413)(car given-args_411))"
"((given-kws_414)(cdr given-kws_410))"
"((given-args_415)(cdr given-args_411)))"
"(let-values(((bodys14_416)(car given-args_415))"
"((given-kws_417)(cdr given-kws_414))"
"((given-args_418)(cdr given-args_415)))"
"(let-values(((cctx18_419)(car given-args_418))"
"((given-kws_420)(cdr given-kws_417))"
"((given-args_421)(cdr given-args_418)))"
"(let-values(((serializable?16_422)(car given-args_421))"
"((given-kws_423)(cdr given-kws_420))"
"((given-args_424)(cdr given-args_421)))"
"(let-values(((to-source?17_425)(car given-args_424)))"
"(compile-submodules25.1"
" as-submodule?15_413"
" bodys14_416"
" cctx18_419"
" serializable?16_422"
" to-source?17_425"
" form-name24_412))))))))"
"(define-values"
"(compile-submodules27.1)"
"(lifted/1.1$9"
"(lambda(given-kws_426 given-argc_427)"
"(if(= given-argc_427 3)"
"(let-values(((l2_428) given-kws_426))"
"(if(pair? l2_428)"
"(if(eq?(car l2_428) '#:as-submodule?)"
"(let-values(((l2_429)(cdr l2_428)))"
"(if(pair? l2_429)"
"(if(eq?(car l2_429) '#:bodys)"
"(let-values(((l2_430)(cdr l2_429)))"
"(if(pair? l2_430)"
"(if(eq?(car l2_430) '#:cctx)"
"(let-values(((l2_431)(cdr l2_430)))"
"(if(pair? l2_431)"
"(if(eq?(car l2_431) '#:serializable?)"
"(let-values(((l2_432)(cdr l2_431)))"
"(if(pair? l2_432)(if(eq?(car l2_432) '#:to-source?)(null?(cdr l2_432)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_433 given-args_434 form-name_435)(unpack26.1$1 given-kws_433 given-args_434 form-name_435)))"
" '(#:as-submodule? #:bodys #:cctx #:serializable? #:to-source?)"
" '(#:as-submodule? #:bodys #:cctx #:serializable? #:to-source?)))"
"(define-values"
"(filter-language-info)"
"(lambda(li_436)"
"(if(vector? li_436)"
"(if(= 3(vector-length li_436))"
"(if(1/module-path?(vector-ref li_436 0))(if(symbol?(vector-ref li_436 1)) li_436 #f) #f)"
" #f)"
" #f)))"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis/fast"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_7 make-_8 ?_9 -ref_10 -set!_11)"
"(make-struct-type"
" 'requires+provides"
" #f"
" 9"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'requires+provides)))"
"(values"
" struct:_7"
" make-_8"
" ?_9"
"(make-struct-field-accessor -ref_10 0 'self)"
"(make-struct-field-accessor -ref_10 1 'require-mpis)"
"(make-struct-field-accessor -ref_10 2 'require-mpis/fast)"
"(make-struct-field-accessor -ref_10 3 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_10 4 'requires)"
"(make-struct-field-accessor -ref_10 5 'provides)"
"(make-struct-field-accessor -ref_10 6 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_10 7 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_10 8 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_11 7 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_11 8 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_68 make-_69 ?_70 -ref_71 -set!_72)"
"(make-struct-type 'required #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'required)))"
"(values"
" struct:_68"
" make-_69"
" ?_70"
"(make-struct-field-accessor -ref_71 0 'id)"
"(make-struct-field-accessor -ref_71 1 'phase)"
"(make-struct-field-accessor -ref_71 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_71 3 'as-transformer?))))"
"(define-values"
"(make-requires+provides)"
"(lambda(self_104)"
"(requires+provides1.1"
" self_104"
"(make-hash)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" #t"
" #t)))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_105)"
"(begin"
"(hash-clear!(requires+provides-require-mpis-in-order r+p_105))"
"(hash-clear!(requires+provides-requires r+p_105))"
"(hash-clear!(requires+provides-provides r+p_105))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_105)))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_106 mpi_107)"
"(let-values(((or-part_108)(hash-ref(requires+provides-require-mpis/fast r+p_106) mpi_107 #f)))"
"(if or-part_108"
" or-part_108"
"(let-values(((or-part_109)(hash-ref(requires+provides-require-mpis r+p_106) mpi_107 #f)))"
"(if or-part_109"
" or-part_109"
"(begin"
"(hash-set!(requires+provides-require-mpis r+p_106) mpi_107 mpi_107)"
"(hash-set!(requires+provides-require-mpis/fast r+p_106) mpi_107 mpi_107)"
" mpi_107)))))))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_110 mod-name_111 phase-shift_112 is-cross-phase-persistent?_113)"
"(let-values(((mpi_114)(intern-mpi r+p_110 mod-name_111)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_110) mpi_114 '#hasheqv()) phase-shift_112 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_110)"
" phase-shift_112"
"(lambda(l_115)(cons mpi_114 l_115))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_110) mpi_114 make-hasheqv)"
" phase-shift_112"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_113"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_110 #f)))"
" mpi_114))))"
"(define-values"
"(lifted/1.1$3)"
"(make-required"
" 'add-defined-or-required-id!"
"(case-lambda"
"((self_116 r+p_117 id_118 phase_119 binding_120)"
"(apply missing-kw self_116 r+p_117 id_118 phase_119 binding_120 null)))"
" #f"
" #f))"
"(define-values"
"(add-defined-or-required-id!11.1)"
"(lambda(as-transformer?4_121 can-be-shadowed?3_122 can-be-shadowed?5_123 r+p7_124 id8_125 phase9_126 binding10_127)"
"(let-values(((r+p_128) r+p7_124))"
"(let-values(((id_129) id8_125))"
"(let-values(((phase_130) phase9_126))"
"(let-values(((binding_131) binding10_127))"
"(let-values(((can-be-shadowed?_132)(if can-be-shadowed?5_123 can-be-shadowed?3_122 #f)))"
"(let-values(((as-transformer?_133) as-transformer?4_121))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_130"
"(phase+"
"(module-binding-nominal-phase binding_131)"
"(module-binding-nominal-require-phase binding_131)))"
"(void)"
"                      (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((.../require+provide.rkt:112:2_134) add-defined-or-required-id-at-nominal!27.1)"
"((r+p72_135) r+p_128)"
"((id73_136) id_129)"
"((phase74_137) phase_130)"
"((temp75_138)(module-binding-nominal-module binding_131))"
"((temp76_139)(module-binding-nominal-require-phase binding_131))"
"((can-be-shadowed?77_140) can-be-shadowed?_132)"
"((as-transformer?78_141) as-transformer?_133))"
"(if(variable-reference-constant?"
"(#%variable-reference add-defined-or-required-id-at-nominal!27.1))"
"(add-defined-or-required-id-at-nominal!25.1"
" as-transformer?78_141"
" can-be-shadowed?77_140"
" temp75_138"
" temp76_139"
" r+p72_135"
" id73_136"
" phase74_137)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:112:2_134"
" keyword-procedure-extract"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" 5)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
"(list as-transformer?78_141 can-be-shadowed?77_140 temp75_138 temp76_139)"
" r+p72_135"
" id73_136"
" phase74_137)))))))))))))"
"(define-values"
"(unpack12.1$2)"
"(lambda(given-kws_142 given-args_143 r+p7_144 id8_145 phase9_146 binding10_147)"
"(let-values(((as-transformer?4_148)(car given-args_143))"
"((given-kws_149)(cdr given-kws_142))"
"((given-args_150)(cdr given-args_143)))"
"(let-values(((can-be-shadowed?5_151)(pair? given-kws_149)))"
"(let-values(((can-be-shadowed?3_152)(if can-be-shadowed?5_151(car given-args_150)(void))))"
"(add-defined-or-required-id!11.1"
" as-transformer?4_148"
" can-be-shadowed?3_152"
" can-be-shadowed?5_151"
" r+p7_144"
" id8_145"
" phase9_146"
" binding10_147))))))"
"(define-values"
"(add-defined-or-required-id!13.1)"
"(lifted/1.1$3"
"(lambda(given-kws_153 given-argc_154)"
"(if(= given-argc_154 6)(subsets? '(#:as-transformer?) given-kws_153 '(#:as-transformer? #:can-be-shadowed?)) #f))"
"(case-lambda"
"((given-kws_155 given-args_156 r+p_157 id_158 phase_159 binding_160)"
"(unpack12.1$2 given-kws_155 given-args_156 r+p_157 id_158 phase_159 binding_160)))"
" '(#:as-transformer?)"
" '(#:as-transformer? #:can-be-shadowed?)))"
"(define-values"
"(lifted/2.1$5)"
"(make-required"
" 'add-defined-or-required-id-at-nominal!"
"(case-lambda((self_161 r+p_162 id_163 phase_164)(apply missing-kw self_161 r+p_162 id_163 phase_164 null)))"
" #f"
" #f))"
"(define-values"
"(add-defined-or-required-id-at-nominal!25.1)"
"(lambda(as-transformer?17_165"
" can-be-shadowed?16_166"
" nominal-module14_167"
" nominal-require-phase15_168"
" r+p22_169"
" id23_170"
" phase24_171)"
"(let-values(((r+p_172) r+p22_169))"
"(let-values(((id_173) id23_170))"
"(let-values(((phase_174) phase24_171))"
"(let-values(((nominal-module_175) nominal-module14_167))"
"(let-values(((nominal-require-phase_176) nominal-require-phase15_168))"
"(let-values(((can-be-shadowed?_177) can-be-shadowed?16_166))"
"(let-values(((as-transformer?_178) as-transformer?17_165))"
"(let-values()"
"(let-values(((at-mod_179)"
"(hash-ref!"
"(requires+provides-requires r+p_172)"
"(intern-mpi r+p_172 nominal-module_175)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_180)(hash-ref! at-mod_179 nominal-require-phase_176 make-hasheq)))"
"(let-values(((sym_181)(syntax-e$1 id_173)))"
"(hash-set!"
" sym-to-reqds_180"
" sym_181"
"(cons"
"(required2.1 id_173 phase_174 can-be-shadowed?_177 as-transformer?_178)"
"(hash-ref sym-to-reqds_180 sym_181 null))))))))))))))))"
"(define-values"
"(unpack26.1)"
"(lambda(given-kws_182 given-args_183 r+p22_184 id23_185 phase24_186)"
"(let-values(((as-transformer?17_187)(car given-args_183))"
"((given-kws_188)(cdr given-kws_182))"
"((given-args_189)(cdr given-args_183)))"
"(let-values(((can-be-shadowed?16_190)(car given-args_189))"
"((given-kws_191)(cdr given-kws_188))"
"((given-args_192)(cdr given-args_189)))"
"(let-values(((nominal-module14_193)(car given-args_192))"
"((given-kws_194)(cdr given-kws_191))"
"((given-args_195)(cdr given-args_192)))"
"(let-values(((nominal-require-phase15_196)(car given-args_195)))"
"(add-defined-or-required-id-at-nominal!25.1"
" as-transformer?17_187"
" can-be-shadowed?16_190"
" nominal-module14_193"
" nominal-require-phase15_196"
" r+p22_184"
" id23_185"
" phase24_186)))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!27.1)"
"(lifted/2.1$5"
"(lambda(given-kws_197 given-argc_198)"
"(if(= given-argc_198 5)"
"(let-values(((l2_199) given-kws_197))"
"(if(pair? l2_199)"
"(if(eq?(car l2_199) '#:as-transformer?)"
"(let-values(((l2_200)(cdr l2_199)))"
"(if(pair? l2_200)"
"(if(eq?(car l2_200) '#:can-be-shadowed?)"
"(let-values(((l2_201)(cdr l2_200)))"
"(if(pair? l2_201)"
"(if(eq?(car l2_201) '#:nominal-module)"
"(let-values(((l2_202)(cdr l2_201)))"
"(if(pair? l2_202)"
"(if(eq?(car l2_202) '#:nominal-require-phase)(null?(cdr l2_202)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_203 given-args_204 r+p_205 id_206 phase_207)"
"(unpack26.1 given-kws_203 given-args_204 r+p_205 id_206 phase_207)))"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)"
" '(#:as-transformer? #:can-be-shadowed? #:nominal-module #:nominal-require-phase)))"
"(define-values"
"(lifted/3.1$2)"
"(make-required"
" 'add-enclosing-module-defined-and-required!"
"(case-lambda"
"((self_208 r+p_209 enclosing-mod_210 phase-shift_211)"
"(apply missing-kw self_208 r+p_209 enclosing-mod_210 phase-shift_211 null)))"
" #f"
" #f))"
"(define-values"
"(add-enclosing-module-defined-and-required!33.1)"
"(lambda(enclosing-requires+provides28_212 r+p30_213 enclosing-mod31_214 phase-shift32_215)"
"(let-values(((r+p_216) r+p30_213))"
"(let-values(((enclosing-r+p_217) enclosing-requires+provides28_212))"
"(let-values(((enclosing-mod_218) enclosing-mod31_214))"
"(let-values(((phase-shift_219) phase-shift32_215))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_216 #f)"
"(let-values(((ht_220)(requires+provides-requires enclosing-r+p_217)))"
"(begin"
"(if((lambda(ht_221)(hash? ht_221)) ht_220)(void)(let-values()(default-in-hash ht_220)))"
"((letrec-values(((for-loop_222)"
"(lambda(fold-var_223 i_224)"
"(if i_224"
"(let-values(((mod-name_225 at-mod_226)"
"(hash-iterate-key+value ht_220 i_224)))"
"(if #t"
"(let-values(((fold-var_227)"
"(let-values(((fold-var_228) fold-var_223))"
"(let-values(((fold-var_229)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ht_230) at-mod_226))"
"(begin"
"(if((lambda(ht_231)"
"(hash? ht_231))"
" ht_230)"
"(void)"
"(let-values()"
"(default-in-hash ht_230)))"
"((letrec-values(((for-loop_232)"
"(lambda(fold-var_233"
" i_234)"
"(if i_234"
"(let-values(((phase_235"
" at-phase_236)"
"(hash-iterate-key+value"
" ht_230"
" i_234)))"
"(if #t"
"(let-values(((fold-var_237)"
"(let-values(((ht_238)"
" at-phase_236))"
"(begin"
"(if((lambda(ht_239)"
"(hash?"
" ht_239))"
" ht_238)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_238)))"
"((letrec-values(((for-loop_240)"
"(lambda(fold-var_241"
" i_242)"
"(if i_242"
"(let-values(((reqds_243)"
"(hash-iterate-value"
" ht_238"
" i_242)))"
"(if #t"
"(let-values(((fold-var_244)"
"(let-values(((lst_245)"
" reqds_243))"
"(begin"
"(if(list?"
" lst_245)"
"(void)"
"(let-values()"
"(in-list"
" lst_245)))"
"((letrec-values(((for-loop_246)"
"(lambda(fold-var_247"
" lst_248)"
"(if(pair?"
" lst_248)"
"(let-values(((reqd_249)"
"(unsafe-car"
" lst_248)))"
"(if #t"
"(let-values(((fold-var_250)"
"(let-values(((fold-var_251)"
" fold-var_247))"
"(let-values(((fold-var_252)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((.../require+provide.rkt:143:6_253)"
" add-defined-or-required-id-at-nominal!27.1)"
"((r+p79_254)"
" r+p_216)"
"((temp80_255)"
"(1/syntax-module-path-index-shift"
"(required-id"
" reqd_249)"
"(requires+provides-self"
" enclosing-r+p_217)"
" enclosing-mod_218))"
"((temp81_256)"
"(phase+"
"(required-phase"
" reqd_249)"
" phase-shift_219))"
"((enclosing-mod82_257)"
" enclosing-mod_218)"
"((phase-shift83_258)"
" phase-shift_219)"
"((temp84_259)"
" #t)"
"((temp85_260)"
"(required-as-transformer?"
" reqd_249)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id-at-nominal!27.1))"
"(add-defined-or-required-id-at-nominal!25.1"
" temp85_260"
" temp84_259"
" enclosing-mod82_257"
" phase-shift83_258"
" r+p79_254"
" temp80_255"
" temp81_256)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:143:6_253"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
" 5)"
" '(#:as-transformer?"
" #:can-be-shadowed?"
" #:nominal-module"
" #:nominal-require-phase)"
"(list"
" temp85_260"
" temp84_259"
" enclosing-mod82_257"
" phase-shift83_258)"
" r+p79_254"
" temp80_255"
" temp81_256))))"
"(void)))))"
"(values"
" fold-var_252)))))"
"(if #t"
"(for-loop_246"
" fold-var_250"
"(unsafe-cdr"
" lst_248))"
" fold-var_250))"
" fold-var_247))"
" fold-var_247))))"
" for-loop_246)"
" fold-var_241"
" lst_245)))))"
"(if #t"
"(for-loop_240"
" fold-var_244"
"(hash-iterate-next"
" ht_238"
" i_242))"
" fold-var_244))"
" fold-var_241))"
" fold-var_241))))"
" for-loop_240)"
" fold-var_233"
"(hash-iterate-first"
" ht_238))))))"
"(if #t"
"(for-loop_232"
" fold-var_237"
"(hash-iterate-next"
" ht_230"
" i_234))"
" fold-var_237))"
" fold-var_233))"
" fold-var_233))))"
" for-loop_232)"
"(void)"
"(hash-iterate-first ht_230)))))"
"(void)))))"
"(values fold-var_229)))))"
"(if #t"
"(for-loop_222 fold-var_227(hash-iterate-next ht_220 i_224))"
" fold-var_227))"
" fold-var_223))"
" fold-var_223))))"
" for-loop_222)"
"(void)"
"(hash-iterate-first ht_220))))))))))))"
"(define-values"
"(unpack34.1$2)"
"(lambda(given-kws_261 given-args_262 r+p30_263 enclosing-mod31_264 phase-shift32_265)"
"(let-values(((enclosing-requires+provides28_266)(car given-args_262)))"
"(add-enclosing-module-defined-and-required!33.1"
" enclosing-requires+provides28_266"
" r+p30_263"
" enclosing-mod31_264"
" phase-shift32_265))))"
"(define-values"
"(add-enclosing-module-defined-and-required!35.1)"
"(lifted/3.1$2"
"(lambda(given-kws_267 given-argc_268)"
"(if(= given-argc_268 5)"
"(let-values(((l2_269) given-kws_267))"
"(if(pair? l2_269)(if(eq?(car l2_269) '#:enclosing-requires+provides)(null?(cdr l2_269)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_270 given-args_271 r+p_272 enclosing-mod_273 phase-shift_274)"
"(unpack34.1$2 given-kws_270 given-args_271 r+p_272 enclosing-mod_273 phase-shift_274)))"
" '(#:enclosing-requires+provides)"
" '(#:enclosing-requires+provides)))"
"(define-values"
"(lifted/4.1$2)"
"(make-required"
" 'remove-required-id!"
"(case-lambda((self_275 r+p_276 id_277 phase_278)(apply missing-kw self_275 r+p_276 id_277 phase_278 null)))"
" #f"
" #f))"
"(define-values"
"(remove-required-id!41.1)"
"(lambda(unless-matches36_279 r+p38_280 id39_281 phase40_282)"
"(let-values(((r+p_283) r+p38_280))"
"(let-values(((id_284) id39_281))"
"(let-values(((phase_285) phase40_282))"
"(let-values(((binding_286) unless-matches36_279))"
"(let-values()"
"(let-values(((b_287)"
"(let-values(((.../require+provide.rkt:156:12_288) resolve+shift15.1)"
"((id86_289) id_284)"
"((phase87_290) phase_285)"
"((temp88_291) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f temp88_291 #t #f #f #f #f #f #f id86_289 phase87_290)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:156:12_288"
" keyword-procedure-extract"
" '(#:exactly?)"
" 4)"
" '(#:exactly?)"
"(list temp88_291)"
" id86_289"
" phase87_290)))))"
"(if b_287"
"(let-values()"
"(let-values(((at-mod_292)"
"(hash-ref"
"(requires+provides-requires r+p_283)"
"(intern-mpi r+p_283(module-binding-nominal-module b_287))"
" #f)))"
"(if at-mod_292"
"(let-values()"
"(let-values(((sym-to-reqds_293)"
"(hash-ref at-mod_292(module-binding-nominal-require-phase b_287) #f)))"
"(if sym-to-reqds_293"
"(let-values()"
"(let-values(((sym_294)(syntax-e$1 id_284)))"
"(let-values(((l_295)(hash-ref sym-to-reqds_293 sym_294 null)))"
"(if(null? l_295)"
"(void)"
"(let-values()"
"(if(same-binding? b_287 binding_286)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_293"
" sym_294"
"(alt-reverse"
"(let-values(((lst_296) l_295))"
"(begin"
"(if(list? lst_296)(void)(let-values()(in-list lst_296)))"
"((letrec-values(((for-loop_297)"
"(lambda(fold-var_298 lst_299)"
"(if(pair? lst_299)"
"(let-values(((r_300)(unsafe-car lst_299)))"
"(if #t"
"(let-values(((fold-var_301)"
"(let-values(((fold-var_302)"
" fold-var_298))"
"(if(free-identifier=?$1"
"(required-id r_300)"
" id_284"
" phase_285"
" phase_285)"
" fold-var_302"
"(let-values(((fold-var_303)"
" fold-var_302))"
"(let-values(((fold-var_304)"
"(let-values()"
"(cons"
"(let-values()"
" r_300)"
" fold-var_303))))"
"(values"
" fold-var_304)))))))"
"(if #t"
"(for-loop_297"
" fold-var_301"
"(unsafe-cdr lst_299))"
" fold-var_301))"
" fold-var_298))"
" fold-var_298))))"
" for-loop_297)"
" null"
" lst_296))))))))))))"
"(void))))"
"(void))))"
"(void))))))))))"
"(define-values"
"(unpack42.1)"
"(lambda(given-kws_305 given-args_306 r+p38_307 id39_308 phase40_309)"
"(let-values(((unless-matches36_310)(car given-args_306)))"
"(remove-required-id!41.1 unless-matches36_310 r+p38_307 id39_308 phase40_309))))"
"(define-values"
"(remove-required-id!43.1)"
"(lifted/4.1$2"
"(lambda(given-kws_311 given-argc_312)"
"(if(= given-argc_312 5)"
"(let-values(((l2_313) given-kws_311))"
"(if(pair? l2_313)(if(eq?(car l2_313) '#:unless-matches)(null?(cdr l2_313)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_314 given-args_315 r+p_316 id_317 phase_318)"
"(unpack42.1 given-kws_314 given-args_315 r+p_316 id_317 phase_318)))"
" '(#:unless-matches)"
" '(#:unless-matches)))"
"(define-values"
"(lifted/5.1$1)"
"(make-required"
" 'check-not-defined"
"(case-lambda((self_319 r+p_320 id_321 phase_322)(apply missing-kw self_319 r+p_320 id_321 phase_322 null)))"
" #f"
" #f))"
"(define-values"
"(check-not-defined53.1)"
"(lambda(check-not-required?44_323"
" check-not-required?47_324"
" in45_325"
" unless-matches46_326"
" unless-matches49_327"
" r+p50_328"
" id51_329"
" phase52_330)"
"(let-values(((check-not-required?_331)(if check-not-required?47_324 check-not-required?44_323 #f)))"
"(let-values(((r+p_332) r+p50_328))"
"(let-values(((id_333) id51_329))"
"(let-values(((phase_334) phase52_330))"
"(let-values(((orig-s_335) in45_325))"
"(let-values(((ok-binding_336)(if unless-matches49_327 unless-matches46_326 #f)))"
"(let-values()"
"(let-values(((b_337)"
"(let-values(((.../require+provide.rkt:181:12_338) resolve+shift15.1)"
"((id89_339) id_333)"
"((phase90_340) phase_334)"
"((temp91_341) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f temp91_341 #t #f #f #f #f #f #f id89_339 phase90_340)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../require+provide.rkt:181:12_338"
" keyword-procedure-extract"
" '(#:exactly?)"
" 4)"
" '(#:exactly?)"
"(list temp91_341)"
" id89_339"
" phase90_340)))))"
"(if(not b_337)"
"(let-values()(void))"
"(if(not(module-binding? b_337))"
"                        (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_333))"
"(let-values()"
"(let-values(((defined?_342)"
"(if b_337"
"(eq?(requires+provides-self r+p_332)(module-binding-module b_337))"
" #f)))"
"(if(if(not defined?_342)(not check-not-required?_331) #f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_332 #f))"
"(if(if defined?_342"
"(not"
"(hash-ref"
"(hash-ref(requires+provides-phase-to-defined-syms r+p_332) phase_334 '#hasheq())"
"(module-binding-sym b_337)"
" #f))"
" #f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((at-mod_343)"
"(hash-ref"
"(requires+provides-requires r+p_332)"
"(intern-mpi r+p_332(module-binding-nominal-module b_337))"
" #f)))"
"(if(not at-mod_343)"
"(let-values()(void))"
"(let-values()"
"(let-values(((lst_344)"
"(hash-ref"
"(hash-ref"
" at-mod_343"
"(module-binding-nominal-require-phase b_337)"
" '#hasheq())"
"(syntax-e$1 id_333)"
" null)))"
"(begin"
"(if(list? lst_344)(void)(let-values()(in-list lst_344)))"
"((letrec-values(((for-loop_345)"
"(lambda(fold-var_346 lst_347)"
"(if(pair? lst_347)"
"(let-values(((r_348)(unsafe-car lst_347)))"
"(if #t"
"(let-values(((fold-var_349)"
"(let-values(((fold-var_350)"
" fold-var_346))"
"(let-values(((fold-var_351)"
"(let-values()"
"(begin"
"(let-values()"
"(if(if ok-binding_336"
"(same-binding?"
" b_337"
" ok-binding_336)"
" #f)"
"(let-values()"
"(void))"
"(if(required-can-be-shadowed?"
" r_348)"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_332"
" #f))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                  \"identifier already \""
"(if defined?_342"
"                                                                                                                    \"defined\""
"                                                                                                                    \"required\")"
"(if(zero-phase?"
" phase_334)"
"(let-values()"
"                                                                                                                      \"\")"
"(if(label-phase?"
" phase_334)"
"(let-values()"
"                                                                                                                        \" for label\")"
"(if(="
" 1"
" phase_334)"
"(let-values()"
"                                                                                                                          \" for syntax\")"
"(let-values()"
"(format"
"                                                                                                                           \" for phase ~a\""
" phase_334))))))"
" orig-s_335"
" id_333)))))"
"(void)))))"
"(values fold-var_351)))))"
"(if #t"
"(for-loop_345"
" fold-var_349"
"(unsafe-cdr lst_347))"
" fold-var_349))"
" fold-var_346))"
" fold-var_346))))"
" for-loop_345)"
"(void)"
" lst_344)))))))))))))))))))))))"
"(define-values"
"(unpack54.1$1)"
"(lambda(given-kws_352 given-args_353 r+p50_354 id51_355 phase52_356)"
"(let-values(((check-not-required?47_357)"
"(if(pair? given-kws_352)(eq? '#:check-not-required?(car given-kws_352)) #f)))"
"(let-values(((check-not-required?44_358)(if check-not-required?47_357(car given-args_353)(void)))"
"((given-kws_359)(if check-not-required?47_357(cdr given-kws_352) given-kws_352))"
"((given-args_360)(if check-not-required?47_357(cdr given-args_353) given-args_353)))"
"(let-values(((in45_361)(car given-args_360))"
"((given-kws_362)(cdr given-kws_359))"
"((given-args_363)(cdr given-args_360)))"
"(let-values(((unless-matches49_364)(pair? given-kws_362)))"
"(let-values(((unless-matches46_365)(if unless-matches49_364(car given-args_363)(void))))"
"(check-not-defined53.1"
" check-not-required?44_358"
" check-not-required?47_357"
" in45_361"
" unless-matches46_365"
" unless-matches49_364"
" r+p50_354"
" id51_355"
" phase52_356))))))))"
"(define-values"
"(check-not-defined55.1)"
"(lifted/5.1$1"
"(lambda(given-kws_366 given-argc_367)"
"(if(= given-argc_367 5)(subsets? '(#:in) given-kws_366 '(#:check-not-required? #:in #:unless-matches)) #f))"
"(case-lambda"
"((given-kws_368 given-args_369 r+p_370 id_371 phase_372)"
"(unpack54.1$1 given-kws_368 given-args_369 r+p_370 id_371 phase_372)))"
" '(#:in)"
" '(#:check-not-required? #:in #:unless-matches)))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_373 syms_374 phase_375)"
"(let-values(((phase-to-defined-syms_376)(requires+provides-phase-to-defined-syms r+p_373)))"
"(let-values(((defined-syms_377)(hash-ref phase-to-defined-syms_376 phase_375 '#hasheq())))"
"(let-values(((new-defined-syms_378)"
"(let-values(((lst_379) syms_374))"
"(begin"
"(if(list? lst_379)(void)(let-values()(in-list lst_379)))"
"((letrec-values(((for-loop_380)"
"(lambda(defined-syms_381 lst_382)"
"(if(pair? lst_382)"
"(let-values(((sym_383)(unsafe-car lst_382)))"
"(if #t"
"(let-values(((defined-syms_384)"
"(let-values(((defined-syms_385) defined-syms_381))"
"(let-values(((defined-syms_386)"
"(let-values()"
"(hash-set"
" defined-syms_385"
" sym_383"
" #t))))"
"(values defined-syms_386)))))"
"(if #t"
"(for-loop_380 defined-syms_384(unsafe-cdr lst_382))"
" defined-syms_384))"
" defined-syms_381))"
" defined-syms_381))))"
" for-loop_380)"
" defined-syms_377"
" lst_379)))))"
"(hash-set! phase-to-defined-syms_376 phase_375 new-defined-syms_378))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_387 mod-name_388 phase_389)"
"(let-values(((at-mod_390)(hash-ref(requires+provides-requires r+p_387)(intern-mpi r+p_387 mod-name_388) #f)))"
"(if at-mod_390(apply append(hash-values(hash-ref at-mod_390 phase_389 '#hasheq()))) #f))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_391)(extract-module-requires r+p_391(requires+provides-self r+p_391) 0)))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_392 mod-name_393 phase_394)"
"(let-values(((self_395)(requires+provides-self r+p_392)))"
"(let-values(((requires_396)(requires+provides-requires r+p_392)))"
"(call/ec"
"(lambda(esc_397)"
"(alt-reverse"
"(let-values(((lst_398)"
"(if mod-name_393(list(intern-mpi r+p_392 mod-name_393))(hash-keys requires_396))))"
"(begin"
"(if(list? lst_398)(void)(let-values()(in-list lst_398)))"
"((letrec-values(((for-loop_399)"
"(lambda(fold-var_400 lst_401)"
"(if(pair? lst_401)"
"(let-values(((mod-name_402)(unsafe-car lst_401)))"
"(if #t"
"(let-values(((fold-var_403)"
"(let-values(((fold-var_404) fold-var_400))"
"(if(eq? mod-name_402 self_395)"
" fold-var_404"
"(let-values(((phase-to-requireds_405)"
"(hash-ref"
" requires_396"
" mod-name_402"
" '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_406)"
"(lambda(fold-var_407)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_408)"
"(let-values(((lst_409)"
"(if(eq?"
" phase_394"
" 'all)"
"(hash-keys"
" phase-to-requireds_405)"
"(list"
" phase_394))))"
"(begin"
"(if(list?"
" lst_409)"
"(void)"
"(let-values()"
"(in-list"
" lst_409)))"
"((letrec-values(((for-loop_410)"
"(lambda(fold-var_411"
" lst_412)"
"(if(pair?"
" lst_412)"
"(let-values(((phase_413)"
"(unsafe-car"
" lst_412)))"
"(if #t"
"(let-values(((fold-var_414)"
"(let-values(((ht_415)"
"(hash-ref"
" phase-to-requireds_405"
" phase_413"
"(lambda()"
"(esc_397"
" #f)))))"
"(begin"
"(if((lambda(ht_416)"
"(hash?"
" ht_416))"
" ht_415)"
"(void)"
"(let-values()"
"(default-in-hash-values"
" ht_415)))"
"((letrec-values(((for-loop_417)"
"(lambda(fold-var_418"
" i_419)"
"(if i_419"
"(let-values(((reqds_420)"
"(hash-iterate-value"
" ht_415"
" i_419)))"
"(if #t"
"(let-values(((fold-var_421)"
"(let-values(((lst_422)"
" reqds_420))"
"(begin"
"(if(list?"
" lst_422)"
"(void)"
"(let-values()"
"(in-list"
" lst_422)))"
"((letrec-values(((for-loop_423)"
"(lambda(fold-var_424"
" lst_425)"
"(if(pair?"
" lst_425)"
"(let-values(((reqd_426)"
"(unsafe-car"
" lst_425)))"
"(if #t"
"(let-values(((fold-var_427)"
"(let-values(((fold-var_428)"
" fold-var_424))"
"(let-values(((fold-var_429)"
"(let-values()"
"(cons"
"(let-values()"
" reqd_426)"
" fold-var_428))))"
"(values"
" fold-var_429)))))"
"(if #t"
"(for-loop_423"
" fold-var_427"
"(unsafe-cdr"
" lst_425))"
" fold-var_427))"
" fold-var_424))"
" fold-var_424))))"
" for-loop_423)"
" fold-var_418"
" lst_422)))))"
"(if #t"
"(for-loop_417"
" fold-var_421"
"(hash-iterate-next"
" ht_415"
" i_419))"
" fold-var_421))"
" fold-var_418))"
" fold-var_418))))"
" for-loop_417)"
" fold-var_411"
"(hash-iterate-first"
" ht_415))))))"
"(if #t"
"(for-loop_410"
" fold-var_414"
"(unsafe-cdr"
" lst_412))"
" fold-var_414))"
" fold-var_411))"
" fold-var_411))))"
" for-loop_410)"
" fold-var_407"
" lst_409)))))"
"(if #f"
"(for-loop_406"
" fold-var_408)"
" fold-var_408))"
" fold-var_407))"
" fold-var_407))))"
" for-loop_406)"
" fold-var_404)))))))"
"(if #t(for-loop_399 fold-var_403(unsafe-cdr lst_401)) fold-var_403))"
" fold-var_400))"
" fold-var_400))))"
" for-loop_399)"
" null"
" lst_398))))))))))"
"(define-values"
"(lifted/6.1)"
"(make-required"
" 'add-provide!"
"(case-lambda"
"((self_430 r+p_431 sym_432 phase_433 binding_434 immed-binding_435 id_436 orig-s_437)"
"(apply missing-kw self_430 r+p_431 sym_432 phase_433 binding_434 immed-binding_435 id_436 orig-s_437 null)))"
" #f"
" #f))"
"(define-values"
"(add-provide!67.1)"
"(lambda(as-protected?56_438"
" as-transformer?57_439"
" r+p60_440"
" sym61_441"
" phase62_442"
" binding63_443"
" immed-binding64_444"
" id65_445"
" orig-s66_446)"
"(let-values(((r+p_447) r+p60_440))"
"(let-values(((sym_448) sym61_441))"
"(let-values(((phase_449) phase62_442))"
"(let-values(((binding_450) binding63_443))"
"(let-values(((immed-binding_451) immed-binding64_444))"
"(let-values(((id_452) id65_445))"
"(let-values(((orig-s_453) orig-s66_446))"
"(let-values(((as-protected?_454) as-protected?56_438))"
"(let-values(((as-transformer?_455) as-transformer?57_439))"
"(let-values()"
"(begin"
"(if(if as-protected?_454"
"(not(eq?(module-binding-module immed-binding_451)(requires+provides-self r+p_447)))"
" #f)"
"(let-values()"
"                              (raise-syntax-error$1 #f \"cannot protect imported identifier with re-provide\" sym_448))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_447)"
" phase_449"
"(lambda(at-phase_456)"
"(let-values(((b/p_457)(hash-ref at-phase_456 sym_448 #f)))"
"(let-values(((b_458)(provided-as-binding b/p_457)))"
"(if(not b_458)"
"(let-values()"
"(hash-set"
" at-phase_456"
" sym_448"
"(if(let-values(((or-part_459) as-protected?_454))"
"(if or-part_459 or-part_459 as-transformer?_455))"
"(provided1.1 binding_450 as-protected?_454 as-transformer?_455)"
" binding_450)))"
"(if(same-binding? b_458 binding_450)"
"(let-values() at-phase_456)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                        \"identifier already provided (as a different binding)\""
" orig-s_453"
" id_452)))))))"
" '#hasheq()))))))))))))))"
"(define-values"
"(unpack68.1$1)"
"(lambda(given-kws_460"
" given-args_461"
" r+p60_462"
" sym61_463"
" phase62_464"
" binding63_465"
" immed-binding64_466"
" id65_467"
" orig-s66_468)"
"(let-values(((as-protected?56_469)(car given-args_461))"
"((given-kws_470)(cdr given-kws_460))"
"((given-args_471)(cdr given-args_461)))"
"(let-values(((as-transformer?57_472)(car given-args_471)))"
"(add-provide!67.1"
" as-protected?56_469"
" as-transformer?57_472"
" r+p60_462"
" sym61_463"
" phase62_464"
" binding63_465"
" immed-binding64_466"
" id65_467"
" orig-s66_468)))))"
"(define-values"
"(add-provide!69.1)"
"(lifted/6.1"
"(lambda(given-kws_473 given-argc_474)"
"(if(= given-argc_474 9)"
"(let-values(((l2_475) given-kws_473))"
"(if(pair? l2_475)"
"(if(eq?(car l2_475) '#:as-protected?)"
"(let-values(((l2_476)(cdr l2_475)))"
"(if(pair? l2_476)(if(eq?(car l2_476) '#:as-transformer?)(null?(cdr l2_476)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_477 given-args_478 r+p_479 sym_480 phase_481 binding_482 immed-binding_483 id_484 orig-s_485)"
"(unpack68.1$1"
" given-kws_477"
" given-args_478"
" r+p_479"
" sym_480"
" phase_481"
" binding_482"
" immed-binding_483"
" id_484"
" orig-s_485)))"
" '(#:as-protected? #:as-transformer?)"
" '(#:as-protected? #:as-transformer?)))"
"(define-values"
"(attach-require-provide-properties)"
"(lambda(r+p_486 s_487 old-self_488 new-self_489)"
"(let-values(((extract-requires_490)"
"(lambda()"
"(let-values(((phase-to-mpis-in-order_492)(requires+provides-require-mpis-in-order r+p_486)))"
"(let-values(((phases-in-order_493)"
"(let-values(((temp92_494)(hash-keys phase-to-mpis-in-order_492))"
"((phase<?93_495) phase<?))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f #f #f temp92_494 phase<?93_495)"
"(sort9.1 temp92_494 phase<?93_495)))))"
"(alt-reverse"
"(let-values(((lst_496) phases-in-order_493))"
"(begin"
"(if(list? lst_496)(void)(let-values()(in-list lst_496)))"
"((letrec-values(((for-loop_497)"
"(lambda(fold-var_498 lst_499)"
"(if(pair? lst_499)"
"(let-values(((phase_500)(unsafe-car lst_499)))"
"(if #t"
"(let-values(((fold-var_501)"
"(let-values(((fold-var_502) fold-var_498))"
"(let-values(((fold-var_503)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_500"
"(alt-reverse"
"(let-values(((lst_504)"
"(alt-reverse"
"(hash-ref"
" phase-to-mpis-in-order_492"
" phase_500))))"
"(begin"
"(if(list? lst_504)"
"(void)"
"(let-values()"
"(in-list lst_504)))"
"((letrec-values(((for-loop_505)"
"(lambda(fold-var_506"
" lst_507)"
"(if(pair?"
" lst_507)"
"(let-values(((mpi_508)"
"(unsafe-car"
" lst_507)))"
"(if #t"
"(let-values(((fold-var_509)"
"(let-values(((fold-var_510)"
" fold-var_506))"
"(if(eq?"
" mpi_508"
" old-self_488)"
" fold-var_510"
"(let-values(((fold-var_511)"
" fold-var_510))"
"(let-values(((fold-var_512)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_508"
" old-self_488"
" new-self_489))"
" fold-var_511))))"
"(values"
" fold-var_512)))))))"
"(if #t"
"(for-loop_505"
" fold-var_509"
"(unsafe-cdr"
" lst_507))"
" fold-var_509))"
" fold-var_506))"
" fold-var_506))))"
" for-loop_505)"
" null"
" lst_504))))))"
" fold-var_502))))"
"(values fold-var_503)))))"
"(if #t"
"(for-loop_497 fold-var_501(unsafe-cdr lst_499))"
" fold-var_501))"
" fold-var_498))"
" fold-var_498))))"
" for-loop_497)"
" null"
" lst_496)))))))))"
"(let-values(((extract-provides_491)"
"(lambda()"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_486)"
" old-self_488"
" new-self_489))))"
"(let-values(((s_513)(syntax-property$1 s_487 'module-requires(extract-requires_490))))"
"(let-values(((s_514)(syntax-property$1 s_513 'module-provides(extract-provides_491)))) s_514))))))"
"(define-values"
"(shift-requires-module-path-index)"
"(lambda(requires_515 from-mpi_516 to-mpi_517)"
"(if(eq? from-mpi_516 to-mpi_517)"
"(let-values() requires_515)"
"(let-values()"
"(let-values(((ht_518) requires_515))"
"(begin"
"(if((lambda(ht_519)(hash? ht_519)) ht_518)(void)(let-values()(default-in-hash ht_518)))"
"((letrec-values(((for-loop_520)"
"(lambda(table_521 i_522)"
"(if i_522"
"(let-values(((phase_523 mpis_524)(hash-iterate-key+value ht_518 i_522)))"
"(if #t"
"(let-values(((table_525)"
"(let-values(((table_526) table_521))"
"(let-values(((table_527)"
"(let-values()"
"(let-values(((key_528 val_529)"
"(let-values()"
"(values"
" phase_523"
"(alt-reverse"
"(let-values(((lst_530)"
" mpis_524))"
"(begin"
"(if(list? lst_530)"
"(void)"
"(let-values()"
"(in-list lst_530)))"
"((letrec-values(((for-loop_531)"
"(lambda(fold-var_532"
" lst_533)"
"(if(pair?"
" lst_533)"
"(let-values(((mpi_534)"
"(unsafe-car"
" lst_533)))"
"(if #t"
"(let-values(((fold-var_535)"
"(let-values(((fold-var_536)"
" fold-var_532))"
"(let-values(((fold-var_537)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_534"
" from-mpi_516"
" to-mpi_517))"
" fold-var_536))))"
"(values"
" fold-var_537)))))"
"(if #t"
"(for-loop_531"
" fold-var_535"
"(unsafe-cdr"
" lst_533))"
" fold-var_535))"
" fold-var_532))"
" fold-var_532))))"
" for-loop_531)"
" null"
" lst_530))))))))"
"(hash-set table_526 key_528 val_529)))))"
"(values table_527)))))"
"(if #t(for-loop_520 table_525(hash-iterate-next ht_518 i_522)) table_525))"
" table_521))"
" table_521))))"
" for-loop_520)"
" '#hash()"
"(hash-iterate-first ht_518))))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_538 from-mpi_539 to-mpi_540)"
"(if(eq? from-mpi_539 to-mpi_540)"
"(let-values() provides_538)"
"(let-values()"
"(let-values(((ht_541) provides_538))"
"(begin"
"(if((lambda(ht_542)(hash? ht_542)) ht_541)(void)(let-values()(default-in-hash ht_541)))"
"((letrec-values(((for-loop_543)"
"(lambda(table_544 i_545)"
"(if i_545"
"(let-values(((phase_546 at-phase_547)(hash-iterate-key+value ht_541 i_545)))"
"(if #t"
"(let-values(((table_548)"
"(let-values(((table_549) table_544))"
"(let-values(((table_550)"
"(let-values()"
"(let-values(((key_551 val_552)"
"(let-values()"
"(values"
" phase_546"
"(let-values(((ht_553)"
" at-phase_547))"
"(begin"
"(if((lambda(ht_554)"
"(hash? ht_554))"
" ht_553)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_553)))"
"((letrec-values(((for-loop_555)"
"(lambda(table_556"
" i_557)"
"(if i_557"
"(let-values(((sym_558"
" binding_559)"
"(hash-iterate-key+value"
" ht_553"
" i_557)))"
"(if #t"
"(let-values(((table_560)"
"(let-values(((table_561)"
" table_556))"
"(let-values(((table_562)"
"(let-values()"
"(let-values(((key_563"
" val_564)"
"(let-values()"
"(values"
" sym_558"
"((letrec-values(((loop_565)"
"(lambda(binding_566)"
"(if(provided?"
" binding_566)"
"(let-values()"
"(provided1.1"
"(loop_565"
"(provided-binding"
" binding_566))"
"(provided-protected?"
" binding_566)"
"(provided-syntax?"
" binding_566)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_566"
" from-mpi_539"
" to-mpi_540))))))"
" loop_565)"
" binding_559)))))"
"(hash-set"
" table_561"
" key_563"
" val_564)))))"
"(values"
" table_562)))))"
"(if #t"
"(for-loop_555"
" table_560"
"(hash-iterate-next"
" ht_553"
" i_557))"
" table_560))"
" table_556))"
" table_556))))"
" for-loop_555)"
" '#hasheq()"
"(hash-iterate-first"
" ht_553))))))))"
"(hash-set table_549 key_551 val_552)))))"
"(values table_550)))))"
"(if #t(for-loop_543 table_548(hash-iterate-next ht_541 i_545)) table_548))"
" table_544))"
" table_544))))"
" for-loop_543)"
" '#hasheqv()"
"(hash-iterate-first ht_541))))))))"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_24 make-_25 ?_26 -ref_27 -set!_28)"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))"
"(values struct:_24 make-_25 ?_26(make-struct-field-accessor -ref_27 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_45 make-_46 ?_47 -ref_48 -set!_49)"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))"
"(values"
" struct:_45"
" make-_46"
" ?_47"
"(make-struct-field-accessor -ref_48 0 'prefix-sym)"
"(make-struct-field-accessor -ref_48 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_71 make-_72 ?_73 -ref_74 -set!_75)"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))"
"(values"
" struct:_71"
" make-_72"
" ?_73"
"(make-struct-field-accessor -ref_74 0 'to-id)"
"(make-struct-field-accessor -ref_74 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!20.1)"
"(lambda(declared-submodule-names9_97"
" declared-submodule-names14_98"
" run-phase6_99"
" run-phase11_100"
" run?7_101"
" run?12_102"
" self5_103"
" self10_104"
" visit?8_105"
" visit?13_106"
" reqs15_107"
" orig-s16_108"
" m-ns17_109"
" phase-shift18_110"
" requires+provides19_111)"
"(let-values(((reqs_112) reqs15_107))"
"(let-values(((orig-s_113) orig-s16_108))"
"(let-values(((m-ns_114) m-ns17_109))"
"(let-values(((phase-shift_115) phase-shift18_110))"
"(let-values(((requires+provides_116) requires+provides19_111))"
"(let-values(((self_117)(if self10_104 self5_103 #f)))"
"(let-values(((run-phase_118)(if run-phase11_100 run-phase6_99(namespace-phase m-ns_114))))"
"(let-values(((run?_119)(if run?12_102 run?7_101 #f)))"
"(let-values(((visit?_120)(if visit?13_106 visit?8_105 #t)))"
"(let-values(((declared-submodule-names_121)"
"(if declared-submodule-names14_98 declared-submodule-names9_97 '#hasheq())))"
"(let-values()"
"((letrec-values(((loop_122)"
"(lambda(reqs_123"
" top-req_124"
" phase-shift_125"
" just-meta_126"
" adjust_127"
" for-meta-ok?_128"
" just-meta-ok?_129"
" layer_130)"
"(let-values(((lst_131) reqs_123))"
"(begin"
"(if(list? lst_131)(void)(let-values()(in-list lst_131)))"
"((letrec-values(((for-loop_132)"
"(lambda(result_133 lst_134)"
"(if(pair? lst_134)"
"(let-values(((req_135)(unsafe-car lst_134)))"
"(if #t"
"(let-values(((result_136)"
"(let-values(((result_137)"
" result_133))"
"(let-values(((result_138)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_139)"
"(let-values(((check-nested79_141)"
"(lambda(want-layer78_142"
" ok?76_143"
" ok?77_144)"
"(let-values(((want-layer_145)"
" want-layer78_142))"
"(let-values(((ok?_146)"
"(if ok?77_144"
" ok?76_143"
" #t)))"
"(let-values()"
"(if(if ok?_146"
"(member"
" want-layer_145"
"(member"
" layer_130"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"invalid nesting\""
" orig-s_113"
" req_135)))))))))"
"(case-lambda"
"((want-layer_147)"
"(check-nested79_141"
" want-layer_147"
" #f"
" #f))"
"((want-layer_148"
" ok?76_149)"
"(check-nested79_141"
" want-layer_148"
" ok?76_149"
" #t))))))"
"(let-values(((fm_140)"
"(if(pair?"
"(syntax-e$1"
" req_135))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_135)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_135)))"
" #f)"
" #f)))"
"(let-values(((tmp_150)"
" fm_140))"
"(if(equal?"
" tmp_150"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_151"
" for-meta81_152"
" phase-level82_153"
" spec83_154)"
"(let-values(((s_168)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_169)"
" s_168))"
"(let-values(((for-meta81_170"
" phase-level82_171"
" spec83_172)"
"(let-values(((s_173)"
"(if(syntax?$1"
" s_168)"
"(syntax-e$1"
" s_168)"
" s_168)))"
"(if(pair?"
" s_173)"
"(let-values(((for-meta84_174)"
"(let-values(((s_177)"
"(car"
" s_173)))"
" s_177))"
"((phase-level85_175"
" spec86_176)"
"(let-values(((s_178)"
"(cdr"
" s_173)))"
"(let-values(((s_179)"
"(if(syntax?$1"
" s_178)"
"(syntax-e$1"
" s_178)"
" s_178)))"
"(if(pair?"
" s_179)"
"(let-values(((phase-level87_180)"
"(let-values(((s_182)"
"(car"
" s_179)))"
" s_182))"
"((spec88_181)"
"(let-values(((s_183)"
"(cdr"
" s_179)))"
"(let-values(((s_184)"
"(if(syntax?$1"
" s_183)"
"(syntax-e$1"
" s_183)"
" s_183)))"
"(let-values(((flat-s_185)"
"(to-syntax-list.1$1"
" s_184)))"
"(if(not"
" flat-s_185)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_169))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_169))"
"(let-values()"
"(let-values(((spec_186)"
"(let-values(((lst_187)"
" flat-s_185))"
"(begin"
"(if(list?"
" lst_187)"
"(void)"
"(let-values()"
"(in-list"
" lst_187)))"
"((letrec-values(((for-loop_188)"
"(lambda(spec_189"
" lst_190)"
"(if(pair?"
" lst_190)"
"(let-values(((s_191)"
"(unsafe-car"
" lst_190)))"
"(if #t"
"(let-values(((spec_192)"
"(let-values(((spec_193)"
" spec_189))"
"(let-values(((spec_194)"
"(let-values()"
"(let-values(((spec89_195)"
"(let-values()"
" s_191)))"
"(cons"
" spec89_195"
" spec_193)))))"
"(values"
" spec_194)))))"
"(if #t"
"(for-loop_188"
" spec_192"
"(unsafe-cdr"
" lst_190))"
" spec_192))"
" spec_189))"
" spec_189))))"
" for-loop_188)"
" null"
" lst_187)))))"
"(alt-reverse"
" spec_186))))))))))"
"(values"
" phase-level87_180"
" spec88_181))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_169))))))"
"(values"
" for-meta84_174"
" phase-level85_175"
" spec86_176))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_169)))))"
"(values"
" #t"
" for-meta81_170"
" phase-level82_171"
" spec83_172)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((p_167)"
"(syntax-e$1"
" phase-level82_153)))"
"(begin"
"(if(phase?"
" p_167)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad phase\""
" orig-s_113"
" req_135)))"
"(loop_122"
" spec83_154"
"(let-values(((or-part_196)"
" top-req_124))"
"(if or-part_196"
" or-part_196"
" req_135))"
"(phase+"
" phase-shift_125"
" p_167)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))))"
"(if(equal?"
" tmp_150"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_197"
" for-syntax90_198"
" spec91_199)"
"(let-values(((s_210)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_211)"
" s_210))"
"(let-values(((for-syntax90_212"
" spec91_213)"
"(let-values(((s_214)"
"(if(syntax?$1"
" s_210)"
"(syntax-e$1"
" s_210)"
" s_210)))"
"(if(pair?"
" s_214)"
"(let-values(((for-syntax92_215)"
"(let-values(((s_217)"
"(car"
" s_214)))"
" s_217))"
"((spec93_216)"
"(let-values(((s_218)"
"(cdr"
" s_214)))"
"(let-values(((s_219)"
"(if(syntax?$1"
" s_218)"
"(syntax-e$1"
" s_218)"
" s_218)))"
"(let-values(((flat-s_220)"
"(to-syntax-list.1$1"
" s_219)))"
"(if(not"
" flat-s_220)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_211))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_211))"
"(let-values()"
"(let-values(((spec_221)"
"(let-values(((lst_222)"
" flat-s_220))"
"(begin"
"(if(list?"
" lst_222)"
"(void)"
"(let-values()"
"(in-list"
" lst_222)))"
"((letrec-values(((for-loop_223)"
"(lambda(spec_224"
" lst_225)"
"(if(pair?"
" lst_225)"
"(let-values(((s_226)"
"(unsafe-car"
" lst_225)))"
"(if #t"
"(let-values(((spec_227)"
"(let-values(((spec_228)"
" spec_224))"
"(let-values(((spec_229)"
"(let-values()"
"(let-values(((spec94_230)"
"(let-values()"
" s_226)))"
"(cons"
" spec94_230"
" spec_228)))))"
"(values"
" spec_229)))))"
"(if #t"
"(for-loop_223"
" spec_227"
"(unsafe-cdr"
" lst_225))"
" spec_227))"
" spec_224))"
" spec_224))))"
" for-loop_223)"
" null"
" lst_222)))))"
"(alt-reverse"
" spec_221))))))))))"
"(values"
" for-syntax92_215"
" spec93_216))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_211)))))"
"(values"
" #t"
" for-syntax90_212"
" spec91_213)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_122"
" spec91_199"
"(let-values(((or-part_231)"
" top-req_124))"
"(if or-part_231"
" or-part_231"
" req_135))"
"(phase+"
" phase-shift_125"
" 1)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_232"
" for-template95_233"
" spec96_234)"
"(let-values(((s_245)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_246)"
" s_245))"
"(let-values(((for-template95_247"
" spec96_248)"
"(let-values(((s_249)"
"(if(syntax?$1"
" s_245)"
"(syntax-e$1"
" s_245)"
" s_245)))"
"(if(pair?"
" s_249)"
"(let-values(((for-template97_250)"
"(let-values(((s_252)"
"(car"
" s_249)))"
" s_252))"
"((spec98_251)"
"(let-values(((s_253)"
"(cdr"
" s_249)))"
"(let-values(((s_254)"
"(if(syntax?$1"
" s_253)"
"(syntax-e$1"
" s_253)"
" s_253)))"
"(let-values(((flat-s_255)"
"(to-syntax-list.1$1"
" s_254)))"
"(if(not"
" flat-s_255)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_246))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_246))"
"(let-values()"
"(let-values(((spec_256)"
"(let-values(((lst_257)"
" flat-s_255))"
"(begin"
"(if(list?"
" lst_257)"
"(void)"
"(let-values()"
"(in-list"
" lst_257)))"
"((letrec-values(((for-loop_258)"
"(lambda(spec_259"
" lst_260)"
"(if(pair?"
" lst_260)"
"(let-values(((s_261)"
"(unsafe-car"
" lst_260)))"
"(if #t"
"(let-values(((spec_262)"
"(let-values(((spec_263)"
" spec_259))"
"(let-values(((spec_264)"
"(let-values()"
"(let-values(((spec99_265)"
"(let-values()"
" s_261)))"
"(cons"
" spec99_265"
" spec_263)))))"
"(values"
" spec_264)))))"
"(if #t"
"(for-loop_258"
" spec_262"
"(unsafe-cdr"
" lst_260))"
" spec_262))"
" spec_259))"
" spec_259))))"
" for-loop_258)"
" null"
" lst_257)))))"
"(alt-reverse"
" spec_256))))))))))"
"(values"
" for-template97_250"
" spec98_251))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_246)))))"
"(values"
" #t"
" for-template95_247"
" spec96_248)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_122"
" spec96_234"
"(let-values(((or-part_266)"
" top-req_124))"
"(if or-part_266"
" or-part_266"
" req_135))"
"(phase+"
" phase-shift_125"
" -1)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" for-meta-ok?_128)"
"(values))))"
"(let-values(((ok?_267"
" for-label100_268"
" spec101_269)"
"(let-values(((s_280)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_281)"
" s_280))"
"(let-values(((for-label100_282"
" spec101_283)"
"(let-values(((s_284)"
"(if(syntax?$1"
" s_280)"
"(syntax-e$1"
" s_280)"
" s_280)))"
"(if(pair?"
" s_284)"
"(let-values(((for-label102_285)"
"(let-values(((s_287)"
"(car"
" s_284)))"
" s_287))"
"((spec103_286)"
"(let-values(((s_288)"
"(cdr"
" s_284)))"
"(let-values(((s_289)"
"(if(syntax?$1"
" s_288)"
"(syntax-e$1"
" s_288)"
" s_288)))"
"(let-values(((flat-s_290)"
"(to-syntax-list.1$1"
" s_289)))"
"(if(not"
" flat-s_290)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_281))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_281))"
"(let-values()"
"(let-values(((spec_291)"
"(let-values(((lst_292)"
" flat-s_290))"
"(begin"
"(if(list?"
" lst_292)"
"(void)"
"(let-values()"
"(in-list"
" lst_292)))"
"((letrec-values(((for-loop_293)"
"(lambda(spec_294"
" lst_295)"
"(if(pair?"
" lst_295)"
"(let-values(((s_296)"
"(unsafe-car"
" lst_295)))"
"(if #t"
"(let-values(((spec_297)"
"(let-values(((spec_298)"
" spec_294))"
"(let-values(((spec_299)"
"(let-values()"
"(let-values(((spec104_300)"
"(let-values()"
" s_296)))"
"(cons"
" spec104_300"
" spec_298)))))"
"(values"
" spec_299)))))"
"(if #t"
"(for-loop_293"
" spec_297"
"(unsafe-cdr"
" lst_295))"
" spec_297))"
" spec_294))"
" spec_294))))"
" for-loop_293)"
" null"
" lst_292)))))"
"(alt-reverse"
" spec_291))))))))))"
"(values"
" for-label102_285"
" spec103_286))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_281)))))"
"(values"
" #t"
" for-label100_282"
" spec101_283)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_122"
" spec101_269"
"(let-values(((or-part_301)"
" top-req_124))"
"(if or-part_301"
" or-part_301"
" req_135))"
"(phase+"
" phase-shift_125"
" #f)"
" just-meta_126"
" adjust_127"
" #f"
" just-meta-ok?_129"
" 'raw))))"
"(if(equal?"
" tmp_150"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'raw"
" just-meta-ok?_129)"
"(values))))"
"(let-values(((ok?_302"
" just-meta105_303"
" phase-level106_304"
" spec107_305)"
"(let-values(((s_319)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_320)"
" s_319))"
"(let-values(((just-meta105_321"
" phase-level106_322"
" spec107_323)"
"(let-values(((s_324)"
"(if(syntax?$1"
" s_319)"
"(syntax-e$1"
" s_319)"
" s_319)))"
"(if(pair?"
" s_324)"
"(let-values(((just-meta108_325)"
"(let-values(((s_328)"
"(car"
" s_324)))"
" s_328))"
"((phase-level109_326"
" spec110_327)"
"(let-values(((s_329)"
"(cdr"
" s_324)))"
"(let-values(((s_330)"
"(if(syntax?$1"
" s_329)"
"(syntax-e$1"
" s_329)"
" s_329)))"
"(if(pair?"
" s_330)"
"(let-values(((phase-level111_331)"
"(let-values(((s_333)"
"(car"
" s_330)))"
" s_333))"
"((spec112_332)"
"(let-values(((s_334)"
"(cdr"
" s_330)))"
"(let-values(((s_335)"
"(if(syntax?$1"
" s_334)"
"(syntax-e$1"
" s_334)"
" s_334)))"
"(let-values(((flat-s_336)"
"(to-syntax-list.1$1"
" s_335)))"
"(if(not"
" flat-s_336)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_320))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_320))"
"(let-values()"
"(let-values(((spec_337)"
"(let-values(((lst_338)"
" flat-s_336))"
"(begin"
"(if(list?"
" lst_338)"
"(void)"
"(let-values()"
"(in-list"
" lst_338)))"
"((letrec-values(((for-loop_339)"
"(lambda(spec_340"
" lst_341)"
"(if(pair?"
" lst_341)"
"(let-values(((s_342)"
"(unsafe-car"
" lst_341)))"
"(if #t"
"(let-values(((spec_343)"
"(let-values(((spec_344)"
" spec_340))"
"(let-values(((spec_345)"
"(let-values()"
"(let-values(((spec113_346)"
"(let-values()"
" s_342)))"
"(cons"
" spec113_346"
" spec_344)))))"
"(values"
" spec_345)))))"
"(if #t"
"(for-loop_339"
" spec_343"
"(unsafe-cdr"
" lst_341))"
" spec_343))"
" spec_340))"
" spec_340))))"
" for-loop_339)"
" null"
" lst_338)))))"
"(alt-reverse"
" spec_337))))))))))"
"(values"
" phase-level111_331"
" spec112_332))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_320))))))"
"(values"
" just-meta108_325"
" phase-level109_326"
" spec110_327))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_320)))))"
"(values"
" #t"
" just-meta105_321"
" phase-level106_322"
" spec107_323)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((p_318)"
"(syntax-e$1"
" phase-level106_304)))"
"(begin"
"(if(phase?"
" p_318)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad phase\""
" orig-s_113"
" req_135)))"
"(loop_122"
" spec107_305"
"(let-values(((or-part_347)"
" top-req_124))"
"(if or-part_347"
" or-part_347"
" req_135))"
" phase-shift_125"
" just-meta_126"
" adjust_127"
" for-meta-ok?_128"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_150"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_348"
" only114_349"
" spec115_350"
" id116_351)"
"(let-values(((s_364)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_365)"
" s_364))"
"(let-values(((only114_366"
" spec115_367"
" id116_368)"
"(let-values(((s_369)"
"(if(syntax?$1"
" s_364)"
"(syntax-e$1"
" s_364)"
" s_364)))"
"(if(pair?"
" s_369)"
"(let-values(((only117_370)"
"(let-values(((s_373)"
"(car"
" s_369)))"
" s_373))"
"((spec118_371"
" id119_372)"
"(let-values(((s_374)"
"(cdr"
" s_369)))"
"(let-values(((s_375)"
"(if(syntax?$1"
" s_374)"
"(syntax-e$1"
" s_374)"
" s_374)))"
"(if(pair?"
" s_375)"
"(let-values(((spec120_376)"
"(let-values(((s_378)"
"(car"
" s_375)))"
" s_378))"
"((id121_377)"
"(let-values(((s_379)"
"(cdr"
" s_375)))"
"(let-values(((s_380)"
"(if(syntax?$1"
" s_379)"
"(syntax-e$1"
" s_379)"
" s_379)))"
"(let-values(((flat-s_381)"
"(to-syntax-list.1$1"
" s_380)))"
"(if(not"
" flat-s_381)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_365))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_365))"
"(let-values()"
"(let-values(((id_382)"
"(let-values(((lst_383)"
" flat-s_381))"
"(begin"
"(if(list?"
" lst_383)"
"(void)"
"(let-values()"
"(in-list"
" lst_383)))"
"((letrec-values(((for-loop_384)"
"(lambda(id_385"
" lst_386)"
"(if(pair?"
" lst_386)"
"(let-values(((s_387)"
"(unsafe-car"
" lst_386)))"
"(if #t"
"(let-values(((id_388)"
"(let-values(((id_389)"
" id_385))"
"(let-values(((id_390)"
"(let-values()"
"(let-values(((id122_391)"
"(let-values()"
"(if(let-values(((or-part_392)"
"(if(syntax?$1"
" s_387)"
"(symbol?"
"(syntax-e$1"
" s_387))"
" #f)))"
"(if or-part_392"
" or-part_392"
"(symbol?"
" s_387)))"
" s_387"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_365"
" s_387)))))"
"(cons"
" id122_391"
" id_389)))))"
"(values"
" id_390)))))"
"(if #t"
"(for-loop_384"
" id_388"
"(unsafe-cdr"
" lst_386))"
" id_388))"
" id_385))"
" id_385))))"
" for-loop_384)"
" null"
" lst_383)))))"
"(alt-reverse"
" id_382))))))))))"
"(values"
" spec120_376"
" id121_377))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_365))))))"
"(values"
" only117_370"
" spec118_371"
" id119_372))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                           \"bad syntax\""
" orig-s_365)))))"
"(values"
" #t"
" only114_366"
" spec115_367"
" id116_368)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec115_350)"
"(let-values(((or-part_393)"
" top-req_124))"
"(if or-part_393"
" or-part_393"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-only1.1"
"(ids->sym-set"
" id116_351))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_394"
" prefix123_395"
" id:prefix124_396"
" spec125_397)"
"(let-values(((s_410)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_411)"
" s_410))"
"(let-values(((prefix123_412"
" id:prefix124_413"
" spec125_414)"
"(let-values(((s_415)"
"(if(syntax?$1"
" s_410)"
"(syntax-e$1"
" s_410)"
" s_410)))"
"(if(pair?"
" s_415)"
"(let-values(((prefix126_416)"
"(let-values(((s_419)"
"(car"
" s_415)))"
" s_419))"
"((id:prefix127_417"
" spec128_418)"
"(let-values(((s_420)"
"(cdr"
" s_415)))"
"(let-values(((s_421)"
"(if(syntax?$1"
" s_420)"
"(syntax-e$1"
" s_420)"
" s_420)))"
"(if(pair?"
" s_421)"
"(let-values(((id:prefix129_422)"
"(let-values(((s_424)"
"(car"
" s_421)))"
"(if(let-values(((or-part_425)"
"(if(syntax?$1"
" s_424)"
"(symbol?"
"(syntax-e$1"
" s_424))"
" #f)))"
"(if or-part_425"
" or-part_425"
"(symbol?"
" s_424)))"
" s_424"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_411"
" s_424))))"
"((spec130_423)"
"(let-values(((s_426)"
"(cdr"
" s_421)))"
"(let-values(((s_427)"
"(if(syntax?$1"
" s_426)"
"(syntax-e$1"
" s_426)"
" s_426)))"
"(if(pair?"
" s_427)"
"(let-values(((spec131_428)"
"(let-values(((s_429)"
"(car"
" s_427)))"
" s_429))"
"(()"
"(let-values(((s_430)"
"(cdr"
" s_427)))"
"(let-values(((s_431)"
"(if(syntax?$1"
" s_430)"
"(syntax-e$1"
" s_430)"
" s_430)))"
"(if(null?"
" s_431)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_411))))))"
"(values"
" spec131_428))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_411))))))"
"(values"
" id:prefix129_422"
" spec130_423))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_411))))))"
"(values"
" prefix126_416"
" id:prefix127_417"
" spec128_418))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_411)))))"
"(values"
" #t"
" prefix123_412"
" id:prefix124_413"
" spec125_414)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec125_397)"
"(let-values(((or-part_432)"
" top-req_124))"
"(if or-part_432"
" or-part_432"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix124_396))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_433"
" all-except132_434"
" spec133_435"
" id134_436)"
"(let-values(((s_449)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_450)"
" s_449))"
"(let-values(((all-except132_451"
" spec133_452"
" id134_453)"
"(let-values(((s_454)"
"(if(syntax?$1"
" s_449)"
"(syntax-e$1"
" s_449)"
" s_449)))"
"(if(pair?"
" s_454)"
"(let-values(((all-except135_455)"
"(let-values(((s_458)"
"(car"
" s_454)))"
" s_458))"
"((spec136_456"
" id137_457)"
"(let-values(((s_459)"
"(cdr"
" s_454)))"
"(let-values(((s_460)"
"(if(syntax?$1"
" s_459)"
"(syntax-e$1"
" s_459)"
" s_459)))"
"(if(pair?"
" s_460)"
"(let-values(((spec138_461)"
"(let-values(((s_463)"
"(car"
" s_460)))"
" s_463))"
"((id139_462)"
"(let-values(((s_464)"
"(cdr"
" s_460)))"
"(let-values(((s_465)"
"(if(syntax?$1"
" s_464)"
"(syntax-e$1"
" s_464)"
" s_464)))"
"(let-values(((flat-s_466)"
"(to-syntax-list.1$1"
" s_465)))"
"(if(not"
" flat-s_466)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_450))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_450))"
"(let-values()"
"(let-values(((id_467)"
"(let-values(((lst_468)"
" flat-s_466))"
"(begin"
"(if(list?"
" lst_468)"
"(void)"
"(let-values()"
"(in-list"
" lst_468)))"
"((letrec-values(((for-loop_469)"
"(lambda(id_470"
" lst_471)"
"(if(pair?"
" lst_471)"
"(let-values(((s_472)"
"(unsafe-car"
" lst_471)))"
"(if #t"
"(let-values(((id_473)"
"(let-values(((id_474)"
" id_470))"
"(let-values(((id_475)"
"(let-values()"
"(let-values(((id140_476)"
"(let-values()"
"(if(let-values(((or-part_477)"
"(if(syntax?$1"
" s_472)"
"(symbol?"
"(syntax-e$1"
" s_472))"
" #f)))"
"(if or-part_477"
" or-part_477"
"(symbol?"
" s_472)))"
" s_472"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_450"
" s_472)))))"
"(cons"
" id140_476"
" id_474)))))"
"(values"
" id_475)))))"
"(if #t"
"(for-loop_469"
" id_473"
"(unsafe-cdr"
" lst_471))"
" id_473))"
" id_470))"
" id_470))))"
" for-loop_469)"
" null"
" lst_468)))))"
"(alt-reverse"
" id_467))))))))))"
"(values"
" spec138_461"
" id139_462))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_450))))))"
"(values"
" all-except135_455"
" spec136_456"
" id137_457))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_450)))))"
"(values"
" #t"
" all-except132_451"
" spec133_452"
" id134_453)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec133_435)"
"(let-values(((or-part_478)"
" top-req_124))"
"(if or-part_478"
" or-part_478"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id134_436))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_479"
" prefix-all-except141_480"
" id:prefix142_481"
" spec143_482"
" id144_483)"
"(let-values(((s_498)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_499)"
" s_498))"
"(let-values(((prefix-all-except141_500"
" id:prefix142_501"
" spec143_502"
" id144_503)"
"(let-values(((s_504)"
"(if(syntax?$1"
" s_498)"
"(syntax-e$1"
" s_498)"
" s_498)))"
"(if(pair?"
" s_504)"
"(let-values(((prefix-all-except145_505)"
"(let-values(((s_509)"
"(car"
" s_504)))"
" s_509))"
"((id:prefix146_506"
" spec147_507"
" id148_508)"
"(let-values(((s_510)"
"(cdr"
" s_504)))"
"(let-values(((s_511)"
"(if(syntax?$1"
" s_510)"
"(syntax-e$1"
" s_510)"
" s_510)))"
"(if(pair?"
" s_511)"
"(let-values(((id:prefix149_512)"
"(let-values(((s_515)"
"(car"
" s_511)))"
"(if(let-values(((or-part_516)"
"(if(syntax?$1"
" s_515)"
"(symbol?"
"(syntax-e$1"
" s_515))"
" #f)))"
"(if or-part_516"
" or-part_516"
"(symbol?"
" s_515)))"
" s_515"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_499"
" s_515))))"
"((spec150_513"
" id151_514)"
"(let-values(((s_517)"
"(cdr"
" s_511)))"
"(let-values(((s_518)"
"(if(syntax?$1"
" s_517)"
"(syntax-e$1"
" s_517)"
" s_517)))"
"(if(pair?"
" s_518)"
"(let-values(((spec152_519)"
"(let-values(((s_521)"
"(car"
" s_518)))"
" s_521))"
"((id153_520)"
"(let-values(((s_522)"
"(cdr"
" s_518)))"
"(let-values(((s_523)"
"(if(syntax?$1"
" s_522)"
"(syntax-e$1"
" s_522)"
" s_522)))"
"(let-values(((flat-s_524)"
"(to-syntax-list.1$1"
" s_523)))"
"(if(not"
" flat-s_524)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_499))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_499))"
"(let-values()"
"(let-values(((id_525)"
"(let-values(((lst_526)"
" flat-s_524))"
"(begin"
"(if(list?"
" lst_526)"
"(void)"
"(let-values()"
"(in-list"
" lst_526)))"
"((letrec-values(((for-loop_527)"
"(lambda(id_528"
" lst_529)"
"(if(pair?"
" lst_529)"
"(let-values(((s_530)"
"(unsafe-car"
" lst_529)))"
"(if #t"
"(let-values(((id_531)"
"(let-values(((id_532)"
" id_528))"
"(let-values(((id_533)"
"(let-values()"
"(let-values(((id154_534)"
"(let-values()"
"(if(let-values(((or-part_535)"
"(if(syntax?$1"
" s_530)"
"(symbol?"
"(syntax-e$1"
" s_530))"
" #f)))"
"(if or-part_535"
" or-part_535"
"(symbol?"
" s_530)))"
" s_530"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_499"
" s_530)))))"
"(cons"
" id154_534"
" id_532)))))"
"(values"
" id_533)))))"
"(if #t"
"(for-loop_527"
" id_531"
"(unsafe-cdr"
" lst_529))"
" id_531))"
" id_528))"
" id_528))))"
" for-loop_527)"
" null"
" lst_526)))))"
"(alt-reverse"
" id_525))))))))))"
"(values"
" spec152_519"
" id153_520))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_499))))))"
"(values"
" id:prefix149_512"
" spec150_513"
" id151_514))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_499))))))"
"(values"
" prefix-all-except145_505"
" id:prefix146_506"
" spec147_507"
" id148_508))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_499)))))"
"(values"
" #t"
" prefix-all-except141_500"
" id:prefix142_501"
" spec143_502"
" id144_503)))"
"(values"
" #f"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec143_482)"
"(let-values(((or-part_536)"
" top-req_124))"
"(if or-part_536"
" or-part_536"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix142_481)"
"(ids->sym-set"
" id144_483))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_150"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_139"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_537"
" rename155_538"
" spec156_539"
" id:to157_540"
" id:from158_541)"
"(let-values(((s_556)"
" req_135))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_557)"
" s_556))"
"(let-values(((rename155_558"
" spec156_559"
" id:to157_560"
" id:from158_561)"
"(let-values(((s_562)"
"(if(syntax?$1"
" s_556)"
"(syntax-e$1"
" s_556)"
" s_556)))"
"(if(pair?"
" s_562)"
"(let-values(((rename159_563)"
"(let-values(((s_567)"
"(car"
" s_562)))"
" s_567))"
"((spec160_564"
" id:to161_565"
" id:from162_566)"
"(let-values(((s_568)"
"(cdr"
" s_562)))"
"(let-values(((s_569)"
"(if(syntax?$1"
" s_568)"
"(syntax-e$1"
" s_568)"
" s_568)))"
"(if(pair?"
" s_569)"
"(let-values(((spec163_570)"
"(let-values(((s_573)"
"(car"
" s_569)))"
" s_573))"
"((id:to164_571"
" id:from165_572)"
"(let-values(((s_574)"
"(cdr"
" s_569)))"
"(let-values(((s_575)"
"(if(syntax?$1"
" s_574)"
"(syntax-e$1"
" s_574)"
" s_574)))"
"(if(pair?"
" s_575)"
"(let-values(((id:to166_576)"
"(let-values(((s_578)"
"(car"
" s_575)))"
"(if(let-values(((or-part_579)"
"(if(syntax?$1"
" s_578)"
"(symbol?"
"(syntax-e$1"
" s_578))"
" #f)))"
"(if or-part_579"
" or-part_579"
"(symbol?"
" s_578)))"
" s_578"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_557"
" s_578))))"
"((id:from167_577)"
"(let-values(((s_580)"
"(cdr"
" s_575)))"
"(let-values(((s_581)"
"(if(syntax?$1"
" s_580)"
"(syntax-e$1"
" s_580)"
" s_580)))"
"(if(pair?"
" s_581)"
"(let-values(((id:from168_582)"
"(let-values(((s_583)"
"(car"
" s_581)))"
"(if(let-values(((or-part_584)"
"(if(syntax?$1"
" s_583)"
"(symbol?"
"(syntax-e$1"
" s_583))"
" #f)))"
"(if or-part_584"
" or-part_584"
"(symbol?"
" s_583)))"
" s_583"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_557"
" s_583))))"
"(()"
"(let-values(((s_585)"
"(cdr"
" s_581)))"
"(let-values(((s_586)"
"(if(syntax?$1"
" s_585)"
"(syntax-e$1"
" s_585)"
" s_585)))"
"(if(null?"
" s_586)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_557))))))"
"(values"
" id:from168_582))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_557))))))"
"(values"
" id:to166_576"
" id:from167_577))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_557))))))"
"(values"
" spec163_570"
" id:to164_571"
" id:from165_572))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_557))))))"
"(values"
" rename159_563"
" spec160_564"
" id:to161_565"
" id:from162_566))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_557)))))"
"(values"
" #t"
" rename155_558"
" spec156_559"
" id:to157_560"
" id:from158_561)))"
"(values"
" #f"
" #f"
" #f"
" #f"
" #f)))))"
"(loop_122"
"(list"
" spec156_539)"
"(let-values(((or-part_587)"
" top-req_124))"
"(if or-part_587"
" or-part_587"
" req_135))"
" phase-shift_125"
" just-meta_126"
"(adjust-rename4.1"
" id:to157_540"
"(syntax-e$1"
" id:from158_541))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_588)"
"(syntax->datum$1"
" req_135)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_591)"
"(1/module-path?"
" maybe-mp_588)))"
"(if or-part_591"
" or-part_591"
"(1/resolved-module-path?"
" maybe-mp_588)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad require spec\""
" orig-s_113"
" req_135)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_592)"
" adjust_127))"
"(if or-part_592"
" or-part_592"
"(not"
"(eq?"
" just-meta_126"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_116"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_589)"
"(if(1/resolved-module-path?"
" maybe-mp_588)"
"(resolved-module-path->module-path"
" maybe-mp_588)"
" maybe-mp_588)))"
"(let-values(((mpi_590)"
"(let-values(((...r/expand/require.rkt:159:21_593)"
" module-path->mpi29.1)"
"((mp181_594)"
" mp_589)"
"((self182_595)"
" self_117)"
"((declared-submodule-names183_596)"
" declared-submodule-names_121))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" module-path->mpi29.1))"
"(module-path->mpi27.1"
" declared-submodule-names183_596"
" #t"
" mp181_594"
" self182_595)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:159:21_593"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 4)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names183_596)"
" mp181_594"
" self182_595)))))"
"(let-values(((...r/expand/require.rkt:161:9_597)"
" perform-require!55.1)"
"((mpi169_598)"
" mpi_590)"
"((temp170_599)"
" #f)"
"((self171_600)"
" self_117)"
"((temp172_601)"
"(let-values(((or-part_610)"
" req_135))"
"(if or-part_610"
" or-part_610"
" top-req_124)))"
"((m-ns173_602)"
" m-ns_114)"
"((phase-shift174_603)"
" phase-shift_125)"
"((run-phase175_604)"
" run-phase_118)"
"((just-meta176_605)"
" just-meta_126)"
"((adjust177_606)"
" adjust_127)"
"((requires+provides178_607)"
" requires+provides_116)"
"((run?179_608)"
" run?_119)"
"((visit?180_609)"
" visit?_120))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!55.1))"
"(perform-require!53.1"
" adjust177_606"
" #t"
" #f"
" #f"
" #f"
" #f"
" just-meta176_605"
" #t"
" phase-shift174_603"
" requires+provides178_607"
" #t"
" run-phase175_604"
" run?179_608"
" #t"
" visit?180_609"
" #t"
" mpi169_598"
" temp170_599"
" self171_600"
" temp172_601"
" m-ns173_602)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:161:9_597"
" keyword-procedure-extract"
" '(#:adjust"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)"
" 7)"
" '(#:adjust"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)"
"(list"
" adjust177_606"
" just-meta176_605"
" phase-shift174_603"
" requires+provides178_607"
" run-phase175_604"
" run?179_608"
" visit?180_609)"
" mpi169_598"
" temp170_599"
" self171_600"
" temp172_601"
" m-ns173_602))))))))))))))))))))))))))"
"(values result_138)))))"
"(if(if #t"
"(not"
"((lambda x_611(not result_136))"
" req_135))"
" #f)"
"(for-loop_132"
" result_136"
"(unsafe-cdr lst_134))"
" result_136))"
" result_133))"
" result_133))))"
" for-loop_132)"
" #t"
" lst_131))))))"
" loop_122)"
" reqs_112"
" #f"
" phase-shift_115"
" 'all"
" #f"
" #t"
" #t"
" 'raw))))))))))))))"
"(define-values"
"(unpack21.1)"
"(lambda(given-kws_612 given-args_613 reqs15_614 orig-s16_615 m-ns17_616 phase-shift18_617 requires+provides19_618)"
"(let-values(((declared-submodule-names14_619)"
"(if(pair? given-kws_612)(eq? '#:declared-submodule-names(car given-kws_612)) #f)))"
"(let-values(((declared-submodule-names9_620)(if declared-submodule-names14_619(car given-args_613)(void)))"
"((given-kws_621)(if declared-submodule-names14_619(cdr given-kws_612) given-kws_612))"
"((given-args_622)(if declared-submodule-names14_619(cdr given-args_613) given-args_613)))"
"(let-values(((run-phase11_623)(if(pair? given-kws_621)(eq? '#:run-phase(car given-kws_621)) #f)))"
"(let-values(((run-phase6_624)(if run-phase11_623(car given-args_622)(void)))"
"((given-kws_625)(if run-phase11_623(cdr given-kws_621) given-kws_621))"
"((given-args_626)(if run-phase11_623(cdr given-args_622) given-args_622)))"
"(let-values(((run?12_627)(if(pair? given-kws_625)(eq? '#:run?(car given-kws_625)) #f)))"
"(let-values(((run?7_628)(if run?12_627(car given-args_626)(void)))"
"((given-kws_629)(if run?12_627(cdr given-kws_625) given-kws_625))"
"((given-args_630)(if run?12_627(cdr given-args_626) given-args_626)))"
"(let-values(((self10_631)(if(pair? given-kws_629)(eq? '#:self(car given-kws_629)) #f)))"
"(let-values(((self5_632)(if self10_631(car given-args_630)(void)))"
"((given-kws_633)(if self10_631(cdr given-kws_629) given-kws_629))"
"((given-args_634)(if self10_631(cdr given-args_630) given-args_630)))"
"(let-values(((visit?13_635)(pair? given-kws_633)))"
"(let-values(((visit?8_636)(if visit?13_635(car given-args_634)(void))))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names9_620"
" declared-submodule-names14_619"
" run-phase6_624"
" run-phase11_623"
" run?7_628"
" run?12_627"
" self5_632"
" self10_631"
" visit?8_636"
" visit?13_635"
" reqs15_614"
" orig-s16_615"
" m-ns17_616"
" phase-shift18_617"
" requires+provides19_618)))))))))))))"
"(define-values"
"(parse-and-perform-requires!22.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_637 given-argc_638)"
"(if(= given-argc_638 7)"
"(let-values(((l1_639) given-kws_637))"
"(let-values(((l1_640)"
"(if(null? l1_639)"
" l1_639"
"(if(eq?(car l1_639) '#:declared-submodule-names)(cdr l1_639) l1_639))))"
"(let-values(((l1_641) l1_640))"
"(let-values(((l1_642)"
"(if(null? l1_641) l1_641(if(eq?(car l1_641) '#:run-phase)(cdr l1_641) l1_641))))"
"(let-values(((l1_643) l1_642))"
"(let-values(((l1_644)(if(null? l1_643) l1_643(if(eq?(car l1_643) '#:run?)(cdr l1_643) l1_643))))"
"(let-values(((l1_645) l1_644))"
"(let-values(((l1_646)"
"(if(null? l1_645) l1_645(if(eq?(car l1_645) '#:self)(cdr l1_645) l1_645))))"
"(let-values(((l1_647) l1_646))"
"(let-values(((l1_648)"
"(if(null? l1_647)"
" l1_647"
"(if(eq?(car l1_647) '#:visit?)(cdr l1_647) l1_647))))"
"(null? l1_648)))))))))))"
" #f))"
"(case-lambda"
"((given-kws_649 given-args_650 reqs_651 orig-s_652 m-ns_653 phase-shift_654 requires+provides_655)"
"(unpack21.1 given-kws_649 given-args_650 reqs_651 orig-s_652 m-ns_653 phase-shift_654 requires+provides_655)))"
" null"
" '(#:declared-submodule-names #:run-phase #:run? #:self #:visit?)"
"(let-values(((parse-and-perform-requires!_656)"
"(case-lambda"
"((reqs_657 orig-s_658 m-ns_659 phase-shift_660 requires+provides_661)"
"(unpack21.1 null null reqs_657 orig-s_658 m-ns_659 phase-shift_660 requires+provides_661)))))"
" parse-and-perform-requires!_656)))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_662)"
"(let-values(((lst_663) ids_662))"
"(begin"
"(if(list? lst_663)(void)(let-values()(in-list lst_663)))"
"((letrec-values(((for-loop_664)"
"(lambda(table_665 lst_666)"
"(if(pair? lst_666)"
"(let-values(((id_667)(unsafe-car lst_666)))"
"(if #t"
"(let-values(((table_668)"
"(let-values(((table_669) table_665))"
"(let-values(((table_670)"
"(let-values()"
"(let-values(((key_671 val_672)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_667))"
" #t))))"
"(hash-set table_669 key_671 val_672)))))"
"(values table_670)))))"
"(if #t(for-loop_664 table_668(unsafe-cdr lst_666)) table_668))"
" table_665))"
" table_665))))"
" for-loop_664)"
" '#hash()"
" lst_663)))))"
"(define-values"
"(module-path->mpi27.1)"
"(lambda(declared-submodule-names23_673 declared-submodule-names24_674 mod-path25_675 self26_676)"
"(let-values(((mod-path_677) mod-path25_675))"
"(let-values(((self_678) self26_676))"
"(let-values(((declared-submodule-names_679)"
"(if declared-submodule-names24_674 declared-submodule-names23_673 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_677)"
"(if(= 2(length mod-path_677))"
"(if(eq? 'quote(car mod-path_677))"
"(if(symbol?(cadr mod-path_677))"
"(hash-ref declared-submodule-names_679(cadr mod-path_677) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"              (1/module-path-index-join (list 'submod \".\" (cadr mod-path_677)) self_678)"
"(1/module-path-index-join mod-path_677 self_678))))))))"
"(define-values"
"(unpack28.1)"
"(lambda(given-kws_680 given-args_681 mod-path25_682 self26_683)"
"(let-values(((declared-submodule-names24_684)(pair? given-kws_680)))"
"(let-values(((declared-submodule-names23_685)(if declared-submodule-names24_684(car given-args_681)(void))))"
"(module-path->mpi27.1"
" declared-submodule-names23_685"
" declared-submodule-names24_684"
" mod-path25_682"
" self26_683)))))"
"(define-values"
"(module-path->mpi29.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_686 given-argc_687)"
"(if(= given-argc_687 4)"
"(let-values(((l1_688) given-kws_686))"
"(let-values(((l1_689)"
"(if(null? l1_688)"
" l1_688"
"(if(eq?(car l1_688) '#:declared-submodule-names)(cdr l1_688) l1_688))))"
"(null? l1_689)))"
" #f))"
"(case-lambda"
"((given-kws_690 given-args_691 mod-path_692 self_693)"
"(unpack28.1 given-kws_690 given-args_691 mod-path_692 self_693)))"
" null"
" '(#:declared-submodule-names)"
"(let-values(((module-path->mpi_694)"
"(case-lambda((mod-path_695 self_696)(unpack28.1 null null mod-path_695 self_696)))))"
" module-path->mpi_694)))"
"(define-values"
"(perform-initial-require!)"
"(lambda(mod-path_697 self_698 in-stx_699 m-ns_700 requires+provides_701)"
"(let-values(((...r/expand/require.rkt:190:2_702) perform-require!55.1)"
"((temp184_703)"
"(let-values(((mod-path194_713) mod-path_697)((self195_714) self_698))"
"(if(variable-reference-constant?(#%variable-reference module-path->mpi29.1))"
"(module-path->mpi27.1 #f #f mod-path194_713 self195_714)"
"(module-path->mpi29.1 mod-path194_713 self195_714))))"
"((temp185_704) #f)"
"((self186_705) self_698)"
"((in-stx187_706) in-stx_699)"
"((m-ns188_707) m-ns_700)"
"((temp189_708) 0)"
"((temp190_709) 0)"
"((requires+provides191_710) requires+provides_701)"
"((temp192_711) #t)"
"((temp193_712) #t))"
"(if(variable-reference-constant?(#%variable-reference perform-require!55.1))"
"(perform-require!53.1"
" #f"
" #f"
" temp192_711"
" #t"
" temp193_712"
" #t"
" #f"
" #f"
" temp189_708"
" requires+provides191_710"
" #t"
" temp190_709"
" #f"
" #f"
" #f"
" #f"
" temp184_703"
" temp185_704"
" self186_705"
" in-stx187_706"
" m-ns188_707)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:190:2_702"
" keyword-procedure-extract"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase)"
" 7)"
" '(#:can-be-shadowed? #:initial-require? #:phase-shift #:requires+provides #:run-phase)"
"(list temp192_711 temp193_712 temp189_708 requires+provides191_710 temp190_709)"
" temp184_703"
" temp185_704"
" self186_705"
" in-stx187_706"
" m-ns188_707)))))"
"(define-values"
"(lifted/1.1$6)"
"(make-required"
" 'perform-require!"
"(case-lambda"
"((self_715 mpi_716 orig-s_717 self_718 in-stx_719 m-ns_720)"
"(apply missing-kw self_715 mpi_716 orig-s_717 self_718 in-stx_719 m-ns_720 null)))"
" #f"
" #f))"
"(define-values"
"(perform-require!53.1)"
"(lambda(adjust33_721"
" adjust42_722"
" can-be-shadowed?37_723"
" can-be-shadowed?46_724"
" initial-require?38_725"
" initial-require?47_726"
" just-meta32_727"
" just-meta41_728"
" phase-shift30_729"
" requires+provides34_730"
" requires+provides43_731"
" run-phase31_732"
" run?36_733"
" run?45_734"
" visit?35_735"
" visit?44_736"
" mpi48_737"
" orig-s49_738"
" self50_739"
" in-stx51_740"
" m-ns52_741)"
"(let-values(((mpi_742) mpi48_737))"
"(let-values(((orig-s_743) orig-s49_738))"
"(let-values(((self_744) self50_739))"
"(let-values(((in-stx_745) in-stx51_740))"
"(let-values(((m-ns_746) m-ns52_741))"
"(let-values(((phase-shift_747) phase-shift30_729))"
"(let-values(((run-phase_748) run-phase31_732))"
"(let-values(((just-meta_749)(if just-meta41_728 just-meta32_727 'all)))"
"(let-values(((adjust_750)(if adjust42_722 adjust33_721 #f)))"
"(let-values(((requires+provides_751)(if requires+provides43_731 requires+provides34_730 #f)))"
"(let-values(((visit?_752)(if visit?44_736 visit?35_735 #t)))"
"(let-values(((run?_753)(if run?45_734 run?36_733 #f)))"
"(let-values(((can-be-shadowed?_754)(if can-be-shadowed?46_724 can-be-shadowed?37_723 #f)))"
"(let-values(((initial-require?_755)"
"(if initial-require?47_726 initial-require?38_725 #f)))"
"(let-values()"
"(let-values(((module-name_756)(1/module-path-index-resolve mpi_742 #t)))"
"(let-values(((bind-in-stx_757)"
"(if(adjust-rename? adjust_750)"
"(adjust-rename-to-id adjust_750)"
" in-stx_745)))"
"(let-values(((done-syms_758)(make-hash)))"
"(let-values(((m_759)(namespace->module m-ns_746 module-name_756)))"
"(let-values((()"
"(begin"
"(if m_759"
"(void)"
"(let-values()"
"(raise-unknown-module-error 'require module-name_756)))"
"(values))))"
"(let-values(((interned-mpi_760)"
"(if requires+provides_751"
"(add-required-module!"
" requires+provides_751"
" mpi_742"
" phase-shift_747"
"(module-cross-phase-persistent? m_759))"
" mpi_742)))"
"(let-values((()"
"(begin"
"(if visit?_752"
"(let-values()"
"(let-values(((...r/expand/require.rkt:224:4_762)"
" namespace-module-visit!101.1)"
"((m-ns205_763) m-ns_746)"
"((interned-mpi206_764) interned-mpi_760)"
"((phase-shift207_765) phase-shift_747)"
"((run-phase208_766) run-phase_748))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!101.1))"
"(namespace-module-visit!99.1"
" run-phase208_766"
" #t"
" m-ns205_763"
" interned-mpi206_764"
" phase-shift207_765)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:224:4_762"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list run-phase208_766)"
" m-ns205_763"
" interned-mpi206_764"
" phase-shift207_765))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_753"
"(let-values()"
"(let-values(((...r/expand/require.rkt:226:4_767)"
" namespace-module-instantiate!93.1)"
"((m-ns209_768) m-ns_746)"
"((interned-mpi210_769)"
" interned-mpi_760)"
"((phase-shift211_770) phase-shift_747)"
"((run-phase212_771) run-phase_748))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!93.1))"
"(namespace-module-instantiate!91.1"
" #f"
" #f"
" run-phase212_771"
" #t"
" #f"
" #f"
" #f"
" #f"
" m-ns209_768"
" interned-mpi210_769"
" phase-shift211_770)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:226:4_767"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list run-phase212_771)"
" m-ns209_768"
" interned-mpi210_769"
" phase-shift211_770))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_772) visit?_752))"
"(if or-part_772 or-part_772 run?_753)))"
"(let-values()"
"(let-values(((...r/expand/require.rkt:229:4_773)"
" namespace-module-make-available!109.1)"
"((m-ns213_774) m-ns_746)"
"((interned-mpi214_775)"
" interned-mpi_760)"
"((phase-shift215_776)"
" phase-shift_747)"
"((run-phase216_777) run-phase_748))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-make-available!109.1))"
"(namespace-module-make-available!107.1"
" run-phase216_777"
" #t"
" m-ns213_774"
" interned-mpi214_775"
" phase-shift215_776)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:229:4_773"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list run-phase216_777)"
" m-ns213_774"
" interned-mpi214_775"
" phase-shift215_776))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...r/expand/require.rkt:230:2_778)"
" bind-all-provides!71.1)"
"((m196_779) m_759)"
"((bind-in-stx197_780) bind-in-stx_757)"
"((phase-shift198_781) phase-shift_747)"
"((m-ns199_782) m-ns_746)"
"((interned-mpi200_783)"
" interned-mpi_760)"
"((orig-s201_784) orig-s_743)"
"((temp202_785)"
"(if(adjust-only? adjust_750)"
"(let-values()"
"(set->list"
"(adjust-only-syms adjust_750)))"
"(if(adjust-rename? adjust_750)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_750)))"
"(let-values() #f))))"
"((temp203_786)(not adjust_750))"
"((temp204_787)"
"(lambda(binding_788"
" as-transformer?_789)"
"(let-values(((sym_790)"
"(module-binding-nominal-sym"
" binding_788)))"
"(let-values(((provide-phase_791)"
"(module-binding-nominal-phase"
" binding_788)))"
"(let-values(((adjusted-sym_792)"
"(if(if(not"
"(eq?"
" just-meta_749"
" 'all))"
"(not"
"(equal?"
" provide-phase_791"
" just-meta_749))"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_750)"
"(let-values()"
" sym_790)"
"(if(adjust-only?"
" adjust_750)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_750)"
" sym_790)"
"(if(hash-set!"
" done-syms_758"
" sym_790"
" #t)"
" sym_790"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_750)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                  \"~a~a\""
"(adjust-prefix-sym"
" adjust_750)"
" sym_790)))"
"(if(adjust-all-except?"
" adjust_750)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_750)"
" sym_790)"
"(hash-set!"
" done-syms_758"
" sym_790"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                      \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_750)"
" sym_790))"
" #f))"
"(if(adjust-rename?"
" adjust_750)"
"(let-values()"
"(if(eq?"
" sym_790"
"(adjust-rename-from-sym"
" adjust_750))"
"(if(hash-set!"
" done-syms_758"
" sym_790"
" #t)"
"(adjust-rename-to-id"
" adjust_750)"
" #f)"
" #f))"
"(void)))))))))"
"(begin"
"(if adjusted-sym_792"
"(let-values()"
"(let-values(((s_793)"
"(datum->syntax$2"
" bind-in-stx_757"
" adjusted-sym_792)))"
"(let-values(((bind-phase_794)"
"(phase+"
" phase-shift_747"
" provide-phase_791)))"
"(if requires+provides_751"
"(let-values()"
"(begin"
"(if initial-require?_755"
"(void)"
"(let-values()"
"(begin"
"(let-values(((...r/expand/require.rkt:269:20_795)"
" check-not-defined55.1)"
"((temp223_796)"
" #t)"
"((requires+provides224_797)"
" requires+provides_751)"
"((s225_798)"
" s_793)"
"((bind-phase226_799)"
" bind-phase_794)"
"((binding227_800)"
" binding_788)"
"((in-stx228_801)"
" in-stx_745))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined55.1))"
"(check-not-defined53.1"
" temp223_796"
" #t"
" in-stx228_801"
" binding227_800"
" #t"
" requires+provides224_797"
" s225_798"
" bind-phase226_799)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:269:20_795"
" keyword-procedure-extract"
" '(#:check-not-required?"
" #:in"
" #:unless-matches)"
" 5)"
" '(#:check-not-required?"
" #:in"
" #:unless-matches)"
"(list"
" temp223_796"
" in-stx228_801"
" binding227_800)"
" requires+provides224_797"
" s225_798"
" bind-phase226_799)))"
"(let-values(((...r/expand/require.rkt:274:20_802)"
" remove-required-id!43.1)"
"((requires+provides229_803)"
" requires+provides_751)"
"((s230_804)"
" s_793)"
"((bind-phase231_805)"
" bind-phase_794)"
"((binding232_806)"
" binding_788))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" remove-required-id!43.1))"
"(remove-required-id!41.1"
" binding232_806"
" requires+provides229_803"
" s230_804"
" bind-phase231_805)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:274:20_802"
" keyword-procedure-extract"
" '(#:unless-matches)"
" 5)"
" '(#:unless-matches)"
"(list"
" binding232_806)"
" requires+provides229_803"
" s230_804"
" bind-phase231_805))))))"
"(let-values(((...r/expand/require.rkt:275:18_807)"
" add-defined-or-required-id!13.1)"
"((requires+provides217_808)"
" requires+provides_751)"
"((s218_809)"
" s_793)"
"((bind-phase219_810)"
" bind-phase_794)"
"((binding220_811)"
" binding_788)"
"((can-be-shadowed?221_812)"
" can-be-shadowed?_754)"
"((as-transformer?222_813)"
" as-transformer?_789))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!13.1))"
"(add-defined-or-required-id!11.1"
" as-transformer?222_813"
" can-be-shadowed?221_812"
" #t"
" requires+provides217_808"
" s218_809"
" bind-phase219_810"
" binding220_811)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:275:18_807"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:can-be-shadowed?)"
" 6)"
" '(#:as-transformer?"
" #:can-be-shadowed?)"
"(list"
" as-transformer?222_813"
" can-be-shadowed?221_812)"
" requires+provides217_808"
" s218_809"
" bind-phase219_810"
" binding220_811)))))"
"(void)))))"
"(void))"
" adjusted-sym_792)))))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" bind-all-provides!71.1))"
"(bind-all-provides!69.1"
" temp203_786"
" temp204_787"
" orig-s201_784"
" temp202_785"
" m196_779"
" bind-in-stx197_780"
" phase-shift198_781"
" m-ns199_782"
" interned-mpi200_783)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:230:2_778"
" keyword-procedure-extract"
" '(#:can-bulk? #:filter #:in #:only)"
" 7)"
" '(#:can-bulk? #:filter #:in #:only)"
"(list"
" temp203_786"
" temp204_787"
" orig-s201_784"
" temp202_785)"
" m196_779"
" bind-in-stx197_780"
" phase-shift198_781"
" m-ns199_782"
" interned-mpi200_783)))"
"(values))))"
"(let-values(((need-syms_761)"
"(if(adjust-only? adjust_750)"
"(let-values()(adjust-only-syms adjust_750))"
"(if(adjust-all-except? adjust_750)"
"(let-values()"
"(adjust-all-except-syms adjust_750))"
"(if(adjust-rename? adjust_750)"
"(let-values()"
"(set(adjust-rename-from-sym adjust_750)))"
"(let-values() #f))))))"
"(if(if need-syms_761"
"(not"
"(=(set-count need-syms_761)(hash-count done-syms_758)))"
" #f)"
"(let-values()"
"(let-values(((ht_814) need-syms_761))"
"(begin"
"(if((lambda(ht_815)"
"(if(hash? ht_815)(immutable? ht_815) #f))"
" ht_814)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys ht_814)))"
"((letrec-values(((for-loop_816)"
"(lambda(fold-var_817 i_818)"
"(if i_818"
"(let-values(((sym_819)"
"(unsafe-immutable-hash-iterate-key"
" ht_814"
" i_818)))"
"(if #t"
"(let-values(((fold-var_820)"
"(let-values(((fold-var_821)"
" fold-var_817))"
"(let-values(((fold-var_822)"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_758"
" sym_819"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"not in nested spec\""
" orig-s_743"
" sym_819))))"
"(void)))))"
"(values"
" fold-var_822)))))"
"(if #t"
"(for-loop_816"
" fold-var_820"
"(unsafe-immutable-hash-iterate-next"
" ht_814"
" i_818))"
" fold-var_820))"
" fold-var_817))"
" fold-var_817))))"
" for-loop_816)"
"(void)"
"(unsafe-immutable-hash-iterate-first ht_814)))))"
"(void))))))))))))))))))))))))))))))"
"(define-values"
"(unpack54.1)"
"(lambda(given-kws_823 given-args_824 mpi48_825 orig-s49_826 self50_827 in-stx51_828 m-ns52_829)"
"(let-values(((adjust42_830)(if(pair? given-kws_823)(eq? '#:adjust(car given-kws_823)) #f)))"
"(let-values(((adjust33_831)(if adjust42_830(car given-args_824)(void)))"
"((given-kws_832)(if adjust42_830(cdr given-kws_823) given-kws_823))"
"((given-args_833)(if adjust42_830(cdr given-args_824) given-args_824)))"
"(let-values(((can-be-shadowed?46_834)"
"(if(pair? given-kws_832)(eq? '#:can-be-shadowed?(car given-kws_832)) #f)))"
"(let-values(((can-be-shadowed?37_835)(if can-be-shadowed?46_834(car given-args_833)(void)))"
"((given-kws_836)(if can-be-shadowed?46_834(cdr given-kws_832) given-kws_832))"
"((given-args_837)(if can-be-shadowed?46_834(cdr given-args_833) given-args_833)))"
"(let-values(((initial-require?47_838)"
"(if(pair? given-kws_836)(eq? '#:initial-require?(car given-kws_836)) #f)))"
"(let-values(((initial-require?38_839)(if initial-require?47_838(car given-args_837)(void)))"
"((given-kws_840)(if initial-require?47_838(cdr given-kws_836) given-kws_836))"
"((given-args_841)(if initial-require?47_838(cdr given-args_837) given-args_837)))"
"(let-values(((just-meta41_842)(if(pair? given-kws_840)(eq? '#:just-meta(car given-kws_840)) #f)))"
"(let-values(((just-meta32_843)(if just-meta41_842(car given-args_841)(void)))"
"((given-kws_844)(if just-meta41_842(cdr given-kws_840) given-kws_840))"
"((given-args_845)(if just-meta41_842(cdr given-args_841) given-args_841)))"
"(let-values(((phase-shift30_846)(car given-args_845))"
"((given-kws_847)(cdr given-kws_844))"
"((given-args_848)(cdr given-args_845)))"
"(let-values(((requires+provides43_849)"
"(if(pair? given-kws_847)(eq? '#:requires+provides(car given-kws_847)) #f)))"
"(let-values(((requires+provides34_850)"
"(if requires+provides43_849(car given-args_848)(void)))"
"((given-kws_851)(if requires+provides43_849(cdr given-kws_847) given-kws_847))"
"((given-args_852)"
"(if requires+provides43_849(cdr given-args_848) given-args_848)))"
"(let-values(((run-phase31_853)(car given-args_852))"
"((given-kws_854)(cdr given-kws_851))"
"((given-args_855)(cdr given-args_852)))"
"(let-values(((run?45_856)(if(pair? given-kws_854)(eq? '#:run?(car given-kws_854)) #f)))"
"(let-values(((run?36_857)(if run?45_856(car given-args_855)(void)))"
"((given-kws_858)(if run?45_856(cdr given-kws_854) given-kws_854))"
"((given-args_859)(if run?45_856(cdr given-args_855) given-args_855)))"
"(let-values(((visit?44_860)(pair? given-kws_858)))"
"(let-values(((visit?35_861)(if visit?44_860(car given-args_859)(void))))"
"(perform-require!53.1"
" adjust33_831"
" adjust42_830"
" can-be-shadowed?37_835"
" can-be-shadowed?46_834"
" initial-require?38_839"
" initial-require?47_838"
" just-meta32_843"
" just-meta41_842"
" phase-shift30_846"
" requires+provides34_850"
" requires+provides43_849"
" run-phase31_853"
" run?36_857"
" run?45_856"
" visit?35_861"
" visit?44_860"
" mpi48_825"
" orig-s49_826"
" self50_827"
" in-stx51_828"
" m-ns52_829)))))))))))))))))))"
"(define-values"
"(perform-require!55.1)"
"(lifted/1.1$6"
"(lambda(given-kws_862 given-argc_863)"
"(if(= given-argc_863 7)"
"(subsets?"
" '(#:phase-shift #:run-phase)"
" given-kws_862"
" '(#:adjust"
" #:can-be-shadowed?"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?))"
" #f))"
"(case-lambda"
"((given-kws_864 given-args_865 mpi_866 orig-s_867 self_868 in-stx_869 m-ns_870)"
"(unpack54.1 given-kws_864 given-args_865 mpi_866 orig-s_867 self_868 in-stx_869 m-ns_870)))"
" '(#:phase-shift #:run-phase)"
" '(#:adjust"
" #:can-be-shadowed?"
" #:initial-require?"
" #:just-meta"
" #:phase-shift"
" #:requires+provides"
" #:run-phase"
" #:run?"
" #:visit?)))"
"(define-values"
"(lifted/2.1$4)"
"(make-required"
" 'bind-all-provides!"
"(case-lambda"
"((self_871 m_872 in-stx_873 phase-shift_874 ns_875 mpi_876)"
"(apply missing-kw self_871 m_872 in-stx_873 phase-shift_874 ns_875 mpi_876 null)))"
" #f"
" #f))"
"(define-values"
"(bind-all-provides!69.1)"
"(lambda(can-bulk?58_877 filter59_878 in56_879 only57_880 m64_881 in-stx65_882 phase-shift66_883 ns67_884 mpi68_885)"
"(let-values(((m_886) m64_881))"
"(let-values(((in-stx_887) in-stx65_882))"
"(let-values(((phase-shift_888) phase-shift66_883))"
"(let-values(((ns_889) ns67_884))"
"(let-values(((mpi_890) mpi68_885))"
"(let-values(((orig-s_891) in56_879))"
"(let-values(((only-syms_892) only57_880))"
"(let-values(((can-bulk?_893) can-bulk?58_877))"
"(let-values(((filter_894) filter59_878))"
"(let-values()"
"(let-values(((self_895)(module-self m_886)))"
"(let-values(((ht_896)(module-provides m_886)))"
"(begin"
"(if((lambda(ht_897)(hash? ht_897)) ht_896)"
"(void)"
"(let-values()(default-in-hash ht_896)))"
"((letrec-values(((for-loop_898)"
"(lambda(fold-var_899 i_900)"
"(if i_900"
"(let-values(((provide-phase-level_901 provides_902)"
"(hash-iterate-key+value ht_896 i_900)))"
"(if #t"
"(let-values(((fold-var_903)"
"(let-values(((fold-var_904) fold-var_899))"
"(let-values(((fold-var_905)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_906)"
"(phase+"
" phase-shift_888"
" provide-phase-level_901)))"
"(begin"
"(let-values(((lst_907)"
"(let-values(((or-part_908)"
" only-syms_892))"
"(if or-part_908"
" or-part_908"
"(hash-keys"
" provides_902)))))"
"(begin"
"(if(list? lst_907)"
"(void)"
"(let-values()"
"(in-list"
" lst_907)))"
"((letrec-values(((for-loop_909)"
"(lambda(fold-var_910"
" lst_911)"
"(if(pair?"
" lst_911)"
"(let-values(((sym_912)"
"(unsafe-car"
" lst_911)))"
"(if #t"
"(let-values(((fold-var_913)"
"(let-values(((fold-var_914)"
" fold-var_910))"
"(let-values(((fold-var_915)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_916)"
"(hash-ref"
" provides_902"
" sym_912"
" #f)))"
"(if binding/p_916"
"(let-values()"
"(let-values(((b_917)"
"(let-values(((...r/expand/require.rkt:308:18_918)"
" provide-binding-to-require-binding13.1)"
"((binding/p233_919)"
" binding/p_916)"
"((sym234_920)"
" sym_912)"
"((self235_921)"
" self_895)"
"((mpi236_922)"
" mpi_890)"
"((provide-phase-level237_923)"
" provide-phase-level_901)"
"((phase-shift238_924)"
" phase-shift_888))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" provide-binding-to-require-binding13.1))"
"(provide-binding-to-require-binding11.1"
" mpi236_922"
" phase-shift238_924"
" provide-phase-level237_923"
" self235_921"
" binding/p233_919"
" sym234_920)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:308:18_918"
" keyword-procedure-extract"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
" 4)"
" '(#:mpi"
" #:phase-shift"
" #:provide-phase-level"
" #:self)"
"(list"
" mpi236_922"
" phase-shift238_924"
" provide-phase-level237_923"
" self235_921)"
" binding/p233_919"
" sym234_920)))))"
"(let-values(((sym_925)"
"(filter_894"
" b_917"
"(provided-as-transformer?"
" binding/p_916))))"
"(if(if sym_925"
"(not"
" can-bulk?_893)"
" #f)"
"(let-values()"
"(let-values(((temp239_926)"
"(datum->syntax$2"
" in-stx_887"
" sym_925))"
"((b240_927)"
" b_917)"
"((phase241_928)"
" phase_906))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" #f"
" #f"
" temp239_926"
" b240_927"
" phase241_928)"
"(add-binding!17.1"
" temp239_926"
" b240_927"
" phase241_928))))"
"(void)))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_915)))))"
"(if #t"
"(for-loop_909"
" fold-var_913"
"(unsafe-cdr"
" lst_911))"
" fold-var_913))"
" fold-var_910))"
" fold-var_910))))"
" for-loop_909)"
"(void)"
" lst_907)))"
"(if can-bulk?_893"
"(let-values()"
"(let-values(((...r/expand/require.rkt:320:6_929)"
" add-bulk-binding!25.1)"
"((in-stx242_930)"
" in-stx_887)"
"((temp243_931)"
"(bulk-binding14.1"
" provides_902"
" self_895"
" mpi_890"
" provide-phase-level_901"
" phase-shift_888"
"(namespace-bulk-binding-registry"
" ns_889)))"
"((phase244_932)"
" phase_906)"
"((orig-s245_933)"
" orig-s_891))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-bulk-binding!25.1))"
"(add-bulk-binding!23.1"
" orig-s245_933"
" #t"
" in-stx242_930"
" temp243_931"
" phase244_932)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/require.rkt:320:6_929"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" orig-s245_933)"
" in-stx242_930"
" temp243_931"
" phase244_932))))"
"(void)))))"
"(void)))))"
"(values fold-var_905)))))"
"(if #t"
"(for-loop_898 fold-var_903(hash-iterate-next ht_896 i_900))"
" fold-var_903))"
" fold-var_899))"
" fold-var_899))))"
" for-loop_898)"
"(void)"
"(hash-iterate-first ht_896)))))))))))))))))"
"(define-values"
"(unpack70.1)"
"(lambda(given-kws_934 given-args_935 m64_936 in-stx65_937 phase-shift66_938 ns67_939 mpi68_940)"
"(let-values(((can-bulk?58_941)(car given-args_935))"
"((given-kws_942)(cdr given-kws_934))"
"((given-args_943)(cdr given-args_935)))"
"(let-values(((filter59_944)(car given-args_943))"
"((given-kws_945)(cdr given-kws_942))"
"((given-args_946)(cdr given-args_943)))"
"(let-values(((in56_947)(car given-args_946))"
"((given-kws_948)(cdr given-kws_945))"
"((given-args_949)(cdr given-args_946)))"
"(let-values(((only57_950)(car given-args_949)))"
"(bind-all-provides!69.1"
" can-bulk?58_941"
" filter59_944"
" in56_947"
" only57_950"
" m64_936"
" in-stx65_937"
" phase-shift66_938"
" ns67_939"
" mpi68_940)))))))"
"(define-values"
"(bind-all-provides!71.1)"
"(lifted/2.1$4"
"(lambda(given-kws_951 given-argc_952)"
"(if(= given-argc_952 7)"
"(let-values(((l2_953) given-kws_951))"
"(if(pair? l2_953)"
"(if(eq?(car l2_953) '#:can-bulk?)"
"(let-values(((l2_954)(cdr l2_953)))"
"(if(pair? l2_954)"
"(if(eq?(car l2_954) '#:filter)"
"(let-values(((l2_955)(cdr l2_954)))"
"(if(pair? l2_955)"
"(if(eq?(car l2_955) '#:in)"
"(let-values(((l2_956)(cdr l2_955)))"
"(if(pair? l2_956)(if(eq?(car l2_956) '#:only)(null?(cdr l2_956)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_957 given-args_958 m_959 in-stx_960 phase-shift_961 ns_962 mpi_963)"
"(unpack70.1 given-kws_957 given-args_958 m_959 in-stx_960 phase-shift_961 ns_962 mpi_963)))"
" '(#:can-bulk? #:filter #:in #:only)"
" '(#:can-bulk? #:filter #:in #:only)))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_964)"
"(let-values(((rebuild-req_965)"
"(lambda(req_967 new-req_968)(datum->syntax$2 req_967 new-req_968 req_967 req_967))))"
"(letrec-values(((loop_966)"
"(lambda(shifted?_969)"
"(lambda(req_970)"
"(let-values(((fm_971)"
"(if(pair?(syntax-e$1 req_970))"
"(if(identifier?(car(syntax-e$1 req_970)))"
"(syntax-e$1(car(syntax-e$1 req_970)))"
" #f)"
" #f)))"
"(let-values(((tmp_972) fm_971))"
"(if(equal? tmp_972 'for-meta)"
"(let-values()"
"(let-values(((ok?_973 for-meta246_974 phase-level247_975 spec248_976)"
"(let-values(((s_990) req_970))"
"(if(if #t #t #f)"
"(let-values(((orig-s_991) s_990))"
"(let-values(((for-meta246_992 phase-level247_993 spec248_994)"
"(let-values(((s_995)"
"(if(syntax?$1 s_990)"
"(syntax-e$1 s_990)"
" s_990)))"
"(if(pair? s_995)"
"(let-values(((for-meta249_996)"
"(let-values(((s_999)"
"(car s_995)))"
" s_999))"
"((phase-level250_997 spec251_998)"
"(let-values(((s_1000)"
"(cdr s_995)))"
"(let-values(((s_1001)"
"(if(syntax?$1"
" s_1000)"
"(syntax-e$1"
" s_1000)"
" s_1000)))"
"(if(pair? s_1001)"
"(let-values(((phase-level252_1002)"
"(let-values(((s_1004)"
"(car"
" s_1001)))"
" s_1004))"
"((spec253_1003)"
"(let-values(((s_1005)"
"(cdr"
" s_1001)))"
"(let-values(((s_1006)"
"(if(syntax?$1"
" s_1005)"
"(syntax-e$1"
" s_1005)"
" s_1005)))"
"(let-values(((flat-s_1007)"
"(to-syntax-list.1$1"
" s_1006)))"
"(if(not"
" flat-s_1007)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"bad syntax\""
" orig-s_991))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_991))"
"(let-values()"
"(let-values(((spec_1008)"
"(let-values(((lst_1009)"
" flat-s_1007))"
"(begin"
"(if(list?"
" lst_1009)"
"(void)"
"(let-values()"
"(in-list"
" lst_1009)))"
"((letrec-values(((for-loop_1010)"
"(lambda(spec_1011"
" lst_1012)"
"(if(pair?"
" lst_1012)"
"(let-values(((s_1013)"
"(unsafe-car"
" lst_1012)))"
"(if #t"
"(let-values(((spec_1014)"
"(let-values(((spec_1015)"
" spec_1011))"
"(let-values(((spec_1016)"
"(let-values()"
"(let-values(((spec254_1017)"
"(let-values()"
" s_1013)))"
"(cons"
" spec254_1017"
" spec_1015)))))"
"(values"
" spec_1016)))))"
"(if #t"
"(for-loop_1010"
" spec_1014"
"(unsafe-cdr"
" lst_1012))"
" spec_1014))"
" spec_1011))"
" spec_1011))))"
" for-loop_1010)"
" null"
" lst_1009)))))"
"(alt-reverse"
" spec_1008))))))))))"
"(values"
" phase-level252_1002"
" spec253_1003))"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_991))))))"
"(values"
" for-meta249_996"
" phase-level250_997"
" spec251_998))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_991)))))"
"(values #t for-meta246_992 phase-level247_993 spec248_994)))"
"(values #f #f #f #f)))))"
"(let-values(((p_989)(syntax-e$1 phase-level247_975)))"
"(begin"
"(if(phase? p_989)"
"(void)"
"                                           (let-values () (raise-syntax-error$1 #f \"bad phase\" req_970)))"
"(rebuild-req_965"
" req_970"
"(list* for-meta246_974(phase+ p_989 1)(map2(loop_966 #t) spec248_976)))))))"
"(if(equal? tmp_972 'for-syntax)"
"(let-values()"
"(let-values(((ok?_1018 for-syntax255_1019 spec256_1020)"
"(let-values(((s_1031) req_970))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1032) s_1031))"
"(let-values(((for-syntax255_1033 spec256_1034)"
"(let-values(((s_1035)"
"(if(syntax?$1 s_1031)"
"(syntax-e$1 s_1031)"
" s_1031)))"
"(if(pair? s_1035)"
"(let-values(((for-syntax257_1036)"
"(let-values(((s_1038)"
"(car s_1035)))"
" s_1038))"
"((spec258_1037)"
"(let-values(((s_1039)"
"(cdr s_1035)))"
"(let-values(((s_1040)"
"(if(syntax?$1"
" s_1039)"
"(syntax-e$1"
" s_1039)"
" s_1039)))"
"(let-values(((flat-s_1041)"
"(to-syntax-list.1$1"
" s_1040)))"
"(if(not flat-s_1041)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1032))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1032))"
"(let-values()"
"(let-values(((spec_1042)"
"(let-values(((lst_1043)"
" flat-s_1041))"
"(begin"
"(if(list?"
" lst_1043)"
"(void)"
"(let-values()"
"(in-list"
" lst_1043)))"
"((letrec-values(((for-loop_1044)"
"(lambda(spec_1045"
" lst_1046)"
"(if(pair?"
" lst_1046)"
"(let-values(((s_1047)"
"(unsafe-car"
" lst_1046)))"
"(if #t"
"(let-values(((spec_1048)"
"(let-values(((spec_1049)"
" spec_1045))"
"(let-values(((spec_1050)"
"(let-values()"
"(let-values(((spec259_1051)"
"(let-values()"
" s_1047)))"
"(cons"
" spec259_1051"
" spec_1049)))))"
"(values"
" spec_1050)))))"
"(if #t"
"(for-loop_1044"
" spec_1048"
"(unsafe-cdr"
" lst_1046))"
" spec_1048))"
" spec_1045))"
" spec_1045))))"
" for-loop_1044)"
" null"
" lst_1043)))))"
"(alt-reverse"
" spec_1042))))))))))"
"(values for-syntax257_1036 spec258_1037))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_1032)))))"
"(values #t for-syntax255_1033 spec256_1034)))"
"(values #f #f #f)))))"
"(rebuild-req_965 req_970(list* 'for-meta 2(map2(loop_966 #t) spec256_1020)))))"
"(if(equal? tmp_972 'for-template)"
"(let-values()"
"(let-values(((ok?_1052 for-template260_1053 spec261_1054)"
"(let-values(((s_1065) req_970))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1066) s_1065))"
"(let-values(((for-template260_1067 spec261_1068)"
"(let-values(((s_1069)"
"(if(syntax?$1 s_1065)"
"(syntax-e$1 s_1065)"
" s_1065)))"
"(if(pair? s_1069)"
"(let-values(((for-template262_1070)"
"(let-values(((s_1072)"
"(car s_1069)))"
" s_1072))"
"((spec263_1071)"
"(let-values(((s_1073)"
"(cdr s_1069)))"
"(let-values(((s_1074)"
"(if(syntax?$1"
" s_1073)"
"(syntax-e$1"
" s_1073)"
" s_1073)))"
"(let-values(((flat-s_1075)"
"(to-syntax-list.1$1"
" s_1074)))"
"(if(not flat-s_1075)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1066))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_1066))"
"(let-values()"
"(let-values(((spec_1076)"
"(let-values(((lst_1077)"
" flat-s_1075))"
"(begin"
"(if(list?"
" lst_1077)"
"(void)"
"(let-values()"
"(in-list"
" lst_1077)))"
"((letrec-values(((for-loop_1078)"
"(lambda(spec_1079"
" lst_1080)"
"(if(pair?"
" lst_1080)"
"(let-values(((s_1081)"
"(unsafe-car"
" lst_1080)))"
"(if #t"
"(let-values(((spec_1082)"
"(let-values(((spec_1083)"
" spec_1079))"
"(let-values(((spec_1084)"
"(let-values()"
"(let-values(((spec264_1085)"
"(let-values()"
" s_1081)))"
"(cons"
" spec264_1085"
" spec_1083)))))"
"(values"
" spec_1084)))))"
"(if #t"
"(for-loop_1078"
" spec_1082"
"(unsafe-cdr"
" lst_1080))"
" spec_1082))"
" spec_1079))"
" spec_1079))))"
" for-loop_1078)"
" null"
" lst_1077)))))"
"(alt-reverse"
" spec_1076))))))))))"
"(values"
" for-template262_1070"
" spec263_1071))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_1066)))))"
"(values #t for-template260_1067 spec261_1068)))"
"(values #f #f #f)))))"
"(rebuild-req_965"
" req_970"
"(list* 'for-meta 0(map2(loop_966 #t) spec261_1054)))))"
"(if(equal? tmp_972 'for-label)"
"(let-values()"
"(let-values(((ok?_1086 for-label265_1087 spec266_1088)"
"(let-values(((s_1099) req_970))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1100) s_1099))"
"(let-values(((for-label265_1101 spec266_1102)"
"(let-values(((s_1103)"
"(if(syntax?$1 s_1099)"
"(syntax-e$1 s_1099)"
" s_1099)))"
"(if(pair? s_1103)"
"(let-values(((for-label267_1104)"
"(let-values(((s_1106)"
"(car"
" s_1103)))"
" s_1106))"
"((spec268_1105)"
"(let-values(((s_1107)"
"(cdr"
" s_1103)))"
"(let-values(((s_1108)"
"(if(syntax?$1"
" s_1107)"
"(syntax-e$1"
" s_1107)"
" s_1107)))"
"(let-values(((flat-s_1109)"
"(to-syntax-list.1$1"
" s_1108)))"
"(if(not flat-s_1109)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_1100))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_1100))"
"(let-values()"
"(let-values(((spec_1110)"
"(let-values(((lst_1111)"
" flat-s_1109))"
"(begin"
"(if(list?"
" lst_1111)"
"(void)"
"(let-values()"
"(in-list"
" lst_1111)))"
"((letrec-values(((for-loop_1112)"
"(lambda(spec_1113"
" lst_1114)"
"(if(pair?"
" lst_1114)"
"(let-values(((s_1115)"
"(unsafe-car"
" lst_1114)))"
"(if #t"
"(let-values(((spec_1116)"
"(let-values(((spec_1117)"
" spec_1113))"
"(let-values(((spec_1118)"
"(let-values()"
"(let-values(((spec269_1119)"
"(let-values()"
" s_1115)))"
"(cons"
" spec269_1119"
" spec_1117)))))"
"(values"
" spec_1118)))))"
"(if #t"
"(for-loop_1112"
" spec_1116"
"(unsafe-cdr"
" lst_1114))"
" spec_1116))"
" spec_1113))"
" spec_1113))))"
" for-loop_1112)"
" null"
" lst_1111)))))"
"(alt-reverse"
" spec_1110))))))))))"
"(values"
" for-label267_1104"
" spec268_1105))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_1100)))))"
"(values #t for-label265_1101 spec266_1102)))"
"(values #f #f #f)))))"
"(rebuild-req_965"
" req_970"
"(list* for-label265_1087(map2(loop_966 #t) spec266_1088)))))"
"(if(equal? tmp_972 'just-meta)"
"(let-values()"
"(let-values(((ok?_1120 just-meta270_1121 phase-level271_1122 spec272_1123)"
"(let-values(((s_1136) req_970))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1137) s_1136))"
"(let-values(((just-meta270_1138"
" phase-level271_1139"
" spec272_1140)"
"(let-values(((s_1141)"
"(if(syntax?$1 s_1136)"
"(syntax-e$1 s_1136)"
" s_1136)))"
"(if(pair? s_1141)"
"(let-values(((just-meta273_1142)"
"(let-values(((s_1145)"
"(car"
" s_1141)))"
" s_1145))"
"((phase-level274_1143"
" spec275_1144)"
"(let-values(((s_1146)"
"(cdr"
" s_1141)))"
"(let-values(((s_1147)"
"(if(syntax?$1"
" s_1146)"
"(syntax-e$1"
" s_1146)"
" s_1146)))"
"(if(pair? s_1147)"
"(let-values(((phase-level276_1148)"
"(let-values(((s_1150)"
"(car"
" s_1147)))"
" s_1150))"
"((spec277_1149)"
"(let-values(((s_1151)"
"(cdr"
" s_1147)))"
"(let-values(((s_1152)"
"(if(syntax?$1"
" s_1151)"
"(syntax-e$1"
" s_1151)"
" s_1151)))"
"(let-values(((flat-s_1153)"
"(to-syntax-list.1$1"
" s_1152)))"
"(if(not"
" flat-s_1153)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_1137))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1137))"
"(let-values()"
"(let-values(((spec_1154)"
"(let-values(((lst_1155)"
" flat-s_1153))"
"(begin"
"(if(list?"
" lst_1155)"
"(void)"
"(let-values()"
"(in-list"
" lst_1155)))"
"((letrec-values(((for-loop_1156)"
"(lambda(spec_1157"
" lst_1158)"
"(if(pair?"
" lst_1158)"
"(let-values(((s_1159)"
"(unsafe-car"
" lst_1158)))"
"(if #t"
"(let-values(((spec_1160)"
"(let-values(((spec_1161)"
" spec_1157))"
"(let-values(((spec_1162)"
"(let-values()"
"(let-values(((spec278_1163)"
"(let-values()"
" s_1159)))"
"(cons"
" spec278_1163"
" spec_1161)))))"
"(values"
" spec_1162)))))"
"(if #t"
"(for-loop_1156"
" spec_1160"
"(unsafe-cdr"
" lst_1158))"
" spec_1160))"
" spec_1157))"
" spec_1157))))"
" for-loop_1156)"
" null"
" lst_1155)))))"
"(alt-reverse"
" spec_1154))))))))))"
"(values"
" phase-level276_1148"
" spec277_1149))"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1137))))))"
"(values"
" just-meta273_1142"
" phase-level274_1143"
" spec275_1144))"
"(raise-syntax-error$1"
" #f"
"                                                                                  \"bad syntax\""
" orig-s_1137)))))"
"(values"
" #t"
" just-meta270_1138"
" phase-level271_1139"
" spec272_1140)))"
"(values #f #f #f #f)))))"
"(rebuild-req_965"
" req_970"
"(list*"
" just-meta270_1121"
" phase-level271_1122"
"(map2(loop_966 #f) spec272_1123)))))"
"(let-values()"
"(if shifted?_969"
" req_970"
"(datum->syntax$2 #f(list 'for-syntax req_970)))))))))))))))"
"((loop_966 #f) req_964)))))"
"(define-values(top-level-instance)(1/make-instance 'top-level))"
"(call-with-values"
"(lambda()"
"(1/instance-set-variable-value!"
" top-level-instance"
" 'top-level-bind!"
"(lambda(id_1 mpi_2 orig-phase_3 phase-shift_4 ns_5 sym_6 trans-val_7)"
"(let-values(((phase_8)(phase+ orig-phase_3 phase-shift_4)))"
"(let-values(((b_9)"
"(let-values(((...p-level-instance.rkt:24:13_10) make-module-binding22.1)"
"((mpi4_11) mpi_2)"
"((phase5_12) phase_8)"
"((sym6_13) sym_6)"
"((temp7_14)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_5))))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" temp7_14"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi4_11"
" phase5_12"
" sym6_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:24:13_10"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list temp7_14)"
" mpi4_11"
" phase5_12"
" sym6_13)))))"
"(begin"
"(let-values(((id1_15) id_1)((b2_16) b_9)((phase3_17) phase_8))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 #f #f id1_15 b2_16 phase3_17)"
"(add-binding!17.1 id1_15 b2_16 phase3_17)))"
"(if trans-val_7(let-values()(maybe-install-free=id! trans-val_7 id_1 phase_8))(void))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(1/instance-set-variable-value!"
" top-level-instance"
" 'top-level-require!"
"(lambda(stx_18 ns_19)"
"(let-values(((reqs_20)(cdr(syntax->list$1 stx_18))))"
"(let-values(((...p-level-instance.rkt:36:3_21) parse-and-perform-requires!22.1)"
"((temp8_22) #t)"
"((temp9_23) #f)"
"((reqs10_24) reqs_20)"
"((temp11_25) #f)"
"((ns12_26) ns_19)"
"((temp13_27)(namespace-phase ns_19))"
"((temp14_28)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" #f"
" #f"
" temp8_22"
" #t"
" #f"
" #f"
" temp9_23"
" #t"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...p-level-instance.rkt:36:3_21"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 7)"
" '(#:run? #:visit?)"
"(list temp8_22 temp9_23)"
" reqs10_24"
" temp11_25"
" ns12_26"
" temp13_27"
" temp14_28)))))))"
" print-values)"
"(define-values"
"(lifted/1.1$5)"
"(make-required"
" 'check-require-access"
"(case-lambda"
"((self_2 linklet_3 import-module-uses_4 import-module-instances_5 insp_6 extra-inspector_7 extra-inspectorsss_8)"
"(apply"
" missing-kw"
" self_2"
" linklet_3"
" import-module-uses_4"
" import-module-instances_5"
" insp_6"
" extra-inspector_7"
" extra-inspectorsss_8"
" null)))"
" #f"
" #f))"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_9"
" linklet3_10"
" import-module-uses4_11"
" import-module-instances5_12"
" insp6_13"
" extra-inspector7_14"
" extra-inspectorsss8_15)"
"(let-values(((linklet_16) linklet3_10))"
"(let-values(((skip-num-imports_17) skip-imports1_9))"
"(let-values(((import-module-uses_18) import-module-uses4_11))"
"(let-values(((import-module-instances_19) import-module-instances5_12))"
"(let-values(((insp_20) insp6_13))"
"(let-values(((extra-inspector_21) extra-inspector7_14))"
"(let-values(((extra-inspectorsss_22) extra-inspectorsss8_15))"
"(let-values()"
"(let-values(((lst_23)(list-tail(1/linklet-import-variables linklet_16) skip-num-imports_17))"
"((lst_24) import-module-uses_18)"
"((lst_25) import-module-instances_19)"
"((lst_26)"
"(let-values(((or-part_27) extra-inspectorsss_22))"
"(if or-part_27 or-part_27 import-module-uses_18))))"
"(begin"
"(if(list? lst_23)(void)(let-values()(in-list lst_23)))"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"(if(list? lst_25)(void)(let-values()(in-list lst_25)))"
"(if(list? lst_26)(void)(let-values()(in-list lst_26)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_29 lst_30 lst_31 lst_32 lst_33)"
"(if(if(pair? lst_30)"
"(if(pair? lst_31)(if(pair? lst_32)(pair? lst_33) #f) #f)"
" #f)"
"(let-values(((import-syms_34)(unsafe-car lst_30))"
"((mu_35)(unsafe-car lst_31))"
"((mi_36)(unsafe-car lst_32))"
"((extra-inspectorss_37)(unsafe-car lst_33)))"
"(if(if #t(if #t(if #t #t #f) #f) #f)"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39) fold-var_29))"
"(let-values(((fold-var_40)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_41)"
"(module-instance-module"
" mi_36)))"
"(if(module-no-protected? m_41)"
"(void)"
"(let-values()"
"(let-values(((access_42)"
"(let-values(((or-part_43)"
"(module-access"
" m_41)))"
"(if or-part_43"
" or-part_43"
"(module-compute-access!"
" m_41)))))"
"(let-values(((lst_44)"
" import-syms_34)"
"((lst_45)"
"(let-values(((or-part_46)"
"(if extra-inspectorsss_22"
" extra-inspectorss_37"
" #f)))"
"(if or-part_46"
" or-part_46"
" import-syms_34))))"
"(begin"
"(if(list? lst_44)"
"(void)"
"(let-values()"
"(in-list lst_44)))"
"(if(list? lst_45)"
"(void)"
"(let-values()"
"(in-list lst_45)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48"
" lst_49"
" lst_50)"
"(if(if(pair?"
" lst_49)"
"(pair?"
" lst_50)"
" #f)"
"(let-values(((import-sym_51)"
"(unsafe-car"
" lst_49))"
"((extra-inspectors_52)"
"(unsafe-car"
" lst_50)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54)"
" fold-var_48))"
"(let-values(((fold-var_55)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_56)"
"(hash-ref"
"(hash-ref"
" access_42"
"(module-use-phase"
" mu_35)"
" '#hasheq())"
" import-sym_51"
" 'unexported)))"
"(if(let-values(((or-part_57)"
"(eq?"
" a_56"
" 'unexported)))"
"(if or-part_57"
" or-part_57"
"(eq?"
" a_56"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_58)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_36))))"
"(if(let-values(((or-part_59)"
"(inspector-superior?"
" insp_20"
" guard-insp_58)))"
"(if or-part_59"
" or-part_59"
"(let-values(((or-part_60)"
"(if extra-inspector_21"
"(inspector-superior?"
" extra-inspector_21"
" guard-insp_58)"
" #f)))"
"(if or-part_60"
" or-part_60"
"(if extra-inspectorsss_22"
"(if extra-inspectorss_37"
"(let-values(((ht_61)"
" extra-inspectors_52))"
"(begin"
"(if((lambda(ht_62)"
"(if(hash?"
" ht_62)"
"(immutable?"
" ht_62)"
" #f))"
" ht_61)"
"(void)"
"(let-values()"
"(default-in-immutable-hash-keys"
" ht_61)))"
"((letrec-values(((for-loop_63)"
"(lambda(result_64"
" i_65)"
"(if i_65"
"(let-values(((extra-insp_66)"
"(unsafe-immutable-hash-iterate-key"
" ht_61"
" i_65)))"
"(if #t"
"(let-values(((result_67)"
"(let-values(((result_68)"
" result_64))"
"(let-values(((result_69)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_66"
" guard-insp_58)))))"
"(values"
" result_69)))))"
"(if(if #t"
"(not"
"((lambda x_70"
"(not"
" result_67))"
" extra-insp_66))"
" #f)"
"(for-loop_63"
" result_67"
"(unsafe-immutable-hash-iterate-next"
" ht_61"
" i_65))"
" result_67))"
" result_64))"
" result_64))))"
" for-loop_63)"
" #t"
"(unsafe-immutable-hash-iterate-first"
" ht_61))))"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                              \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                              \"  variable: ~s\\n\""
"                                                                                                                                                                              \"  from module: ~a\")"
" a_56"
" import-sym_51"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_36))))))))"
"(void))))"
"(void)))))"
"(values"
" fold-var_55)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_47"
" fold-var_53"
"(unsafe-cdr"
" lst_49)"
"(unsafe-cdr"
" lst_50))"
" fold-var_53))"
" fold-var_48))"
" fold-var_48))))"
" for-loop_47)"
"(void)"
" lst_44"
" lst_45))))))))"
"(void)))))"
"(values fold-var_40)))))"
"(if(if #t(if #t(if #t #t #f) #f) #f)"
"(for-loop_28"
" fold-var_38"
"(unsafe-cdr lst_30)"
"(unsafe-cdr lst_31)"
"(unsafe-cdr lst_32)"
"(unsafe-cdr lst_33))"
" fold-var_38))"
" fold-var_29))"
" fold-var_29))))"
" for-loop_28)"
"(void)"
" lst_23"
" lst_24"
" lst_25"
" lst_26)))))))))))))"
"(define-values"
"(unpack10.1$1)"
"(lambda(given-kws_71"
" given-args_72"
" linklet3_73"
" import-module-uses4_74"
" import-module-instances5_75"
" insp6_76"
" extra-inspector7_77"
" extra-inspectorsss8_78)"
"(let-values(((skip-imports1_79)(car given-args_72)))"
"(check-require-access9.1"
" skip-imports1_79"
" linklet3_73"
" import-module-uses4_74"
" import-module-instances5_75"
" insp6_76"
" extra-inspector7_77"
" extra-inspectorsss8_78))))"
"(define-values"
"(check-require-access11.1)"
"(lifted/1.1$5"
"(lambda(given-kws_80 given-argc_81)"
"(if(= given-argc_81 8)"
"(let-values(((l2_82) given-kws_80))"
"(if(pair? l2_82)(if(eq?(car l2_82) '#:skip-imports)(null?(cdr l2_82)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_83"
" given-args_84"
" linklet_85"
" import-module-uses_86"
" import-module-instances_87"
" insp_88"
" extra-inspector_89"
" extra-inspectorsss_90)"
"(unpack10.1$1"
" given-kws_83"
" given-args_84"
" linklet_85"
" import-module-uses_86"
" import-module-instances_87"
" insp_88"
" extra-inspector_89"
" extra-inspectorsss_90)))"
" '(#:skip-imports)"
" '(#:skip-imports)))"
"(define-values"
"(eval-top)"
"(let-values(((eval-top5_1)"
"(lambda(c3_2 ns4_3 eval-compiled1_4 eval-compiled2_5)"
"(let-values(((c_6) c3_2))"
"(let-values(((ns_7) ns4_3))"
"(let-values(((eval-compiled_8)(if eval-compiled2_5 eval-compiled1_4 eval-top)))"
"(let-values()"
"(let-values(((ld_9)"
"(if(compiled-in-memory? c_6)(compiled-in-memory-linklet-directory c_6) c_6)))"
"(if(hash-ref(1/linklet-directory->hash ld_9) #f #f)"
"(eval-single-top c_6 ns_7)"
"(eval-multiple-tops c_6 ns_7 eval-compiled_8))))))))))"
"(case-lambda"
"((c_10 ns_11)(eval-top5_1 c_10 ns_11 #f #f))"
"((c_12 ns_13 eval-compiled1_14)(eval-top5_1 c_12 ns_13 eval-compiled1_14 #t)))))"
"(define-values"
"(eval-multiple-tops)"
"(lambda(c_15 ns_16 eval-compiled_17)"
"(if(compiled-in-memory? c_15)"
"(let-values()"
"((letrec-values(((loop_18)"
"(lambda(cims_19)"
"(if(null? cims_19)"
"(let-values() void)"
"(if(null?(cdr cims_19))"
"(let-values()(eval-compiled_17(car cims_19) ns_16))"
"(let-values()"
"(begin(eval-compiled_17(car cims_19) ns_16)(loop_18(cdr cims_19)))))))))"
" loop_18)"
"(compiled-in-memory-pre-compiled-in-memorys c_15)))"
"(let-values()"
"((letrec-values(((loop_20)"
"(lambda(lds_21)"
"(if(null? lds_21)"
"(let-values()(void))"
"(if(null?(cdr lds_21))"
"(let-values()(eval-compiled_17(car lds_21) ns_16))"
"(let-values()"
"(begin(eval-compiled_17(car lds_21) ns_16)(loop_20(cdr lds_21)))))))))"
" loop_20)"
"(compiled-top->compiled-tops c_15))))))"
"(define-values"
"(eval-single-top)"
"(lambda(c_22 ns_23)"
"(let-values(((ld_24)(if(compiled-in-memory? c_22)(compiled-in-memory-linklet-directory c_22) c_22)))"
"(let-values(((h_25)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_24) #f))))"
"(let-values(((link-instance_26)"
"(if(compiled-in-memory? c_22)"
"(link-instance-from-compiled-in-memory c_22)"
"(1/instantiate-linklet"
"(hash-ref h_25 'link)"
"(list"
" deserialize-instance"
"(let-values(((...xpander/eval/top.rkt:61:35_32) make-eager-instance-instance13.1)"
"((ns7_33) ns_23)"
"((temp8_34)(namespace-phase ns_23))"
"((temp9_35)(namespace-mpi ns_23))"
"((temp10_36)(namespace-bulk-binding-registry ns_23))"
"((temp11_37)(current-code-inspector)))"
"(if(variable-reference-constant?(#%variable-reference make-eager-instance-instance13.1))"
"(make-eager-instance-instance11.1 temp10_36 temp8_34 temp11_37 ns7_33 temp9_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:61:35_32"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
" 2)"
" '(#:bulk-binding-registry #:dest-phase #:inspector #:namespace #:self)"
"(list temp10_36 temp8_34 temp11_37 ns7_33 temp9_35)))))))))"
"(let-values(((orig-phase_27)(1/instance-variable-value link-instance_26 'original-phase)))"
"(let-values(((max-phase_28)(1/instance-variable-value link-instance_26 'max-phase)))"
"(let-values(((phase-shift_29)(phase-(namespace-phase ns_23) orig-phase_27)))"
"(let-values(((extra-inspector_30)"
"(if(compiled-in-memory? c_22)(compiled-in-memory-compile-time-inspector c_22) #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_31)"
"(if(compiled-in-memory? c_22)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_22)"
" '#hasheqv())))"
"((let-values(((start_38) max-phase_28)((end_39)(sub1 orig-phase_27))((inc_40) -1))"
"(begin"
"(if(if(real? start_38)(if(real? end_39)(real? inc_40) #f) #f)"
"(void)"
"(let-values()(in-range start_38 end_39 inc_40)))"
"((letrec-values(((for-loop_41)"
"(lambda(prev-thunk_42 pos_43)"
"(if(> pos_43 end_39)"
"(let-values(((phase_44) pos_43))"
"(if #t"
"(let-values(((prev-thunk_45)"
"(let-values(((prev-thunk_46) prev-thunk_42))"
"(let-values(((prev-thunk_47)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_46)"
"(values))))"
"(let-values(((module-uses_48)"
"(hash-ref"
"(1/instance-variable-value"
" link-instance_26"
" 'phase-to-link-modules)"
" phase_44"
" null)))"
"(let-values(((import-module-instances_49"
" import-instances_50)"
"(let-values(((mis_54"
" is_55)"
"(let-values(((lst_56)"
" module-uses_48))"
"(begin"
"(if(list?"
" lst_56)"
"(void)"
"(let-values()"
"(in-list"
" lst_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(mis_58"
" is_59"
" lst_60)"
"(if(pair?"
" lst_60)"
"(let-values(((mu_61)"
"(unsafe-car"
" lst_60)))"
"(if #t"
"(let-values(((mis_62"
" is_63)"
"(let-values(((mis_64)"
" mis_58)"
"((is_65)"
" is_59))"
"(let-values(((mis_66"
" is_67)"
"(let-values()"
"(let-values(((mis12_68"
" is13_69)"
"(let-values()"
"(let-values(((...xpander/eval/top.rkt:88:9_70)"
" namespace-module-use->module+linklet-instances143.1)"
"((ns14_71)"
" ns_23)"
"((mu15_72)"
" mu_61)"
"((temp16_73)"
"(phase-"
"(phase+"
" phase_44"
" phase-shift_29)"
"(module-use-phase"
" mu_61))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances143.1))"
"(namespace-module-use->module+linklet-instances141.1"
" temp16_73"
" #f"
" #f"
" #f"
" #f"
" ns14_71"
" mu15_72)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:88:9_70"
" keyword-procedure-extract"
" '(#:phase-shift)"
" 4)"
" '(#:phase-shift)"
"(list"
" temp16_73)"
" ns14_71"
" mu15_72))))))"
"(values"
"(cons"
" mis12_68"
" mis_64)"
"(cons"
" is13_69"
" is_65))))))"
"(values"
" mis_66"
" is_67)))))"
"(if #t"
"(for-loop_57"
" mis_62"
" is_63"
"(unsafe-cdr"
" lst_60))"
"(values"
" mis_62"
" is_63)))"
"(values"
" mis_58"
" is_59)))"
"(values"
" mis_58"
" is_59)))))"
" for-loop_57)"
" null"
" null"
" lst_56)))))"
"(values"
"(alt-reverse"
" mis_54)"
"(alt-reverse"
" is_55)))))"
"(let-values(((phase-ns_51)"
"(namespace->namespace-at-phase"
" ns_23"
"(phase+"
" phase_44"
" phase-shift_29))))"
"(let-values(((inst_52)"
"(let-values(((...xpander/eval/top.rkt:94:18_74)"
" make-instance-instance17.1)"
"((phase-ns17_75)"
" phase-ns_51)"
"((phase-shift18_76)"
" phase-shift_29)"
"((temp19_77)"
"(namespace-mpi"
" ns_23))"
"((temp20_78)"
"(namespace-bulk-binding-registry"
" ns_23))"
"((temp21_79)"
"(namespace-inspector"
" ns_23))"
"((temp22_80)"
"(lambda(name_81"
" val_82)"
"(namespace-set-transformer!"
" ns_23"
"(phase+"
"(sub1"
" phase_44)"
" phase-shift_29)"
" name_81"
" val_82))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-instance-instance17.1))"
"(make-instance-instance15.1"
" temp20_78"
" temp21_79"
" phase-ns17_75"
" phase-shift18_76"
" #f"
" #f"
" temp19_77"
" temp22_80)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:94:18_74"
" keyword-procedure-extract"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
" 2)"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
"(list"
" temp20_78"
" temp21_79"
" phase-ns17_75"
" phase-shift18_76"
" temp19_77"
" temp22_80))))))"
"(let-values(((linklet_53)"
"(hash-ref"
" h_25"
" phase_44"
" #f)))"
"(if linklet_53"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((...xpander/eval/top.rkt:110:7_84)"
" check-require-access11.1)"
"((linklet23_85)"
" linklet_53)"
"((temp24_86)"
" 3)"
"((module-uses25_87)"
" module-uses_48)"
"((import-module-instances26_88)"
" import-module-instances_49)"
"((temp27_89)"
"(current-code-inspector))"
"((extra-inspector28_90)"
" extra-inspector_30)"
"((temp29_91)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_31"
" phase_44"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp24_86"
" linklet23_85"
" module-uses25_87"
" import-module-instances26_88"
" temp27_89"
" extra-inspector28_90"
" temp29_91)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...xpander/eval/top.rkt:110:7_84"
" keyword-procedure-extract"
" '(#:skip-imports)"
" 8)"
" '(#:skip-imports)"
"(list"
" temp24_86)"
" linklet23_85"
" module-uses25_87"
" import-module-instances26_88"
" temp27_89"
" extra-inspector28_90"
" temp29_91)))"
"(values))))"
"(let-values(((instantiate_83)"
"(lambda()"
"(1/instantiate-linklet"
" linklet_53"
"(list*"
" top-level-instance"
" link-instance_26"
" inst_52"
" import-instances_50)"
"(namespace->instance"
" ns_23"
"(phase+"
" phase_44"
" phase-shift_29))))))"
"(if(eqv?"
" phase_44"
" orig-phase_27)"
"(let-values()"
"(if(zero-phase?"
" phase_44)"
" instantiate_83"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_51)"
"(let-values()"
"(instantiate_83))))))"
"(let-values()"
" instantiate_83)))))"
"(let-values()"
" void)))))))))))"
"(values prev-thunk_47)))))"
"(if #t"
"(for-loop_41 prev-thunk_45(+ pos_43 inc_40))"
" prev-thunk_45))"
" prev-thunk_42))"
" prev-thunk_42))))"
" for-loop_41)"
" void"
" start_38))))))))))))))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_92)"
"(let-values(((link-instance_93)(1/make-instance 'link)))"
"(begin"
"(1/instance-set-variable-value! link-instance_93 'original-phase(compiled-in-memory-phase cim_92))"
"(1/instance-set-variable-value! link-instance_93 'max-phase(compiled-in-memory-max-phase cim_92))"
"(1/instance-set-variable-value!"
" link-instance_93"
" 'phase-to-link-modules"
"(compiled-in-memory-phase-to-link-module-uses cim_92))"
"(1/instance-set-variable-value! link-instance_93 'mpi-vector(compiled-in-memory-mpis cim_92))"
"(1/instance-set-variable-value! link-instance_93 'syntax-literalss(compiled-in-memory-syntax-literalss cim_92))"
" link-instance_93))))"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_1)"
"(add-binding-in-scopes!"
"(syntax-scope-set runtime-stx 0)"
" sym_1"
"(let-values(((runtime-mpi1_2) runtime-mpi)((temp2_3) 0)((sym3_4) sym_1))"
"(if(variable-reference-constant?(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1 #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f runtime-mpi1_2 temp2_3 sym3_4)"
"(make-module-binding22.1 runtime-mpi1_2 temp2_3 sym3_4))))))"
"(call-with-values(lambda()(add-runtime-primitive! 'values)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'cons)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'list)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'make-struct-type-property)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'gensym)) print-values)"
"(call-with-values(lambda()(add-runtime-primitive! 'string->uninterned-symbol)) print-values)"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(define-values"
"(lifted/1.1$23)"
"(make-required"
" 'select-defined-syms-and-bind!"
"(case-lambda"
"((self_2 ids_3 defined-syms_4 self_5 phase_6 all-scopes-stx_7)"
"(apply missing-kw self_2 ids_3 defined-syms_4 self_5 phase_6 all-scopes-stx_7 null)))"
" #f"
" #f))"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_8"
" as-transformer?10_9"
" frame-id1_10"
" in4_11"
" in9_12"
" requires+provides3_13"
" requires+provides8_14"
" top-level-bind-scope2_15"
" top-level-bind-scope7_16"
" ids11_17"
" defined-syms12_18"
" self13_19"
" phase14_20"
" all-scopes-stx15_21)"
"(let-values(((ids_22) ids11_17))"
"(let-values(((defined-syms_23) defined-syms12_18))"
"(let-values(((self_24) self13_19))"
"(let-values(((phase_25) phase14_20))"
"(let-values(((all-scopes-stx_26) all-scopes-stx15_21))"
"(let-values(((frame-id_27) frame-id1_10))"
"(let-values(((top-level-bind-scope_28)(if top-level-bind-scope7_16 top-level-bind-scope2_15 #f)))"
"(let-values(((requires+provides_29)(if requires+provides8_14 requires+provides3_13 #f)))"
"(let-values(((orig-s_30)(if in9_12 in4_11 #f)))"
"(let-values(((as-transformer?_31)(if as-transformer?10_9 as-transformer?5_8 #f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_32)"
"(let-values(((or-part_33)(hash-ref defined-syms_23 phase_25 #f)))"
"(if or-part_33"
" or-part_33"
"(let-values(((ht_34)(make-hasheq)))"
"(begin(hash-set! defined-syms_23 phase_25 ht_34) ht_34))))))"
"(alt-reverse"
"(let-values(((lst_35) ids_22))"
"(begin"
"(if(list? lst_35)(void)(let-values()(in-list lst_35)))"
"((letrec-values(((for-loop_36)"
"(lambda(fold-var_37 lst_38)"
"(if(pair? lst_38)"
"(let-values(((id_39)(unsafe-car lst_38)))"
"(if #t"
"(let-values(((fold-var_40)"
"(let-values(((fold-var_41) fold-var_37))"
"(let-values(((fold-var_42)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_43)"
"(syntax-e$1"
" id_39)))"
"(let-values(((defined-sym_44)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_32"
" sym_43"
" #f)"
" id_39"
" phase_25"
" top-level-bind-scope_28))"
"(no-extra-scopes?"
" id_39"
" all-scopes-stx_26"
" top-level-bind-scope_28"
" phase_25)"
" #f)"
" sym_43"
"((letrec-values(((loop_46)"
"(lambda(pos_47)"
"(let-values(((s_48)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                                    \"~a.~a\""
" sym_43"
" pos_47))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_32"
" s_48"
" #f)"
" id_39"
" phase_25"
" top-level-bind-scope_28)"
"(loop_46"
"(add1"
" pos_47))"
" s_48)))))"
" loop_46)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_32"
" defined-sym_44"
" id_39)"
"(values))))"
"(let-values(((b_45)"
"(let-values(((...er/expand/def-id.rkt:61:14_49)"
" make-module-binding22.1)"
"((self23_50)"
" self_24)"
"((phase24_51)"
" phase_25)"
"((defined-sym25_52)"
" defined-sym_44)"
"((frame-id26_53)"
" frame-id_27))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" frame-id26_53"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self23_50"
" phase24_51"
" defined-sym25_52)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:61:14_49"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list"
" frame-id26_53)"
" self23_50"
" phase24_51"
" defined-sym25_52)))))"
"(begin"
"(if requires+provides_29"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:63:6_54)"
" remove-required-id!43.1)"
"((requires+provides27_55)"
" requires+provides_29)"
"((id28_56)"
" id_39)"
"((phase29_57)"
" phase_25)"
"((b30_58)"
" b_45))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" remove-required-id!43.1))"
"(remove-required-id!41.1"
" b30_58"
" requires+provides27_55"
" id28_56"
" phase29_57)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:63:6_54"
" keyword-procedure-extract"
" '(#:unless-matches)"
" 5)"
" '(#:unless-matches)"
"(list"
" b30_58)"
" requires+provides27_55"
" id28_56"
" phase29_57))))"
"(void))"
"(let-values(((...er/expand/def-id.rkt:64:4_59)"
" add-binding!17.1)"
"((id19_60)"
" id_39)"
"((b20_61)"
" b_45)"
"((phase21_62)"
" phase_25)"
"((orig-s22_63)"
" orig-s_30))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" orig-s22_63"
" #t"
" id19_60"
" b20_61"
" phase21_62)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:64:4_59"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" orig-s22_63)"
" id19_60"
" b20_61"
" phase21_62)))"
"(if requires+provides_29"
"(let-values()"
"(let-values(((...er/expand/def-id.rkt:66:6_64)"
" add-defined-or-required-id!13.1)"
"((requires+provides31_65)"
" requires+provides_29)"
"((id32_66)"
" id_39)"
"((phase33_67)"
" phase_25)"
"((b34_68)"
" b_45)"
"((as-transformer?35_69)"
" as-transformer?_31))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-defined-or-required-id!13.1))"
"(add-defined-or-required-id!11.1"
" as-transformer?35_69"
" #f"
" #f"
" requires+provides31_65"
" id32_66"
" phase33_67"
" b34_68)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:66:6_64"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" 6)"
" '(#:as-transformer?)"
"(list"
" as-transformer?35_69)"
" requires+provides31_65"
" id32_66"
" phase33_67"
" b34_68))))"
"(void))"
" defined-sym_44))))))"
" fold-var_41))))"
"(values fold-var_42)))))"
"(if #t"
"(for-loop_36 fold-var_40(unsafe-cdr lst_38))"
" fold-var_40))"
" fold-var_37))"
" fold-var_37))))"
" for-loop_36)"
" null"
" lst_35))))))))))))))))))"
"(define-values"
"(unpack17.1)"
"(lambda(given-kws_70 given-args_71 ids11_72 defined-syms12_73 self13_74 phase14_75 all-scopes-stx15_76)"
"(let-values(((as-transformer?10_77)(if(pair? given-kws_70)(eq? '#:as-transformer?(car given-kws_70)) #f)))"
"(let-values(((as-transformer?5_78)(if as-transformer?10_77(car given-args_71)(void)))"
"((given-kws_79)(if as-transformer?10_77(cdr given-kws_70) given-kws_70))"
"((given-args_80)(if as-transformer?10_77(cdr given-args_71) given-args_71)))"
"(let-values(((frame-id1_81)(car given-args_80))"
"((given-kws_82)(cdr given-kws_79))"
"((given-args_83)(cdr given-args_80)))"
"(let-values(((in9_84)(if(pair? given-kws_82)(eq? '#:in(car given-kws_82)) #f)))"
"(let-values(((in4_85)(if in9_84(car given-args_83)(void)))"
"((given-kws_86)(if in9_84(cdr given-kws_82) given-kws_82))"
"((given-args_87)(if in9_84(cdr given-args_83) given-args_83)))"
"(let-values(((requires+provides8_88)"
"(if(pair? given-kws_86)(eq? '#:requires+provides(car given-kws_86)) #f)))"
"(let-values(((requires+provides3_89)(if requires+provides8_88(car given-args_87)(void)))"
"((given-kws_90)(if requires+provides8_88(cdr given-kws_86) given-kws_86))"
"((given-args_91)(if requires+provides8_88(cdr given-args_87) given-args_87)))"
"(let-values(((top-level-bind-scope7_92)(pair? given-kws_90)))"
"(let-values(((top-level-bind-scope2_93)(if top-level-bind-scope7_92(car given-args_91)(void))))"
"(select-defined-syms-and-bind!16.1"
" as-transformer?5_78"
" as-transformer?10_77"
" frame-id1_81"
" in4_85"
" in9_84"
" requires+provides3_89"
" requires+provides8_88"
" top-level-bind-scope2_93"
" top-level-bind-scope7_92"
" ids11_72"
" defined-syms12_73"
" self13_74"
" phase14_75"
" all-scopes-stx15_76))))))))))))"
"(define-values"
"(select-defined-syms-and-bind!18.1)"
"(lifted/1.1$23"
"(lambda(given-kws_94 given-argc_95)"
"(if(= given-argc_95 7)"
"(subsets?"
" '(#:frame-id)"
" given-kws_94"
" '(#:as-transformer? #:frame-id #:in #:requires+provides #:top-level-bind-scope))"
" #f))"
"(case-lambda"
"((given-kws_96 given-args_97 ids_98 defined-syms_99 self_100 phase_101 all-scopes-stx_102)"
"(unpack17.1 given-kws_96 given-args_97 ids_98 defined-syms_99 self_100 phase_101 all-scopes-stx_102)))"
" '(#:frame-id)"
" '(#:as-transformer? #:frame-id #:in #:requires+provides #:top-level-bind-scope)))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_103 all-scopes-stx_104 top-level-bind-scope_105 phase_106)"
"(let-values(((m-id_107)(datum->syntax$2 all-scopes-stx_104(syntax-e$1 id_103))))"
"(let-values(((or-part_108)(bound-identifier=?$1 id_103 m-id_107 phase_106)))"
"(if or-part_108"
" or-part_108"
"(if top-level-bind-scope_105"
"(bound-identifier=?$1 id_103(add-scope m-id_107 top-level-bind-scope_105) phase_106)"
" #f))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_109 id_110 phase_111 top-level-bind-scope_112)"
"(if prev-id_109"
"(if(not(bound-identifier=?$1 prev-id_109 id_110 phase_111))"
"(let-values(((or-part_113)(not top-level-bind-scope_112)))"
"(if or-part_113"
" or-part_113"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_109 top-level-bind-scope_112)"
"(remove-scope id_110 top-level-bind-scope_112)"
" phase_111))))"
" #f)"
" #f)))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_114 ctx_115)"
"(let-values(((...er/expand/def-id.rkt:86:2_116) select-defined-syms-and-bind!18.1)"
"((tl-ids36_117) tl-ids_114)"
"((temp37_118)(root-expand-context-defined-syms ctx_115))"
"((temp38_119)(namespace-mpi(expand-context-namespace ctx_115)))"
"((temp39_120)(expand-context-phase ctx_115))"
"((temp40_121)(root-expand-context-all-scopes-stx ctx_115))"
"((temp41_122)(root-expand-context-frame-id ctx_115))"
"((temp42_123)(root-expand-context-top-level-bind-scope ctx_115)))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" temp41_122"
" #f"
" #f"
" #f"
" #f"
" temp42_123"
" #t"
" tl-ids36_117"
" temp37_118"
" temp38_119"
" temp39_120"
" temp40_121)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/def-id.rkt:86:2_116"
" keyword-procedure-extract"
" '(#:frame-id #:top-level-bind-scope)"
" 7)"
" '(#:frame-id #:top-level-bind-scope)"
"(list temp41_122 temp42_123)"
" tl-ids36_117"
" temp37_118"
" temp38_119"
" temp39_120"
" temp40_121)))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_124 phase_125 sym_126 id_127)"
"(let-values(((defined-syms-at-phase_128)"
"(let-values(((or-part_129)(hash-ref defined-syms_124 phase_125 #f)))"
"(if or-part_129"
" or-part_129"
"(let-values(((ht_130)(make-hasheq)))"
"(begin(hash-set! defined-syms_124 phase_125 ht_130) ht_130))))))"
"(hash-set! defined-syms-at-phase_128 sym_126 id_127))))"
"(define-values(box-cons!)(lambda(b_2 v_3)(set-box! b_2(cons v_3(unbox b_2)))))"
"(define-values(box-clear!)(lambda(b_4)(begin0(alt-reverse(unbox b_4))(set-box! b_4 null))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(make-struct-type 'lift-context #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lift-context)))"
"(values"
" struct:_5"
" make-_6"
" ?_7"
"(make-struct-field-accessor -ref_8 0 'convert)"
"(make-struct-field-accessor -ref_8 1 'lifts)"
"(make-struct-field-accessor -ref_8 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-rhs)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(make-struct-type 'lifted-bind #f 2 0 #f null(current-inspector) #f '(0 1) #f 'lifted-bind)))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 0 'ids)"
"(make-struct-field-accessor -ref_39 1 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_62 module*-ok?4_63 convert5_64)"
"(let-values(((convert_65) convert5_64))"
"(let-values(((module*-ok?_66)(if module*-ok?4_63 module*-ok?3_62 #f)))"
"(let-values()(lift-context1.1 convert_65(box null) module*-ok?_66))))))"
"(define-values"
"(unpack7.1$4)"
"(lambda(given-kws_67 given-args_68 convert5_69)"
"(let-values(((module*-ok?4_70)(pair? given-kws_67)))"
"(let-values(((module*-ok?3_71)(if module*-ok?4_70(car given-args_68)(void))))"
"(make-lift-context6.1 module*-ok?3_71 module*-ok?4_70 convert5_69)))))"
"(define-values"
"(make-lift-context8.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_72 given-argc_73)"
"(if(= given-argc_73 3)"
"(let-values(((l1_74) given-kws_72))"
"(let-values(((l1_75)(if(null? l1_74) l1_74(if(eq?(car l1_74) '#:module*-ok?)(cdr l1_74) l1_74))))"
"(null? l1_75)))"
" #f))"
"(case-lambda((given-kws_76 given-args_77 convert_78)(unpack7.1$4 given-kws_76 given-args_77 convert_78)))"
" null"
" '(#:module*-ok?)"
"(let-values(((make-lift-context_79)(case-lambda((convert_80)(unpack7.1$4 null null convert_80)))))"
" make-lift-context_79)))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_81 ids_82 rhs_83 phase_84)"
"(let-values(((lifted-ids_85 lifted_86)((lift-context-convert lifts_81) ids_82 rhs_83 phase_84)))"
"(begin(box-cons!(lift-context-lifts lifts_81) lifted_86) lifted-ids_85))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_87)(box-clear!(lift-context-lifts lifts_87))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_88 counter_89)"
"(lambda(ids_90 rhs_91 phase_92)"
"(begin"
"(let-values(((lst_93) ids_90))"
"(begin"
"(if(list? lst_93)(void)(let-values()(in-list lst_93)))"
"((letrec-values(((for-loop_94)"
"(lambda(fold-var_95 lst_96)"
"(if(pair? lst_96)"
"(let-values(((id_97)(unsafe-car lst_96)))"
"(if #t"
"(let-values(((fold-var_98)"
"(let-values(((fold-var_99) fold-var_95))"
"(let-values(((fold-var_100)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((key_101)"
"(let-values(((id31_102) id_97)"
"((phase32_103)"
" phase_92)"
"((counter33_104)"
" counter_89))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" #f"
" #f"
" #f"
" #f"
" id31_102"
" phase32_103"
" counter33_104)"
"(add-local-binding!35.1"
" id31_102"
" phase32_103"
" counter33_104)))))"
"(set-box!"
" lift-env_88"
"(hash-set"
"(unbox lift-env_88)"
" key_101"
" variable))))"
"(void)))))"
"(values fold-var_100)))))"
"(if #t(for-loop_94 fold-var_98(unsafe-cdr lst_96)) fold-var_98))"
" fold-var_95))"
" fold-var_95))))"
" for-loop_94)"
"(void)"
" lst_93)))"
"(values ids_90(lifted-bind2.1 ids_90 rhs_91))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_105)"
"(lambda(ids_106 rhs_107 phase_108)"
"(let-values(((post-scope_109)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_105)))))"
"(let-values(((tl-ids_110)"
"(alt-reverse"
"(let-values(((lst_111) ids_106))"
"(begin"
"(if(list? lst_111)(void)(let-values()(in-list lst_111)))"
"((letrec-values(((for-loop_112)"
"(lambda(fold-var_113 lst_114)"
"(if(pair? lst_114)"
"(let-values(((id_115)(unsafe-car lst_114)))"
"(if #t"
"(let-values(((fold-var_116)"
"(let-values(((fold-var_117) fold-var_113))"
"(let-values(((fold-var_118)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_115"
" post-scope_109))"
" fold-var_117))))"
"(values fold-var_118)))))"
"(if #t"
"(for-loop_112 fold-var_116(unsafe-cdr lst_114))"
" fold-var_116))"
" fold-var_113))"
" fold-var_113))))"
" for-loop_112)"
" null"
" lst_111))))))"
"(begin"
"(select-defined-syms-and-bind!/ctx tl-ids_110 ctx_105)"
"(values tl-ids_110(lifted-bind2.1 tl-ids_110 rhs_107))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_119 body_120 s_121 phase_122)"
"(datum->syntax$2"
" #f"
"(let-values(((lst_123)(alt-reverse lifts_119)))"
"(begin"
"(if(list? lst_123)(void)(let-values()(in-list lst_123)))"
"((letrec-values(((for-loop_124)"
"(lambda(body_125 lst_126)"
"(if(pair? lst_126)"
"(let-values(((lift_127)(unsafe-car lst_126)))"
"(if #t"
"(let-values(((body_128)"
"(let-values(((body_129) body_125))"
"(let-values(((body_130)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_127)"
"(void)"
"(let-values()"
"                                                                         (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$2"
"(syntax-shift-phase-level$1 core-stx phase_122)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_127)"
"(lifted-bind-rhs lift_127)))"
" body_129)))))"
"(values body_130)))))"
"(if #t(for-loop_124 body_128(unsafe-cdr lst_126)) body_128))"
" body_125))"
" body_125))))"
" for-loop_124)"
" body_120"
" lst_123))))))"
"(define-values"
"(wrap-lifts-as-begin15.1)"
"(lambda(adjust-form9_131 adjust-form10_132 lifts11_133 body12_134 s13_135 phase14_136)"
"(let-values(((lifts_137) lifts11_133))"
"(let-values(((body_138) body12_134))"
"(let-values(((s_139) s13_135))"
"(let-values(((phase_140) phase14_136))"
"(let-values(((adjust-form_141)(if adjust-form10_132 adjust-form9_131 values)))"
"(let-values()"
"(datum->syntax$2"
" #f"
"(cons"
"(datum->syntax$2(syntax-shift-phase-level$1 core-stx phase_140) 'begin)"
"(append"
"(alt-reverse"
"(let-values(((lst_142) lifts_137))"
"(begin"
"(if(list? lst_142)(void)(let-values()(in-list lst_142)))"
"((letrec-values(((for-loop_143)"
"(lambda(fold-var_144 lst_145)"
"(if(pair? lst_145)"
"(let-values(((lift_146)(unsafe-car lst_145)))"
"(if #t"
"(let-values(((fold-var_147)"
"(let-values(((fold-var_148) fold-var_144))"
"(let-values(((fold-var_149)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_141"
"(if(lifted-bind? lift_146)"
"(let-values()"
"(datum->syntax$2"
" #f"
"(list"
"(datum->syntax$2"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_140)"
" 'define-values)"
"(lifted-bind-ids lift_146)"
"(lifted-bind-rhs"
" lift_146))))"
"(let-values() lift_146))))"
" fold-var_148))))"
"(values fold-var_149)))))"
"(if #t"
"(for-loop_143 fold-var_147(unsafe-cdr lst_145))"
" fold-var_147))"
" fold-var_144))"
" fold-var_144))))"
" for-loop_143)"
" null"
" lst_142))))"
"(list body_138))))))))))))"
"(define-values"
"(unpack16.1$2)"
"(lambda(given-kws_150 given-args_151 lifts11_152 body12_153 s13_154 phase14_155)"
"(let-values(((adjust-form10_156)(pair? given-kws_150)))"
"(let-values(((adjust-form9_157)(if adjust-form10_156(car given-args_151)(void))))"
"(wrap-lifts-as-begin15.1 adjust-form9_157 adjust-form10_156 lifts11_152 body12_153 s13_154 phase14_155)))))"
"(define-values"
"(wrap-lifts-as-begin17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_158 given-argc_159)"
"(if(= given-argc_159 6)"
"(let-values(((l1_160) given-kws_158))"
"(let-values(((l1_161)(if(null? l1_160) l1_160(if(eq?(car l1_160) '#:adjust-form)(cdr l1_160) l1_160))))"
"(null? l1_161)))"
" #f))"
"(case-lambda"
"((given-kws_162 given-args_163 lifts_164 body_165 s_166 phase_167)"
"(unpack16.1$2 given-kws_162 given-args_163 lifts_164 body_165 s_166 phase_167)))"
" null"
" '(#:adjust-form)"
"(let-values(((wrap-lifts-as-begin_168)"
"(case-lambda"
"((lifts_169 body_170 s_171 phase_172)(unpack16.1$2 null null lifts_169 body_170 s_171 phase_172)))))"
" wrap-lifts-as-begin_168)))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context18.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_173 make-_174 ?_175 -ref_176 -set!_177)"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))"
"(values"
" struct:_173"
" make-_174"
" ?_175"
"(make-struct-field-accessor -ref_176 0 'wrt-phase)"
"(make-struct-field-accessor -ref_176 1 'lifts)"
"(make-struct-field-accessor -ref_176 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_204 module*-ok?_205)(module-lift-context18.1 phase_204(box null) module*-ok?_205)))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_206)(box-clear!(module-lift-context-lifts module-lifts_206))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_207 s_208 phase_209)"
"(begin"
"(if(let-values(((or-part_210)"
"(if(module-lift-context? module-lifts_207)"
"(module-lift-context-module*-ok? module-lifts_207)"
" #f)))"
"(if or-part_210"
" or-part_210"
"(if(lift-context? module-lifts_207)(lift-context-module*-ok? module-lifts_207) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_211)(core-form-sym s_208 phase_209)))"
"(if(equal? tmp_211 'module)"
"(let-values()(void))"
"(if(equal? tmp_211 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                   \"cannot lift `module*' to a top-level context\""
"                   \"syntax\""
" s_208))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_208)))))))"
"(if(module-lift-context? module-lifts_207)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_207) s_208))"
"(if(lift-context? module-lifts_207)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_207) s_208))"
"          (let-values () (error \"internal error: unrecognized lift-context type for module lift\")))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context19.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_212 make-_213 ?_214 -ref_215 -set!_216)"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))"
"(values"
" struct:_212"
" make-_213"
" ?_214"
"(make-struct-field-accessor -ref_215 0 'do-require)"
"(make-struct-field-accessor -ref_215 1 'wrt-phase)"
"(make-struct-field-accessor -ref_215 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_243 do-require_244)(require-lift-context19.1 do-require_244 wrt-phase_243(box null))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_245)(box-clear!(require-lift-context-requires require-lifts_245))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_246 s_247 phase_248)"
"(begin"
"((require-lift-context-do-require require-lifts_246) s_247 phase_248)"
"(box-cons!(require-lift-context-requires require-lifts_246) s_247))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context20.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_249 make-_250 ?_251 -ref_252 -set!_253)"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))"
"(values"
" struct:_249"
" make-_250"
" ?_251"
"(make-struct-field-accessor -ref_252 0 'wrt-phase)"
"(make-struct-field-accessor -ref_252 1 'provides)"
"(make-struct-field-accessor -ref_252 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_252 3 'ends))))"
"(define-values"
"(lifted/1.1$19)"
"(make-required"
" 'make-to-module-lift-context"
"(case-lambda((self_285 phase_286)(apply missing-kw self_285 phase_286 null)))"
" #f"
" #f))"
"(define-values"
"(make-to-module-lift-context26.1)"
"(lambda(end-as-expressions?22_287 shared-module-ends21_288 phase25_289)"
"(let-values(((phase_290) phase25_289))"
"(let-values(((ends_291) shared-module-ends21_288))"
"(let-values(((end-as-expressions?_292) end-as-expressions?22_287))"
"(let-values()(to-module-lift-context20.1 phase_290(box null) end-as-expressions?_292 ends_291)))))))"
"(define-values"
"(unpack27.1)"
"(lambda(given-kws_293 given-args_294 phase25_295)"
"(let-values(((end-as-expressions?22_296)(car given-args_294))"
"((given-kws_297)(cdr given-kws_293))"
"((given-args_298)(cdr given-args_294)))"
"(let-values(((shared-module-ends21_299)(car given-args_298)))"
"(make-to-module-lift-context26.1 end-as-expressions?22_296 shared-module-ends21_299 phase25_295)))))"
"(define-values"
"(make-to-module-lift-context28.1)"
"(lifted/1.1$19"
"(lambda(given-kws_300 given-argc_301)"
"(if(= given-argc_301 3)"
"(let-values(((l2_302) given-kws_300))"
"(if(pair? l2_302)"
"(if(eq?(car l2_302) '#:end-as-expressions?)"
"(let-values(((l2_303)(cdr l2_302)))"
"(if(pair? l2_303)(if(eq?(car l2_303) '#:shared-module-ends)(null?(cdr l2_303)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_304 given-args_305 phase_306)(unpack27.1 given-kws_304 given-args_305 phase_306)))"
" '(#:end-as-expressions? #:shared-module-ends)"
" '(#:end-as-expressions? #:shared-module-ends)))"
"(define-values(make-shared-module-ends)(lambda()(box null)))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_307)(box-clear!(to-module-lift-context-ends to-module-lifts_307))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_308)(box-clear!(to-module-lift-context-provides to-module-lifts_308))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_309 s_310 phase_311)"
"(box-cons!(to-module-lift-context-provides to-module-lifts_309) s_310)))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_312 s_313 phase_314)(box-cons!(to-module-lift-context-ends to-module-lifts_312) s_313)))"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-all-scopes-stx)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'already-expanded #f 2 0 #f null(current-inspector) #f '(0 1) #f 'already-expanded)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'all-scopes-stx))))"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))"
"(values struct:_1 make-_2 ?_3)))"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_1 info_2)"
"(begin"
"(if(if(list? v_1)"
"(let-values(((lst_3) v_1))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((s_7)(unsafe-car lst_6)))"
"(if #t"
"(let-values(((result_8)"
"(let-values(((result_9) result_5))"
"(let-values(((result_10)"
"(let-values()"
"(let-values()"
"(memq"
" s_7"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_10)))))"
"(if(if #t(not((lambda x_11(not result_8)) s_7)) #f)"
"(for-loop_4 result_8(unsafe-cdr lst_6))"
" result_8))"
" result_5))"
" result_5))))"
" for-loop_4)"
" #t"
" lst_3)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_1)))"
" v_1))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_12 ctx_13)"
"(if(expansion-contexts? t_12)"
"(not(memq(context->symbol(expand-context-context ctx_13))(expansion-contexts-ref t_12)))"
" #f)))"
"(define-values(context->symbol)(lambda(context_14)(if(symbol? context_14) context_14 'definition-context)))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_15 t_16 ctx_17)"
"(let-values(((wrap_18)"
"(lambda(sym_20)"
"(datum->syntax$2"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$2 core-stx sym_20)(expand-context-phase ctx_17))"
" s_15)))))"
"(let-values(((fail_19)"
"(lambda()"
"(raise-syntax-error$1"
" #f"
"(format"
"                        \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_17)))"
" s_15))))"
"(let-values(((tmp_21)(context->symbol(expand-context-context ctx_17))))"
"(if(equal? tmp_21 'module-begin)"
"(let-values()(wrap_18 'begin))"
"(if(if(equal? tmp_21 'module) #t(if(equal? tmp_21 'top-level) #t(equal? tmp_21 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_16))(wrap_18 '#%expression)(fail_19)))"
"(let-values()(fail_19)))))))))"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(make-struct-type 'reference-record #f 3 0 #f null #f #f '() #f 'reference-record)))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'already-bound)"
"(make-struct-field-accessor -ref_4 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_4 2 'all-referenced?)"
"(make-struct-field-mutator -set!_5 0 'already-bound)"
"(make-struct-field-mutator -set!_5 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_5 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(reference-record1.1(seteq)(seteq) #f)))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_32 key_33)"
"(if(set-member?(reference-record-already-bound rr_32) key_33)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_32"
"(set-add(reference-record-reference-before-bound rr_32) key_33))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_34)"
"(let-values(((stop?_35 fold-var_36)"
"(let-values(((lst_37) rrs_34))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"((letrec-values(((for-loop_38)"
"(lambda(stop-after?_39 fold-var_40 lst_41)"
"(if(pair? lst_41)"
"(let-values(((rr_42)(unsafe-car lst_41)))"
"(if #t"
"(let-values(((stop-after?_43 fold-var_44)"
"(let-values(((stop-after?_45) stop-after?_39)"
"((fold-var_46) fold-var_40))"
"(if #t"
"(let-values(((stop?_47)"
"(reference-record-all-referenced?"
" rr_42)))"
"(begin"
" #t"
"((letrec-values(((for-loop_48)"
"(lambda(stop-after?_49"
" fold-var_50)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((stop-after?_51"
" fold-var_52)"
"(let-values(((stop-after?_53)"
" stop-after?_49)"
"((fold-var_54)"
" fold-var_50))"
"(if #t"
"(let-values(((stop-after?_55)"
"(let-values(((or-part_56)"
" stop-after?_53))"
"(if or-part_56"
" or-part_56"
" stop?_47))))"
"(begin"
" #t"
"((letrec-values(((for-loop_57)"
"(lambda(stop-after?_58"
" fold-var_59)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((stop-after?_60"
" fold-var_61)"
"(let-values(((stop-after?_62)"
" stop-after?_58)"
"((fold-var_63)"
" fold-var_59))"
"(if stop?_47"
"(values"
" stop-after?_62"
" fold-var_63)"
"(let-values(((stop-after?_64)"
" stop-after?_62)"
"((fold-var_65)"
" fold-var_63))"
"(let-values(((stop-after?_66"
" fold-var_67)"
"(let-values()"
"(let-values(((fold-var_68)"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?!"
" rr_42"
" #t))"
"(void)))))"
"(values"
" stop-after?_64"
" fold-var_68)))))"
"(values"
" stop-after?_66"
" fold-var_67)))))))"
"(if #f"
"(for-loop_57"
" stop-after?_60"
" fold-var_61)"
"(values"
" stop-after?_60"
" fold-var_61)))"
"(values"
" stop-after?_58"
" fold-var_59)))"
"(values"
" stop-after?_58"
" fold-var_59)))))"
" for-loop_57)"
" stop-after?_55"
" fold-var_54)))"
"(values"
" stop-after?_53"
" fold-var_54)))))"
"(if #f"
"(for-loop_48"
" stop-after?_51"
" fold-var_52)"
"(values"
" stop-after?_51"
" fold-var_52)))"
"(values"
" stop-after?_49"
" fold-var_50)))"
"(values"
" stop-after?_49"
" fold-var_50)))))"
" for-loop_48)"
" stop-after?_45"
" fold-var_46)))"
"(values stop-after?_45 fold-var_46)))))"
"(if(if #t(not((lambda x_69 stop-after?_43) rr_42)) #f)"
"(for-loop_38 stop-after?_43 fold-var_44(unsafe-cdr lst_41))"
"(values stop-after?_43 fold-var_44)))"
"(values stop-after?_39 fold-var_40)))"
"(values stop-after?_39 fold-var_40)))))"
" for-loop_38)"
" #f"
"(void)"
" lst_37)))))"
"(values fold-var_36))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_70 keys_71)"
"(begin"
"(set-reference-record-already-bound!"
" rr_70"
"(let-values(((lst_72) keys_71))"
"(begin"
"(if(list? lst_72)(void)(let-values()(in-list lst_72)))"
"((letrec-values(((for-loop_73)"
"(lambda(ab_74 lst_75)"
"(if(pair? lst_75)"
"(let-values(((key_76)(unsafe-car lst_75)))"
"(if #t"
"(let-values(((ab_77)"
"(let-values(((ab_78) ab_74))"
"(let-values(((ab_79)(let-values()(set-add ab_78 key_76))))"
"(values ab_79)))))"
"(if #t(for-loop_73 ab_77(unsafe-cdr lst_75)) ab_77))"
" ab_74))"
" ab_74))))"
" for-loop_73)"
"(reference-record-already-bound rr_70)"
" lst_72))))"
"(set-reference-record-reference-before-bound!"
" rr_70"
"(let-values(((lst_80) keys_71))"
"(begin"
"(if(list? lst_80)(void)(let-values()(in-list lst_80)))"
"((letrec-values(((for-loop_81)"
"(lambda(rbb_82 lst_83)"
"(if(pair? lst_83)"
"(let-values(((key_84)(unsafe-car lst_83)))"
"(if #t"
"(let-values(((rbb_85)"
"(let-values(((rbb_86) rbb_82))"
"(let-values(((rbb_87)(let-values()(set-remove rbb_86 key_84))))"
"(values rbb_87)))))"
"(if #t(for-loop_81 rbb_85(unsafe-cdr lst_83)) rbb_85))"
" rbb_82))"
" rbb_82))))"
" for-loop_81)"
"(reference-record-reference-before-bound rr_70)"
" lst_80)))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_88)"
"(let-values(((or-part_89)(reference-record-all-referenced? rr_88)))"
"(if or-part_89 or-part_89(positive?(set-count(reference-record-reference-before-bound rr_88)))))))"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_57 key_58 . args_59)"
"(obs_57"
"(hash-ref key->number key_58)"
"(if(null? args_59)(let-values() #f)(let-values()(apply list* args_59))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(let-values(((obs_60)(current-expand-observe)))"
"(if obs_60(let-values()(call-expand-observe obs_60 'start-expand))(void)))))"
"(define-values"
"(key->number)"
" '#hash((enter-macro . 8)"
"(opaque-expr . 146)"
"(exit-check . 127)"
"(prim-#%stratified . 155)"
"(lambda-renames . 17)"
"(exit-local-expr . 140)"
"(variable . 125)"
"(macro-post-x . 22)"
"(splice . 11)"
"(exit-list . 5)"
"(exit-local-bind . 160)"
"(prim-submodule . 158)"
"(local-lift . 129)"
"(lift-provide . 151)"
"(prim-begin . 107)"
"(tag . 142)"
"(enter-local . 130)"
"(prim-if . 105)"
"(prim-define-values . 104)"
"(prim-submodule* . 159)"
"(block->letrec . 14)"
"(prim-module-begin . 102)"
"(next . 3)"
"(prim-define-syntaxes . 103)"
"(prim-begin0 . 108)"
"(prim-provide . 122)"
"(prim-expression . 138)"
"(phase-up . 20)"
"(local-post . 133)"
"(prim-require . 119)"
"(prim-stop . 100)"
"(prim-let-values . 112)"
"(exit-bind . 145)"
"(module-body . 23)"
"(resolve . 1)"
"(let-renames . 16)"
"(prim-#%app . 109)"
"(letrec-syntaxes-renames . 19)"
"(enter-bind . 144)"
"(return . 2)"
"(rename-list . 147)"
"(prim-quote-syntax . 118)"
"(prim-letrec-values . 113)"
"(prim-begin-for-syntax . 156)"
"(prim-lambda . 110)"
"(prim-letrec-syntaxes-values . 114)"
"(block-renames . 24)"
"(block->list . 12)"
"(enter-check . 126)"
"(macro-pre-x . 21)"
"(prim-quote . 117)"
"(lift-statement . 134)"
"(prim-set! . 123)"
"(local-bind . 143)"
"(prim-#%top . 116)"
"(local-pre . 132)"
"(lift-require . 150)"
"(exit-macro . 9)"
"(enter-block . 10)"
"(start-expand . 141)"
"(prim-with-continaution-mark . 106)"
"(local-value-result . 154)"
"(module-lift-end-loop . 135)"
"(enter-prim . 6)"
"(letlift-loop . 136)"
"(exit-local . 131)"
"(track-origin . 152)"
"(enter-local-expr . 139)"
"(prim-module . 101)"
"(lift-loop . 128)"
"(visit . 0)"
"(prim-#%datum . 115)"
"(case-lambda-renames . 18)"
"(enter-list . 4)"
"(local-value . 153)"
"(prim-#%variable-reference . 149)"
"(rename-one . 148)"
"(next-group . 13)"
"(prepare-env . 157)"
"(prim-case-lambda . 111)"
"(exit-prim . 7)"
"(module-lift-loop . 137)))"
"(define-values"
"(expand5.1)"
"(lambda(alternate-id1_24 alternate-id2_25 s3_26 ctx4_27)"
"(let-values(((s_28) s3_26))"
"(let-values(((ctx_29) ctx4_27))"
"(let-values(((alternate-id_30)(if alternate-id2_25 alternate-id1_24 #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_31)(expand-context-observer ctx_29)))"
"(if obs_31"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_31"
"(if(expand-context-only-immediate? ctx_29) 'enter-check 'visit)"
" s_28))"
"(void)))"
"(void)))"
"(if(identifier? s_28)"
"(let-values()(expand-identifier s_28 ctx_29 alternate-id_30))"
"(if(if(pair?(syntax-e/no-taint s_28))(identifier?(car(syntax-e/no-taint s_28))) #f)"
"(let-values()(expand-id-application-form s_28 ctx_29 alternate-id_30))"
"(if(let-values(((or-part_32)(pair?(syntax-e$1(syntax-disarm$1 s_28)))))"
"(if or-part_32 or-part_32(null?(syntax-e$1(syntax-disarm$1 s_28)))))"
"(let-values()(expand-implicit '#%app s_28 ctx_29 #f))"
"(if(already-expanded?(syntax-e/no-taint s_28))"
"(let-values()(expand-already-expanded s_28 ctx_29))"
"(let-values()(expand-implicit '#%datum s_28 ctx_29 #f)))))))))))))"
"(define-values"
"(unpack6.1)"
"(lambda(given-kws_33 given-args_34 s3_35 ctx4_36)"
"(let-values(((alternate-id2_37)(pair? given-kws_33)))"
"(let-values(((alternate-id1_38)(if alternate-id2_37(car given-args_34)(void))))"
"(expand5.1 alternate-id1_38 alternate-id2_37 s3_35 ctx4_36)))))"
"(define-values"
"(expand7.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_39 given-argc_40)"
"(if(= given-argc_40 4)"
"(let-values(((l1_41) given-kws_39))"
"(let-values(((l1_42)(if(null? l1_41) l1_41(if(eq?(car l1_41) '#:alternate-id)(cdr l1_41) l1_41))))"
"(null? l1_42)))"
" #f))"
"(case-lambda((given-kws_43 given-args_44 s_45 ctx_46)(unpack6.1 given-kws_43 given-args_44 s_45 ctx_46)))"
" null"
" '(#:alternate-id)"
"(let-values(((expand_47)(case-lambda((s_48 ctx_49)(unpack6.1 null null s_48 ctx_49))))) expand_47)))"
"(define-values"
"(expand-identifier)"
"(lambda(s_50 ctx_51 alternate-id_52)"
"(let-values(((id_53)(let-values(((or-part_54) alternate-id_52))(if or-part_54 or-part_54 s_50))))"
"(if(free-id-set-member?(expand-context-stops ctx_51)(expand-context-phase ctx_51) id_53)"
"(let-values()"
"(begin"
"(let-values(((obs_55)(expand-context-observer ctx_51)))"
"(if obs_55"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_51))"
"(let-values()"
"(begin"
"(call-expand-observe obs_55 'enter-prim s_50)"
"(call-expand-observe obs_55 'prim-stop)"
"(call-expand-observe obs_55 'exit-prim s_50)"
"(call-expand-observe obs_55 'return s_50)))"
"(void)))"
"(void)))"
" s_50))"
"(let-values()"
"(let-values(((binding_56)"
"(let-values(((...nder/expand/main.rkt:84:19_57) resolve+shift15.1)"
"((id102_58) id_53)"
"((temp103_59)(expand-context-phase ctx_51))"
"((temp104_60) 'ambiguous)"
"((temp105_61) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 temp104_60 #t #f #f #f #f temp105_61 #t #f #f id102_58 temp103_59)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:84:19_57"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp104_60 temp105_61)"
" id102_58"
" temp103_59)))))"
"(begin"
"(let-values(((obs_62)(expand-context-observer ctx_51)))"
"(if obs_62"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_51))"
"(let-values()(call-expand-observe obs_62 'resolve id_53))"
"(void)))"
"(void)))"
"(if(eq? binding_56 'ambiguous)"
"(let-values()(raise-ambiguous-error id_53 ctx_51))"
"(if(not binding_56)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_50 alternate-id_52) ctx_51 s_50))"
"(let-values()"
"(let-values(((t_63 insp-of-t_64)"
"(let-values(((...nder/expand/main.rkt:96:34_65) lookup17.1)"
"((binding106_66) binding_56)"
"((ctx107_67) ctx_51)"
"((id108_68) id_53)"
"((temp109_69)(if alternate-id_52 s_50 #f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp109_69 #t #f #f binding106_66 ctx107_67 id108_68)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:96:34_65"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list temp109_69)"
" binding106_66"
" ctx107_67"
" id108_68)))))"
"(dispatch t_63 insp-of-t_64 s_50 id_53 ctx_51 binding_56))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_70 ctx_71 alternate-id_72)"
"(let-values(((disarmed-s_73)(syntax-disarm$1 s_70 #f)))"
"(let-values(((id_74)"
"(let-values(((or-part_75) alternate-id_72))"
"(if or-part_75 or-part_75(car(syntax-e$1 disarmed-s_73))))))"
"(if(free-id-set-member?(expand-context-stops ctx_71)(expand-context-phase ctx_71) id_74)"
"(let-values()"
"(begin"
"(let-values(((obs_76)(expand-context-observer ctx_71)))"
"(if obs_76"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_71))"
"(let-values()"
"(begin"
"(call-expand-observe obs_76 'enter-prim s_70)"
"(call-expand-observe obs_76 'prim-stop)"
"(call-expand-observe obs_76 'exit-prim s_70)"
"(call-expand-observe obs_76 'return s_70)))"
"(void)))"
"(void)))"
" s_70))"
"(let-values()"
"(let-values(((binding_77)"
"(let-values(((...nder/expand/main.rkt:105:19_78) resolve+shift15.1)"
"((id110_79) id_74)"
"((temp111_80)(expand-context-phase ctx_71))"
"((temp112_81) 'ambiguous)"
"((temp113_82) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 temp112_81 #t #f #f #f #f temp113_82 #t #f #f id110_79 temp111_80)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:105:19_78"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp112_81 temp113_82)"
" id110_79"
" temp111_80)))))"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_71)))"
"(if obs_83"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_71))"
"(let-values()(call-expand-observe obs_83 'resolve id_74))"
"(void)))"
"(void)))"
"(if(eq? binding_77 'ambiguous)"
"(let-values()(raise-ambiguous-error id_74 ctx_71))"
"(if(not binding_77)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_70 alternate-id_72) ctx_71 id_74))"
"(let-values()"
"(let-values(((t_84 insp-of-t_85)"
"(let-values(((...nder/expand/main.rkt:117:34_86) lookup17.1)"
"((binding114_87) binding_77)"
"((ctx115_88) ctx_71)"
"((id116_89) id_74)"
"((temp117_90)"
"(if alternate-id_72(car(syntax-e$1 disarmed-s_73)) #f)))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 temp117_90 #t #f #f binding114_87 ctx115_88 id116_89)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:117:34_86"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list temp117_90)"
" binding114_87"
" ctx115_88"
" id116_89)))))"
"(if(variable? t_84)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_70 alternate-id_72) ctx_71 id_74))"
"(let-values()(dispatch t_84 insp-of-t_85 s_70 id_74 ctx_71 binding_77)))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_91 s_92 ctx_93 trigger-id_94)"
"(let-values(((disarmed-s_95)(syntax-disarm$1 s_92)))"
"(let-values(((id_96)(datum->syntax$2 disarmed-s_95 sym_91)))"
"(if(free-id-set-member?(expand-context-stops ctx_93)(expand-context-phase ctx_93) id_96)"
"(let-values()"
"(begin"
"(let-values(((obs_97)(expand-context-observer ctx_93)))"
"(if obs_97"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_93))"
"(let-values()"
"(begin"
"(call-expand-observe obs_97 'enter-prim s_92)"
"(call-expand-observe obs_97 'prim-stop)"
"(call-expand-observe obs_97 'exit-prim s_92)"
"(call-expand-observe obs_97 'return s_92)))"
"(void)))"
"(void)))"
" s_92))"
"(let-values()"
"(let-values(((b_98)"
"(let-values(((...nder/expand/main.rkt:135:13_99) resolve+shift15.1)"
"((id118_100) id_96)"
"((temp119_101)(expand-context-phase ctx_93))"
"((temp120_102) 'ambiguous)"
"((temp121_103) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 temp120_102 #t #f #f #f #f temp121_103 #t #f #f id118_100 temp119_101)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:135:13_99"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp120_102 temp121_103)"
" id118_100"
" temp119_101)))))"
"(if(eq? b_98 'ambiguous)"
"(let-values()(raise-ambiguous-error id_96 ctx_93))"
"(let-values()"
"(let-values(((t_104 insp-of-t_105)"
"(if b_98"
"(let-values(((b122_106) b_98)((ctx123_107) ctx_93)((id124_108) id_96))"
"(if(variable-reference-constant?(#%variable-reference lookup17.1))"
"(lookup15.1 #f #f #f #f b122_106 ctx123_107 id124_108)"
"(lookup17.1 b122_106 ctx123_107 id124_108)))"
"(values #f #f))))"
"(if(transformer? t_104)"
"(let-values()"
"(dispatch-transformer"
" t_104"
" insp-of-t_105"
"(make-explicit sym_91 s_92 disarmed-s_95)"
" id_96"
" ctx_93"
" b_98))"
"(if(expand-context-only-immediate? ctx_93)"
"(let-values()"
"(begin"
"(let-values(((obs_109)(expand-context-observer ctx_93)))"
"(if obs_109"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_109 'exit-check s_92))(void)))"
"(void)))"
" s_92))"
"(if(core-form? t_104)"
"(let-values()"
"(if(if(eq? sym_91 '#%top)"
"(if(eq?(core-form-name t_104) '#%top)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_93)"
" #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_104 s_92 ctx_93))"
"(let-values()"
"(dispatch-core-form t_104(make-explicit sym_91 s_92 disarmed-s_95) ctx_93))))"
"(let-values()(raise-syntax-implicit-error s_92 sym_91 trigger-id_94 ctx_93)))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_110 ctx_111)"
"(let-values(((ae_112)(syntax-e$1 s_110)))"
"(let-values((()"
"(begin"
"(if(bound-identifier=?$1"
"(root-expand-context-all-scopes-stx ctx_111)"
"(already-expanded-all-scopes-stx ae_112)"
"(expand-context-phase ctx_111))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                            \"expanded syntax not in its original lexical context;\\n\""
"                            \" extra bindings or scopes in the current context\")"
"(already-expanded-s ae_112))))"
"(values))))"
"(let-values(((result-s_113)(syntax-track-origin$1(already-expanded-s ae_112) s_110)))"
"(begin"
"(let-values(((obs_114)(expand-context-observer ctx_111)))"
"(if obs_114"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe obs_114 'tag result-s_113)"
"(call-expand-observe obs_114 'opaque-expr result-s_113)))"
"(void)))"
"(void)))"
" result-s_113))))))"
"(define-values"
"(make-explicit)"
"(lambda(sym_115 s_116 disarmed-s_117)"
"(syntax-rearm$1(datum->syntax$2 disarmed-s_117(cons sym_115 disarmed-s_117) s_116 s_116) s_116)))"
"(define-values"
"(dispatch)"
"(lambda(t_118 insp-of-t_119 s_120 id_121 ctx_122 binding_123)"
"(if(core-form? t_118)"
"(let-values()(dispatch-core-form t_118 s_120 ctx_122))"
"(if(transformer? t_118)"
"(let-values()(dispatch-transformer t_118 insp-of-t_119 s_120 id_121 ctx_122 binding_123))"
"(if(variable? t_118)"
"(let-values()(dispatch-variable t_118 s_120 id_121 ctx_122 binding_123))"
"          (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" t_118)))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_124 s_125 ctx_126)"
"(if(expand-context-only-immediate? ctx_126)"
"(let-values()"
"(begin"
"(let-values(((obs_127)(expand-context-observer ctx_126)))"
"(if obs_127"
"(let-values()(if #t(let-values()(call-expand-observe obs_127 'exit-check s_125))(void)))"
"(void)))"
" s_125))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_129)(expand-context-observer ctx_126)))"
"(if obs_129"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_129 'enter-prim s_125))(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_128)((core-form-expander t_124) s_125 ctx_126)))"
"(begin"
"(let-values(((obs_130)(expand-context-observer ctx_126)))"
"(if obs_130"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe obs_130 'exit-prim result-s_128)"
"(call-expand-observe obs_130 'return result-s_128)))"
"(void)))"
"(void)))"
" result-s_128)))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_131 s_132 ctx_133)"
"(let-values((()"
"(begin"
"(let-values(((obs_135)(expand-context-observer ctx_133)))"
"(if obs_135"
"(let-values()(if #t(let-values()(call-expand-observe obs_135 'enter-prim s_132))(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_134)((core-form-expander t_131) s_132 ctx_133 #t)))"
"(begin"
"(let-values(((obs_136)(expand-context-observer ctx_133)))"
"(if obs_136"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe obs_136 'exit-prim result-s_134)"
"(call-expand-observe obs_136 'return result-s_134)))"
"(void)))"
"(void)))"
" result-s_134)))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_137 insp-of-t_138 s_139 id_140 ctx_141 binding_142)"
"(if(not-in-this-expand-context? t_137 ctx_141)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_144)(expand-context-observer ctx_141)))"
"(if obs_144"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_144 'enter-macro s_139))(void)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_143)"
"(avoid-current-expand-context(substitute-alternate-id s_139 id_140) t_137 ctx_141)))"
"(begin"
"(let-values(((obs_145)(expand-context-observer ctx_141)))"
"(if obs_145"
"(let-values()(if #t(let-values()(call-expand-observe obs_145 'exit-macro s_139))(void)))"
"(void)))"
"(let-values(((adj-s125_146) adj-s_143)((ctx126_147) ctx_141))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f adj-s125_146 ctx126_147)"
"(expand7.1 adj-s125_146 ctx126_147)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_150)(expand-context-observer ctx_141)))"
"(if obs_150"
"(let-values()"
"(if(expand-context-only-immediate? ctx_141)"
"(let-values()"
"(begin"
"(call-expand-observe obs_150 'visit s_139)"
"(call-expand-observe obs_150 'resolves id_140)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_148 re-ctx_149)"
"(apply-transformer t_137 insp-of-t_138 s_139 id_140 ctx_141 binding_142)))"
"(begin"
"(let-values(((obs_151)(expand-context-observer ctx_141)))"
"(if obs_151"
"(let-values()"
"(if(expand-context-only-immediate? ctx_141)"
"(let-values()(call-expand-observe obs_151 'return exp-s_148))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_141)"
"(let-values() exp-s_148)"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:233:11_152) expand7.1)"
"((exp-s127_153) exp-s_148)"
"((re-ctx128_154) re-ctx_149)"
"((temp129_155)"
"(if(1/rename-transformer? t_137)(1/rename-transformer-target t_137) #f)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 temp129_155 #t exp-s127_153 re-ctx128_154)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:233:11_152"
" keyword-procedure-extract"
" '(#:alternate-id)"
" 4)"
" '(#:alternate-id)"
"(list temp129_155)"
" exp-s127_153"
" re-ctx128_154))))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_156 s_157 id_158 ctx_159 binding_160)"
"(if(expand-context-only-immediate? ctx_159)"
"(let-values()"
"(begin"
"(let-values(((obs_161)(expand-context-observer ctx_159)))"
"(if obs_161"
"(let-values()(if #t(let-values()(call-expand-observe obs_161 'exit-check s_157))(void)))"
"(void)))"
" id_158))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_163)(expand-context-observer ctx_159)))"
"(if obs_163"
"(let-values()(if #t(let-values()(call-expand-observe obs_163 'variable s_157))(void)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_160)(values))))"
"(let-values(((result-s_162)"
"(let-values(((...nder/expand/main.rkt:248:21_164) substitute-variable8.1)"
"((id130_165) id_158)"
"((t131_166) t_156)"
"((temp132_167)(free-id-set-empty?(expand-context-stops ctx_159))))"
"(if(variable-reference-constant?(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1 temp132_167 id130_165 t131_166)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:248:21_164"
" keyword-procedure-extract"
" '(#:no-stops?)"
" 4)"
" '(#:no-stops?)"
"(list temp132_167)"
" id130_165"
" t131_166)))))"
"(begin"
"(let-values(((obs_168)(expand-context-observer ctx_159)))"
"(if obs_168"
"(let-values()(if #t(let-values()(call-expand-observe obs_168 'return result-s_162))(void)))"
"(void)))"
" result-s_162))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_169 insp-of-t_170 s_171 id_172 ctx_173 binding_174)"
"(let-values((()"
"(begin"
"(let-values(((obs_187)(expand-context-observer ctx_173)))"
"(if obs_187"
"(let-values()(if #t(let-values()(call-expand-observe obs_187 'enter-macro s_171))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_175)(syntax-disarm$1 s_171)))"
"(let-values(((intro-scope_176)(new-scope 'macro)))"
"(let-values(((intro-s_177)(add-scope disarmed-s_175 intro-scope_176)))"
"(let-values(((use-s_178 use-scopes_179)(maybe-add-use-site-scope intro-s_177 ctx_173 binding_174)))"
"(let-values(((cleaned-s_180)(syntax-remove-taint-dispatch-properties use-s_178)))"
"(let-values(((def-ctx-scopes_181)(box null)))"
"(let-values(((transformed-s_182)"
"(apply-transformer-in-context"
" t_169"
" cleaned-s_180"
" ctx_173"
" insp-of-t_170"
" intro-scope_176"
" use-scopes_179"
" def-ctx-scopes_181"
" id_172)))"
"(let-values(((result-s_183)(flip-scope transformed-s_182 intro-scope_176)))"
"(let-values(((post-s_184)(maybe-add-post-expansion-scope result-s_183 ctx_173)))"
"(let-values(((tracked-s_185)(syntax-track-origin$1 post-s_184 cleaned-s_180 id_172)))"
"(let-values(((rearmed-s_186)"
"(taint-dispatch"
" tracked-s_185"
"(lambda(t-s_188)(syntax-rearm$1 t-s_188 s_171))"
"(expand-context-phase ctx_173))))"
"(begin"
"(let-values(((obs_189)(expand-context-observer ctx_173)))"
"(if obs_189"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_189 'exit-macro rearmed-s_186))"
"(void)))"
"(void)))"
"(values"
" rearmed-s_186"
"(accumulate-def-ctx-scopes ctx_173 def-ctx-scopes_181)))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_190 cleaned-s_191 ctx_192 insp-of-t_193 intro-scope_194 use-scopes_195 def-ctx-scopes_196 id_197)"
"(let-values((()"
"(begin"
"(let-values(((obs_200)(expand-context-observer ctx_192)))"
"(if obs_200"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_200 'macro-pre-x cleaned-s_191))(void)))"
"(void)))"
"(values))))"
"(let-values(((m-ctx_198)"
"(let-values(((the-struct_201) ctx_192))"
"(if(expand-context? the-struct_201)"
"(let-values(((current-introduction-scopes133_202)(cons intro-scope_194 use-scopes_195))"
"((def-ctx-scopes134_203) def-ctx-scopes_196))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_201)"
"(root-expand-context-post-expansion-scope the-struct_201)"
"(root-expand-context-top-level-bind-scope the-struct_201)"
"(root-expand-context-all-scopes-stx the-struct_201)"
"(root-expand-context-use-site-scopes the-struct_201)"
"(root-expand-context-defined-syms the-struct_201)"
"(root-expand-context-frame-id the-struct_201)"
"(root-expand-context-counter the-struct_201)"
"(root-expand-context-lift-key the-struct_201)"
"(expand-context-context the-struct_201)"
"(expand-context-phase the-struct_201)"
"(expand-context-namespace the-struct_201)"
"(expand-context-env the-struct_201)"
"(expand-context-post-expansion-scope-action the-struct_201)"
"(expand-context-scopes the-struct_201)"
" def-ctx-scopes134_203"
"(expand-context-reference-records the-struct_201)"
"(expand-context-only-immediate? the-struct_201)"
"(expand-context-just-once? the-struct_201)"
"(expand-context-module-begin-k the-struct_201)"
"(expand-context-need-eventually-defined the-struct_201)"
"(expand-context-allow-unbound? the-struct_201)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_201)"
"(expand-context-stops the-struct_201)"
" current-introduction-scopes133_202"
"(expand-context-declared-submodule-names the-struct_201)"
"(expand-context-lifts the-struct_201)"
"(expand-context-lift-envs the-struct_201)"
"(expand-context-module-lifts the-struct_201)"
"(expand-context-require-lifts the-struct_201)"
"(expand-context-to-module-lifts the-struct_201)"
"(expand-context-requires+provides the-struct_201)"
"(expand-context-name the-struct_201)"
"(expand-context-observer the-struct_201)))"
"                        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_201)))))"
"(let-values(((transformed-s_199)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_198"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_192)"
"(add1(expand-context-phase ctx_192)))"
" current-module-code-inspector"
"(let-values(((or-part_204) insp-of-t_193))"
"(if or-part_204 or-part_204(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier(lambda()((transformer->procedure t_190) cleaned-s_191)))))))"
"(begin"
"(let-values(((obs_205)(expand-context-observer ctx_192)))"
"(if obs_205"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_205 'macro-post-x transformed-s_199))(void)))"
"(void)))"
"(if(syntax?$1 transformed-s_199)"
"(void)"
"(let-values()"
"(raise-argument-error"
"(syntax-e$1 id_197)"
"                 \"received value from syntax expander was not syntax\""
"                 \"received\""
" transformed-s_199)))"
" transformed-s_199))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_206 ctx_207 binding_208)"
"(if(if(root-expand-context-use-site-scopes ctx_207)"
"(if(root-expand-context-frame-id ctx_207)"
"(eq?(root-expand-context-frame-id ctx_207)(binding-frame-id binding_208))"
" #f)"
" #f)"
"(let-values()"
"(let-values(((sc_209)(new-scope 'use-site)))"
"(let-values(((b_210)(root-expand-context-use-site-scopes ctx_207)))"
"(begin(set-box! b_210(cons sc_209(unbox b_210)))(values(add-scope s_206 sc_209)(list sc_209))))))"
"(let-values()(values s_206 null)))))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_211 ctx_212)"
"(if(root-expand-context-post-expansion-scope ctx_212)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_212) s_211(root-expand-context-post-expansion-scope ctx_212)))"
"(let-values() s_211))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_213 def-ctx-scopes_214)"
"(if(null?(unbox def-ctx-scopes_214))"
" ctx_213"
"(let-values(((the-struct_215) ctx_213))"
"(if(expand-context? the-struct_215)"
"(let-values(((scopes135_216)(append(unbox def-ctx-scopes_214)(expand-context-scopes ctx_213))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_215)"
"(root-expand-context-post-expansion-scope the-struct_215)"
"(root-expand-context-top-level-bind-scope the-struct_215)"
"(root-expand-context-all-scopes-stx the-struct_215)"
"(root-expand-context-use-site-scopes the-struct_215)"
"(root-expand-context-defined-syms the-struct_215)"
"(root-expand-context-frame-id the-struct_215)"
"(root-expand-context-counter the-struct_215)"
"(root-expand-context-lift-key the-struct_215)"
"(expand-context-context the-struct_215)"
"(expand-context-phase the-struct_215)"
"(expand-context-namespace the-struct_215)"
"(expand-context-env the-struct_215)"
"(expand-context-post-expansion-scope-action the-struct_215)"
" scopes135_216"
"(expand-context-def-ctx-scopes the-struct_215)"
"(expand-context-reference-records the-struct_215)"
"(expand-context-only-immediate? the-struct_215)"
"(expand-context-just-once? the-struct_215)"
"(expand-context-module-begin-k the-struct_215)"
"(expand-context-need-eventually-defined the-struct_215)"
"(expand-context-allow-unbound? the-struct_215)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_215)"
"(expand-context-stops the-struct_215)"
"(expand-context-current-introduction-scopes the-struct_215)"
"(expand-context-declared-submodule-names the-struct_215)"
"(expand-context-lifts the-struct_215)"
"(expand-context-lift-envs the-struct_215)"
"(expand-context-module-lifts the-struct_215)"
"(expand-context-require-lifts the-struct_215)"
"(expand-context-to-module-lifts the-struct_215)"
"(expand-context-requires+provides the-struct_215)"
"(expand-context-name the-struct_215)"
"(expand-context-observer the-struct_215)))"
"          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_215))))))"
"(define-values"
"(lookup15.1)"
"(lambda(in8_217"
" in10_218"
" out-of-context-as-variable?9_219"
" out-of-context-as-variable?11_220"
" b12_221"
" ctx13_222"
" id14_223)"
"(let-values(((b_224) b12_221))"
"(let-values(((ctx_225) ctx13_222))"
"(let-values(((id_226) id14_223))"
"(let-values(((in-s_227)(if in10_218 in8_217 #f)))"
"(let-values(((out-of-context-as-variable?_228)"
"(if out-of-context-as-variable?11_220 out-of-context-as-variable?9_219 #f)))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:361:2_229) binding-lookup48.1)"
"((b136_230) b_224)"
"((temp137_231)(expand-context-env ctx_225))"
"((temp138_232)(expand-context-lift-envs ctx_225))"
"((temp139_233)(expand-context-namespace ctx_225))"
"((temp140_234)(expand-context-phase ctx_225))"
"((id141_235) id_226)"
"((in-s142_236) in-s_227)"
"((out-of-context-as-variable?143_237) out-of-context-as-variable?_228))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup48.1))"
"(binding-lookup46.1"
" in-s142_236"
" #t"
" out-of-context-as-variable?143_237"
" #t"
" b136_230"
" temp137_231"
" temp138_232"
" temp139_233"
" temp140_234"
" id141_235)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:361:2_229"
" keyword-procedure-extract"
" '(#:in #:out-of-context-as-variable?)"
" 8)"
" '(#:in #:out-of-context-as-variable?)"
"(list in-s142_236 out-of-context-as-variable?143_237)"
" b136_230"
" temp137_231"
" temp138_232"
" temp139_233"
" temp140_234"
" id141_235)))))))))))"
"(define-values"
"(unpack16.1)"
"(lambda(given-kws_238 given-args_239 b12_240 ctx13_241 id14_242)"
"(let-values(((in10_243)(if(pair? given-kws_238)(eq? '#:in(car given-kws_238)) #f)))"
"(let-values(((in8_244)(if in10_243(car given-args_239)(void)))"
"((given-kws_245)(if in10_243(cdr given-kws_238) given-kws_238))"
"((given-args_246)(if in10_243(cdr given-args_239) given-args_239)))"
"(let-values(((out-of-context-as-variable?11_247)(pair? given-kws_245)))"
"(let-values(((out-of-context-as-variable?9_248)"
"(if out-of-context-as-variable?11_247(car given-args_246)(void))))"
"(lookup15.1"
" in8_244"
" in10_243"
" out-of-context-as-variable?9_248"
" out-of-context-as-variable?11_247"
" b12_240"
" ctx13_241"
" id14_242)))))))"
"(define-values"
"(lookup17.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_249 given-argc_250)"
"(if(= given-argc_250 5)"
"(let-values(((l1_251) given-kws_249))"
"(let-values(((l1_252)(if(null? l1_251) l1_251(if(eq?(car l1_251) '#:in)(cdr l1_251) l1_251))))"
"(let-values(((l1_253) l1_252))"
"(let-values(((l1_254)"
"(if(null? l1_253)"
" l1_253"
"(if(eq?(car l1_253) '#:out-of-context-as-variable?)(cdr l1_253) l1_253))))"
"(null? l1_254)))))"
" #f))"
"(case-lambda"
"((given-kws_255 given-args_256 b_257 ctx_258 id_259)"
"(unpack16.1 given-kws_255 given-args_256 b_257 ctx_258 id_259)))"
" null"
" '(#:in #:out-of-context-as-variable?)"
"(let-values(((lookup_260)(case-lambda((b_261 ctx_262 id_263)(unpack16.1 null null b_261 ctx_262 id_263)))))"
" lookup_260)))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_264 alternate-id_265)"
"(if(not alternate-id_265)"
"(let-values() s_264)"
"(if(identifier? s_264)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_265 s_264) s_264))"
"(let-values()"
"(let-values(((disarmed-s_266)(syntax-disarm$1 s_264)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$2 disarmed-s_266(cons alternate-id_265(cdr(syntax-e$1 disarmed-s_266))) s_264)"
" s_264)"
" s_264)))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_267)"
"(if(if(local-binding? binding_267)(reference-record?(binding-frame-id binding_267)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_267)(local-binding-key binding_267)))"
"(void))))"
"(define-values"
"(lifted/21.1)"
"(make-required"
" 'expand-body"
"(case-lambda((self_268 bodys_269 ctx_270)(apply missing-kw self_268 bodys_269 ctx_270 null)))"
" #f"
" #f))"
"(define-values"
"(expand-body28.1)"
"(lambda(disarmed-source19_271"
" source18_272"
" stratified?20_273"
" stratified?24_274"
" track?21_275"
" track?25_276"
" bodys26_277"
" ctx27_278)"
"(let-values(((bodys_279) bodys26_277))"
"(let-values(((ctx_280) ctx27_278))"
"(let-values(((s_281) source18_272))"
"(let-values(((disarmed-s_282) disarmed-source19_271))"
"(let-values(((stratified?_283)(if stratified?24_274 stratified?20_273 #f)))"
"(let-values(((track?_284)(if track?25_276 track?21_275 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_291)(expand-context-observer ctx_280)))"
"(if obs_291"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_291 'enter-block))(void)))"
"(void)))"
"(values))))"
"(let-values(((outside-sc_285)(new-scope 'local)))"
"(let-values(((inside-sc_286)(new-scope 'intdef)))"
"(let-values(((init-bodys_287)"
"(alt-reverse"
"(let-values(((lst_292) bodys_279))"
"(begin"
"(if(list? lst_292)(void)(let-values()(in-list lst_292)))"
"((letrec-values(((for-loop_293)"
"(lambda(fold-var_294 lst_295)"
"(if(pair? lst_295)"
"(let-values(((body_296)(unsafe-car lst_295)))"
"(if #t"
"(let-values(((fold-var_297)"
"(let-values(((fold-var_298)"
" fold-var_294))"
"(let-values(((fold-var_299)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
"(add-scope"
" body_296"
" outside-sc_285)"
" inside-sc_286))"
" fold-var_298))))"
"(values fold-var_299)))))"
"(if #t"
"(for-loop_293"
" fold-var_297"
"(unsafe-cdr lst_295))"
" fold-var_297))"
" fold-var_294))"
" fold-var_294))))"
" for-loop_293)"
" null"
" lst_292))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_300)(expand-context-observer ctx_280)))"
"(if obs_300"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_300"
" 'block-renames"
"(datum->syntax$2 #f init-bodys_287)"
"(datum->syntax$2 #f bodys_279)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_288)(expand-context-phase ctx_280)))"
"(let-values(((frame-id_289)(make-reference-record)))"
"(let-values(((body-ctx_290)"
"(let-values(((the-struct_301) ctx_280))"
"(if(expand-context? the-struct_301)"
"(let-values(((context144_302)(list(make-liberal-define-context)))"
"((only-immediate?145_303) #t)"
"((post-expansion-scope146_304) inside-sc_286)"
"((post-expansion-scope-action147_305) add-scope)"
"((scopes148_306)"
"(list*"
" outside-sc_285"
" inside-sc_286"
"(expand-context-scopes ctx_280)))"
"((use-site-scopes149_307)(box null))"
"((frame-id150_308) frame-id_289)"
"((reference-records151_309)"
"(cons"
" frame-id_289"
"(expand-context-reference-records ctx_280)))"
"((all-scopes-stx152_310)"
"(add-scope"
"(add-scope"
"(root-expand-context-all-scopes-stx ctx_280)"
" outside-sc_285)"
" inside-sc_286)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_301)"
" post-expansion-scope146_304"
"(root-expand-context-top-level-bind-scope the-struct_301)"
" all-scopes-stx152_310"
" use-site-scopes149_307"
"(root-expand-context-defined-syms the-struct_301)"
" frame-id150_308"
"(root-expand-context-counter the-struct_301)"
"(root-expand-context-lift-key the-struct_301)"
" context144_302"
"(expand-context-phase the-struct_301)"
"(expand-context-namespace the-struct_301)"
"(expand-context-env the-struct_301)"
" post-expansion-scope-action147_305"
" scopes148_306"
"(expand-context-def-ctx-scopes the-struct_301)"
" reference-records151_309"
" only-immediate?145_303"
"(expand-context-just-once? the-struct_301)"
"(expand-context-module-begin-k the-struct_301)"
"(expand-context-need-eventually-defined the-struct_301)"
"(expand-context-allow-unbound? the-struct_301)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_301)"
"(expand-context-stops the-struct_301)"
"(expand-context-current-introduction-scopes the-struct_301)"
"(expand-context-declared-submodule-names the-struct_301)"
"(expand-context-lifts the-struct_301)"
"(expand-context-lift-envs the-struct_301)"
"(expand-context-module-lifts the-struct_301)"
"(expand-context-require-lifts the-struct_301)"
"(expand-context-to-module-lifts the-struct_301)"
"(expand-context-requires+provides the-struct_301)"
"(expand-context-name the-struct_301)"
"(expand-context-observer the-struct_301)))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context?\""
" the-struct_301)))))"
"((letrec-values(((loop_311)"
"(lambda(body-ctx_312"
" bodys_313"
" done-bodys_314"
" val-idss_315"
" val-keyss_316"
" val-rhss_317"
" track-stxs_318"
" trans-idss_319"
" dups_320)"
"(if(null? bodys_313)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_322)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_322"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_322"
"(if(null? val-idss_315)"
" 'block->list"
" 'block->letrec)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_321)"
"(let-values(((...nder/expand/main.rkt:458:8_323)"
" finish-expanding-body48.1)"
"((body-ctx153_324) body-ctx_312)"
"((frame-id154_325) frame-id_289)"
"((temp155_326)"
"(alt-reverse val-idss_315))"
"((temp156_327)"
"(alt-reverse val-keyss_316))"
"((temp157_328)"
"(alt-reverse val-rhss_317))"
"((temp158_329)"
"(alt-reverse track-stxs_318))"
"((temp159_330)"
"(alt-reverse done-bodys_314))"
"((s160_331) s_281)"
"((disarmed-s161_332)"
" disarmed-s_282)"
"((stratified?162_333)"
" stratified?_283)"
"((track?163_334) track?_284))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" finish-expanding-body48.1))"
"(finish-expanding-body46.1"
" disarmed-s161_332"
" s160_331"
" stratified?162_333"
" track?163_334"
" body-ctx153_324"
" frame-id154_325"
" temp155_326"
" temp156_327"
" temp157_328"
" temp158_329"
" temp159_330)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:458:8_323"
" keyword-procedure-extract"
" '(#:disarmed-source"
" #:source"
" #:stratified?"
" #:track?)"
" 9)"
" '(#:disarmed-source"
" #:source"
" #:stratified?"
" #:track?)"
"(list"
" disarmed-s161_332"
" s160_331"
" stratified?162_333"
" track?163_334)"
" body-ctx153_324"
" frame-id154_325"
" temp155_326"
" temp156_327"
" temp157_328"
" temp158_329"
" temp159_330)))))"
"(attach-disappeared-transformer-bindings"
" result-s_321"
"(alt-reverse trans-idss_319)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_337)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_337"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_337 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_335)"
"(let-values(((temp164_338)"
"(syntax-disarm$1"
"(car bodys_313)))"
"((body-ctx165_339) body-ctx_312))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp164_338"
" body-ctx165_339)"
"(expand7.1"
" temp164_338"
" body-ctx165_339)))))"
"(let-values(((disarmed-exp-body_336)"
"(syntax-disarm$1 exp-body_335)))"
"(let-values(((tmp_340)"
"(core-form-sym"
" disarmed-exp-body_336"
" phase_288)))"
"(if(equal? tmp_340 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_356)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_356"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_356"
" 'prim-begin))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_341 begin166_342 e167_343)"
"(let-values(((s_357)"
" disarmed-exp-body_336))"
"(if(if #t #t #f)"
"(let-values(((orig-s_358)"
" s_357))"
"(let-values(((begin166_359"
" e167_360)"
"(let-values(((s_361)"
"(if(syntax?$1"
" s_357)"
"(syntax-e$1"
" s_357)"
" s_357)))"
"(if(pair?"
" s_361)"
"(let-values(((begin168_362)"
"(let-values(((s_364)"
"(car"
" s_361)))"
" s_364))"
"((e169_363)"
"(let-values(((s_365)"
"(cdr"
" s_361)))"
"(let-values(((s_366)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(let-values(((flat-s_367)"
"(to-syntax-list.1$1"
" s_366)))"
"(if(not"
" flat-s_367)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_358))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_358))"
"(let-values()"
"(let-values(((e_368)"
"(let-values(((lst_369)"
" flat-s_367))"
"(begin"
"(if(list?"
" lst_369)"
"(void)"
"(let-values()"
"(in-list"
" lst_369)))"
"((letrec-values(((for-loop_370)"
"(lambda(e_371"
" lst_372)"
"(if(pair?"
" lst_372)"
"(let-values(((s_373)"
"(unsafe-car"
" lst_372)))"
"(if #t"
"(let-values(((e_374)"
"(let-values(((e_375)"
" e_371))"
"(let-values(((e_376)"
"(let-values()"
"(let-values(((e170_377)"
"(let-values()"
" s_373)))"
"(cons"
" e170_377"
" e_375)))))"
"(values"
" e_376)))))"
"(if #t"
"(for-loop_370"
" e_374"
"(unsafe-cdr"
" lst_372))"
" e_374))"
" e_371))"
" e_371))))"
" for-loop_370)"
" null"
" lst_369)))))"
"(alt-reverse"
" e_368))))))))))"
"(values"
" begin168_362"
" e169_363))"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_358)))))"
"(values"
" #t"
" begin166_359"
" e167_360)))"
"(values #f #f #f)))))"
"(let-values(((track_354)"
"(lambda(e_378)"
"(syntax-track-origin$1"
" e_378"
" exp-body_335))))"
"(let-values(((splice-bodys_355)"
"(append"
"(map2 track_354 e167_343)"
"(cdr bodys_313))))"
"(begin"
"(let-values(((obs_379)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_379"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_379"
" 'splice"
" splice-bodys_355))"
"(void)))"
"(void)))"
"(loop_311"
" body-ctx_312"
" splice-bodys_355"
" done-bodys_314"
" val-idss_315"
" val-keyss_316"
" val-rhss_317"
" track-stxs_318"
" trans-idss_319"
" dups_320)))))))"
"(if(equal? tmp_340 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_401)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_401"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_401"
" 'prim-define-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_380"
" define-values171_381"
" id172_382"
" rhs173_383)"
"(let-values(((s_402)"
" disarmed-exp-body_336))"
"(if(if #t #t #f)"
"(let-values(((orig-s_403)"
" s_402))"
"(let-values(((define-values171_404"
" id172_405"
" rhs173_406)"
"(let-values(((s_407)"
"(if(syntax?$1"
" s_402)"
"(syntax-e$1"
" s_402)"
" s_402)))"
"(if(pair?"
" s_407)"
"(let-values(((define-values174_408)"
"(let-values(((s_411)"
"(car"
" s_407)))"
" s_411))"
"((id175_409"
" rhs176_410)"
"(let-values(((s_412)"
"(cdr"
" s_407)))"
"(let-values(((s_413)"
"(if(syntax?$1"
" s_412)"
"(syntax-e$1"
" s_412)"
" s_412)))"
"(if(pair?"
" s_413)"
"(let-values(((id177_414)"
"(let-values(((s_416)"
"(car"
" s_413)))"
"(let-values(((s_417)"
"(if(syntax?$1"
" s_416)"
"(syntax-e$1"
" s_416)"
" s_416)))"
"(let-values(((flat-s_418)"
"(to-syntax-list.1$1"
" s_417)))"
"(if(not"
" flat-s_418)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_403))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_403))"
"(let-values()"
"(let-values(((id_419)"
"(let-values(((lst_420)"
" flat-s_418))"
"(begin"
"(if(list?"
" lst_420)"
"(void)"
"(let-values()"
"(in-list"
" lst_420)))"
"((letrec-values(((for-loop_421)"
"(lambda(id_422"
" lst_423)"
"(if(pair?"
" lst_423)"
"(let-values(((s_424)"
"(unsafe-car"
" lst_423)))"
"(if #t"
"(let-values(((id_425)"
"(let-values(((id_426)"
" id_422))"
"(let-values(((id_427)"
"(let-values()"
"(let-values(((id180_428)"
"(let-values()"
"(if(let-values(((or-part_429)"
"(if(syntax?$1"
" s_424)"
"(symbol?"
"(syntax-e$1"
" s_424))"
" #f)))"
"(if or-part_429"
" or-part_429"
"(symbol?"
" s_424)))"
" s_424"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_403"
" s_424)))))"
"(cons"
" id180_428"
" id_426)))))"
"(values"
" id_427)))))"
"(if #t"
"(for-loop_421"
" id_425"
"(unsafe-cdr"
" lst_423))"
" id_425))"
" id_422))"
" id_422))))"
" for-loop_421)"
" null"
" lst_420)))))"
"(alt-reverse"
" id_419)))))))))"
"((rhs178_415)"
"(let-values(((s_430)"
"(cdr"
" s_413)))"
"(let-values(((s_431)"
"(if(syntax?$1"
" s_430)"
"(syntax-e$1"
" s_430)"
" s_430)))"
"(if(pair?"
" s_431)"
"(let-values(((rhs179_432)"
"(let-values(((s_433)"
"(car"
" s_431)))"
" s_433))"
"(()"
"(let-values(((s_434)"
"(cdr"
" s_431)))"
"(let-values(((s_435)"
"(if(syntax?$1"
" s_434)"
"(syntax-e$1"
" s_434)"
" s_434)))"
"(if(null?"
" s_435)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_403))))))"
"(values"
" rhs179_432))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_403))))))"
"(values"
" id177_414"
" rhs178_415))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_403))))))"
"(values"
" define-values174_408"
" id175_409"
" rhs176_410))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                 \"bad syntax\""
" orig-s_403)))))"
"(values"
" #t"
" define-values171_404"
" id172_405"
" rhs173_406)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_396)"
"(remove-use-site-scopes"
" id172_382"
" body-ctx_312)))"
"(let-values((()"
"(begin"
"(let-values(((obs_436)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_436"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_436"
" 'rename-one"
"(datum->syntax$2"
" #f"
"(list"
" ids_396"
" rhs173_383))))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((new-dups_397)"
"(let-values(((ids181_437)"
" ids_396)"
"((phase182_438)"
" phase_288)"
"((exp-body183_439)"
" exp-body_335)"
"((dups184_440)"
" dups_320))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids181_437"
" phase182_438"
" exp-body183_439"
" dups184_440"
" #t)"
"(check-no-duplicate-ids10.1"
" ids181_437"
" phase182_438"
" exp-body183_439"
" dups184_440)))))"
"(let-values(((counter_398)"
"(root-expand-context-counter"
" ctx_280)))"
"(let-values(((keys_399)"
"(alt-reverse"
"(let-values(((lst_441)"
" ids_396))"
"(begin"
"(if(list?"
" lst_441)"
"(void)"
"(let-values()"
"(in-list"
" lst_441)))"
"((letrec-values(((for-loop_442)"
"(lambda(fold-var_443"
" lst_444)"
"(if(pair?"
" lst_444)"
"(let-values(((id_445)"
"(unsafe-car"
" lst_444)))"
"(if #t"
"(let-values(((fold-var_446)"
"(let-values(((fold-var_447)"
" fold-var_443))"
"(let-values(((fold-var_448)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:496:24_449)"
" add-local-binding!35.1)"
"((id185_450)"
" id_445)"
"((phase186_451)"
" phase_288)"
"((counter187_452)"
" counter_398)"
"((frame-id188_453)"
" frame-id_289)"
"((exp-body189_454)"
" exp-body_335))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id188_453"
" #t"
" exp-body189_454"
" #t"
" id185_450"
" phase186_451"
" counter187_452)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:496:24_449"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id188_453"
" exp-body189_454)"
" id185_450"
" phase186_451"
" counter187_452))))"
" fold-var_447))))"
"(values"
" fold-var_448)))))"
"(if #t"
"(for-loop_442"
" fold-var_446"
"(unsafe-cdr"
" lst_444))"
" fold-var_446))"
" fold-var_443))"
" fold-var_443))))"
" for-loop_442)"
" null"
" lst_441))))))"
"(let-values(((extended-env_400)"
"(let-values(((lst_455)"
" keys_399)"
"((lst_456)"
" ids_396))"
"(begin"
"(if(list?"
" lst_455)"
"(void)"
"(let-values()"
"(in-list"
" lst_455)))"
"(if(list?"
" lst_456)"
"(void)"
"(let-values()"
"(in-list"
" lst_456)))"
"((letrec-values(((for-loop_457)"
"(lambda(env_458"
" lst_459"
" lst_460)"
"(if(if(pair?"
" lst_459)"
"(pair?"
" lst_460)"
" #f)"
"(let-values(((key_461)"
"(unsafe-car"
" lst_459))"
"((id_462)"
"(unsafe-car"
" lst_460)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((env_463)"
"(let-values(((env_464)"
" env_458))"
"(let-values(((env_465)"
"(let-values()"
"(env-extend"
" env_464"
" key_461"
"(local-variable1.1"
" id_462)))))"
"(values"
" env_465)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_457"
" env_463"
"(unsafe-cdr"
" lst_459)"
"(unsafe-cdr"
" lst_460))"
" env_463))"
" env_458))"
" env_458))))"
" for-loop_457)"
"(expand-context-env"
" body-ctx_312)"
" lst_455"
" lst_456)))))"
"(loop_311"
"(let-values(((the-struct_466)"
" body-ctx_312))"
"(if(expand-context?"
" the-struct_466)"
"(let-values(((env190_467)"
" extended-env_400))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_466)"
"(root-expand-context-post-expansion-scope"
" the-struct_466)"
"(root-expand-context-top-level-bind-scope"
" the-struct_466)"
"(root-expand-context-all-scopes-stx"
" the-struct_466)"
"(root-expand-context-use-site-scopes"
" the-struct_466)"
"(root-expand-context-defined-syms"
" the-struct_466)"
"(root-expand-context-frame-id"
" the-struct_466)"
"(root-expand-context-counter"
" the-struct_466)"
"(root-expand-context-lift-key"
" the-struct_466)"
"(expand-context-context"
" the-struct_466)"
"(expand-context-phase"
" the-struct_466)"
"(expand-context-namespace"
" the-struct_466)"
" env190_467"
"(expand-context-post-expansion-scope-action"
" the-struct_466)"
"(expand-context-scopes"
" the-struct_466)"
"(expand-context-def-ctx-scopes"
" the-struct_466)"
"(expand-context-reference-records"
" the-struct_466)"
"(expand-context-only-immediate?"
" the-struct_466)"
"(expand-context-just-once?"
" the-struct_466)"
"(expand-context-module-begin-k"
" the-struct_466)"
"(expand-context-need-eventually-defined"
" the-struct_466)"
"(expand-context-allow-unbound?"
" the-struct_466)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_466)"
"(expand-context-stops"
" the-struct_466)"
"(expand-context-current-introduction-scopes"
" the-struct_466)"
"(expand-context-declared-submodule-names"
" the-struct_466)"
"(expand-context-lifts"
" the-struct_466)"
"(expand-context-lift-envs"
" the-struct_466)"
"(expand-context-module-lifts"
" the-struct_466)"
"(expand-context-require-lifts"
" the-struct_466)"
"(expand-context-to-module-lifts"
" the-struct_466)"
"(expand-context-requires+provides"
" the-struct_466)"
"(expand-context-name"
" the-struct_466)"
"(expand-context-observer"
" the-struct_466)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                              \"expand-context?\""
" the-struct_466)))"
"(cdr bodys_313)"
" null"
"(cons"
" ids_396"
"(append"
"(alt-reverse"
"(let-values(((lst_468)"
" done-bodys_314))"
"(begin"
"(if(list? lst_468)"
"(void)"
"(let-values()"
"(in-list lst_468)))"
"((letrec-values(((for-loop_469)"
"(lambda(fold-var_470"
" lst_471)"
"(if(pair?"
" lst_471)"
"(let-values(((done-body_472)"
"(unsafe-car"
" lst_471)))"
"(if #t"
"(let-values(((fold-var_473)"
"(let-values(((fold-var_474)"
" fold-var_470))"
"(let-values(((fold-var_475)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_474))))"
"(values"
" fold-var_475)))))"
"(if #t"
"(for-loop_469"
" fold-var_473"
"(unsafe-cdr"
" lst_471))"
" fold-var_473))"
" fold-var_470))"
" fold-var_470))))"
" for-loop_469)"
" null"
" lst_468))))"
" val-idss_315))"
"(cons"
" keys_399"
"(append"
"(alt-reverse"
"(let-values(((lst_476)"
" done-bodys_314))"
"(begin"
"(if(list? lst_476)"
"(void)"
"(let-values()"
"(in-list lst_476)))"
"((letrec-values(((for-loop_477)"
"(lambda(fold-var_478"
" lst_479)"
"(if(pair?"
" lst_479)"
"(let-values(((done-body_480)"
"(unsafe-car"
" lst_479)))"
"(if #t"
"(let-values(((fold-var_481)"
"(let-values(((fold-var_482)"
" fold-var_478))"
"(let-values(((fold-var_483)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_482))))"
"(values"
" fold-var_483)))))"
"(if #t"
"(for-loop_477"
" fold-var_481"
"(unsafe-cdr"
" lst_479))"
" fold-var_481))"
" fold-var_478))"
" fold-var_478))))"
" for-loop_477)"
" null"
" lst_476))))"
" val-keyss_316))"
"(cons"
" rhs173_383"
"(append"
"(alt-reverse"
"(let-values(((lst_484)"
" done-bodys_314))"
"(begin"
"(if(list? lst_484)"
"(void)"
"(let-values()"
"(in-list lst_484)))"
"((letrec-values(((for-loop_485)"
"(lambda(fold-var_486"
" lst_487)"
"(if(pair?"
" lst_487)"
"(let-values(((done-body_488)"
"(unsafe-car"
" lst_487)))"
"(if #t"
"(let-values(((fold-var_489)"
"(let-values(((fold-var_490)"
" fold-var_486))"
"(let-values(((fold-var_491)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_488"
" s_281"
" phase_288))"
" fold-var_490))))"
"(values"
" fold-var_491)))))"
"(if #t"
"(for-loop_485"
" fold-var_489"
"(unsafe-cdr"
" lst_487))"
" fold-var_489))"
" fold-var_486))"
" fold-var_486))))"
" for-loop_485)"
" null"
" lst_484))))"
" val-rhss_317))"
"(cons"
" exp-body_335"
"(append"
"(alt-reverse"
"(let-values(((lst_492)"
" done-bodys_314))"
"(begin"
"(if(list? lst_492)"
"(void)"
"(let-values()"
"(in-list lst_492)))"
"((letrec-values(((for-loop_493)"
"(lambda(fold-var_494"
" lst_495)"
"(if(pair?"
" lst_495)"
"(let-values(((done-body_496)"
"(unsafe-car"
" lst_495)))"
"(if #t"
"(let-values(((fold-var_497)"
"(let-values(((fold-var_498)"
" fold-var_494))"
"(let-values(((fold-var_499)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_498))))"
"(values"
" fold-var_499)))))"
"(if #t"
"(for-loop_493"
" fold-var_497"
"(unsafe-cdr"
" lst_495))"
" fold-var_497))"
" fold-var_494))"
" fold-var_494))))"
" for-loop_493)"
" null"
" lst_492))))"
" track-stxs_318))"
" trans-idss_319"
" new-dups_397))))))))))"
"(if(equal? tmp_340 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_522)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_522"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_522"
" 'prim-define-syntaxes))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_500"
" define-syntaxes191_501"
" id192_502"
" rhs193_503)"
"(let-values(((s_523)"
" disarmed-exp-body_336))"
"(if(if #t #t #f)"
"(let-values(((orig-s_524)"
" s_523))"
"(let-values(((define-syntaxes191_525"
" id192_526"
" rhs193_527)"
"(let-values(((s_528)"
"(if(syntax?$1"
" s_523)"
"(syntax-e$1"
" s_523)"
" s_523)))"
"(if(pair?"
" s_528)"
"(let-values(((define-syntaxes194_529)"
"(let-values(((s_532)"
"(car"
" s_528)))"
" s_532))"
"((id195_530"
" rhs196_531)"
"(let-values(((s_533)"
"(cdr"
" s_528)))"
"(let-values(((s_534)"
"(if(syntax?$1"
" s_533)"
"(syntax-e$1"
" s_533)"
" s_533)))"
"(if(pair?"
" s_534)"
"(let-values(((id197_535)"
"(let-values(((s_537)"
"(car"
" s_534)))"
"(let-values(((s_538)"
"(if(syntax?$1"
" s_537)"
"(syntax-e$1"
" s_537)"
" s_537)))"
"(let-values(((flat-s_539)"
"(to-syntax-list.1$1"
" s_538)))"
"(if(not"
" flat-s_539)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_524))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_524))"
"(let-values()"
"(let-values(((id_540)"
"(let-values(((lst_541)"
" flat-s_539))"
"(begin"
"(if(list?"
" lst_541)"
"(void)"
"(let-values()"
"(in-list"
" lst_541)))"
"((letrec-values(((for-loop_542)"
"(lambda(id_543"
" lst_544)"
"(if(pair?"
" lst_544)"
"(let-values(((s_545)"
"(unsafe-car"
" lst_544)))"
"(if #t"
"(let-values(((id_546)"
"(let-values(((id_547)"
" id_543))"
"(let-values(((id_548)"
"(let-values()"
"(let-values(((id200_549)"
"(let-values()"
"(if(let-values(((or-part_550)"
"(if(syntax?$1"
" s_545)"
"(symbol?"
"(syntax-e$1"
" s_545))"
" #f)))"
"(if or-part_550"
" or-part_550"
"(symbol?"
" s_545)))"
" s_545"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_524"
" s_545)))))"
"(cons"
" id200_549"
" id_547)))))"
"(values"
" id_548)))))"
"(if #t"
"(for-loop_542"
" id_546"
"(unsafe-cdr"
" lst_544))"
" id_546))"
" id_543))"
" id_543))))"
" for-loop_542)"
" null"
" lst_541)))))"
"(alt-reverse"
" id_540)))))))))"
"((rhs198_536)"
"(let-values(((s_551)"
"(cdr"
" s_534)))"
"(let-values(((s_552)"
"(if(syntax?$1"
" s_551)"
"(syntax-e$1"
" s_551)"
" s_551)))"
"(if(pair?"
" s_552)"
"(let-values(((rhs199_553)"
"(let-values(((s_554)"
"(car"
" s_552)))"
" s_554))"
"(()"
"(let-values(((s_555)"
"(cdr"
" s_552)))"
"(let-values(((s_556)"
"(if(syntax?$1"
" s_555)"
"(syntax-e$1"
" s_555)"
" s_555)))"
"(if(null?"
" s_556)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_524))))))"
"(values"
" rhs199_553))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_524))))))"
"(values"
" id197_535"
" rhs198_536))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_524))))))"
"(values"
" define-syntaxes194_529"
" id195_530"
" rhs196_531))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_524)))))"
"(values"
" #t"
" define-syntaxes191_525"
" id192_526"
" rhs193_527)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_516)"
"(remove-use-site-scopes"
" id192_502"
" body-ctx_312)))"
"(let-values((()"
"(begin"
"(let-values(((obs_557)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_557"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_557"
" 'rename-one"
"(datum->syntax$2"
" #f"
"(list"
" ids_516"
" rhs193_503))))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((new-dups_517)"
"(let-values(((ids201_558)"
" ids_516)"
"((phase202_559)"
" phase_288)"
"((exp-body203_560)"
" exp-body_335)"
"((dups204_561)"
" dups_320))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids201_558"
" phase202_559"
" exp-body203_560"
" dups204_561"
" #t)"
"(check-no-duplicate-ids10.1"
" ids201_558"
" phase202_559"
" exp-body203_560"
" dups204_561)))))"
"(let-values(((counter_518)"
"(root-expand-context-counter"
" ctx_280)))"
"(let-values(((keys_519)"
"(alt-reverse"
"(let-values(((lst_562)"
" ids_516))"
"(begin"
"(if(list?"
" lst_562)"
"(void)"
"(let-values()"
"(in-list"
" lst_562)))"
"((letrec-values(((for-loop_563)"
"(lambda(fold-var_564"
" lst_565)"
"(if(pair?"
" lst_565)"
"(let-values(((id_566)"
"(unsafe-car"
" lst_565)))"
"(if #t"
"(let-values(((fold-var_567)"
"(let-values(((fold-var_568)"
" fold-var_564))"
"(let-values(((fold-var_569)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:538:24_570)"
" add-local-binding!35.1)"
"((id205_571)"
" id_566)"
"((phase206_572)"
" phase_288)"
"((counter207_573)"
" counter_518)"
"((frame-id208_574)"
" frame-id_289)"
"((exp-body209_575)"
" exp-body_335))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id208_574"
" #t"
" exp-body209_575"
" #t"
" id205_571"
" phase206_572"
" counter207_573)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:538:24_570"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id208_574"
" exp-body209_575)"
" id205_571"
" phase206_572"
" counter207_573))))"
" fold-var_568))))"
"(values"
" fold-var_569)))))"
"(if #t"
"(for-loop_563"
" fold-var_567"
"(unsafe-cdr"
" lst_565))"
" fold-var_567))"
" fold-var_564))"
" fold-var_564))))"
" for-loop_563)"
" null"
" lst_562))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_576)"
"(expand-context-observer"
" body-ctx_312)))"
"(if obs_576"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_576"
" 'prepare-env))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((vals_520)"
"(eval-for-syntaxes-binding"
" rhs193_503"
" ids_516"
" ctx_280)))"
"(let-values(((extended-env_521)"
"(let-values(((lst_577)"
" keys_519)"
"((lst_578)"
" vals_520)"
"((lst_579)"
" ids_516))"
"(begin"
"(if(list?"
" lst_577)"
"(void)"
"(let-values()"
"(in-list"
" lst_577)))"
"(if(list?"
" lst_578)"
"(void)"
"(let-values()"
"(in-list"
" lst_578)))"
"(if(list?"
" lst_579)"
"(void)"
"(let-values()"
"(in-list"
" lst_579)))"
"((letrec-values(((for-loop_580)"
"(lambda(env_581"
" lst_582"
" lst_583"
" lst_584)"
"(if(if(pair?"
" lst_582)"
"(if(pair?"
" lst_583)"
"(pair?"
" lst_584)"
" #f)"
" #f)"
"(let-values(((key_585)"
"(unsafe-car"
" lst_582))"
"((val_586)"
"(unsafe-car"
" lst_583))"
"((id_587)"
"(unsafe-car"
" lst_584)))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(let-values(((env_588)"
"(let-values(((env_589)"
" env_581))"
"(let-values(((env_590)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_586"
" id_587"
" phase_288)"
"(env-extend"
" env_589"
" key_585"
" val_586)))))"
"(values"
" env_590)))))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(for-loop_580"
" env_588"
"(unsafe-cdr"
" lst_582)"
"(unsafe-cdr"
" lst_583)"
"(unsafe-cdr"
" lst_584))"
" env_588))"
" env_581))"
" env_581))))"
" for-loop_580)"
"(expand-context-env"
" body-ctx_312)"
" lst_577"
" lst_578"
" lst_579)))))"
"(loop_311"
"(let-values(((the-struct_591)"
" body-ctx_312))"
"(if(expand-context?"
" the-struct_591)"
"(let-values(((env210_592)"
" extended-env_521))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_591)"
"(root-expand-context-post-expansion-scope"
" the-struct_591)"
"(root-expand-context-top-level-bind-scope"
" the-struct_591)"
"(root-expand-context-all-scopes-stx"
" the-struct_591)"
"(root-expand-context-use-site-scopes"
" the-struct_591)"
"(root-expand-context-defined-syms"
" the-struct_591)"
"(root-expand-context-frame-id"
" the-struct_591)"
"(root-expand-context-counter"
" the-struct_591)"
"(root-expand-context-lift-key"
" the-struct_591)"
"(expand-context-context"
" the-struct_591)"
"(expand-context-phase"
" the-struct_591)"
"(expand-context-namespace"
" the-struct_591)"
" env210_592"
"(expand-context-post-expansion-scope-action"
" the-struct_591)"
"(expand-context-scopes"
" the-struct_591)"
"(expand-context-def-ctx-scopes"
" the-struct_591)"
"(expand-context-reference-records"
" the-struct_591)"
"(expand-context-only-immediate?"
" the-struct_591)"
"(expand-context-just-once?"
" the-struct_591)"
"(expand-context-module-begin-k"
" the-struct_591)"
"(expand-context-need-eventually-defined"
" the-struct_591)"
"(expand-context-allow-unbound?"
" the-struct_591)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_591)"
"(expand-context-stops"
" the-struct_591)"
"(expand-context-current-introduction-scopes"
" the-struct_591)"
"(expand-context-declared-submodule-names"
" the-struct_591)"
"(expand-context-lifts"
" the-struct_591)"
"(expand-context-lift-envs"
" the-struct_591)"
"(expand-context-module-lifts"
" the-struct_591)"
"(expand-context-require-lifts"
" the-struct_591)"
"(expand-context-to-module-lifts"
" the-struct_591)"
"(expand-context-requires+provides"
" the-struct_591)"
"(expand-context-name"
" the-struct_591)"
"(expand-context-observer"
" the-struct_591)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                    \"expand-context?\""
" the-struct_591)))"
"(cdr bodys_313)"
" done-bodys_314"
" val-idss_315"
" val-keyss_316"
" val-rhss_317"
" track-stxs_318"
"(cons"
" ids_516"
" trans-idss_319)"
" new-dups_517))))))))))))"
"(let-values()"
"(if stratified?_283"
"(let-values()"
"(loop_311"
" body-ctx_312"
" null"
"(append"
"(alt-reverse bodys_313)"
"(cons exp-body_335 done-bodys_314))"
" val-idss_315"
" val-keyss_316"
" val-rhss_317"
" track-stxs_318"
" trans-idss_319"
" dups_320))"
"(let-values()"
"(loop_311"
" body-ctx_312"
"(cdr bodys_313)"
"(cons exp-body_335 done-bodys_314)"
" val-idss_315"
" val-keyss_316"
" val-rhss_317"
" track-stxs_318"
" trans-idss_319"
" dups_320))))))))))))))))"
" loop_311)"
" body-ctx_290"
" init-bodys_287"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table)))))))))))))))))))"
"(define-values"
"(unpack29.1)"
"(lambda(given-kws_593 given-args_594 bodys26_595 ctx27_596)"
"(let-values(((disarmed-source19_597)(car given-args_594))"
"((given-kws_598)(cdr given-kws_593))"
"((given-args_599)(cdr given-args_594)))"
"(let-values(((source18_600)(car given-args_599))"
"((given-kws_601)(cdr given-kws_598))"
"((given-args_602)(cdr given-args_599)))"
"(let-values(((stratified?24_603)(if(pair? given-kws_601)(eq? '#:stratified?(car given-kws_601)) #f)))"
"(let-values(((stratified?20_604)(if stratified?24_603(car given-args_602)(void)))"
"((given-kws_605)(if stratified?24_603(cdr given-kws_601) given-kws_601))"
"((given-args_606)(if stratified?24_603(cdr given-args_602) given-args_602)))"
"(let-values(((track?25_607)(pair? given-kws_605)))"
"(let-values(((track?21_608)(if track?25_607(car given-args_606)(void))))"
"(expand-body28.1"
" disarmed-source19_597"
" source18_600"
" stratified?20_604"
" stratified?24_603"
" track?21_608"
" track?25_607"
" bodys26_595"
" ctx27_596)))))))))"
"(define-values"
"(expand-body30.1)"
"(lifted/21.1"
"(lambda(given-kws_609 given-argc_610)"
"(if(= given-argc_610 4)"
"(subsets? '(#:disarmed-source #:source) given-kws_609 '(#:disarmed-source #:source #:stratified? #:track?))"
" #f))"
"(case-lambda"
"((given-kws_611 given-args_612 bodys_613 ctx_614)(unpack29.1 given-kws_611 given-args_612 bodys_613 ctx_614)))"
" '(#:disarmed-source #:source)"
" '(#:disarmed-source #:source #:stratified? #:track?)))"
"(define-values"
"(lifted/22.1)"
"(make-required"
" 'finish-expanding-body"
"(case-lambda"
"((self_615 body-ctx_616 frame-id_617 val-idss_618 val-keyss_619 val-rhss_620 track-stxs_621 done-bodys_622)"
"(apply"
" missing-kw"
" self_615"
" body-ctx_616"
" frame-id_617"
" val-idss_618"
" val-keyss_619"
" val-rhss_620"
" track-stxs_621"
" done-bodys_622"
" null)))"
" #f"
" #f))"
"(define-values"
"(finish-expanding-body46.1)"
"(lambda(disarmed-source32_623"
" source31_624"
" stratified?33_625"
" track?34_626"
" body-ctx39_627"
" frame-id40_628"
" val-idss41_629"
" val-keyss42_630"
" val-rhss43_631"
" track-stxs44_632"
" done-bodys45_633)"
"(let-values(((body-ctx_634) body-ctx39_627))"
"(let-values(((frame-id_635) frame-id40_628))"
"(let-values(((val-idss_636) val-idss41_629))"
"(let-values(((val-keyss_637) val-keyss42_630))"
"(let-values(((val-rhss_638) val-rhss43_631))"
"(let-values(((track-stxs_639) track-stxs44_632))"
"(let-values(((done-bodys_640) done-bodys45_633))"
"(let-values(((s_641) source31_624))"
"(let-values(((disarmed-s_642) disarmed-source32_623))"
"(let-values(((stratified?_643) stratified?33_625))"
"(let-values(((track?_644) track?34_626))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_640)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                 \"no expression after a sequence of internal definitions\""
" s_641))"
"(void))"
"(values))))"
"(let-values(((s-core-stx_645)"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase body-ctx_634))))"
"(let-values(((finish-ctx_646)"
"(let-values(((the-struct_648) body-ctx_634))"
"(if(expand-context? the-struct_648)"
"(let-values(((context211_649) 'expression)"
"((use-site-scopes212_650) #f)"
"((scopes213_651)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes body-ctx_634))"
"(expand-context-scopes body-ctx_634)))"
"((only-immediate?214_652) #f)"
"((post-expansion-scope215_653) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_648)"
" post-expansion-scope215_653"
"(root-expand-context-top-level-bind-scope the-struct_648)"
"(root-expand-context-all-scopes-stx the-struct_648)"
" use-site-scopes212_650"
"(root-expand-context-defined-syms the-struct_648)"
"(root-expand-context-frame-id the-struct_648)"
"(root-expand-context-counter the-struct_648)"
"(root-expand-context-lift-key the-struct_648)"
" context211_649"
"(expand-context-phase the-struct_648)"
"(expand-context-namespace the-struct_648)"
"(expand-context-env the-struct_648)"
"(expand-context-post-expansion-scope-action the-struct_648)"
" scopes213_651"
"(expand-context-def-ctx-scopes the-struct_648)"
"(expand-context-reference-records the-struct_648)"
" only-immediate?214_652"
"(expand-context-just-once? the-struct_648)"
"(expand-context-module-begin-k the-struct_648)"
"(expand-context-need-eventually-defined the-struct_648)"
"(expand-context-allow-unbound? the-struct_648)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_648)"
"(expand-context-stops the-struct_648)"
"(expand-context-current-introduction-scopes the-struct_648)"
"(expand-context-declared-submodule-names the-struct_648)"
"(expand-context-lifts the-struct_648)"
"(expand-context-lift-envs the-struct_648)"
"(expand-context-module-lifts the-struct_648)"
"(expand-context-require-lifts the-struct_648)"
"(expand-context-to-module-lifts the-struct_648)"
"(expand-context-requires+provides the-struct_648)"
"(expand-context-name the-struct_648)"
"(expand-context-observer the-struct_648)))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context?\""
" the-struct_648)))))"
"(let-values(((finish-bodys_647)"
"(lambda(track?_654)"
"(let-values(((block->list?_655)(null? val-idss_636)))"
"(begin"
"(if block->list?_655"
"(void)"
"(let-values()"
"(let-values(((obs_656)"
"(expand-context-observer body-ctx_634)))"
"(if obs_656"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_656 'next-group))"
"(void)))"
"(void)))))"
"(if(null?(cdr done-bodys_640))"
"(let-values()"
"(let-values(((last-ctx_657)"
"(let-values(((the-struct_659) finish-ctx_646))"
"(if(expand-context? the-struct_659)"
"(let-values(((reference-records216_660)"
"(cdr"
"(expand-context-reference-records"
" finish-ctx_646))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_659)"
"(root-expand-context-post-expansion-scope"
" the-struct_659)"
"(root-expand-context-top-level-bind-scope"
" the-struct_659)"
"(root-expand-context-all-scopes-stx"
" the-struct_659)"
"(root-expand-context-use-site-scopes"
" the-struct_659)"
"(root-expand-context-defined-syms"
" the-struct_659)"
"(root-expand-context-frame-id"
" the-struct_659)"
"(root-expand-context-counter"
" the-struct_659)"
"(root-expand-context-lift-key"
" the-struct_659)"
"(expand-context-context the-struct_659)"
"(expand-context-phase the-struct_659)"
"(expand-context-namespace the-struct_659)"
"(expand-context-env the-struct_659)"
"(expand-context-post-expansion-scope-action"
" the-struct_659)"
"(expand-context-scopes the-struct_659)"
"(expand-context-def-ctx-scopes"
" the-struct_659)"
" reference-records216_660"
"(expand-context-only-immediate?"
" the-struct_659)"
"(expand-context-just-once?"
" the-struct_659)"
"(expand-context-module-begin-k"
" the-struct_659)"
"(expand-context-need-eventually-defined"
" the-struct_659)"
"(expand-context-allow-unbound?"
" the-struct_659)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_659)"
"(expand-context-stops the-struct_659)"
"(expand-context-current-introduction-scopes"
" the-struct_659)"
"(expand-context-declared-submodule-names"
" the-struct_659)"
"(expand-context-lifts the-struct_659)"
"(expand-context-lift-envs the-struct_659)"
"(expand-context-module-lifts"
" the-struct_659)"
"(expand-context-require-lifts"
" the-struct_659)"
"(expand-context-to-module-lifts"
" the-struct_659)"
"(expand-context-requires+provides"
" the-struct_659)"
"(expand-context-name the-struct_659)"
"(expand-context-observer"
" the-struct_659)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                             \"expand-context?\""
" the-struct_659)))))"
"(let-values(((exp-body_658)"
"(let-values(((temp217_661)"
"(car done-bodys_640))"
"((last-ctx218_662) last-ctx_657))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp217_661"
" last-ctx218_662)"
"(expand7.1"
" temp217_661"
" last-ctx218_662)))))"
"(if track?_654"
"(let-values(((result-s_663)"
"(syntax-track-origin$1"
" exp-body_658"
" s_641)))"
"(begin"
"(let-values(((obs_664)"
"(expand-context-observer"
" body-ctx_634)))"
"(if obs_664"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_664"
" 'tag"
" result-s_663))"
"(void)))"
"(void)))"
" result-s_663))"
" exp-body_658))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if block->list?_655"
"(void)"
"(let-values()"
"(let-values(((obs_666)"
"(expand-context-observer"
" body-ctx_634)))"
"(if obs_666"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_666"
" 'prim-begin))"
"(void)))"
"(void)))))"
"(values))))"
"(letrec-values((()"
"(begin"
"(let-values(((obs_667)"
"(expand-context-observer"
" body-ctx_634)))"
"(if obs_667"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_667"
" 'enter-list"
" exp-bodys_665))"
"(void)))"
"(void)))"
"(values)))"
"((exp-bodys_665)"
"(alt-reverse"
"(let-values(((lst_668) done-bodys_640))"
"(begin"
"(if(list? lst_668)"
"(void)"
"(let-values()(in-list lst_668)))"
"((letrec-values(((for-loop_669)"
"(lambda(fold-var_670"
" lst_671)"
"(if(pair?"
" lst_671)"
"(let-values(((body_672)"
"(unsafe-car"
" lst_671)))"
"(if #t"
"(let-values(((fold-var_673)"
"(let-values(((fold-var_674)"
" fold-var_670))"
"(let-values(((fold-var_675)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_676)"
"(expand-context-observer"
" body-ctx_634)))"
"(if obs_676"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_676"
" 'next))"
"(void)))"
"(void)))"
"(let-values(((body223_677)"
" body_672)"
"((finish-ctx224_678)"
" finish-ctx_646))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" body223_677"
" finish-ctx224_678)"
"(expand7.1"
" body223_677"
" finish-ctx224_678)))))"
" fold-var_674))))"
"(values"
" fold-var_675)))))"
"(if #t"
"(for-loop_669"
" fold-var_673"
"(unsafe-cdr"
" lst_671))"
" fold-var_673))"
" fold-var_670))"
" fold-var_670))))"
" for-loop_669)"
" null"
" lst_668))))))"
"(begin"
"(let-values(((obs_679)"
"(expand-context-observer body-ctx_634)))"
"(if obs_679"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_679"
" 'exit-list"
" exp-bodys_665))"
"(void)))"
"(void)))"
"(let-values(((...nder/expand/main.rkt:624:6_680)"
" rebuild101.1)"
"((track?219_681) track?_654)"
"((s220_682) s_641)"
"((disarmed-s221_683) disarmed-s_642)"
"((temp222_684)"
"(list*"
"(datum->syntax$2 s-core-stx_645 'begin)"
" exp-bodys_665)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?219_681"
" #t"
" s220_682"
" disarmed-s221_683"
" temp222_684)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:624:6_680"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?219_681)"
" s220_682"
" disarmed-s221_683"
" temp222_684)))))))))))))"
"(if(null? val-idss_636)"
"(let-values()(finish-bodys_647 track?_644))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:636:4_685)"
" expand-and-split-bindings-by-reference69.1)"
"((val-idss225_686) val-idss_636)"
"((val-keyss226_687) val-keyss_637)"
"((val-rhss227_688) val-rhss_638)"
"((track-stxs228_689) track-stxs_639)"
"((temp229_690)(not stratified?_643))"
"((frame-id230_691) frame-id_635)"
"((finish-ctx231_692) finish-ctx_646)"
"((s232_693) s_641)"
"((disarmed-s233_694) disarmed-s_642)"
"((finish-bodys234_695) finish-bodys_647)"
"((track?235_696) track?_644))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-and-split-bindings-by-reference69.1))"
"(expand-and-split-bindings-by-reference67.1"
" finish-ctx231_692"
" disarmed-s233_694"
" frame-id230_691"
" finish-bodys234_695"
" s232_693"
" temp229_690"
" track?235_696"
" val-idss225_686"
" val-keyss226_687"
" val-rhss227_688"
" track-stxs228_689)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:636:4_685"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" 6)"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)"
"(list"
" finish-ctx231_692"
" disarmed-s233_694"
" frame-id230_691"
" finish-bodys234_695"
" s232_693"
" temp229_690"
" track?235_696)"
" val-idss225_686"
" val-keyss226_687"
" val-rhss227_688"
" track-stxs228_689)))))))))))))))))))))))"
"(define-values"
"(unpack47.1$2)"
"(lambda(given-kws_697"
" given-args_698"
" body-ctx39_699"
" frame-id40_700"
" val-idss41_701"
" val-keyss42_702"
" val-rhss43_703"
" track-stxs44_704"
" done-bodys45_705)"
"(let-values(((disarmed-source32_706)(car given-args_698))"
"((given-kws_707)(cdr given-kws_697))"
"((given-args_708)(cdr given-args_698)))"
"(let-values(((source31_709)(car given-args_708))"
"((given-kws_710)(cdr given-kws_707))"
"((given-args_711)(cdr given-args_708)))"
"(let-values(((stratified?33_712)(car given-args_711))"
"((given-kws_713)(cdr given-kws_710))"
"((given-args_714)(cdr given-args_711)))"
"(let-values(((track?34_715)(car given-args_714)))"
"(finish-expanding-body46.1"
" disarmed-source32_706"
" source31_709"
" stratified?33_712"
" track?34_715"
" body-ctx39_699"
" frame-id40_700"
" val-idss41_701"
" val-keyss42_702"
" val-rhss43_703"
" track-stxs44_704"
" done-bodys45_705)))))))"
"(define-values"
"(finish-expanding-body48.1)"
"(lifted/22.1"
"(lambda(given-kws_716 given-argc_717)"
"(if(= given-argc_717 9)"
"(let-values(((l2_718) given-kws_716))"
"(if(pair? l2_718)"
"(if(eq?(car l2_718) '#:disarmed-source)"
"(let-values(((l2_719)(cdr l2_718)))"
"(if(pair? l2_719)"
"(if(eq?(car l2_719) '#:source)"
"(let-values(((l2_720)(cdr l2_719)))"
"(if(pair? l2_720)"
"(if(eq?(car l2_720) '#:stratified?)"
"(let-values(((l2_721)(cdr l2_720)))"
"(if(pair? l2_721)(if(eq?(car l2_721) '#:track?)(null?(cdr l2_721)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_722"
" given-args_723"
" body-ctx_724"
" frame-id_725"
" val-idss_726"
" val-keyss_727"
" val-rhss_728"
" track-stxs_729"
" done-bodys_730)"
"(unpack47.1$2"
" given-kws_722"
" given-args_723"
" body-ctx_724"
" frame-id_725"
" val-idss_726"
" val-keyss_727"
" val-rhss_728"
" track-stxs_729"
" done-bodys_730)))"
" '(#:disarmed-source #:source #:stratified? #:track?)"
" '(#:disarmed-source #:source #:stratified? #:track?)))"
"(define-values"
"(lifted/23.1)"
"(make-required"
" 'expand-and-split-bindings-by-reference"
"(case-lambda"
"((self_731 idss_732 keyss_733 rhss_734 track-stxs_735)"
"(apply missing-kw self_731 idss_732 keyss_733 rhss_734 track-stxs_735 null)))"
" #f"
" #f))"
"(define-values"
"(expand-and-split-bindings-by-reference67.1)"
"(lambda(ctx51_736"
" disarmed-source53_737"
" frame-id50_738"
" get-body54_739"
" source52_740"
" split?49_741"
" track?55_742"
" idss63_743"
" keyss64_744"
" rhss65_745"
" track-stxs66_746)"
"(let-values(((idss_747) idss63_743))"
"(let-values(((keyss_748) keyss64_744))"
"(let-values(((rhss_749) rhss65_745))"
"(let-values(((track-stxs_750) track-stxs66_746))"
"(let-values(((split?_751) split?49_741))"
"(let-values(((frame-id_752) frame-id50_738))"
"(let-values(((ctx_753) ctx51_736))"
"(let-values(((s_754) source52_740))"
"(let-values(((disarmed-s_755) disarmed-source53_737))"
"(let-values(((get-body_756) get-body54_739))"
"(let-values(((track?_757) track?55_742))"
"(let-values()"
"(let-values(((s-core-stx_758)"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_753))))"
"((letrec-values(((loop_759)"
"(lambda(idss_760"
" keyss_761"
" rhss_762"
" track-stxs_763"
" accum-idss_764"
" accum-rhss_765"
" accum-track-stxs_766"
" track?_767)"
"(if(null? idss_760)"
"(let-values()"
"(if(null? accum-idss_764)"
"(let-values()(get-body_756 track?_767))"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:663:8_768)"
" rebuild101.1)"
"((track?236_769) track?_767)"
"((s237_770) s_754)"
"((disarmed-s238_771) disarmed-s_755)"
"((temp239_772)"
"(list"
"(datum->syntax$2 s-core-stx_758 'letrec-values)"
"(build-clauses"
" accum-idss_764"
" accum-rhss_765"
" accum-track-stxs_766)"
"(get-body_756 #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?236_769"
" #t"
" s237_770"
" disarmed-s238_771"
" temp239_772)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:663:8_768"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?236_769)"
" s237_770"
" disarmed-s238_771"
" temp239_772))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_778)"
"(expand-context-observer ctx_753)))"
"(if obs_778"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_778 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ids_773)(car idss_760)))"
"(let-values(((expanded-rhs_774)"
"(let-values(((temp240_779)(car rhss_762))"
"((temp241_780)"
"(as-named-context"
" ctx_753"
" ids_773)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp240_779 temp241_780)"
"(expand7.1 temp240_779 temp241_780)))))"
"(let-values(((track-stx_775)(car track-stxs_763)))"
"(let-values(((local-or-forward-references?_776)"
"(reference-record-forward-references?"
" frame-id_752)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_752"
"(car keyss_761))"
"(values))))"
"(let-values(((forward-references?_777)"
"(reference-record-forward-references?"
" frame-id_752)))"
"(if(if(not local-or-forward-references?_776)"
" split?_751"
" #f)"
"(let-values()"
"(begin"
"(if(null? accum-idss_764)"
"(void)"
"(let-values()"
"(error"
"                                                                               \"internal error: accumulated ids not empty\")))"
"(let-values(((...nder/expand/main.rkt:683:8_781)"
" rebuild101.1)"
"((track?242_782) track?_767)"
"((s243_783) s_754)"
"((disarmed-s244_784)"
" disarmed-s_755)"
"((temp245_785)"
"(list"
"(datum->syntax$2"
" s-core-stx_758"
" 'let-values)"
"(list"
"(build-clause"
" ids_773"
" expanded-rhs_774"
" track-stx_775))"
"(loop_759"
"(cdr idss_760)"
"(cdr keyss_761)"
"(cdr rhss_762)"
"(cdr track-stxs_763)"
" null"
" null"
" null"
" #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?242_782"
" #t"
" s243_783"
" disarmed-s244_784"
" temp245_785)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:683:8_781"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?242_782)"
" s243_783"
" disarmed-s244_784"
" temp245_785)))))"
"(if(if(not forward-references?_777)"
"(let-values(((or-part_786) split?_751))"
"(if or-part_786"
" or-part_786"
"(null?(cdr idss_760))))"
" #f)"
"(let-values()"
"(let-values(((...nder/expand/main.rkt:693:8_787)"
" rebuild101.1)"
"((track?246_788) track?_767)"
"((s247_789) s_754)"
"((disarmed-s248_790)"
" disarmed-s_755)"
"((temp249_791)"
"(list"
"(datum->syntax$2"
" s-core-stx_758"
" 'letrec-values)"
"(build-clauses"
"(cons ids_773 accum-idss_764)"
"(cons"
" expanded-rhs_774"
" accum-rhss_765)"
"(cons"
" track-stx_775"
" accum-track-stxs_766))"
"(loop_759"
"(cdr idss_760)"
"(cdr keyss_761)"
"(cdr rhss_762)"
"(cdr track-stxs_763)"
" null"
" null"
" null"
" #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" track?246_788"
" #t"
" s247_789"
" disarmed-s248_790"
" temp249_791)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:693:8_787"
" keyword-procedure-extract"
" '(#:track?)"
" 5)"
" '(#:track?)"
"(list track?246_788)"
" s247_789"
" disarmed-s248_790"
" temp249_791))))"
"(let-values()"
"(loop_759"
"(cdr idss_760)"
"(cdr keyss_761)"
"(cdr rhss_762)"
"(cdr track-stxs_763)"
"(cons ids_773 accum-idss_764)"
"(cons expanded-rhs_774 accum-rhss_765)"
"(cons track-stx_775 accum-track-stxs_766)"
" track?_767))))))))))))))))"
" loop_759)"
" idss_747"
" keyss_748"
" rhss_749"
" track-stxs_750"
" null"
" null"
" null"
" track?_757))))))))))))))))"
"(define-values"
"(unpack68.1)"
"(lambda(given-kws_792 given-args_793 idss63_794 keyss64_795 rhss65_796 track-stxs66_797)"
"(let-values(((ctx51_798)(car given-args_793))"
"((given-kws_799)(cdr given-kws_792))"
"((given-args_800)(cdr given-args_793)))"
"(let-values(((disarmed-source53_801)(car given-args_800))"
"((given-kws_802)(cdr given-kws_799))"
"((given-args_803)(cdr given-args_800)))"
"(let-values(((frame-id50_804)(car given-args_803))"
"((given-kws_805)(cdr given-kws_802))"
"((given-args_806)(cdr given-args_803)))"
"(let-values(((get-body54_807)(car given-args_806))"
"((given-kws_808)(cdr given-kws_805))"
"((given-args_809)(cdr given-args_806)))"
"(let-values(((source52_810)(car given-args_809))"
"((given-kws_811)(cdr given-kws_808))"
"((given-args_812)(cdr given-args_809)))"
"(let-values(((split?49_813)(car given-args_812))"
"((given-kws_814)(cdr given-kws_811))"
"((given-args_815)(cdr given-args_812)))"
"(let-values(((track?55_816)(car given-args_815)))"
"(expand-and-split-bindings-by-reference67.1"
" ctx51_798"
" disarmed-source53_801"
" frame-id50_804"
" get-body54_807"
" source52_810"
" split?49_813"
" track?55_816"
" idss63_794"
" keyss64_795"
" rhss65_796"
" track-stxs66_797))))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference69.1)"
"(lifted/23.1"
"(lambda(given-kws_817 given-argc_818)"
"(if(= given-argc_818 6)"
"(let-values(((l2_819) given-kws_817))"
"(if(pair? l2_819)"
"(if(eq?(car l2_819) '#:ctx)"
"(let-values(((l2_820)(cdr l2_819)))"
"(if(pair? l2_820)"
"(if(eq?(car l2_820) '#:disarmed-source)"
"(let-values(((l2_821)(cdr l2_820)))"
"(if(pair? l2_821)"
"(if(eq?(car l2_821) '#:frame-id)"
"(let-values(((l2_822)(cdr l2_821)))"
"(if(pair? l2_822)"
"(if(eq?(car l2_822) '#:get-body)"
"(let-values(((l2_823)(cdr l2_822)))"
"(if(pair? l2_823)"
"(if(eq?(car l2_823) '#:source)"
"(let-values(((l2_824)(cdr l2_823)))"
"(if(pair? l2_824)"
"(if(eq?(car l2_824) '#:split?)"
"(let-values(((l2_825)(cdr l2_824)))"
"(if(pair? l2_825)"
"(if(eq?(car l2_825) '#:track?)(null?(cdr l2_825)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_826 given-args_827 idss_828 keyss_829 rhss_830 track-stxs_831)"
"(unpack68.1 given-kws_826 given-args_827 idss_828 keyss_829 rhss_830 track-stxs_831)))"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)"
" '(#:ctx #:disarmed-source #:frame-id #:get-body #:source #:split? #:track?)))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_832 accum-rhss_833 accum-track-stxs_834)"
"(map2 build-clause(alt-reverse accum-idss_832)(alt-reverse accum-rhss_833)(alt-reverse accum-track-stxs_834))))"
"(define-values"
"(build-clause)"
"(lambda(ids_835 rhs_836 track-stx_837)"
"(let-values(((clause_838)(datum->syntax$2 #f(list ids_835 rhs_836))))"
"(if track-stx_837(syntax-track-origin$1 clause_838 track-stx_837) clause_838))))"
"(define-values"
"(no-binds)"
"(lambda(expr_839 s_840 phase_841)"
"(let-values(((s-core-stx_842)(syntax-shift-phase-level$1 core-stx phase_841)))"
"(let-values(((s-runtime-stx_843)(syntax-shift-phase-level$1 runtime-stx phase_841)))"
"(datum->syntax$2"
" #f"
"(list"
"(datum->syntax$2 s-core-stx_842 'begin)"
" expr_839"
"(list(datum->syntax$2 s-core-stx_842 '#%app)(datum->syntax$2 s-runtime-stx_843 'values)))"
" s_840)))))"
"(define-values"
"(expand/capture-lifts78.1)"
"(lambda(begin-form?71_844"
" begin-form?74_845"
" expand-lifts?70_846"
" expand-lifts?73_847"
" lift-key72_848"
" lift-key75_849"
" s76_850"
" ctx77_851)"
"(let-values(((s_852) s76_850))"
"(let-values(((ctx_853) ctx77_851))"
"(let-values(((expand-lifts?_854)(if expand-lifts?73_847 expand-lifts?70_846 #f)))"
"(let-values(((begin-form?_855)(if begin-form?74_845 begin-form?71_844 #f)))"
"(let-values(((lift-key_856)(if lift-key75_849 lift-key72_848(generate-lift-key))))"
"(let-values()"
"(let-values(((context_857)(expand-context-context ctx_853)))"
"(let-values(((phase_858)(expand-context-phase ctx_853)))"
"(let-values(((local?_859)(not begin-form?_855)))"
"((letrec-values(((loop_860)"
"(lambda(s_861)"
"(let-values(((lift-env_862)(if local?_859(box empty-env) #f)))"
"(let-values(((lift-ctx_863)"
"(let-values(((...nder/expand/main.rkt:746:21_867)"
" make-lift-context8.1)"
"((temp250_868)"
"(if local?_859"
"(make-local-lift"
" lift-env_862"
"(root-expand-context-counter ctx_853))"
"(make-top-level-lift ctx_853)))"
"((temp251_869)"
"(if(not local?_859)"
"(eq? context_857 'module)"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 temp251_869 #t temp250_868)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:746:21_867"
" keyword-procedure-extract"
" '(#:module*-ok?)"
" 3)"
" '(#:module*-ok?)"
"(list temp251_869)"
" temp250_868)))))"
"(let-values(((capture-ctx_864)"
"(let-values(((the-struct_870) ctx_853))"
"(if(expand-context? the-struct_870)"
"(let-values(((lift-key252_871) lift-key_856)"
"((lifts253_872) lift-ctx_863)"
"((lift-envs254_873)"
"(if local?_859"
"(cons"
" lift-env_862"
"(expand-context-lift-envs ctx_853))"
"(expand-context-lift-envs ctx_853)))"
"((module-lifts255_874)"
"(if(let-values(((or-part_875)"
" local?_859))"
"(if or-part_875"
" or-part_875"
"(not"
"(memq"
" context_857"
" '(top-level module)))))"
"(expand-context-module-lifts ctx_853)"
" lift-ctx_863)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_870)"
"(root-expand-context-post-expansion-scope"
" the-struct_870)"
"(root-expand-context-top-level-bind-scope"
" the-struct_870)"
"(root-expand-context-all-scopes-stx the-struct_870)"
"(root-expand-context-use-site-scopes the-struct_870)"
"(root-expand-context-defined-syms the-struct_870)"
"(root-expand-context-frame-id the-struct_870)"
"(root-expand-context-counter the-struct_870)"
" lift-key252_871"
"(expand-context-context the-struct_870)"
"(expand-context-phase the-struct_870)"
"(expand-context-namespace the-struct_870)"
"(expand-context-env the-struct_870)"
"(expand-context-post-expansion-scope-action"
" the-struct_870)"
"(expand-context-scopes the-struct_870)"
"(expand-context-def-ctx-scopes the-struct_870)"
"(expand-context-reference-records the-struct_870)"
"(expand-context-only-immediate? the-struct_870)"
"(expand-context-just-once? the-struct_870)"
"(expand-context-module-begin-k the-struct_870)"
"(expand-context-need-eventually-defined"
" the-struct_870)"
"(expand-context-allow-unbound? the-struct_870)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_870)"
"(expand-context-stops the-struct_870)"
"(expand-context-current-introduction-scopes"
" the-struct_870)"
"(expand-context-declared-submodule-names"
" the-struct_870)"
" lifts253_872"
" lift-envs254_873"
" module-lifts255_874"
"(expand-context-require-lifts the-struct_870)"
"(expand-context-to-module-lifts the-struct_870)"
"(expand-context-requires+provides the-struct_870)"
"(expand-context-name the-struct_870)"
"(expand-context-observer the-struct_870)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                 \"expand-context?\""
" the-struct_870)))))"
"(let-values(((exp-s_865)"
"(let-values(((s256_876) s_861)"
"((capture-ctx257_877) capture-ctx_864))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f s256_876 capture-ctx257_877)"
"(expand7.1 s256_876 capture-ctx257_877)))))"
"(let-values(((lifts_866)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_864))))"
"(if(null? lifts_866)"
"(let-values() exp-s_865)"
"(let-values()"
"(let-values(((with-lifts-s_878)"
"(if begin-form?_855"
"(let-values(((lifts258_879) lifts_866)"
"((exp-s259_880) exp-s_865)"
"((s260_881) s_861)"
"((phase261_882) phase_858))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" lifts258_879"
" exp-s259_880"
" s260_881"
" phase261_882)"
"(wrap-lifts-as-begin17.1"
" lifts258_879"
" exp-s259_880"
" s260_881"
" phase261_882)))"
"(wrap-lifts-as-let"
" lifts_866"
" exp-s_865"
" s_861"
" phase_858))))"
"(begin"
"(let-values(((obs_883)(expand-context-observer ctx_853)))"
"(if obs_883"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_883"
" 'lift-loop"
" with-lifts-s_878))"
"(void)))"
"(void)))"
"(if expand-lifts?_854"
"(loop_860 with-lifts-s_878)"
" with-lifts-s_878)))))))))))))"
" loop_860)"
" s_852))))))))))))"
"(define-values"
"(unpack79.1)"
"(lambda(given-kws_884 given-args_885 s76_886 ctx77_887)"
"(let-values(((begin-form?74_888)(if(pair? given-kws_884)(eq? '#:begin-form?(car given-kws_884)) #f)))"
"(let-values(((begin-form?71_889)(if begin-form?74_888(car given-args_885)(void)))"
"((given-kws_890)(if begin-form?74_888(cdr given-kws_884) given-kws_884))"
"((given-args_891)(if begin-form?74_888(cdr given-args_885) given-args_885)))"
"(let-values(((expand-lifts?73_892)(if(pair? given-kws_890)(eq? '#:expand-lifts?(car given-kws_890)) #f)))"
"(let-values(((expand-lifts?70_893)(if expand-lifts?73_892(car given-args_891)(void)))"
"((given-kws_894)(if expand-lifts?73_892(cdr given-kws_890) given-kws_890))"
"((given-args_895)(if expand-lifts?73_892(cdr given-args_891) given-args_891)))"
"(let-values(((lift-key75_896)(pair? given-kws_894)))"
"(let-values(((lift-key72_897)(if lift-key75_896(car given-args_895)(void))))"
"(expand/capture-lifts78.1"
" begin-form?71_889"
" begin-form?74_888"
" expand-lifts?70_893"
" expand-lifts?73_892"
" lift-key72_897"
" lift-key75_896"
" s76_886"
" ctx77_887)))))))))"
"(define-values"
"(expand/capture-lifts80.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_898 given-argc_899)"
"(if(= given-argc_899 4)"
"(let-values(((l1_900) given-kws_898))"
"(let-values(((l1_901)(if(null? l1_900) l1_900(if(eq?(car l1_900) '#:begin-form?)(cdr l1_900) l1_900))))"
"(let-values(((l1_902) l1_901))"
"(let-values(((l1_903)"
"(if(null? l1_902) l1_902(if(eq?(car l1_902) '#:expand-lifts?)(cdr l1_902) l1_902))))"
"(let-values(((l1_904) l1_903))"
"(let-values(((l1_905)"
"(if(null? l1_904) l1_904(if(eq?(car l1_904) '#:lift-key)(cdr l1_904) l1_904))))"
"(null? l1_905)))))))"
" #f))"
"(case-lambda((given-kws_906 given-args_907 s_908 ctx_909)(unpack79.1 given-kws_906 given-args_907 s_908 ctx_909)))"
" null"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
"(let-values(((expand/capture-lifts_910)(case-lambda((s_911 ctx_912)(unpack79.1 null null s_911 ctx_912)))))"
" expand/capture-lifts_910)))"
"(define-values"
"(expand-transformer91.1)"
"(lambda(begin-form?82_913"
" begin-form?86_914"
" context81_915"
" context85_916"
" expand-lifts?83_917"
" expand-lifts?87_918"
" lift-key84_919"
" lift-key88_920"
" s89_921"
" ctx90_922)"
"(let-values(((s_923) s89_921))"
"(let-values(((ctx_924) ctx90_922))"
"(let-values(((context_925)(if context85_916 context81_915 'expression)))"
"(let-values(((begin-form?_926)(if begin-form?86_914 begin-form?82_913 #f)))"
"(let-values(((expand-lifts?_927)(if expand-lifts?87_918 expand-lifts?83_917 #t)))"
"(let-values(((lift-key_928)(if lift-key88_920 lift-key84_919(generate-lift-key))))"
"(let-values()"
"(let-values(((phase_929)(add1(expand-context-phase ctx_924))))"
"(let-values(((ns_930)"
"(namespace->namespace-at-phase(expand-context-namespace ctx_924) phase_929)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_930 phase_929)(values))))"
"(let-values(((trans-ctx_931)"
"(let-values(((the-struct_932) ctx_924))"
"(if(expand-context? the-struct_932)"
"(let-values(((context267_933) context_925)"
"((scopes268_934) null)"
"((phase269_935) phase_929)"
"((namespace270_936) ns_930)"
"((env271_937) empty-env)"
"((only-immediate?272_938) #f)"
"((post-expansion-scope273_939) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_932)"
" post-expansion-scope273_939"
"(root-expand-context-top-level-bind-scope the-struct_932)"
"(root-expand-context-all-scopes-stx the-struct_932)"
"(root-expand-context-use-site-scopes the-struct_932)"
"(root-expand-context-defined-syms the-struct_932)"
"(root-expand-context-frame-id the-struct_932)"
"(root-expand-context-counter the-struct_932)"
"(root-expand-context-lift-key the-struct_932)"
" context267_933"
" phase269_935"
" namespace270_936"
" env271_937"
"(expand-context-post-expansion-scope-action the-struct_932)"
" scopes268_934"
"(expand-context-def-ctx-scopes the-struct_932)"
"(expand-context-reference-records the-struct_932)"
" only-immediate?272_938"
"(expand-context-just-once? the-struct_932)"
"(expand-context-module-begin-k the-struct_932)"
"(expand-context-need-eventually-defined the-struct_932)"
"(expand-context-allow-unbound? the-struct_932)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_932)"
"(expand-context-stops the-struct_932)"
"(expand-context-current-introduction-scopes the-struct_932)"
"(expand-context-declared-submodule-names the-struct_932)"
"(expand-context-lifts the-struct_932)"
"(expand-context-lift-envs the-struct_932)"
"(expand-context-module-lifts the-struct_932)"
"(expand-context-require-lifts the-struct_932)"
"(expand-context-to-module-lifts the-struct_932)"
"(expand-context-requires+provides the-struct_932)"
"(expand-context-name the-struct_932)"
"(expand-context-observer the-struct_932)))"
"                                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_932)))))"
"(let-values(((...nder/expand/main.rkt:806:2_940) expand/capture-lifts80.1)"
"((s262_941) s_923)"
"((trans-ctx263_942) trans-ctx_931)"
"((expand-lifts?264_943) expand-lifts?_927)"
"((begin-form?265_944) begin-form?_926)"
"((lift-key266_945) lift-key_928))"
"(if(variable-reference-constant?(#%variable-reference expand/capture-lifts80.1))"
"(expand/capture-lifts78.1"
" begin-form?265_944"
" #t"
" expand-lifts?264_943"
" #t"
" lift-key266_945"
" #t"
" s262_941"
" trans-ctx263_942)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:806:2_940"
" keyword-procedure-extract"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
" 4)"
" '(#:begin-form? #:expand-lifts? #:lift-key)"
"(list begin-form?265_944 expand-lifts?264_943 lift-key266_945)"
" s262_941"
" trans-ctx263_942))))))))))))))))"
"(define-values"
"(unpack92.1)"
"(lambda(given-kws_946 given-args_947 s89_948 ctx90_949)"
"(let-values(((begin-form?86_950)(if(pair? given-kws_946)(eq? '#:begin-form?(car given-kws_946)) #f)))"
"(let-values(((begin-form?82_951)(if begin-form?86_950(car given-args_947)(void)))"
"((given-kws_952)(if begin-form?86_950(cdr given-kws_946) given-kws_946))"
"((given-args_953)(if begin-form?86_950(cdr given-args_947) given-args_947)))"
"(let-values(((context85_954)(if(pair? given-kws_952)(eq? '#:context(car given-kws_952)) #f)))"
"(let-values(((context81_955)(if context85_954(car given-args_953)(void)))"
"((given-kws_956)(if context85_954(cdr given-kws_952) given-kws_952))"
"((given-args_957)(if context85_954(cdr given-args_953) given-args_953)))"
"(let-values(((expand-lifts?87_958)"
"(if(pair? given-kws_956)(eq? '#:expand-lifts?(car given-kws_956)) #f)))"
"(let-values(((expand-lifts?83_959)(if expand-lifts?87_958(car given-args_957)(void)))"
"((given-kws_960)(if expand-lifts?87_958(cdr given-kws_956) given-kws_956))"
"((given-args_961)(if expand-lifts?87_958(cdr given-args_957) given-args_957)))"
"(let-values(((lift-key88_962)(pair? given-kws_960)))"
"(let-values(((lift-key84_963)(if lift-key88_962(car given-args_961)(void))))"
"(expand-transformer91.1"
" begin-form?82_951"
" begin-form?86_950"
" context81_955"
" context85_954"
" expand-lifts?83_959"
" expand-lifts?87_958"
" lift-key84_963"
" lift-key88_962"
" s89_948"
" ctx90_949)))))))))))"
"(define-values"
"(expand-transformer93.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_964 given-argc_965)"
"(if(= given-argc_965 4)"
"(let-values(((l1_966) given-kws_964))"
"(let-values(((l1_967)(if(null? l1_966) l1_966(if(eq?(car l1_966) '#:begin-form?)(cdr l1_966) l1_966))))"
"(let-values(((l1_968) l1_967))"
"(let-values(((l1_969)(if(null? l1_968) l1_968(if(eq?(car l1_968) '#:context)(cdr l1_968) l1_968))))"
"(let-values(((l1_970) l1_969))"
"(let-values(((l1_971)"
"(if(null? l1_970) l1_970(if(eq?(car l1_970) '#:expand-lifts?)(cdr l1_970) l1_970))))"
"(let-values(((l1_972) l1_971))"
"(let-values(((l1_973)"
"(if(null? l1_972) l1_972(if(eq?(car l1_972) '#:lift-key)(cdr l1_972) l1_972))))"
"(null? l1_973)))))))))"
" #f))"
"(case-lambda((given-kws_974 given-args_975 s_976 ctx_977)(unpack92.1 given-kws_974 given-args_975 s_976 ctx_977)))"
" null"
" '(#:begin-form? #:context #:expand-lifts? #:lift-key)"
"(let-values(((expand-transformer_978)(case-lambda((s_979 ctx_980)(unpack92.1 null null s_979 ctx_980)))))"
" expand-transformer_978)))"
"(define-values"
"(expand+eval-for-syntaxes-binding)"
"(lambda(rhs_981 ids_982 ctx_983)"
"(let-values(((exp-rhs_984)"
"(let-values(((rhs274_986) rhs_981)((temp275_987)(as-named-context ctx_983 ids_982)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1 #f #f #f #f #f #f #f #f rhs274_986 temp275_987)"
"(expand-transformer93.1 rhs274_986 temp275_987)))))"
"(let-values(((phase_985)(add1(expand-context-phase ctx_983))))"
"(values"
" exp-rhs_984"
"(eval-for-bindings"
" ids_982"
" exp-rhs_984"
" phase_985"
"(namespace->namespace-at-phase(expand-context-namespace ctx_983) phase_985)"
" ctx_983))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_988 ids_989 ctx_990)"
"(let-values(((exp-rhs_991 vals_992)(expand+eval-for-syntaxes-binding rhs_988 ids_989 ctx_990))) vals_992)))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_993 s_994 phase_995 ns_996 ctx_997)"
"(let-values(((compiled_998)"
"(compile-single"
" s_994"
"(let-values(((...nder/expand/main.rkt:837:37_1000) make-compile-context16.1)"
"((ns276_1001) ns_996)"
"((phase277_1002) phase_995))"
"(if(variable-reference-constant?(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1 #f #f #f #f #f #f ns276_1001 #t phase277_1002 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/main.rkt:837:37_1000"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" 2)"
" '(#:namespace #:phase)"
"(list ns276_1001 phase277_1002)))))))"
"(let-values(((vals_999)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_997"
" 1/current-namespace"
" ns_996"
" eval-jit-enabled"
" #f)"
"(let-values()(eval-top compiled_998 ns_996))))"
" list)))"
"(begin"
"(if(=(length vals_999)(length ids_993))"
"(void)"
"(let-values()"
"              (error \"wrong number of results (\" (length vals_999) \"vs.\" (length ids_993) \")\" \"from\" s_994)))"
" vals_999)))))"
"(define-values"
"(rebuild99.1)"
"(lambda(track?94_1003 track?95_1004 orig-s96_1005 disarmed-orig-s97_1006 new98_1007)"
"(let-values(((orig-s_1008) orig-s96_1005))"
"(let-values(((disarmed-orig-s_1009) disarmed-orig-s97_1006))"
"(let-values(((new_1010) new98_1007))"
"(let-values(((track?_1011)(if track?95_1004 track?94_1003 #t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$2 disarmed-orig-s_1009 new_1010 orig-s_1008(if track?_1011 orig-s_1008 #f))"
" orig-s_1008))))))))"
"(define-values"
"(unpack100.1)"
"(lambda(given-kws_1012 given-args_1013 orig-s96_1014 disarmed-orig-s97_1015 new98_1016)"
"(let-values(((track?95_1017)(pair? given-kws_1012)))"
"(let-values(((track?94_1018)(if track?95_1017(car given-args_1013)(void))))"
"(rebuild99.1 track?94_1018 track?95_1017 orig-s96_1014 disarmed-orig-s97_1015 new98_1016)))))"
"(define-values"
"(rebuild101.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_1019 given-argc_1020)"
"(if(= given-argc_1020 5)"
"(let-values(((l1_1021) given-kws_1019))"
"(let-values(((l1_1022)(if(null? l1_1021) l1_1021(if(eq?(car l1_1021) '#:track?)(cdr l1_1021) l1_1021))))"
"(null? l1_1022)))"
" #f))"
"(case-lambda"
"((given-kws_1023 given-args_1024 orig-s_1025 disarmed-orig-s_1026 new_1027)"
"(unpack100.1 given-kws_1023 given-args_1024 orig-s_1025 disarmed-orig-s_1026 new_1027)))"
" null"
" '(#:track?)"
"(let-values(((rebuild_1028)"
"(case-lambda"
"((orig-s_1029 disarmed-orig-s_1030 new_1031)"
"(unpack100.1 null null orig-s_1029 disarmed-orig-s_1030 new_1031)))))"
" rebuild_1028)))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_1032 trans-idss_1033)"
"(if(null? trans-idss_1033)"
"(let-values() s_1032)"
"(let-values()"
"(syntax-property$1"
" s_1032"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_1033)"
"(let-values(((or-part_1034)(syntax-property$1 s_1032 'disappeared-binding)))"
"(if or-part_1034 or-part_1034 null))))))))"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_1 phase_2)"
"(if(null? stop-ids_1)"
"(let-values() stop-ids_1)"
"(let-values()"
"(let-values(((p-core-stx_3)(syntax-shift-phase-level$1 core-stx phase_2)))"
"(if(if(= 1(length stop-ids_1))"
"(free-identifier=?$1(car stop-ids_1)(datum->syntax$2 p-core-stx_3 'module*) phase_2 phase_2)"
" #f)"
"(let-values() stop-ids_1)"
"(let-values()"
"(append"
" stop-ids_1"
"(alt-reverse"
"(let-values(((lst_4) auto-stop-syms))"
"(begin"
"(if(list? lst_4)(void)(let-values()(in-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_6 lst_7)"
"(if(pair? lst_7)"
"(let-values(((sym_8)(unsafe-car lst_7)))"
"(if #t"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_10) fold-var_6))"
"(let-values(((fold-var_11)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$2 p-core-stx_3 sym_8))"
" fold-var_10))))"
"(values fold-var_11)))))"
"(if #t(for-loop_5 fold-var_9(unsafe-cdr lst_7)) fold-var_9))"
" fold-var_6))"
" fold-var_6))))"
" for-loop_5)"
" null"
" lst_4))))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_2 make-_3 ?_4 -ref_5 -set!_6)"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'internal-definition-context)))"
"(values"
" struct:_2"
" make-_3"
" ?_4"
"(make-struct-field-accessor -ref_5 0 'frame-id)"
"(make-struct-field-accessor -ref_5 1 'scope)"
"(make-struct-field-accessor -ref_5 2 'add-scope?)"
"(make-struct-field-accessor -ref_5 3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_38 make-_39 ?_40 -ref_41 -set!_42)"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))"
"(values"
" struct:_38"
" make-_39"
" ?_40"
"(make-struct-field-accessor -ref_41 0 'id)"
"(make-struct-field-accessor -ref_41 1 'sym)"
"(make-struct-field-accessor -ref_41 2 'value)"
"(make-struct-field-accessor -ref_41 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_74)"
"(lambda(parent-ctx3_75 add-scope?4_76 parent-ctx5_77 add-scope?6_78)"
"(let-values(((parent-ctx_79)(if parent-ctx5_77 parent-ctx3_75 #f)))"
"(let-values(((add-scope?_80)(if add-scope?6_78 add-scope?4_76 #t)))"
"(let-values()"
"(let-values(((ctx_81)"
"(let-values(((temp38_85) 'syntax-local-make-definition-context))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp38_85 #t)"
"(get-current-expand-context8.1 temp38_85)))))"
"(let-values(((frame-id_82)"
"(let-values(((or-part_86)(root-expand-context-frame-id ctx_81)))"
"(if or-part_86 or-part_86(gensym)))))"
"(let-values(((sc_83)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_84)(expand-context-def-ctx-scopes ctx_81)))"
"(begin"
"(if def-ctx-scopes_84"
"(let-values()(set-box! def-ctx-scopes_84(cons sc_83(unbox def-ctx-scopes_84))))"
"(void))"
"(internal-definition-context1.1 frame-id_82 sc_83 add-scope?_80(box null)))))))))))))"
"(case-lambda"
"(()(syntax-local-make-definition-context7_74 #f #f #f #f))"
"((parent-ctx_87 add-scope?4_88)(syntax-local-make-definition-context7_74 parent-ctx_87 add-scope?4_88 #t #t))"
"((parent-ctx3_89)(syntax-local-make-definition-context7_74 parent-ctx3_89 #f #t #f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_90 s_91 intdef_92)"
"(let-values((()"
"(begin"
"(if(if(list? ids_90)(andmap2 identifier? ids_90) #f)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(listof identifier?)\" ids_90)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_100)(not s_91)))(if or-part_100 or-part_100(syntax?$1 s_91)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(or/c syntax? #f)\" s_91)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_92)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                             \"internal-definition-context?\""
" intdef_92)))"
"(values))))"
"(let-values(((ctx_93)"
"(let-values(((temp39_101) 'local-expand))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp39_101 #t)"
"(get-current-expand-context8.1 temp39_101)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_102)(expand-context-observer ctx_93)))"
"(if obs_102"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_102 'local-bind ids_90))(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_94)(expand-context-phase ctx_93)))"
"(let-values(((intdef-env_95)(add-intdef-bindings(expand-context-env ctx_93) intdef_92)))"
"(let-values(((intdef-ids_96)"
"(alt-reverse"
"(let-values(((lst_103) ids_90))"
"(begin"
"(if(list? lst_103)(void)(let-values()(in-list lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(fold-var_105 lst_106)"
"(if(pair? lst_106)"
"(let-values(((id_107)(unsafe-car lst_106)))"
"(if #t"
"(let-values(((fold-var_108)"
"(let-values(((fold-var_109) fold-var_105))"
"(let-values(((fold-var_110)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_111)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_107"
" ctx_93)"
" ctx_93)))"
"(let-values(((...finition-context.rkt:65:23_112)"
" add-intdef-scopes23.1)"
"((pre-id40_113)"
" pre-id_111)"
"((intdef41_114)"
" intdef_92)"
"((temp42_115)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp42_115"
" #t"
" pre-id40_113"
" intdef41_114)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:65:23_112"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list"
" temp42_115)"
" pre-id40_113"
" intdef41_114)))))"
" fold-var_109))))"
"(values fold-var_110)))))"
"(if #t"
"(for-loop_104 fold-var_108(unsafe-cdr lst_106))"
" fold-var_108))"
" fold-var_105))"
" fold-var_105))))"
" for-loop_104)"
" null"
" lst_103))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_116)(expand-context-observer ctx_93)))"
"(if obs_116"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_116 'rename-list intdef-ids_96))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((syms_97)"
"(alt-reverse"
"(let-values(((lst_117) intdef-ids_96))"
"(begin"
"(if(list? lst_117)(void)(let-values()(in-list lst_117)))"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_119 lst_120)"
"(if(pair? lst_120)"
"(let-values(((intdef-id_121)(unsafe-car lst_120)))"
"(if #t"
"(let-values(((fold-var_122)"
"(let-values(((fold-var_123)"
" fold-var_119))"
"(let-values(((fold-var_124)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...finition-context.rkt:68:17_125)"
" add-local-binding!35.1)"
"((intdef-id43_126)"
" intdef-id_121)"
"((phase44_127)"
" phase_94)"
"((temp45_128)"
"(root-expand-context-counter"
" ctx_93))"
"((temp46_129)"
"(internal-definition-context-frame-id"
" intdef_92)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" temp46_129"
" #t"
" #f"
" #f"
" intdef-id43_126"
" phase44_127"
" temp45_128)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:68:17_125"
" keyword-procedure-extract"
" '(#:frame-id)"
" 5)"
" '(#:frame-id)"
"(list"
" temp46_129)"
" intdef-id43_126"
" phase44_127"
" temp45_128))))"
" fold-var_123))))"
"(values fold-var_124)))))"
"(if #t"
"(for-loop_118 fold-var_122(unsafe-cdr lst_120))"
" fold-var_122))"
" fold-var_119))"
" fold-var_119))))"
" for-loop_118)"
" null"
" lst_117))))))"
"(let-values(((vals_98)"
"(if s_91"
"(let-values()"
"(let-values(((input-s_130)"
"(flip-introduction-scopes"
"(let-values(((...finition-context.rkt:73:48_132)"
" add-intdef-scopes23.1)"
"((s47_133) s_91)"
"((intdef48_134) intdef_92)"
"((temp49_135) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp49_135"
" #t"
" s47_133"
" intdef48_134)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:73:48_132"
" keyword-procedure-extract"
" '(#:always?)"
" 4)"
" '(#:always?)"
"(list temp49_135)"
" s47_133"
" intdef48_134)))"
" ctx_93)))"
"(let-values(((tmp-env_131)"
"(let-values(((lst_136) syms_97))"
"(begin"
"(if(list? lst_136)"
"(void)"
"(let-values()(in-list lst_136)))"
"((letrec-values(((for-loop_137)"
"(lambda(env_138 lst_139)"
"(if(pair? lst_139)"
"(let-values(((sym_140)"
"(unsafe-car lst_139)))"
"(if #t"
"(let-values(((env_141)"
"(let-values(((env_142)"
" env_138))"
"(let-values(((env_143)"
"(let-values()"
"(hash-set"
" env_142"
" sym_140"
" variable))))"
"(values"
" env_143)))))"
"(if #t"
"(for-loop_137"
" env_141"
"(unsafe-cdr lst_139))"
" env_141))"
" env_138))"
" env_138))))"
" for-loop_137)"
" intdef-env_95"
" lst_136)))))"
"(eval-for-syntaxes-binding"
" input-s_130"
" ids_90"
"(let-values(((...finition-context.rkt:78:33_144)"
" make-local-expand-context35.1)"
"((temp50_145)"
"(let-values(((the-struct_148) ctx_93))"
"(if(expand-context? the-struct_148)"
"(let-values(((env53_149) tmp-env_131))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_148)"
"(root-expand-context-post-expansion-scope"
" the-struct_148)"
"(root-expand-context-top-level-bind-scope"
" the-struct_148)"
"(root-expand-context-all-scopes-stx the-struct_148)"
"(root-expand-context-use-site-scopes the-struct_148)"
"(root-expand-context-defined-syms the-struct_148)"
"(root-expand-context-frame-id the-struct_148)"
"(root-expand-context-counter the-struct_148)"
"(root-expand-context-lift-key the-struct_148)"
"(expand-context-context the-struct_148)"
"(expand-context-phase the-struct_148)"
"(expand-context-namespace the-struct_148)"
" env53_149"
"(expand-context-post-expansion-scope-action"
" the-struct_148)"
"(expand-context-scopes the-struct_148)"
"(expand-context-def-ctx-scopes the-struct_148)"
"(expand-context-reference-records the-struct_148)"
"(expand-context-only-immediate? the-struct_148)"
"(expand-context-just-once? the-struct_148)"
"(expand-context-module-begin-k the-struct_148)"
"(expand-context-need-eventually-defined"
" the-struct_148)"
"(expand-context-allow-unbound? the-struct_148)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_148)"
"(expand-context-stops the-struct_148)"
"(expand-context-current-introduction-scopes"
" the-struct_148)"
"(expand-context-declared-submodule-names"
" the-struct_148)"
"(expand-context-lifts the-struct_148)"
"(expand-context-lift-envs the-struct_148)"
"(expand-context-module-lifts the-struct_148)"
"(expand-context-require-lifts the-struct_148)"
"(expand-context-to-module-lifts the-struct_148)"
"(expand-context-requires+provides the-struct_148)"
"(expand-context-name the-struct_148)"
"(expand-context-observer the-struct_148)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_148))))"
"((temp51_146) 'expression)"
"((intdef52_147) intdef_92))"
"(if(variable-reference-constant?"
"(#%variable-reference make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" temp51_146"
" intdef52_147"
" #f"
" #f"
" #f"
" #f"
" temp50_145)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:78:33_144"
" keyword-procedure-extract"
" '(#:context #:intdefs)"
" 3)"
" '(#:context #:intdefs)"
"(list temp51_146 intdef52_147)"
" temp50_145)))))))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_150) ids_90))"
"(begin"
"(if(list? lst_150)(void)(let-values()(in-list lst_150)))"
"((letrec-values(((for-loop_151)"
"(lambda(fold-var_152 lst_153)"
"(if(pair? lst_153)"
"(let-values(((id_154)(unsafe-car lst_153)))"
"(if #t"
"(let-values(((fold-var_155)"
"(let-values(((fold-var_156)"
" fold-var_152))"
"(let-values(((fold-var_157)"
"(let-values()"
"(cons"
"(let-values()"
" variable)"
" fold-var_156))))"
"(values fold-var_157)))))"
"(if #t"
"(for-loop_151"
" fold-var_155"
"(unsafe-cdr lst_153))"
" fold-var_155))"
" fold-var_152))"
" fold-var_152))))"
" for-loop_151)"
" null"
" lst_150))))))))"
"(let-values(((env-mixins_99)(internal-definition-context-env-mixins intdef_92)))"
"(begin"
"(set-box!"
" env-mixins_99"
"(append"
"(alt-reverse"
"(let-values(((lst_158) intdef-ids_96)((lst_159) syms_97)((lst_160) vals_98))"
"(begin"
"(if(list? lst_158)(void)(let-values()(in-list lst_158)))"
"(if(list? lst_159)(void)(let-values()(in-list lst_159)))"
"(if(list? lst_160)(void)(let-values()(in-list lst_160)))"
"((letrec-values(((for-loop_161)"
"(lambda(fold-var_162 lst_163 lst_164 lst_165)"
"(if(if(pair? lst_163)"
"(if(pair? lst_164)(pair? lst_165) #f)"
" #f)"
"(let-values(((intdef-id_166)(unsafe-car lst_163))"
"((sym_167)(unsafe-car lst_164))"
"((val_168)(unsafe-car lst_165)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_169)"
"(let-values(((fold-var_170) fold-var_162))"
"(let-values(((fold-var_171)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_168"
" intdef-id_166"
" phase_94)"
"(env-mixin2.1"
" intdef-id_166"
" sym_167"
" val_168"
"(make-weak-hasheq))))"
" fold-var_170))))"
"(values fold-var_171)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_161"
" fold-var_169"
"(unsafe-cdr lst_163)"
"(unsafe-cdr lst_164)"
"(unsafe-cdr lst_165))"
" fold-var_169))"
" fold-var_162))"
" fold-var_162))))"
" for-loop_161)"
" null"
" lst_158"
" lst_159"
" lst_160))))"
"(unbox env-mixins_99)))"
"(let-values(((obs_172)(expand-context-observer ctx_93)))"
"(if obs_172"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_172 'exit-local-bind))(void)))"
"(void))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_173)"
"(begin"
"(if(1/internal-definition-context? intdef_173)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"           \"internal-definition-context?\""
" intdef_173)))"
"(alt-reverse"
"(let-values(((lst_174)(unbox(internal-definition-context-env-mixins intdef_173))))"
"(begin"
"(if(list? lst_174)(void)(let-values()(in-list lst_174)))"
"((letrec-values(((for-loop_175)"
"(lambda(fold-var_176 lst_177)"
"(if(pair? lst_177)"
"(let-values(((env-mixin_178)(unsafe-car lst_177)))"
"(if #t"
"(let-values(((fold-var_179)"
"(let-values(((fold-var_180) fold-var_176))"
"(let-values(((fold-var_181)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_178))"
" fold-var_180))))"
"(values fold-var_181)))))"
"(if #t(for-loop_175 fold-var_179(unsafe-cdr lst_177)) fold-var_179))"
" fold-var_176))"
" fold-var_176))))"
" for-loop_175)"
" null"
" lst_174)))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_182)"
"(lambda(intdef11_183 s12_184 mode9_185 mode10_186)"
"(let-values(((intdef_187) intdef11_183))"
"(let-values(((s_188) s12_184))"
"(let-values(((mode_189)(if mode10_186 mode9_185 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_187)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                 \"internal-definition-context?\""
" intdef_187)))"
"(if(syntax?$1 s_188)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_188)))"
"(let-values(((...finition-context.rkt:106:2_190) add-intdef-scopes23.1)"
"((s54_191) s_188)"
"((intdef55_192) intdef_187)"
"((temp56_193)"
"(let-values(((tmp_194) mode_189))"
"(if(equal? tmp_194 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_194 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_194 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
"                                                     \"(or/c 'add 'remove 'flip)\""
" mode_189))))))))"
"(if(variable-reference-constant?(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 temp56_193 #t #f #f s54_191 intdef55_192)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...finition-context.rkt:106:2_190"
" keyword-procedure-extract"
" '(#:action)"
" 4)"
" '(#:action)"
"(list temp56_193)"
" s54_191"
" intdef55_192)))))))))))"
"(case-lambda"
"((intdef_195 s_196)(internal-definition-context-introduce13_182 intdef_195 s_196 #f #f))"
"((intdef_197 s_198 mode9_199)(internal-definition-context-introduce13_182 intdef_197 s_198 mode9_199 #t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_200)"
"(begin"
"(if(1/internal-definition-context? intdef_200)"
"(void)"
"(let-values()"
"          (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_200)))"
"(void))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_201 intdef_202)"
"(begin"
"(if(identifier? id_201)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_201)))"
"(if(let-values(((or-part_203)(1/internal-definition-context? intdef_202)))"
"(if or-part_203 or-part_203(if(list? intdef_202)(andmap2 1/internal-definition-context? intdef_202) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"           \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_202)))"
"(let-values(((pos->vals_204 pos-next_205 init_206 pos-cont?_207 val-cont?_208 all-cont?_209)"
"(make-sequence '(intdef)(in-intdefs intdef_202))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_210)"
"(lambda(id_211 pos_212)"
"(if(if pos-cont?_207(pos-cont?_207 pos_212) #t)"
"(let-values(((intdef_213)(pos->vals_204 pos_212)))"
"(if(if val-cont?_208(val-cont?_208 intdef_213) #t)"
"(let-values(((id_214)"
"(let-values(((id_215) id_211))"
"(let-values(((id_216)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_213"
" id_215"
" 'remove))))"
"(values id_216)))))"
"(if(if all-cont?_209(all-cont?_209 pos_212 intdef_213) #t)"
"(for-loop_210 id_214(pos-next_205 pos_212))"
" id_214))"
" id_211))"
" id_211))))"
" for-loop_210)"
" id_201"
" init_206))))))"
"(define-values"
"(in-intdefs)"
"(lambda(intdefs_217)"
"(if(not intdefs_217)"
"(let-values()(in-list null))"
"(if(list? intdefs_217)"
"(let-values()(in-list(alt-reverse intdefs_217)))"
"(let-values()(in-value intdefs_217))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_218 intdefs_219)"
"(let-values(((pos->vals_220 pos-next_221 init_222 pos-cont?_223 val-cont?_224 all-cont?_225)"
"(make-sequence '(intdef)(in-intdefs intdefs_219))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_226)"
"(lambda(env_227 pos_228)"
"(if(if pos-cont?_223(pos-cont?_223 pos_228) #t)"
"(let-values(((intdef_229)(pos->vals_220 pos_228)))"
"(if(if val-cont?_224(val-cont?_224 intdef_229) #t)"
"(let-values(((env_230)"
"(let-values(((env_231) env_227))"
"(let-values(((env_232)"
"(let-values()"
"(let-values(((env-mixins_233)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_229))))"
"((letrec-values(((loop_234)"
"(lambda(env_235 env-mixins_236)"
"(if(null? env-mixins_236)"
"(let-values() env_235)"
"(let-values()"
"(let-values(((env-mixin_237)"
"(car"
" env-mixins_236)))"
"(let-values(((or-part_238)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_237)"
" env_235"
" #f)))"
"(if or-part_238"
" or-part_238"
"(let-values(((new-env_239)"
"(env-extend"
"(loop_234"
" env_235"
"(cdr"
" env-mixins_236))"
"(env-mixin-sym"
" env-mixin_237)"
"(env-mixin-value"
" env-mixin_237))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_237)"
" env_235"
" new-env_239)"
" new-env_239))))))))))"
" loop_234)"
" env_231"
" env-mixins_233)))))"
"(values env_232)))))"
"(if(if all-cont?_225(all-cont?_225 pos_228 intdef_229) #t)"
"(for-loop_226 env_230(pos-next_221 pos_228))"
" env_230))"
" env_227))"
" env_227))))"
" for-loop_226)"
" env_218"
" init_222)))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_240 action18_241 always?15_242 always?17_243 s19_244 intdefs20_245)"
"(let-values(((s_246) s19_244))"
"(let-values(((intdefs_247) intdefs20_245))"
"(let-values(((always?_248)(if always?17_243 always?15_242 #f)))"
"(let-values(((action_249)(if action18_241 action16_240 add-scope)))"
"(let-values()"
"(let-values(((pos->vals_250 pos-next_251 init_252 pos-cont?_253 val-cont?_254 all-cont?_255)"
"(make-sequence '(intdef)(in-intdefs intdefs_247))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_256)"
"(lambda(s_257 pos_258)"
"(if(if pos-cont?_253(pos-cont?_253 pos_258) #t)"
"(let-values(((intdef_259)(pos->vals_250 pos_258)))"
"(if(if val-cont?_254(val-cont?_254 intdef_259) #t)"
"(let-values(((s_260)"
"(let-values(((s_261) s_257))"
"(if(let-values(((or-part_262) always?_248))"
"(if or-part_262"
" or-part_262"
"(internal-definition-context-add-scope?"
" intdef_259)))"
"(let-values(((s_263) s_261))"
"(let-values(((s_264)"
"(let-values()"
"(action_249"
" s_263"
"(internal-definition-context-scope"
" intdef_259)))))"
"(values s_264)))"
" s_261))))"
"(if(if all-cont?_255(all-cont?_255 pos_258 intdef_259) #t)"
"(for-loop_256 s_260(pos-next_251 pos_258))"
" s_260))"
" s_257))"
" s_257))))"
" for-loop_256)"
" s_246"
" init_252))))))))))"
"(define-values"
"(unpack22.1)"
"(lambda(given-kws_265 given-args_266 s19_267 intdefs20_268)"
"(let-values(((action18_269)(if(pair? given-kws_265)(eq? '#:action(car given-kws_265)) #f)))"
"(let-values(((action16_270)(if action18_269(car given-args_266)(void)))"
"((given-kws_271)(if action18_269(cdr given-kws_265) given-kws_265))"
"((given-args_272)(if action18_269(cdr given-args_266) given-args_266)))"
"(let-values(((always?17_273)(pair? given-kws_271)))"
"(let-values(((always?15_274)(if always?17_273(car given-args_272)(void))))"
"(add-intdef-scopes21.1 action16_270 action18_269 always?15_274 always?17_273 s19_267 intdefs20_268)))))))"
"(define-values"
"(add-intdef-scopes23.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_275 given-argc_276)"
"(if(= given-argc_276 4)"
"(let-values(((l1_277) given-kws_275))"
"(let-values(((l1_278)(if(null? l1_277) l1_277(if(eq?(car l1_277) '#:action)(cdr l1_277) l1_277))))"
"(let-values(((l1_279) l1_278))"
"(let-values(((l1_280)(if(null? l1_279) l1_279(if(eq?(car l1_279) '#:always?)(cdr l1_279) l1_279))))"
"(null? l1_280)))))"
" #f))"
"(case-lambda"
"((given-kws_281 given-args_282 s_283 intdefs_284)(unpack22.1 given-kws_281 given-args_282 s_283 intdefs_284)))"
" null"
" '(#:action #:always?)"
"(let-values(((add-intdef-scopes_285)(case-lambda((s_286 intdefs_287)(unpack22.1 null null s_286 intdefs_287)))))"
" add-intdef-scopes_285)))"
"(define-values"
"(lifted/1.1$20)"
"(make-required"
" 'make-local-expand-context"
"(case-lambda((self_288 ctx_289)(apply missing-kw self_288 ctx_289 null)))"
" #f"
" #f))"
"(define-values"
"(make-local-expand-context33.1)"
"(lambda(context24_290 intdefs26_291 phase25_292 phase29_293 stop-ids27_294 stop-ids31_295 ctx32_296)"
"(let-values(((ctx_297) ctx32_296))"
"(let-values(((context_298) context24_290))"
"(let-values(((phase_299)(if phase29_293 phase25_292(expand-context-phase ctx_297))))"
"(let-values(((intdefs_300) intdefs26_291))"
"(let-values(((stop-ids_301)(if stop-ids31_295 stop-ids27_294 #f)))"
"(let-values()"
"(let-values(((same-kind?_302)"
"(let-values(((or-part_304)(eq? context_298(expand-context-context ctx_297))))"
"(if or-part_304"
" or-part_304"
"(if(list? context_298)(list?(expand-context-context ctx_297)) #f)))))"
"(let-values(((all-stop-ids_303)"
"(if stop-ids_301(stop-ids->all-stop-ids stop-ids_301 phase_299) #f)))"
"(let-values(((the-struct_305) ctx_297))"
"(if(expand-context? the-struct_305)"
"(let-values(((context57_306) context_298)"
"((env58_307)(add-intdef-bindings(expand-context-env ctx_297) intdefs_300))"
"((use-site-scopes59_308)"
"(if(let-values(((or-part_319)(eq? context_298 'module)))"
"(if or-part_319 or-part_319(list? context_298)))"
"(let-values(((or-part_320)(root-expand-context-use-site-scopes ctx_297)))"
"(if or-part_320 or-part_320(box null)))"
" #f))"
"((frame-id60_309)"
"(if same-kind?_302"
"(let-values()(root-expand-context-frame-id ctx_297))"
"(if(pair? intdefs_300)"
"(let-values()(internal-definition-context-frame-id(car intdefs_300)))"
"(let-values() #f))))"
"((post-expansion-scope61_310)"
"(if intdefs_300"
"(new-scope 'macro)"
"(if same-kind?_302"
"(if(memq context_298 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_297)"
" #f)"
" #f)))"
"((post-expansion-scope-action62_311)"
"(if intdefs_300"
"(lambda(s_321 placeholder-sc_322)"
"(let-values(((s70_323) s_321)((intdefs71_324) intdefs_300))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 #f #f #f #f s70_323 intdefs71_324)"
"(add-intdef-scopes23.1 s70_323 intdefs71_324))))"
"(expand-context-post-expansion-scope-action ctx_297)))"
"((scopes63_312)"
"(append"
"(if(expand-context-def-ctx-scopes ctx_297)"
"(unbox(expand-context-def-ctx-scopes ctx_297))"
" null)"
"(expand-context-scopes ctx_297)))"
"((only-immediate?64_313)(not stop-ids_301))"
"((just-once?65_314) #f)"
"((preserve-#%expression-and-do-not-add-#%top?66_315) #t)"
"((stops67_316)"
"(free-id-set"
" phase_299"
"(let-values(((or-part_325) all-stop-ids_303))"
"(if or-part_325 or-part_325 null))))"
"((current-introduction-scopes68_317) null)"
"((all-scopes-stx69_318)"
"(let-values(((temp72_326)(root-expand-context-all-scopes-stx ctx_297))"
"((intdefs73_327) intdefs_300))"
"(if(variable-reference-constant?(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 #f #f #f #f temp72_326 intdefs73_327)"
"(add-intdef-scopes23.1 temp72_326 intdefs73_327)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_305)"
" post-expansion-scope61_310"
"(root-expand-context-top-level-bind-scope the-struct_305)"
" all-scopes-stx69_318"
" use-site-scopes59_308"
"(root-expand-context-defined-syms the-struct_305)"
" frame-id60_309"
"(root-expand-context-counter the-struct_305)"
"(root-expand-context-lift-key the-struct_305)"
" context57_306"
"(expand-context-phase the-struct_305)"
"(expand-context-namespace the-struct_305)"
" env58_307"
" post-expansion-scope-action62_311"
" scopes63_312"
"(expand-context-def-ctx-scopes the-struct_305)"
"(expand-context-reference-records the-struct_305)"
" only-immediate?64_313"
" just-once?65_314"
"(expand-context-module-begin-k the-struct_305)"
"(expand-context-need-eventually-defined the-struct_305)"
"(expand-context-allow-unbound? the-struct_305)"
" preserve-#%expression-and-do-not-add-#%top?66_315"
" stops67_316"
" current-introduction-scopes68_317"
"(expand-context-declared-submodule-names the-struct_305)"
"(expand-context-lifts the-struct_305)"
"(expand-context-lift-envs the-struct_305)"
"(expand-context-module-lifts the-struct_305)"
"(expand-context-require-lifts the-struct_305)"
"(expand-context-to-module-lifts the-struct_305)"
"(expand-context-requires+provides the-struct_305)"
"(expand-context-name the-struct_305)"
"(expand-context-observer the-struct_305)))"
"                        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_305)))))))))))))"
"(define-values"
"(unpack34.1)"
"(lambda(given-kws_328 given-args_329 ctx32_330)"
"(let-values(((context24_331)(car given-args_329))"
"((given-kws_332)(cdr given-kws_328))"
"((given-args_333)(cdr given-args_329)))"
"(let-values(((intdefs26_334)(car given-args_333))"
"((given-kws_335)(cdr given-kws_332))"
"((given-args_336)(cdr given-args_333)))"
"(let-values(((phase29_337)(if(pair? given-kws_335)(eq? '#:phase(car given-kws_335)) #f)))"
"(let-values(((phase25_338)(if phase29_337(car given-args_336)(void)))"
"((given-kws_339)(if phase29_337(cdr given-kws_335) given-kws_335))"
"((given-args_340)(if phase29_337(cdr given-args_336) given-args_336)))"
"(let-values(((stop-ids31_341)(pair? given-kws_339)))"
"(let-values(((stop-ids27_342)(if stop-ids31_341(car given-args_340)(void))))"
"(make-local-expand-context33.1"
" context24_331"
" intdefs26_334"
" phase25_338"
" phase29_337"
" stop-ids27_342"
" stop-ids31_341"
" ctx32_330)))))))))"
"(define-values"
"(make-local-expand-context35.1)"
"(lifted/1.1$20"
"(lambda(given-kws_343 given-argc_344)"
"(if(= given-argc_344 3)"
"(subsets? '(#:context #:intdefs) given-kws_343 '(#:context #:intdefs #:phase #:stop-ids))"
" #f))"
"(case-lambda((given-kws_345 given-args_346 ctx_347)(unpack34.1 given-kws_345 given-args_346 ctx_347)))"
" '(#:context #:intdefs)"
" '(#:context #:intdefs #:phase #:stop-ids)))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_348 ctx_349)(flip-scopes s_348(expand-context-current-introduction-scopes ctx_349))))"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()"
"(if(let-values(((...and/syntax-local.rkt:63:7_3) get-current-expand-context8.1)((temp60_4) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp60_4 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:63:7_3"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp60_4))))"
" #t"
" #f)))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(let-values(((ctx_5)"
"(let-values(((...and/syntax-local.rkt:66:14_6) get-current-expand-context8.1)((temp61_7) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp61_7 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:66:14_6"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp61_7))))))"
"(if ctx_5(if(expand-context-lifts ctx_5) #t #f) #f))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(let-values(((ctx_8)"
"(let-values(((...and/syntax-local.rkt:72:14_9) get-current-expand-context8.1)((temp62_10) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp62_10 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:72:14_9"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp62_10))))))"
"(if ctx_8(if(expand-context-to-module-lifts ctx_8) #t #f) #f))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(let-values(((ctx_11)"
"(let-values(((...and/syntax-local.rkt:78:14_12) get-current-expand-context8.1)((temp63_13) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp63_13 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:78:14_12"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp63_13))))))"
"(if ctx_11(if(expand-context-requires+provides ctx_11) #t #f) #f))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(let-values(((ctx_14)"
"(let-values(((temp64_15) 'syntax-local-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp64_15 #t)"
"(get-current-expand-context8.1 temp64_15)))))"
"(expand-context-context ctx_14))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_16)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_16)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_16)))"
"(values))))"
"(let-values(((ctx_17)"
"(let-values(((temp65_18) 'syntax-local-introduce))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp65_18 #t)"
"(get-current-expand-context8.1 temp65_18)))))"
"(flip-introduction-scopes s_16 ctx_17)))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_19)"
"(let-values((()"
"(begin"
"(if(identifier? id_19)"
"(void)"
"                      (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding \"identifier?\" id_19)))"
"(values))))"
"(let-values(((ctx_20)"
"(let-values(((temp66_21) 'syntax-local-identifier-as-binding))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp66_21 #t)"
"(get-current-expand-context8.1 temp66_21)))))"
"(remove-use-site-scopes id_19 ctx_20)))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(let-values(((ctx_22)"
"(let-values(((...and/syntax-local.rkt:100:14_23) get-current-expand-context8.1)((temp67_24) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp67_24 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:100:14_23"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp67_24))))))"
"(if ctx_22(expand-context-phase ctx_22) 0))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(let-values(((ctx_25)"
"(let-values(((temp68_27) 'syntax-local-name))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp68_27 #t)"
"(get-current-expand-context8.1 temp68_27)))))"
"(let-values(((id_26)(expand-context-name ctx_25)))"
"(if id_26(datum->syntax$2 #f(syntax-e$1 id_26) id_26) #f)))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_28)"
"(lambda(as-use-site?1_29 as-use-site?2_30)"
"(let-values(((as-use-site?_31)(if as-use-site?2_30 as-use-site?1_29 #f)))"
"(let-values()"
"(let-values(((sc_32)(new-scope(if as-use-site?_31 'use-site 'macro))))"
"(let-values(((core72_33)"
"(lambda(s71_34 mode69_35 mode70_36)"
"(let-values(((s_37) s71_34))"
"(let-values(((mode_38)(if mode70_36 mode69_35 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_37)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'syntax-introducer \"syntax?\" s_37)))"
"(let-values(((tmp_39) mode_38))"
"(if(equal? tmp_39 'add)"
"(let-values()(add-scope s_37 sc_32))"
"(if(equal? tmp_39 'remove)"
"(let-values()(remove-scope s_37 sc_32))"
"(if(equal? tmp_39 'flip)"
"(let-values()(flip-scope s_37 sc_32))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                           \"(or/c 'add 'remove 'flip)\""
" mode_38)))))))))))))"
"(case-lambda"
"((s_40)(core72_33 s_40 #f #f))"
"((s_41 mode69_42)(core72_33 s_41 mode69_42 #t))))))))))"
"(case-lambda"
"(()(make-syntax-introducer3_28 #f #f))"
"((as-use-site?1_43)(make-syntax-introducer3_28 as-use-site?1_43 #t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_44)"
"(lambda(ext-s7_45 base-s8_46 phase5_47 phase6_48)"
"(let-values(((ext-s_49) ext-s7_45))"
"(let-values(((base-s_50) base-s8_46))"
"(let-values(((phase_51)(if phase6_48 phase5_47(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_49)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'make-syntax-delta-introducer \"syntax?\" ext-s_49)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_56)(syntax?$1 base-s_50)))"
"(if or-part_56 or-part_56(not base-s_50)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                 \"(or/c syntax? #f)\""
" base-s_50)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_51)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_51)))"
"(values))))"
"(let-values(((ext-scs_52)(syntax-scope-set ext-s_49 phase_51)))"
"(let-values(((base-scs_53)"
"(syntax-scope-set"
"(let-values(((or-part_57) base-s_50))"
"(if or-part_57 or-part_57 empty-syntax))"
" phase_51)))"
"(let-values(((delta-scs_54)(set->list(set-subtract ext-scs_52 base-scs_53))))"
"(let-values(((maybe-taint_55)"
"(if(syntax-clean? ext-s_49) values syntax-taint$1)))"
"(let-values(((core77_58)"
"(lambda(s76_59 mode74_60 mode75_61)"
"(let-values(((s_62) s76_59))"
"(let-values(((mode_63)(if mode75_61 mode74_60 'add)))"
"(let-values()"
"(maybe-taint_55"
"(let-values(((tmp_64) mode_63))"
"(if(equal? tmp_64 'add)"
"(let-values()(add-scopes s_62 delta-scs_54))"
"(if(equal? tmp_64 'remove)"
"(let-values()(remove-scopes s_62 delta-scs_54))"
"(if(equal? tmp_64 'flip)"
"(let-values()(flip-scopes s_62 delta-scs_54))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                          \"(or/c 'add 'remove 'flip)\""
" mode_63)))))))))))))"
"(case-lambda"
"((s_65)(core77_58 s_65 #f #f))"
"((s_66 mode74_67)(core77_58 s_66 mode74_67 #t))))))))))))))))))"
"(case-lambda"
"((ext-s_68 base-s_69)(make-syntax-delta-introducer9_44 ext-s_68 base-s_69 #f #f))"
"((ext-s_70 base-s_71 phase5_72)(make-syntax-delta-introducer9_44 ext-s_70 base-s_71 phase5_72 #t)))))"
"(define-values"
"(lifted/1.1$2)"
"(make-required"
" 'do-syntax-local-value"
"(case-lambda"
"((self_73 who_74 id_75 intdef_76 failure-thunk_77)"
"(apply missing-kw self_73 who_74 id_75 intdef_76 failure-thunk_77 null)))"
" #f"
" #f))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_78 who13_79 id14_80 intdef15_81 failure-thunk16_82)"
"(let-values(((who_83) who13_79))"
"(let-values(((id_84) id14_80))"
"(let-values(((intdef_85) intdef15_81))"
"(let-values(((failure-thunk_86) failure-thunk16_82))"
"(let-values(((immediate?_87) immediate?11_78))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_84)"
"(void)"
"                                  (let-values () (raise-argument-error who_83 \"identifier?\" id_84)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_91)(not failure-thunk_86)))"
"(if or-part_91"
" or-part_91"
"(if(procedure? failure-thunk_86)"
"(procedure-arity-includes? failure-thunk_86 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_83"
"                                       \"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_86)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_92)(not intdef_85)))"
"(if or-part_92 or-part_92(1/internal-definition-context? intdef_85)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_83"
"                                         \"(or #f internal-definition-context?)\""
" failure-thunk_86)))"
"(values))))"
"(let-values(((current-ctx_88)"
"(let-values(((who79_93) who_83))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who79_93 #t)"
"(get-current-expand-context8.1 who79_93)))))"
"(let-values(((ctx_89)"
"(if intdef_85"
"(let-values(((the-struct_94) current-ctx_88))"
"(if(expand-context? the-struct_94)"
"(let-values(((env80_95)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_88)"
" intdef_85)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_94)"
"(root-expand-context-post-expansion-scope the-struct_94)"
"(root-expand-context-top-level-bind-scope the-struct_94)"
"(root-expand-context-all-scopes-stx the-struct_94)"
"(root-expand-context-use-site-scopes the-struct_94)"
"(root-expand-context-defined-syms the-struct_94)"
"(root-expand-context-frame-id the-struct_94)"
"(root-expand-context-counter the-struct_94)"
"(root-expand-context-lift-key the-struct_94)"
"(expand-context-context the-struct_94)"
"(expand-context-phase the-struct_94)"
"(expand-context-namespace the-struct_94)"
" env80_95"
"(expand-context-post-expansion-scope-action the-struct_94)"
"(expand-context-scopes the-struct_94)"
"(expand-context-def-ctx-scopes the-struct_94)"
"(expand-context-reference-records the-struct_94)"
"(expand-context-only-immediate? the-struct_94)"
"(expand-context-just-once? the-struct_94)"
"(expand-context-module-begin-k the-struct_94)"
"(expand-context-need-eventually-defined the-struct_94)"
"(expand-context-allow-unbound? the-struct_94)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_94)"
"(expand-context-stops the-struct_94)"
"(expand-context-current-introduction-scopes the-struct_94)"
"(expand-context-declared-submodule-names the-struct_94)"
"(expand-context-lifts the-struct_94)"
"(expand-context-lift-envs the-struct_94)"
"(expand-context-module-lifts the-struct_94)"
"(expand-context-require-lifts the-struct_94)"
"(expand-context-to-module-lifts the-struct_94)"
"(expand-context-requires+provides the-struct_94)"
"(expand-context-name the-struct_94)"
"(expand-context-observer the-struct_94)))"
"                                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_94)))"
" current-ctx_88)))"
"(let-values((()"
"(begin"
"(let-values(((obs_96)(expand-context-observer ctx_89)))"
"(if obs_96"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_96 'local-value id_84))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((phase_90)(expand-context-phase ctx_89)))"
"((letrec-values(((loop_97)"
"(lambda(id_98)"
"(let-values(((b_99)"
"(if immediate?_87"
"(let-values(((...and/syntax-local.rkt:168:18_100)"
" resolve+shift15.1)"
"((id81_101) id_98)"
"((phase82_102) phase_90)"
"((temp83_103) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp83_103"
" #t"
" #f"
" #f"
" id81_101"
" phase82_102)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:168:18_100"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp83_103)"
" id81_101"
" phase82_102)))"
"(resolve+shift/extra-inspector"
" id_98"
" phase_90"
"(expand-context-namespace ctx_89)))))"
"(begin"
"(let-values(((obs_104)(expand-context-observer ctx_89)))"
"(if obs_104"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_104 'resolve id_98))"
"(void)))"
"(void)))"
"(if(not b_99)"
"(let-values()"
"(begin"
"(let-values(((obs_105)(expand-context-observer ctx_89)))"
"(if obs_105"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_105"
" 'local-value-result"
" #f))"
"(void)))"
"(void)))"
"(if failure-thunk_86"
"(failure-thunk_86)"
"(error"
" 'syntax-local-value"
"                                                               \"unbound identifier: ~v\""
" id_98))))"
"(let-values()"
"(let-values(((v_106 insp_107)"
"(let-values(((...and/syntax-local.rkt:178:30_108)"
" lookup17.1)"
"((b84_109) b_99)"
"((ctx85_110) ctx_89)"
"((id86_111) id_98)"
"((temp87_112) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" #f"
" #f"
" temp87_112"
" #t"
" b84_109"
" ctx85_110"
" id86_111)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:178:30_108"
" keyword-procedure-extract"
" '(#:out-of-context-as-variable?)"
" 5)"
" '(#:out-of-context-as-variable?)"
"(list temp87_112)"
" b84_109"
" ctx85_110"
" id86_111)))))"
"(if(let-values(((or-part_113)(variable? v_106)))"
"(if or-part_113 or-part_113(core-form? v_106)))"
"(let-values()"
"(begin"
"(let-values(((obs_114)"
"(expand-context-observer ctx_89)))"
"(if obs_114"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_114"
" 'local-value-result"
" #f))"
"(void)))"
"(void)))"
"(if failure-thunk_86"
"(failure-thunk_86)"
"(error"
" 'syntax-local-value"
"                                                                     \"identifier is not bound to syntax: ~v\""
" id_98))))"
"(let-values()"
"(begin"
"(let-values(((obs_115)"
"(expand-context-observer ctx_89)))"
"(if obs_115"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_115"
" 'local-value-result"
" #t))"
"(void)))"
"(void)))"
"(if(1/rename-transformer? v_106)"
"(let-values()"
"(if immediate?_87"
"(values"
" v_106"
"(1/rename-transformer-target v_106))"
"(loop_97(1/rename-transformer-target v_106))))"
"(if immediate?_87"
"(let-values()(values v_106 #f))"
"(let-values() v_106))))))))))))))"
" loop_97)"
"(flip-introduction-scopes id_84 ctx_89)))))))))))))))))"
"(define-values"
"(unpack18.1$1)"
"(lambda(given-kws_116 given-args_117 who13_118 id14_119 intdef15_120 failure-thunk16_121)"
"(let-values(((immediate?11_122)(car given-args_117)))"
"(do-syntax-local-value17.1 immediate?11_122 who13_118 id14_119 intdef15_120 failure-thunk16_121))))"
"(define-values"
"(do-syntax-local-value19.1)"
"(lifted/1.1$2"
"(lambda(given-kws_123 given-argc_124)"
"(if(= given-argc_124 6)"
"(let-values(((l2_125) given-kws_123))"
"(if(pair? l2_125)(if(eq?(car l2_125) '#:immediate?)(null?(cdr l2_125)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_126 given-args_127 who_128 id_129 intdef_130 failure-thunk_131)"
"(unpack18.1$1 given-kws_126 given-args_127 who_128 id_129 intdef_130 failure-thunk_131)))"
" '(#:immediate?)"
" '(#:immediate?)))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_132)"
"(lambda(id24_133 failure-thunk20_134 intdef21_135 failure-thunk22_136 intdef23_137)"
"(let-values(((id_138) id24_133))"
"(let-values(((failure-thunk_139)(if failure-thunk22_136 failure-thunk20_134 #f)))"
"(let-values(((intdef_140)(if intdef23_137 intdef21_135 #f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:196:2_141) do-syntax-local-value19.1)"
"((temp88_142) 'syntax-local-value)"
"((temp89_143) #f)"
"((id90_144) id_138)"
"((intdef91_145) intdef_140)"
"((failure-thunk92_146) failure-thunk_139))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp89_143"
" temp88_142"
" id90_144"
" intdef91_145"
" failure-thunk92_146)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:196:2_141"
" keyword-procedure-extract"
" '(#:immediate?)"
" 6)"
" '(#:immediate?)"
"(list temp89_143)"
" temp88_142"
" id90_144"
" intdef91_145"
" failure-thunk92_146))))))))))"
"(case-lambda"
"((id_147)(syntax-local-value25_132 id_147 #f #f #f #f))"
"((id_148 failure-thunk_149 intdef21_150)(syntax-local-value25_132 id_148 failure-thunk_149 intdef21_150 #t #t))"
"((id_151 failure-thunk20_152)(syntax-local-value25_132 id_151 failure-thunk20_152 #f #t #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_153)"
"(lambda(id31_154 failure-thunk27_155 intdef28_156 failure-thunk29_157 intdef30_158)"
"(let-values(((id_159) id31_154))"
"(let-values(((failure-thunk_160)(if failure-thunk29_157 failure-thunk27_155 #f)))"
"(let-values(((intdef_161)(if intdef30_158 intdef28_156 #f)))"
"(let-values()"
"(let-values(((...and/syntax-local.rkt:199:2_162) do-syntax-local-value19.1)"
"((temp93_163) 'syntax-local-value/immediate)"
"((temp94_164) #t)"
"((id95_165) id_159)"
"((intdef96_166) intdef_161)"
"((failure-thunk97_167) failure-thunk_160))"
"(if(variable-reference-constant?(#%variable-reference do-syntax-local-value19.1))"
"(do-syntax-local-value17.1"
" temp94_164"
" temp93_163"
" id95_165"
" intdef96_166"
" failure-thunk97_167)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:199:2_162"
" keyword-procedure-extract"
" '(#:immediate?)"
" 6)"
" '(#:immediate?)"
"(list temp94_164)"
" temp93_163"
" id95_165"
" intdef96_166"
" failure-thunk97_167))))))))))"
"(case-lambda"
"((id_168)(syntax-local-value/immediate32_153 id_168 #f #f #f #f))"
"((id_169 failure-thunk_170 intdef28_171)"
"(syntax-local-value/immediate32_153 id_169 failure-thunk_170 intdef28_171 #t #t))"
"((id_172 failure-thunk27_173)(syntax-local-value/immediate32_153 id_172 failure-thunk27_173 #f #t #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_174 n_175 s_176)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_176) (void) (let-values () (raise-argument-error who_174 \"syntax?\" s_176)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_175)"
"(void)"
"                        (let-values () (raise-argument-error who_174 \"exact-nonnegative-integer?\" n_175)))"
"(values))))"
"(let-values(((ctx_177)"
"(let-values(((who98_181) who_174))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who98_181 #t)"
"(get-current-expand-context8.1 who98_181)))))"
"(let-values(((lifts_178)(expand-context-lifts ctx_177)))"
"(let-values(((counter_179)(root-expand-context-counter ctx_177)))"
"(let-values(((ids_180)"
"(alt-reverse"
"(let-values(((start_182) 0)((end_183) n_175)((inc_184) 1))"
"(begin"
"(if(if(real? start_182)(if(real? end_183)(real? inc_184) #f) #f)"
"(void)"
"(let-values()(in-range start_182 end_183 inc_184)))"
"((letrec-values(((for-loop_185)"
"(lambda(fold-var_186 pos_187)"
"(if(< pos_187 end_183)"
"(let-values(((i_188) pos_187))"
"(if #t"
"(let-values(((fold-var_189)"
"(let-values(((fold-var_190) fold-var_186))"
"(let-values(((fold-var_191)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_179"
"(add1"
"(unbox"
" counter_179)))"
"(values))))"
"(let-values(((name_192)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                \"lifted/~a\""
"(unbox"
" counter_179)))))"
"(add-scope"
"(datum->syntax$2"
" #f"
" name_192)"
"(new-scope"
" 'macro)))))"
" fold-var_190))))"
"(values fold-var_191)))))"
"(if #t"
"(for-loop_185 fold-var_189(+ pos_187 inc_184))"
" fold-var_189))"
" fold-var_186))"
" fold-var_186))))"
" for-loop_185)"
" null"
" start_182))))))"
"(begin"
"(let-values(((obs_193)(expand-context-observer ctx_177)))"
"(if obs_193"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_193 'local-lift ids_180 s_176))(void)))"
"(void)))"
"(map2"
"(lambda(id_194)(flip-introduction-scopes id_194 ctx_177))"
"(add-lifted!"
" lifts_178"
" ids_180"
"(flip-introduction-scopes s_176 ctx_177)"
"(expand-context-phase ctx_177))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_195)(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_195))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_196 s_197)(do-lift-values-expression 'syntax-local-lift-values-expression n_196 s_197)))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(let-values(((ctx_198)"
"(let-values(((temp99_199) 'syntax-local-lift-context))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp99_199 #t)"
"(get-current-expand-context8.1 temp99_199)))))"
"(root-expand-context-lift-key ctx_198))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_200)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_200)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_200)))"
"(values))))"
"(let-values(((ctx_201)"
"(let-values(((temp100_203) 'syntax-local-lift-module))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp100_203 #t)"
"(get-current-expand-context8.1 temp100_203)))))"
"(let-values(((phase_202)(expand-context-phase ctx_201)))"
"(begin"
"(let-values(((tmp_204)(core-form-sym s_200 phase_202)))"
"(if(if(equal? tmp_204 'module) #t(equal? tmp_204 'module*))"
"(let-values()(add-lifted-module!(expand-context-module-lifts ctx_201) s_200 phase_202))"
"(let-values()"
"                  (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_200))))"
"(let-values(((obs_205)(expand-context-observer ctx_201)))"
"(if obs_205"
"(let-values()(if #t(let-values()(call-expand-observe obs_205 'lift-statement s_200))(void)))"
"(void)))))))))"
"(define-values"
"(lifted/2.1$9)"
"(make-required"
" 'do-local-lift-to-module"
"(case-lambda((self_206 who_207 s_208)(apply missing-kw self_206 who_207 s_208 null)))"
" #f"
" #f))"
"(define-values"
"(do-local-lift-to-module52.1)"
"(lambda(add-lifted!37_209"
" get-lift-ctx36_210"
" get-wrt-phase38_211"
" intro?34_212"
" intro?42_213"
" more-checks35_214"
" more-checks43_215"
" post-wrap41_216"
" post-wrap49_217"
" pre-wrap39_218"
" pre-wrap47_219"
" shift-wrap40_220"
" shift-wrap48_221"
" who50_222"
" s51_223)"
"(let-values(((who_224) who50_222))"
"(let-values(((s_225) s51_223))"
"(let-values(((intro?_226)(if intro?42_213 intro?34_212 #t)))"
"(let-values(((more-checks_227)(if more-checks43_215 more-checks35_214 void)))"
"(let-values(((get-lift-ctx_228) get-lift-ctx36_210))"
"(let-values(((add-lifted!_229) add-lifted!37_209))"
"(let-values(((get-wrt-phase_230) get-wrt-phase38_211))"
"(let-values(((pre-wrap_231)"
"(if pre-wrap47_219 pre-wrap39_218(lambda(s_232 phase_233 lift-ctx_234) s_232))))"
"(let-values(((shift-wrap_235)"
"(if shift-wrap48_221 shift-wrap40_220(lambda(s_236 phase_237 lift-ctx_238) s_236))))"
"(let-values(((post-wrap_239)"
"(if post-wrap49_217 post-wrap41_216(lambda(s_240 phase_241 lift-ctx_242) s_240))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_225)"
"(void)"
"                                            (let-values () (raise-argument-error who_224 \"syntax?\" s_225)))"
"(values))))"
"(let-values((()(begin(more-checks_227)(values))))"
"(let-values(((ctx_243)"
"(let-values(((who101_251) who_224))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who101_251 #t)"
"(get-current-expand-context8.1 who101_251)))))"
"(let-values(((lift-ctx_244)(get-lift-ctx_228 ctx_243)))"
"(let-values(((phase_245)(expand-context-phase ctx_243)))"
"(let-values(((wrt-phase_246)(get-wrt-phase_230 lift-ctx_244)))"
"(let-values(((added-s_247)"
"(if intro?_226(flip-introduction-scopes s_225 ctx_243) s_225)))"
"(let-values(((pre-s_248)(pre-wrap_231 added-s_247 phase_245 lift-ctx_244)))"
"(let-values(((shift-s_249)"
"(let-values(((start_252) phase_245)"
"((end_253) wrt-phase_246)"
"((inc_254) -1))"
"(begin"
"(if(if(real? start_252)"
"(if(real? end_253)(real? inc_254) #f)"
" #f)"
"(void)"
"(let-values()(in-range start_252 end_253 inc_254)))"
"((letrec-values(((for-loop_255)"
"(lambda(s_256 pos_257)"
"(if(> pos_257 end_253)"
"(let-values(((phase_258) pos_257))"
"(if #t"
"(let-values(((s_259)"
"(let-values(((s_260)"
" s_256))"
"(let-values(((s_261)"
"(let-values()"
"(shift-wrap_235"
" s_260"
"(sub1"
" phase_258)"
" lift-ctx_244))))"
"(values"
" s_261)))))"
"(if #t"
"(for-loop_255"
" s_259"
"(+ pos_257 inc_254))"
" s_259))"
" s_256))"
" s_256))))"
" for-loop_255)"
" pre-s_248"
" start_252)))))"
"(let-values(((post-s_250)"
"(post-wrap_239 shift-s_249 wrt-phase_246 lift-ctx_244)))"
"(begin"
"(add-lifted!_229 lift-ctx_244 post-s_250 wrt-phase_246)"
"(values ctx_243 added-s_247)))))))))))))))))))))))))"
"(define-values"
"(unpack53.1)"
"(lambda(given-kws_262 given-args_263 who50_264 s51_265)"
"(let-values(((add-lifted!37_266)(car given-args_263))"
"((given-kws_267)(cdr given-kws_262))"
"((given-args_268)(cdr given-args_263)))"
"(let-values(((get-lift-ctx36_269)(car given-args_268))"
"((given-kws_270)(cdr given-kws_267))"
"((given-args_271)(cdr given-args_268)))"
"(let-values(((get-wrt-phase38_272)(car given-args_271))"
"((given-kws_273)(cdr given-kws_270))"
"((given-args_274)(cdr given-args_271)))"
"(let-values(((intro?42_275)(if(pair? given-kws_273)(eq? '#:intro?(car given-kws_273)) #f)))"
"(let-values(((intro?34_276)(if intro?42_275(car given-args_274)(void)))"
"((given-kws_277)(if intro?42_275(cdr given-kws_273) given-kws_273))"
"((given-args_278)(if intro?42_275(cdr given-args_274) given-args_274)))"
"(let-values(((more-checks43_279)(if(pair? given-kws_277)(eq? '#:more-checks(car given-kws_277)) #f)))"
"(let-values(((more-checks35_280)(if more-checks43_279(car given-args_278)(void)))"
"((given-kws_281)(if more-checks43_279(cdr given-kws_277) given-kws_277))"
"((given-args_282)(if more-checks43_279(cdr given-args_278) given-args_278)))"
"(let-values(((post-wrap49_283)(if(pair? given-kws_281)(eq? '#:post-wrap(car given-kws_281)) #f)))"
"(let-values(((post-wrap41_284)(if post-wrap49_283(car given-args_282)(void)))"
"((given-kws_285)(if post-wrap49_283(cdr given-kws_281) given-kws_281))"
"((given-args_286)(if post-wrap49_283(cdr given-args_282) given-args_282)))"
"(let-values(((pre-wrap47_287)"
"(if(pair? given-kws_285)(eq? '#:pre-wrap(car given-kws_285)) #f)))"
"(let-values(((pre-wrap39_288)(if pre-wrap47_287(car given-args_286)(void)))"
"((given-kws_289)(if pre-wrap47_287(cdr given-kws_285) given-kws_285))"
"((given-args_290)(if pre-wrap47_287(cdr given-args_286) given-args_286)))"
"(let-values(((shift-wrap48_291)(pair? given-kws_289)))"
"(let-values(((shift-wrap40_292)(if shift-wrap48_291(car given-args_290)(void))))"
"(do-local-lift-to-module52.1"
" add-lifted!37_266"
" get-lift-ctx36_269"
" get-wrt-phase38_272"
" intro?34_276"
" intro?42_275"
" more-checks35_280"
" more-checks43_279"
" post-wrap41_284"
" post-wrap49_283"
" pre-wrap39_288"
" pre-wrap47_287"
" shift-wrap40_292"
" shift-wrap48_291"
" who50_264"
" s51_265))))))))))))))))"
"(define-values"
"(do-local-lift-to-module54.1)"
"(lifted/2.1$9"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 4)"
"(subsets?"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" given-kws_293"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap))"
" #f))"
"(case-lambda((given-kws_295 given-args_296 who_297 s_298)(unpack53.1 given-kws_295 given-args_296 who_297 s_298)))"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:pre-wrap #:shift-wrap)))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_299 use-s_300)"
"(let-values(((sc_301)(new-scope 'macro)))"
"(let-values(((ctx_302 added-s_303)"
"(let-values(((...and/syntax-local.rkt:273:4_305) do-local-lift-to-module54.1)"
"((temp102_306) 'syntax-local-lift-require)"
"((temp103_307)(datum->syntax$2 #f s_299))"
"((temp104_308) #f)"
"((temp105_309)"
"(lambda()"
"(if(syntax?$1 use-s_300)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_300)))))"
"((expand-context-require-lifts106_310) expand-context-require-lifts)"
"((require-lift-context-wrt-phase107_311) require-lift-context-wrt-phase)"
"((add-lifted-require!108_312) add-lifted-require!)"
"((temp109_313)"
"(lambda(s_315 phase_316 require-lift-ctx_317)(require-spec-shift-for-syntax s_315)))"
"((temp110_314)"
"(lambda(s_318 phase_319 require-lift-ctx_320)"
"(wrap-form '#%require(add-scope s_318 sc_301) phase_319))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-require!108_312"
" expand-context-require-lifts106_310"
" require-lift-context-wrt-phase107_311"
" temp104_308"
" #t"
" temp105_309"
" #t"
" temp110_314"
" #t"
" #f"
" #f"
" temp109_313"
" #t"
" temp102_306"
" temp103_307)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:273:4_305"
" keyword-procedure-extract"
" '(#:add-lifted!"
" #:get-lift-ctx"
" #:get-wrt-phase"
" #:intro?"
" #:more-checks"
" #:post-wrap"
" #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:intro? #:more-checks #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-require!108_312"
" expand-context-require-lifts106_310"
" require-lift-context-wrt-phase107_311"
" temp104_308"
" temp105_309"
" temp110_314"
" temp109_313)"
" temp102_306"
" temp103_307)))))"
"(let-values(((result-s_304)(add-scope use-s_300 sc_301)))"
"(begin"
"(let-values(((obs_321)(expand-context-observer ctx_302)))"
"(if obs_321"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_321 'lift-require added-s_303 use-s_300 result-s_304))"
"(void)))"
"(void)))"
" result-s_304))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_322)"
"(let-values(((ctx_323 result-s_324)"
"(let-values(((...and/syntax-local.rkt:296:4_325) do-local-lift-to-module54.1)"
"((temp111_326) 'syntax-local-lift-module-end-declaration)"
"((s112_327) s_322)"
"((expand-context-to-module-lifts113_328) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase114_329) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!115_330) add-lifted-to-module-provide!)"
"((temp116_331)"
"(lambda(s_333 phase_334 to-module-lift-ctx_335)(wrap-form 'for-syntax s_333 #f)))"
"((temp117_332)"
"(lambda(s_336 phase_337 to-module-lift-ctx_338)"
"(wrap-form '#%provide s_336 phase_337))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-provide!115_330"
" expand-context-to-module-lifts113_328"
" to-module-lift-context-wrt-phase114_329"
" #f"
" #f"
" #f"
" #f"
" temp117_332"
" #t"
" #f"
" #f"
" temp116_331"
" #t"
" temp111_326"
" s112_327)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:296:4_325"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:post-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-provide!115_330"
" expand-context-to-module-lifts113_328"
" to-module-lift-context-wrt-phase114_329"
" temp117_332"
" temp116_331)"
" temp111_326"
" s112_327)))))"
"(let-values(((obs_339)(expand-context-observer ctx_323)))"
"(if obs_339"
"(let-values()(if #t(let-values()(call-expand-observe obs_339 'lift-provide result-s_324))(void)))"
"(void))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_340)"
"(let-values(((ctx_341 also-s_342)"
"(let-values(((...and/syntax-local.rkt:311:4_343) do-local-lift-to-module54.1)"
"((temp118_344) 'syntax-local-lift-module-end-declaration)"
"((s119_345) s_340)"
"((expand-context-to-module-lifts120_346) expand-context-to-module-lifts)"
"((temp121_347)(lambda(lift-ctx_351) 0))"
"((add-lifted-to-module-end!122_348) add-lifted-to-module-end!)"
"((temp123_349)"
"(lambda(orig-s_352 phase_353 to-module-lift-ctx_354)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_354)"
"(wrap-form '#%expression orig-s_352 phase_353)"
" orig-s_352)))"
"((temp124_350)"
"(lambda(s_355 phase_356 to-module-lift-ctx_357)"
"(wrap-form 'begin-for-syntax s_355 phase_356))))"
"(if(variable-reference-constant?(#%variable-reference do-local-lift-to-module54.1))"
"(do-local-lift-to-module52.1"
" add-lifted-to-module-end!122_348"
" expand-context-to-module-lifts120_346"
" temp121_347"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp123_349"
" #t"
" temp124_350"
" #t"
" temp118_344"
" s119_345)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/syntax-local.rkt:311:4_343"
" keyword-procedure-extract"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
" 4)"
" '(#:add-lifted! #:get-lift-ctx #:get-wrt-phase #:pre-wrap #:shift-wrap)"
"(list"
" add-lifted-to-module-end!122_348"
" expand-context-to-module-lifts120_346"
" temp121_347"
" temp123_349"
" temp124_350)"
" temp118_344"
" s119_345)))))"
"(let-values(((obs_358)(expand-context-observer ctx_341)))"
"(if obs_358"
"(let-values()(if #t(let-values()(call-expand-observe obs_358 'lift-statement s_340))(void)))"
"(void))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_359 s_360 phase_361)"
"(datum->syntax$2"
" #f"
"(list(datum->syntax$2(if phase_361(syntax-shift-phase-level$1 core-stx phase_361) #f) sym_359) s_360))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                         \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_362)"
"(let-values(((temp125_363) 'syntax-local-module-defined-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp125_363 #t)"
"(get-current-expand-context8.1 temp125_363)))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_362)))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_364 phase-level_365)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_370)(not mod-path_364)))"
"(if or-part_370 or-part_370(1/module-path? mod-path_364)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                         \"(or/c module-path? #f)\""
" mod-path_364)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_371)(eq? phase-level_365 #t)))"
"(if or-part_371 or-part_371(phase? phase-level_365)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                           (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_365)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                             \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_366)"
"(let-values(((temp126_372) 'syntax-local-module-required-identifiers))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp126_372 #t)"
"(get-current-expand-context8.1 temp126_372)))))"
"(let-values(((requires+provides_367)(expand-context-requires+provides ctx_366)))"
"(let-values(((mpi_368)"
"(if mod-path_364"
"(1/module-path-index-join mod-path_364(requires+provides-self requires+provides_367))"
" #f)))"
"(let-values(((requireds_369)"
"(extract-all-module-requires"
" requires+provides_367"
" mpi_368"
"(if(eq? phase-level_365 #t) 'all phase-level_365))))"
"(if requireds_369"
"(alt-reverse"
"(let-values(((ht_373)(requireds->phase-ht requireds_369)))"
"(begin"
"(if((lambda(ht_374)(hash? ht_374)) ht_373)(void)(let-values()(default-in-hash ht_373)))"
"((letrec-values(((for-loop_375)"
"(lambda(fold-var_376 i_377)"
"(if i_377"
"(let-values(((phase_378 ids_379)(hash-iterate-key+value ht_373 i_377)))"
"(if #t"
"(let-values(((fold-var_380)"
"(let-values(((fold-var_381) fold-var_376))"
"(let-values(((fold-var_382)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_378 ids_379))"
" fold-var_381))))"
"(values fold-var_382)))))"
"(if #t"
"(for-loop_375 fold-var_380(hash-iterate-next ht_373 i_377))"
" fold-var_380))"
" fold-var_376))"
" fold-var_376))))"
" for-loop_375)"
" null"
"(hash-iterate-first ht_373)))))"
" #f))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_383)"
"(let-values(((lst_384) requireds_383))"
"(begin"
"(if(list? lst_384)(void)(let-values()(in-list lst_384)))"
"((letrec-values(((for-loop_385)"
"(lambda(ht_386 lst_387)"
"(if(pair? lst_387)"
"(let-values(((r_388)(unsafe-car lst_387)))"
"(if #t"
"(let-values(((ht_389)"
"(let-values(((ht_390) ht_386))"
"(let-values(((ht_391)"
"(let-values()"
"(hash-update"
" ht_390"
"(required-phase r_388)"
"(lambda(l_392)(cons(required-id r_388) l_392))"
" null))))"
"(values ht_391)))))"
"(if #t(for-loop_385 ht_389(unsafe-cdr lst_387)) ht_389))"
" ht_386))"
" ht_386))))"
" for-loop_385)"
"(hasheqv)"
" lst_384)))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_393)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_398)(1/module-path? mod-path_393)))"
"(if or-part_398"
" or-part_398"
"(if(syntax?$1 mod-path_393)(1/module-path?(syntax->datum$1 mod-path_393)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                          \"(or/c module-path?\\n\""
"                          \"      (and/c syntax?\\n\""
"                          \"             (lambda (stx)\\n\""
"                          \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_393)))"
"(values))))"
"(let-values(((ctx_394)"
"(let-values(((temp127_399) 'syntax-local-module-exports))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp127_399 #t)"
"(get-current-expand-context8.1 temp127_399)))))"
"(let-values(((ns_395)(expand-context-namespace ctx_394)))"
"(let-values(((mod-name_396)"
"(resolve-module-path"
"(if(syntax?$1 mod-path_393)(syntax->datum$1 mod-path_393) mod-path_393)"
"(1/module-path-index-resolve(namespace-mpi ns_395)))))"
"(let-values(((m_397)(namespace->module ns_395 mod-name_396)))"
"(begin"
"(if m_397(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports)))"
"(alt-reverse"
"(let-values(((ht_400)(module-provides m_397)))"
"(begin"
"(if((lambda(ht_401)(hash? ht_401)) ht_400)(void)(let-values()(default-in-hash ht_400)))"
"((letrec-values(((for-loop_402)"
"(lambda(fold-var_403 i_404)"
"(if i_404"
"(let-values(((phase_405 syms_406)(hash-iterate-key+value ht_400 i_404)))"
"(if #t"
"(let-values(((fold-var_407)"
"(let-values(((fold-var_408) fold-var_403))"
"(let-values(((fold-var_409)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_405"
"(alt-reverse"
"(let-values(((ht_410) syms_406))"
"(begin"
"(if((lambda(ht_411)"
"(hash? ht_411))"
" ht_410)"
"(void)"
"(let-values()"
"(default-in-hash-keys"
" ht_410)))"
"((letrec-values(((for-loop_412)"
"(lambda(fold-var_413"
" i_414)"
"(if i_414"
"(let-values(((sym_415)"
"(hash-iterate-key"
" ht_410"
" i_414)))"
"(if #t"
"(let-values(((fold-var_416)"
"(let-values(((fold-var_417)"
" fold-var_413))"
"(let-values(((fold-var_418)"
"(let-values()"
"(cons"
"(let-values()"
" sym_415)"
" fold-var_417))))"
"(values"
" fold-var_418)))))"
"(if #t"
"(for-loop_412"
" fold-var_416"
"(hash-iterate-next"
" ht_410"
" i_414))"
" fold-var_416))"
" fold-var_413))"
" fold-var_413))))"
" for-loop_412)"
" null"
"(hash-iterate-first"
" ht_410)))))))"
" fold-var_408))))"
"(values fold-var_409)))))"
"(if #t"
"(for-loop_402 fold-var_407(hash-iterate-next ht_400 i_404))"
" fold-var_407))"
" fold-var_403))"
" fold-var_403))))"
" for-loop_402)"
" null"
"(hash-iterate-first ht_400)))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(let-values(((ctx_419)"
"(let-values(((temp128_421) 'syntax-local-submodules))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp128_421 #t)"
"(get-current-expand-context8.1 temp128_421)))))"
"(let-values(((submods_420)(expand-context-declared-submodule-names ctx_419)))"
"(alt-reverse"
"(let-values(((ht_422)(unbox submods_420)))"
"(begin"
"(if((lambda(ht_423)(hash? ht_423)) ht_422)(void)(let-values()(default-in-hash ht_422)))"
"((letrec-values(((for-loop_424)"
"(lambda(fold-var_425 i_426)"
"(if i_426"
"(let-values(((name_427 kind_428)(hash-iterate-key+value ht_422 i_426)))"
"(if #t"
"(let-values(((fold-var_429)"
"(let-values(((fold-var_430) fold-var_425))"
"(if(eq? kind_428 'module)"
"(let-values(((fold-var_431) fold-var_430))"
"(let-values(((fold-var_432)"
"(let-values()"
"(cons"
"(let-values() name_427)"
" fold-var_431))))"
"(values fold-var_432)))"
" fold-var_430))))"
"(if #t"
"(for-loop_424 fold-var_429(hash-iterate-next ht_422 i_426))"
" fold-var_429))"
" fold-var_425))"
" fold-var_425))))"
" for-loop_424)"
" null"
"(hash-iterate-first ht_422)))))))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower58_433)"
"(lambda(id57_434 only-generated?55_435 only-generated?56_436)"
"(let-values(((id_437) id57_434))"
"(let-values(((only-generated?_438)(if only-generated?56_436 only-generated?55_435 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_437)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'syntax-local-get-shadower \"identifier?\" id_437)))"
"(values))))"
"(let-values(((ctx_439)"
"(let-values(((temp129_441) 'syntax-local-get-shadower))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp129_441 #t)"
"(get-current-expand-context8.1 temp129_441)))))"
"(let-values(((new-id_440)"
"(add-scopes"
" id_437"
"(set->list"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx ctx_439)"
"(expand-context-phase ctx_439))))))"
"(if(syntax-clean? id_437) new-id_440(syntax-taint$1 new-id_440)))))))))))"
"(case-lambda"
"((id_442)(syntax-local-get-shadower58_433 id_442 #f #f))"
"((id_443 only-generated?55_444)(syntax-local-get-shadower58_433 id_443 only-generated?55_444 #t)))))"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_1 srcloc-accessor_2)"
"(lambda(s_3)"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error who_1 \"syntax?\" s_3)))"
"(values))))"
"(let-values(((srcloc_4)(syntax-srcloc s_3)))(if srcloc_4(srcloc-accessor_2 srcloc_4) #f))))))"
"(define-values(syntax-source$1)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(syntax-column$1)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(syntax-position$1)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_5)"
"(let-values(((or-part_6)(if(list? v_5)(if(=(length v_5) 5)(srcloc-vector?(list->vector v_5)) #f) #f)))"
"(if or-part_6 or-part_6(if(vector? v_5)(if(=(vector-length v_5) 5)(srcloc-vector? v_5) #f) #f)))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_7)"
"(if(let-values(((or-part_8)(not(vector-ref v_7 1))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_7 1))))"
"(if(let-values(((or-part_9)(not(vector-ref v_7 2))))"
"(if or-part_9 or-part_9(exact-nonnegative-integer?(vector-ref v_7 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_7 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_7 3))))"
"(let-values(((or-part_11)(not(vector-ref v_7 4))))"
"(if or-part_11 or-part_11(exact-nonnegative-integer?(vector-ref v_7 4))))"
" #f)"
" #f)"
" #f)))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_12)"
"(if(pair? v_12)"
"(let-values()(to-srcloc-stx(list->vector v_12)))"
"(if(vector? v_12)"
"(let-values()"
"(let-values(((the-struct_13) empty-syntax))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((srcloc1_14)"
"(srcloc"
"(vector-ref v_12 0)"
"(vector-ref v_12 1)"
"(vector-ref v_12 2)"
"(vector-ref v_12 3)"
"(vector-ref v_12 4))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-scope-propagations the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
"(syntax-bulk-binding-registry the-struct_13)"
" srcloc1_14"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)"
"(syntax-tamper the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))"
"(let-values() v_12)))))"
"(define-values"
"(host-syntax->syntax)"
"(lambda(v_1)"
"(datum-map"
" v_1"
"(lambda(tail?_2 v_3)"
"(if(1/syntax? v_3)"
"(let-values()"
"(let-values(((e_4)(1/syntax-e v_3)))"
"(if(syntax?$1 e_4)"
"(let-values() e_4)"
"(let-values()"
"(let-values(((s_5)"
"(let-values(((the-struct_7) empty-syntax))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((content1_8)(host-syntax->syntax(1/syntax-e v_3)))"
"((srcloc2_9)"
"(srcloc"
"(1/syntax-source v_3)"
"(syntax-line$1 v_3)"
"(1/syntax-column v_3)"
"(1/syntax-position v_3)"
"(syntax-span$1 v_3)))"
"((props3_10)"
"(let-values(((tmp_11)(1/syntax-property v_3 'paren-shape)))"
"(if(equal? tmp_11 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_11 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content1_8"
"(syntax-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
" srcloc2_9"
" props3_10"
"(syntax-inspector the-struct_7)"
"(syntax-tamper the-struct_7)))"
"                                   (raise-argument-error 'struct-copy \"syntax?\" the-struct_7)))))"
"(let-values(((keys_6)(1/syntax-property-symbol-keys v_3)))"
"(if(null? keys_6)"
"(let-values() s_5)"
"(if(if(null?(cdr keys_6))(eq?(car keys_6) 'paren-shape) #f)"
"(let-values() s_5)"
"(let-values()"
"(let-values(((lst_12) keys_6))"
"(begin"
"(if(list? lst_12)(void)(let-values()(in-list lst_12)))"
"((letrec-values(((for-loop_13)"
"(lambda(s_14 lst_15)"
"(if(pair? lst_15)"
"(let-values(((key_16)(unsafe-car lst_15)))"
"(if #t"
"(let-values(((s_17)"
"(let-values(((s_18) s_14))"
"(let-values(((s_19)"
"(let-values()"
"(syntax-property$1"
" s_18"
" key_16"
"(1/syntax-property v_3 key_16)"
" #t))))"
"(values s_19)))))"
"(if #t(for-loop_13 s_17(unsafe-cdr lst_15)) s_17))"
" s_14))"
" s_14))))"
" for-loop_13)"
" s_5"
" lst_12))))))))))))"
"(let-values() v_3))))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(define-values(read-syntax$1)(lambda(src_1 in_2)(host-syntax->syntax(read-syntax$2 src_1 in_2))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_3 in_4 start_5 readtable_6 graph?_7)"
"(host-syntax->syntax(read-syntax/recursive$2 src_3 in_4 start_5 readtable_6 graph?_7))))"
"(define-values"
"(syntax-e$2)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_1)))"
"(syntax-e$1 s_1))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_2)"
"(begin"
"      (if (syntax?$1 s_2) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_2)))"
"(syntax->datum$1 s_2))))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_3)"
"(lambda(stx-c7_4 s8_5 stx-l1_6 stx-p2_7 ignored3_8 stx-l4_9 stx-p5_10 ignored6_11)"
"(let-values(((stx-c_12) stx-c7_4))"
"(let-values(((s_13) s8_5))"
"(let-values(((stx-l_14)(if stx-l4_9 stx-l1_6 #f)))"
"(let-values(((stx-p_15)(if stx-p5_10 stx-p2_7 #f)))"
"(let-values(((ignored_16)(if ignored6_11 ignored3_8 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_17)(not stx-c_12)))"
"(if or-part_17 or-part_17(syntax?$1 stx-c_12)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_12)))"
"(if(let-values(((or-part_18)(not stx-l_14)))"
"(if or-part_18"
" or-part_18"
"(let-values(((or-part_19)(syntax?$1 stx-l_14)))"
"(if or-part_19 or-part_19(encoded-srcloc? stx-l_14)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                      \"(or #f syntax?\\n\""
"                                      \"       (list/c any/c\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"               (or/c exact-positive-integer? #f)\\n\""
"                                      \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                      \"       (vector/c any/c\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                      \"                 (or/c exact-positive-integer? #f)\\n\""
"                                      \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_14)))"
"(if(let-values(((or-part_20)(not stx-p_15)))"
"(if or-part_20 or-part_20(syntax?$1 stx-p_15)))"
"(void)"
"                                  (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_15)))"
"(datum->syntax$2 stx-c_12 s_13(to-srcloc-stx stx-l_14) stx-p_15)))))))))))"
"(case-lambda"
"((stx-c_21 s_22)(datum->syntax9_3 stx-c_21 s_22 #f #f #f #f #f #f))"
"((stx-c_23 s_24 stx-l_25 stx-p_26 ignored3_27)"
"(datum->syntax9_3 stx-c_23 s_24 stx-l_25 stx-p_26 ignored3_27 #t #t #t))"
"((stx-c_28 s_29 stx-l_30 stx-p2_31)(datum->syntax9_3 stx-c_28 s_29 stx-l_30 stx-p2_31 #f #t #t #f))"
"((stx-c_32 s_33 stx-l1_34)(datum->syntax9_3 stx-c_32 s_33 stx-l1_34 #f #f #t #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_35)"
"(begin"
"      (if (syntax?$1 s_35) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_35)))"
"(syntax->list$1 s_35))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_36)"
"(begin"
"      (if (syntax?$1 s_36) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_36)))"
"(if(syntax-property$1 s_36 original-property-sym)(not(syntax-any-macro-scopes? s_36)) #f))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_37)"
"(lambda(a13_38 b14_39 phase11_40 phase12_41)"
"(let-values(((a_42) a13_38))"
"(let-values(((b_43) b14_39))"
"(let-values(((phase_44)(if phase12_41 phase11_40(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_42)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_42)))"
"(if(identifier? b_43)"
"(void)"
"                              (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_43)))"
"(if(phase? phase_44)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_44)))"
"(bound-identifier=?$1 a_42 b_43 phase_44)))))))))"
"(case-lambda"
"((a_45 b_46)(bound-identifier=?15_37 a_45 b_46 #f #f))"
"((a_47 b_48 phase11_49)(bound-identifier=?15_37 a_47 b_48 phase11_49 #t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_50)"
"(lambda(a21_51 b22_52 a-phase17_53 b-phase18_54 a-phase19_55 b-phase20_56)"
"(let-values(((a_57) a21_51))"
"(let-values(((b_58) b22_52))"
"(let-values(((a-phase_59)(if a-phase19_55 a-phase17_53(1/syntax-local-phase-level))))"
"(let-values(((b-phase_60)(if b-phase20_56 b-phase18_54 a-phase_59)))"
"(let-values()"
"(begin"
"(if(identifier? a_57)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_57)))"
"(if(identifier? b_58)"
"(void)"
"                                (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_58)))"
"(if(phase? a-phase_59)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_59)))"
"(if(phase? b-phase_60)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_60)))"
"(free-identifier=?$1 a_57 b_58 a-phase_59 b-phase_60))))))))))"
"(case-lambda"
"((a_61 b_62)(free-identifier=?23_50 a_61 b_62 #f #f #f #f))"
"((a_63 b_64 a-phase_65 b-phase18_66)(free-identifier=?23_50 a_63 b_64 a-phase_65 b-phase18_66 #t #t))"
"((a_67 b_68 a-phase17_69)(free-identifier=?23_50 a_67 b_68 a-phase17_69 #f #t #f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_70 b_71)"
"(let-values((()"
"(begin"
"(if(identifier? a_70)"
"(void)"
"                      (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_70)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_71)"
"(void)"
"                        (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_71)))"
"(values))))"
"(let-values(((phase_72)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_70 b_71 phase_72 phase_72))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_73 b_74)"
"(let-values((()"
"(begin"
"(if(identifier? a_73)"
"(void)"
"                      (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_73)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_74)"
"(void)"
"                        (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_74)))"
"(values))))"
"(let-values(((phase_75)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_73 b_74 phase_75 phase_75))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_76 b_77)"
"(begin"
"      (if (identifier? a_76) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_76)))"
"      (if (identifier? b_77) (void) (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_77)))"
"(free-identifier=?$1 a_76 b_77 #f #f))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding28_78)"
"(lambda(id27_79 phase25_80 phase26_81)"
"(let-values(((id_82) id27_79))"
"(let-values(((phase_83)(if phase26_81 phase25_80(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_82)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_82)))"
"(if(phase? phase_83)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_83)))"
"(identifier-binding$1 id_82 phase_83))))))))"
"(case-lambda"
"((id_84)(identifier-binding28_78 id_84 #f #f))"
"((id_85 phase25_86)(identifier-binding28_78 id_85 phase25_86 #t)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(lambda(id_87)"
"(begin"
"(if(identifier? id_87)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_87)))"
"(identifier-binding$1 id_87(add1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_88)"
"(begin"
"(if(identifier? id_88)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_88)))"
"(identifier-binding$1 id_88(sub1(1/syntax-local-phase-level))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_89)"
"(begin"
"(if(identifier? id_89)"
"(void)"
"        (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_89)))"
"(identifier-binding$1 id_89 #f))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol33_90)"
"(lambda(id32_91 phase30_92 phase31_93)"
"(let-values(((id_94) id32_91))"
"(let-values(((phase_95)(if phase31_93 phase30_92(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_94)"
"(void)"
"                            (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_94)))"
"(if(phase? phase_95)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_95)))"
"(identifier-binding-symbol$1 id_94 phase_95))))))))"
"(case-lambda"
"((id_96)(identifier-binding-symbol33_90 id_96 #f #f))"
"((id_97 phase30_98)(identifier-binding-symbol33_90 id_97 phase30_98 #t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context38_99)"
"(lambda(id37_100 syms35_101 syms36_102)"
"(let-values(((id_103) id37_100))"
"(let-values(((syms_104)(if syms36_102 syms35_101 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_103)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_103)))"
"(if(if(list? syms_104)(andmap2 symbol? syms_104) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'identifier-prune-lexical-context \"(listof symbol?)\" syms_104)))"
" id_103)))))))"
"(case-lambda"
"((id_105)(identifier-prune-lexical-context38_99 id_105 #f #f))"
"((id_106 syms35_107)(identifier-prune-lexical-context38_99 id_106 syms35_107 #t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info45_108)"
"(lambda(s44_109 phase40_110 all-bindings?41_111 phase42_112 all-bindings?43_113)"
"(let-values(((s_114) s44_109))"
"(let-values(((phase_115)(if phase42_112 phase40_110(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_116)(if all-bindings?43_113 all-bindings?41_111 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_114)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_114)))"
"(if(phase? phase_115)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_115)))"
"(syntax-debug-info$1 s_114 phase_115 all-bindings?_116)))))))))"
"(case-lambda"
"((s_117)(syntax-debug-info45_108 s_117 #f #f #f #f))"
"((s_118 phase_119 all-bindings?41_120)(syntax-debug-info45_108 s_118 phase_119 all-bindings?41_120 #t #t))"
"((s_121 phase40_122)(syntax-debug-info45_108 s_121 phase40_122 #f #t #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_123 phase_124)"
"(begin"
"      (if (syntax?$1 s_123) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_123)))"
"(if(phase? phase_124)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_124)))"
"(syntax-shift-phase-level$1 s_123 phase_124))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_125 old-stx_126 id_127)"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_125)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_125)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_126)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_126)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_127)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_127)))"
"(values))))"
"(let-values(((s_128)(syntax-track-origin$1 new-stx_125 old-stx_126 id_127)))"
"(let-values(((ctx_129)"
"(let-values(((...ander/syntax/api.rkt:185:14_130) get-current-expand-context8.1)"
"((temp65_131) #t))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 temp65_131 #t #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...ander/syntax/api.rkt:185:14_130"
" keyword-procedure-extract"
" '(#:fail-ok?)"
" 2)"
" '(#:fail-ok?)"
"(list temp65_131))))))"
"(begin"
"(if ctx_129"
"(let-values()"
"(let-values(((obs_132)(expand-context-observer ctx_129)))"
"(if obs_132"
"(let-values()(if #t(let-values()(call-expand-observe obs_132 'track-origin s_128))(void)))"
"(void))))"
"(void))"
" s_128))))))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax51_133)"
"(lambda(src47_134 in48_135 src49_136 in50_137)"
"(let-values(((src_138)(if src49_136 src47_134(object-name(current-input-port)))))"
"(let-values(((in_139)(if in50_137 in48_135(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_139)"
"(void)"
"                            (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_139)))"
"(read-syntax$1 src_138 in_139))))))))"
"(case-lambda"
"(()(read-syntax51_133 #f #f #f #f))"
"((src_140 in48_141)(read-syntax51_133 src_140 in48_141 #t #t))"
"((src47_142)(read-syntax51_133 src47_142 #f #t #f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive63_143)"
"(lambda(src53_144"
" in54_145"
" start55_146"
" readtable56_147"
" graph?57_148"
" src58_149"
" in59_150"
" start60_151"
" readtable61_152"
" graph?62_153)"
"(let-values(((src_154)(if src58_149 src53_144(object-name(current-input-port)))))"
"(let-values(((in_155)(if in59_150 in54_145(current-input-port))))"
"(let-values(((start_156)(if start60_151 start55_146 #f)))"
"(let-values(((readtable_157)(if readtable61_152 readtable56_147(current-readtable))))"
"(let-values(((graph?_158)(if graph?62_153 graph?57_148 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_155)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax/recursive \"input-port?\" in_155)))"
"(if(let-values(((or-part_159)(char? start_156)))"
"(if or-part_159 or-part_159(not start_156)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_156)))"
"(if(let-values(((or-part_160)(readtable? readtable_157)))"
"(if or-part_160 or-part_160(not readtable_157)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read-syntax/recursive \"(or/c readtable? #f)\" readtable_157)))"
"(read-syntax/recursive$1 src_154 in_155 start_156 readtable_157 graph?_158)))))))))))"
"(case-lambda"
"(()(read-syntax/recursive63_143 #f #f #f #f #f #f #f #f #f #f))"
"((src_161 in_162 start_163 readtable_164 graph?57_165)"
"(read-syntax/recursive63_143 src_161 in_162 start_163 readtable_164 graph?57_165 #t #t #t #t #t))"
"((src_166 in_167 start_168 readtable56_169)"
"(read-syntax/recursive63_143 src_166 in_167 start_168 readtable56_169 #f #t #t #t #t #f))"
"((src_170 in_171 start55_172)(read-syntax/recursive63_143 src_170 in_171 start55_172 #f #f #t #t #t #f #f))"
"((src_173 in54_174)(read-syntax/recursive63_143 src_173 in54_174 #f #f #f #t #t #f #f #f))"
"((src53_175)(read-syntax/recursive63_143 src53_175 #f #f #f #f #t #f #f #f #f)))))"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_1 evaled-ld-h_2)"
"(lambda(ns_3 phase-shift_4 original-self_5 self_6)"
"(let-values(((root-ctx_7)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1)))))"
"(let-values(((s_8)(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_7))))"
"(let-values((()"
"(begin"
"(let-values(((lst_10) requires_1))"
"(begin"
"(if(list? lst_10)(void)(let-values()(in-list lst_10)))"
"((letrec-values(((for-loop_11)"
"(lambda(fold-var_12 lst_13)"
"(if(pair? lst_13)"
"(let-values(((phase+reqs_14)(unsafe-car lst_13)))"
"(if #t"
"(let-values(((fold-var_15)"
"(let-values(((fold-var_16) fold-var_12))"
"(let-values(((fold-var_17)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_18)"
"(car"
" phase+reqs_14)))"
"(let-values(((lst_19)"
"(cdr"
" phase+reqs_14)))"
"(begin"
"(if(list? lst_19)"
"(void)"
"(let-values()"
"(in-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_21"
" lst_22)"
"(if(pair?"
" lst_22)"
"(let-values(((req_23)"
"(unsafe-car"
" lst_22)))"
"(if #t"
"(let-values(((fold-var_24)"
"(let-values(((fold-var_25)"
" fold-var_21))"
"(let-values(((fold-var_26)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_27)"
"(module-path-index-shift"
" req_23"
" original-self_5"
" self_6)))"
"(let-values(((...val/root-context.rkt:32:8_28)"
" perform-require!55.1)"
"((mpi1_29)"
" mpi_27)"
"((s2_30)"
" s_8)"
"((self3_31)"
" self_6)"
"((s4_32)"
" s_8)"
"((ns5_33)"
" ns_3)"
"((phase-shift6_34)"
" phase-shift_4)"
"((phase-shift7_35)"
" phase-shift_4))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" perform-require!55.1))"
"(perform-require!53.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" phase-shift6_34"
" #f"
" #f"
" phase-shift7_35"
" #f"
" #f"
" #f"
" #f"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...val/root-context.rkt:32:8_28"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:run-phase)"
" 7)"
" '(#:phase-shift"
" #:run-phase)"
"(list"
" phase-shift6_34"
" phase-shift7_35)"
" mpi1_29"
" s2_30"
" self3_31"
" s4_32"
" ns5_33)))))"
"(void)))))"
"(values"
" fold-var_26)))))"
"(if #t"
"(for-loop_20"
" fold-var_24"
"(unsafe-cdr"
" lst_22))"
" fold-var_24))"
" fold-var_21))"
" fold-var_21))))"
" for-loop_20)"
"(void)"
" lst_19)))))"
"(void)))))"
"(values fold-var_17)))))"
"(if #t"
"(for-loop_11 fold-var_15(unsafe-cdr lst_13))"
" fold-var_15))"
" fold-var_12))"
" fold-var_12))))"
" for-loop_11)"
"(void)"
" lst_10)))"
"(values))))"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_7)))"
"(begin"
"(let-values(((ht_36) evaled-ld-h_2))"
"(begin"
"(if((lambda(ht_37)(hash? ht_37)) ht_36)(void)(let-values()(default-in-hash ht_36)))"
"((letrec-values(((for-loop_38)"
"(lambda(fold-var_39 i_40)"
"(if i_40"
"(let-values(((phase_41 linklet_42)(hash-iterate-key+value ht_36 i_40)))"
"(if #t"
"(let-values(((fold-var_43)"
"(let-values(((fold-var_44) fold-var_39))"
"(let-values(((fold-var_45)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_46)"
"(1/linklet-export-variables"
" linklet_42)))"
"(begin"
"(if(list? lst_46)"
"(void)"
"(let-values()"
"(in-list lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_48"
" lst_49)"
"(if(pair?"
" lst_49)"
"(let-values(((sym_50)"
"(unsafe-car"
" lst_49)))"
"(if #t"
"(let-values(((fold-var_51)"
"(let-values(((fold-var_52)"
" fold-var_48))"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_54)"
"(datum->syntax$2"
" s_8"
" sym_50)))"
"(begin"
"(let-values(((id8_55)"
" id_54)"
"((temp9_56)"
"(let-values(((self11_58)"
" self_6)"
"((phase12_59)"
" phase_41)"
"((sym13_60)"
" sym_50))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self11_58"
" phase12_59"
" sym13_60)"
"(make-module-binding22.1"
" self11_58"
" phase12_59"
" sym13_60))))"
"((phase10_57)"
" phase_41))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-binding!17.1))"
"(add-binding!15.1"
" #f"
" #f"
" id8_55"
" temp9_56"
" phase10_57)"
"(add-binding!17.1"
" id8_55"
" temp9_56"
" phase10_57)))"
"(add-defined-sym!"
" defined-syms_9"
" phase_41"
" sym_50"
" id_54))))"
"(void)))))"
"(values"
" fold-var_53)))))"
"(if #t"
"(for-loop_47"
" fold-var_51"
"(unsafe-cdr"
" lst_49))"
" fold-var_51))"
" fold-var_48))"
" fold-var_48))))"
" for-loop_47)"
"(void)"
" lst_46))))"
"(void)))))"
"(values fold-var_45)))))"
"(if #t"
"(for-loop_38 fold-var_43(hash-iterate-next ht_36 i_40))"
" fold-var_43))"
" fold-var_39))"
" fold-var_39))))"
" for-loop_38)"
"(void)"
"(hash-iterate-first ht_36))))"
" root-ctx_7))))))))"
"(define-values"
"(eval-module8.1)"
"(lambda(as-submodule?2_1 as-submodule?5_2 namespace1_3 namespace4_4 supermodule-name3_5 supermodule-name6_6 c7_7)"
"(let-values(((c_8) c7_7))"
"(let-values(((ns_9)(if namespace4_4 namespace1_3(1/current-namespace))))"
"(let-values(((as-submodule?_10)(if as-submodule?5_2 as-submodule?2_1 #f)))"
"(let-values(((supermodule-name_11)(if supermodule-name6_6 supermodule-name3_5 #f)))"
"(let-values()"
"(let-values(((dh_12 h_13 data-instance_14 declaration-instance_15)"
"(compiled-module->dh+h+data-instance+declaration-instance c_8)))"
"(let-values(((decl_16)(lambda(key_34)(1/instance-variable-value declaration-instance_15 key_34))))"
"(letrec-values(((declare-submodules_17)"
"(lambda(names_35 pre?_36)"
"(if dh_12"
"(let-values()"
"(if(compiled-in-memory? c_8)"
"(let-values(((lst_37)"
"(if pre?_36"
"(compiled-in-memory-pre-compiled-in-memorys c_8)"
"(compiled-in-memory-post-compiled-in-memorys c_8))))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"((letrec-values(((for-loop_38)"
"(lambda(fold-var_39 lst_40)"
"(if(pair? lst_40)"
"(let-values(((c_41)(unsafe-car lst_40)))"
"(if #t"
"(let-values(((fold-var_42)"
"(let-values(((fold-var_43)"
" fold-var_39))"
"(let-values(((fold-var_44)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:41:12_45)"
" eval-module10.1)"
"((c15_46)"
" c_41)"
"((ns16_47)"
" ns_9)"
"((declare-name17_48)"
" declare-name_33))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" #f"
" #f"
" ns16_47"
" #t"
" declare-name17_48"
" #t"
" c15_46)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:41:12_45"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" 3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns16_47"
" declare-name17_48)"
" c15_46))))"
"(void)))))"
"(values fold-var_44)))))"
"(if #t"
"(for-loop_38"
" fold-var_42"
"(unsafe-cdr lst_40))"
" fold-var_42))"
" fold-var_39))"
" fold-var_39))))"
" for-loop_38)"
"(void)"
" lst_37)))"
"(let-values(((lst_49) names_35))"
"(begin"
"(if(list? lst_49)(void)(let-values()(in-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(fold-var_51 lst_52)"
"(if(pair? lst_52)"
"(let-values(((name_53)(unsafe-car lst_52)))"
"(if #t"
"(let-values(((fold-var_54)"
"(let-values(((fold-var_55)"
" fold-var_51))"
"(let-values(((fold-var_56)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_57)"
"(hash-ref"
" dh_12"
" name_53"
" #f)))"
"(begin"
"(if sm-cd_57"
"(void)"
"(let-values()"
"(error"
"                                                                                                                      \"missing submodule declaration:\""
" name_53)))"
"(let-values(((...nder/eval/module.rkt:45:12_58)"
" eval-module10.1)"
"((sm-cd18_59)"
" sm-cd_57)"
"((ns19_60)"
" ns_9)"
"((declare-name20_61)"
" declare-name_33))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" eval-module10.1))"
"(eval-module8.1"
" #f"
" #f"
" ns19_60"
" #t"
" declare-name20_61"
" #t"
" sm-cd18_59)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:45:12_58"
" keyword-procedure-extract"
" '(#:namespace"
" #:supermodule-name)"
" 3)"
" '(#:namespace"
" #:supermodule-name)"
"(list"
" ns19_60"
" declare-name20_61)"
" sm-cd18_59))))))"
"(void)))))"
"(values fold-var_56)))))"
"(if #t"
"(for-loop_50"
" fold-var_54"
"(unsafe-cdr lst_52))"
" fold-var_54))"
" fold-var_51))"
" fold-var_51))))"
" for-loop_50)"
"(void)"
" lst_49)))))"
"(void))))"
"((pre-submodule-names_18)(hash-ref h_13 'pre null))"
"((post-submodule-names_19)(hash-ref h_13 'post null))"
"((default-name_20)(hash-ref h_13 'name 'module))"
"((original-self_21)(decl_16 'self-mpi))"
"((phase-to-link-modules_22)(decl_16 'phase-to-link-modules))"
"((min-phase_23)(decl_16 'min-phase))"
"((max-phase_24)(decl_16 'max-phase))"
"((phases-h_25)"
"(let-values(((start_62) min-phase_23)((end_63)(add1 max-phase_24))((inc_64) 1))"
"(begin"
"(if(if(real? start_62)(if(real? end_63)(real? inc_64) #f) #f)"
"(void)"
"(let-values()(in-range start_62 end_63 inc_64)))"
"((letrec-values(((for-loop_65)"
"(lambda(table_66 pos_67)"
"(if(< pos_67 end_63)"
"(let-values(((phase-level_68) pos_67))"
"(if #t"
"(let-values(((table_69)"
"(let-values(((v_70)"
"(hash-ref"
" h_13"
" phase-level_68"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_71)"
"(lambda(table_72)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_73)"
"(let-values(((table_74)"
" table_72))"
"(if v_70"
"(let-values(((table_75)"
" table_74))"
"(let-values(((table_76)"
"(let-values()"
"(let-values(((key_77"
" val_78)"
"(let-values()"
"(values"
" phase-level_68"
" v_70))))"
"(hash-set"
" table_75"
" key_77"
" val_78)))))"
"(values"
" table_76)))"
" table_74))))"
"(if #f"
"(for-loop_71"
" table_73)"
" table_73))"
" table_72))"
" table_72))))"
" for-loop_71)"
" table_66)))))"
"(if #t"
"(for-loop_65 table_69(+ pos_67 inc_64))"
" table_69))"
" table_66))"
" table_66))))"
" for-loop_65)"
" '#hash()"
" start_62))))"
"((syntax-literals-linklet_26)(hash-ref h_13 'stx))"
"((requires_27)(decl_16 'requires))"
"((provides_28)(decl_16 'provides))"
"((extra-inspector_29)"
"(if(compiled-in-memory? c_8)(compiled-in-memory-compile-time-inspector c_8) #f))"
"((phase-to-link-extra-inspectorsss_30)"
"(if(compiled-in-memory? c_8)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_8)"
" '#hasheqv()))"
"((create-root-expand-context-from-module_31)"
"(make-create-root-expand-context-from-module requires_27 phases-h_25))"
"((m_32)"
"(let-values(((...nder/eval/module.rkt:76:12_79) make-module34.1)"
"((original-self21_80) original-self_21)"
"((requires22_81) requires_27)"
"((provides23_82) provides_28)"
"((temp24_83)(decl_16 'language-info))"
"((min-phase25_84) min-phase_23)"
"((max-phase26_85) max-phase_24)"
"((temp27_86)(decl_16 'cross-phase-persistent?))"
"((temp28_87)(append pre-submodule-names_18 post-submodule-names_19))"
"((supermodule-name29_88) supermodule-name_11)"
"((temp30_89)(lambda()(get-all-variables phases-h_25)))"
"((temp31_90)"
"(lambda(data-box_92"
" ns_93"
" phase-shift_94"
" self_95"
" bulk-binding-registry_96"
" insp_97)"
"(if(unbox data-box_92)"
"(void)"
"(let-values()"
"(init-syntax-literals!"
" data-box_92"
" ns_93"
" syntax-literals-linklet_26"
" data-instance_14"
" phase-shift_94"
" original-self_21"
" self_95"
" bulk-binding-registry_96"
" insp_97"
" create-root-expand-context-from-module_31)))))"
"((temp32_91)"
"(lambda(data-box_98"
" ns_99"
" phase-shift_100"
" phase-level_101"
" self_102"
" bulk-binding-registry_103"
" insp_104)"
"(let-values(((syntax-literals-instance_105)(unbox data-box_98)))"
"(let-values(((phase-linklet_106)"
"(hash-ref phases-h_25 phase-level_101 #f)))"
"(if phase-linklet_106"
"(let-values()"
"(let-values(((module-uses_107)"
"(hash-ref"
" phase-to-link-modules_22"
" phase-level_101)))"
"(let-values(((import-module-instances_108"
" import-instances_109)"
"(let-values(((mis_112 is_113)"
"(let-values(((lst_114)"
" module-uses_107))"
"(begin"
"(if(list? lst_114)"
"(void)"
"(let-values()"
"(in-list lst_114)))"
"((letrec-values(((for-loop_115)"
"(lambda(mis_116"
" is_117"
" lst_118)"
"(if(pair?"
" lst_118)"
"(let-values(((mu_119)"
"(unsafe-car"
" lst_118)))"
"(if #t"
"(let-values(((mis_120"
" is_121)"
"(let-values(((mis_122)"
" mis_116)"
"((is_123)"
" is_117))"
"(let-values(((mis_124"
" is_125)"
"(let-values()"
"(let-values(((mis40_126"
" is41_127)"
"(let-values()"
"(let-values(((...nder/eval/module.rkt:102:33_128)"
" namespace-module-use->module+linklet-instances143.1)"
"((ns42_129)"
" ns_99)"
"((mu43_130)"
" mu_119)"
"((original-self44_131)"
" original-self_21)"
"((self45_132)"
" self_102)"
"((temp46_133)"
"(phase+"
"(phase-"
" phase-level_101"
"(module-use-phase"
" mu_119))"
" phase-shift_100)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-use->module+linklet-instances143.1))"
"(namespace-module-use->module+linklet-instances141.1"
" temp46_133"
" original-self44_131"
" #t"
" self45_132"
" #t"
" ns42_129"
" mu43_130)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:102:33_128"
" keyword-procedure-extract"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
" 4)"
" '(#:phase-shift"
" #:shift-from"
" #:shift-to)"
"(list"
" temp46_133"
" original-self44_131"
" self45_132)"
" ns42_129"
" mu43_130))))))"
"(values"
"(cons"
" mis40_126"
" mis_122)"
"(cons"
" is41_127"
" is_123))))))"
"(values"
" mis_124"
" is_125)))))"
"(if #t"
"(for-loop_115"
" mis_120"
" is_121"
"(unsafe-cdr"
" lst_118))"
"(values"
" mis_120"
" is_121)))"
"(values"
" mis_116"
" is_117)))"
"(values"
" mis_116"
" is_117)))))"
" for-loop_115)"
" null"
" null"
" lst_114)))))"
"(values"
"(alt-reverse mis_112)"
"(alt-reverse is_113)))))"
"(let-values((()"
"(begin"
"(let-values(((...nder/eval/module.rkt:110:29_134)"
" check-require-access11.1)"
"((phase-linklet33_135)"
" phase-linklet_106)"
"((temp34_136) 3)"
"((module-uses35_137)"
" module-uses_107)"
"((import-module-instances36_138)"
" import-module-instances_108)"
"((insp37_139) insp_104)"
"((extra-inspector38_140)"
" extra-inspector_29)"
"((temp39_141)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_30"
" phase-level_101"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-require-access11.1))"
"(check-require-access9.1"
" temp34_136"
" phase-linklet33_135"
" module-uses35_137"
" import-module-instances36_138"
" insp37_139"
" extra-inspector38_140"
" temp39_141)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:110:29_134"
" keyword-procedure-extract"
" '(#:skip-imports)"
" 8)"
" '(#:skip-imports)"
"(list temp34_136)"
" phase-linklet33_135"
" module-uses35_137"
" import-module-instances36_138"
" insp37_139"
" extra-inspector38_140"
" temp39_141)))"
"(values))))"
"(let-values(((instance-instance_110)"
"(let-values(((...nder/eval/module.rkt:116:31_142)"
" make-instance-instance17.1)"
"((ns47_143) ns_99)"
"((phase-shift48_144)"
" phase-shift_100)"
"((self49_145) self_102)"
"((bulk-binding-registry50_146)"
" bulk-binding-registry_103)"
"((insp51_147) insp_104)"
"((temp52_148)"
"(lambda(name_149 val_150)"
"(namespace-set-transformer!"
" ns_99"
"(sub1 phase-level_101)"
" name_149"
" val_150))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-instance-instance17.1))"
"(make-instance-instance15.1"
" bulk-binding-registry50_146"
" insp51_147"
" ns47_143"
" phase-shift48_144"
" #f"
" #f"
" self49_145"
" temp52_148)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:116:31_142"
" keyword-procedure-extract"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
" 2)"
" '(#:bulk-binding-registry"
" #:inspector"
" #:namespace"
" #:phase-shift"
" #:self"
" #:set-transformer!)"
"(list"
" bulk-binding-registry50_146"
" insp51_147"
" ns47_143"
" phase-shift48_144"
" self49_145"
" temp52_148))))))"
"(let-values(((instantiate-body_111)"
"(lambda()"
"(1/instantiate-linklet"
" phase-linklet_106"
"(list*"
" data-instance_14"
" syntax-literals-instance_105"
" instance-instance_110"
" import-instances_109)"
"(namespace->instance"
" ns_99"
" phase-level_101)))))"
"(if(zero-phase? phase-level_101)"
"(let-values()(instantiate-body_111))"
"(let-values()"
"(let-values(((ns-1_151)"
"(namespace->namespace-at-phase"
" ns_99"
"(phase+"
" phase-shift_100"
"(sub1 phase-level_101)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(make-expand-context ns-1_151)))"
" 1/current-namespace"
" ns_99"
" current-module-code-inspector"
" insp_104)"
"(let-values()"
"(instantiate-body_111))))))))))))"
"(void)))))))"
"(if(variable-reference-constant?(#%variable-reference make-module34.1))"
"(make-module32.1"
" temp27_86"
" #t"
" temp30_89"
" #t"
" temp32_91"
" temp24_83"
" #t"
" max-phase26_85"
" #t"
" min-phase25_84"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp31_90"
" #t"
" #f"
" #f"
" provides23_82"
" requires22_81"
" #t"
" original-self21_80"
" temp28_87"
" #t"
" supermodule-name29_88"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:76:12_79"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:submodule-names"
" #:supermodule-name)"
" 2)"
" '(#:cross-phase-persistent?"
" #:get-all-variables"
" #:instantiate-phase-callback"
" #:language-info"
" #:max-phase-level"
" #:min-phase-level"
" #:prepare-instance-callback"
" #:provides"
" #:requires"
" #:self"
" #:submodule-names"
" #:supermodule-name)"
"(list"
" temp27_86"
" temp30_89"
" temp32_91"
" temp24_83"
" max-phase26_85"
" min-phase25_84"
" temp31_90"
" provides23_82"
" requires22_81"
" original-self21_80"
" temp28_87"
" supermodule-name29_88)))))"
"((declare-name_33)(substitute-module-declare-name default-name_20)))"
"(begin"
"(if as-submodule?_10(void)(let-values()(declare-submodules_17 pre-submodule-names_18 #t)))"
"(let-values(((...nder/eval/module.rkt:150:2_152) declare-module!53.1)"
"((ns11_153) ns_9)"
"((m12_154) m_32)"
"((declare-name13_155) declare-name_33)"
"((as-submodule?14_156) as-submodule?_10))"
"(if(variable-reference-constant?(#%variable-reference declare-module!53.1))"
"(declare-module!51.1 as-submodule?14_156 #t ns11_153 m12_154 declare-name13_155)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:150:2_152"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" 5)"
" '(#:as-submodule?)"
"(list as-submodule?14_156)"
" ns11_153"
" m12_154"
" declare-name13_155)))"
"(if as-submodule?_10"
"(void)"
"(let-values()(declare-submodules_17 post-submodule-names_19 #f))))))))))))))"
"(define-values"
"(unpack9.1)"
"(lambda(given-kws_157 given-args_158 c7_159)"
"(let-values(((as-submodule?5_160)(if(pair? given-kws_157)(eq? '#:as-submodule?(car given-kws_157)) #f)))"
"(let-values(((as-submodule?2_161)(if as-submodule?5_160(car given-args_158)(void)))"
"((given-kws_162)(if as-submodule?5_160(cdr given-kws_157) given-kws_157))"
"((given-args_163)(if as-submodule?5_160(cdr given-args_158) given-args_158)))"
"(let-values(((namespace4_164)(if(pair? given-kws_162)(eq? '#:namespace(car given-kws_162)) #f)))"
"(let-values(((namespace1_165)(if namespace4_164(car given-args_163)(void)))"
"((given-kws_166)(if namespace4_164(cdr given-kws_162) given-kws_162))"
"((given-args_167)(if namespace4_164(cdr given-args_163) given-args_163)))"
"(let-values(((supermodule-name6_168)(pair? given-kws_166)))"
"(let-values(((supermodule-name3_169)(if supermodule-name6_168(car given-args_167)(void))))"
"(eval-module8.1"
" as-submodule?2_161"
" as-submodule?5_160"
" namespace1_165"
" namespace4_164"
" supermodule-name3_169"
" supermodule-name6_168"
" c7_159)))))))))"
"(define-values"
"(eval-module10.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_170 given-argc_171)"
"(if(= given-argc_171 3)"
"(let-values(((l1_172) given-kws_170))"
"(let-values(((l1_173)"
"(if(null? l1_172) l1_172(if(eq?(car l1_172) '#:as-submodule?)(cdr l1_172) l1_172))))"
"(let-values(((l1_174) l1_173))"
"(let-values(((l1_175)"
"(if(null? l1_174) l1_174(if(eq?(car l1_174) '#:namespace)(cdr l1_174) l1_174))))"
"(let-values(((l1_176) l1_175))"
"(let-values(((l1_177)"
"(if(null? l1_176)"
" l1_176"
"(if(eq?(car l1_176) '#:supermodule-name)(cdr l1_176) l1_176))))"
"(null? l1_177)))))))"
" #f))"
"(case-lambda((given-kws_178 given-args_179 c_180)(unpack9.1 given-kws_178 given-args_179 c_180)))"
" null"
" '(#:as-submodule? #:namespace #:supermodule-name)"
"(let-values(((eval-module_181)(case-lambda((c_182)(unpack9.1 null null c_182))))) eval-module_181)))"
"(define-values"
"(init-syntax-literals!)"
"(lambda(data-box_183"
" ns_184"
" syntax-literals-linklet_185"
" data-instance_186"
" phase-shift_187"
" original-self_188"
" self_189"
" bulk-binding-registry_190"
" insp_191"
" create-root-expand-context-from-module_192)"
"(let-values(((inst_193)"
"(let-values(((...nder/eval/module.rkt:165:4_196) make-instance-instance17.1)"
"((ns53_197) ns_184)"
"((phase-shift54_198) phase-shift_187)"
"((self55_199) self_189)"
"((bulk-binding-registry56_200) bulk-binding-registry_190)"
"((insp57_201) insp_191)"
"((temp58_202)"
"                                (lambda (name_203 val_204) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(if(variable-reference-constant?(#%variable-reference make-instance-instance17.1))"
"(make-instance-instance15.1"
" bulk-binding-registry56_200"
" insp57_201"
" ns53_197"
" phase-shift54_198"
" #f"
" #f"
" self55_199"
" temp58_202)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/eval/module.rkt:165:4_196"
" keyword-procedure-extract"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
" 2)"
" '(#:bulk-binding-registry #:inspector #:namespace #:phase-shift #:self #:set-transformer!)"
"(list"
" bulk-binding-registry56_200"
" insp57_201"
" ns53_197"
" phase-shift54_198"
" self55_199"
" temp58_202))))))"
"(let-values(((root-ctx-instance_194)"
"(1/instantiate-linklet"
" syntax-literals-linklet_185"
"(list deserialize-instance data-instance_186 inst_193))))"
"(let-values((()(begin(set-box! data-box_183 root-ctx-instance_194)(values))))"
"(let-values(((get-encoded-root-expand-ctx_195)"
"(1/instance-variable-value root-ctx-instance_194 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_195 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_184"
"(delay"
"(lambda()"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1)))))))"
"(if(procedure? get-encoded-root-expand-ctx_195)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_184"
"(delay(lambda()(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_195))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_184"
"(delay"
"(lambda()"
"(create-root-expand-context-from-module_192"
" ns_184"
" phase-shift_187"
" original-self_188"
" self_189)))))))))))))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_205)"
"(let-values(((ld/h_206)(if(compiled-in-memory? c_205)(compiled-in-memory-linklet-directory c_205) c_205)))"
"(let-values(((dh_207)"
"(if(1/linklet-directory? ld/h_206)"
"(let-values()(1/linklet-directory->hash ld/h_206))"
"(let-values() #f))))"
"(let-values(((h_208)(1/linklet-bundle->hash(if dh_207(hash-ref dh_207 #f) ld/h_206))))"
"(let-values(((data-instance_209)"
"(if(compiled-in-memory? c_205)"
"(make-data-instance-from-compiled-in-memory c_205)"
"(1/instantiate-linklet(hash-ref h_208 'data)(list deserialize-instance)))))"
"(let-values(((declaration-instance_210)"
"(1/instantiate-linklet(hash-ref h_208 'decl)(list deserialize-instance data-instance_209))))"
"(values dh_207 h_208 data-instance_209 declaration-instance_210))))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_211)"
"(let-values(((dh_212 h_213 data-instance_214 declaration-instance_215)"
"(compiled-module->dh+h+data-instance+declaration-instance c_211)))"
" declaration-instance_215)))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_216)"
"(let-values(((dh_217 h_218 data-instance_219 declaration-instance_220)"
"(compiled-module->dh+h+data-instance+declaration-instance c_216)))"
"(values h_218 declaration-instance_220))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_221)"
"(let-values(((data-instance_222)(1/make-instance 'data)))"
"(begin"
"(1/instance-set-variable-value! data-instance_222 'mpi-vector(compiled-in-memory-mpis cim_221))"
"(1/instance-set-variable-value!"
" data-instance_222"
" 'deserialized-syntax"
"(compiled-in-memory-syntax-literalss cim_221))"
" data-instance_222))))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_223)"
"(let-values(((ht_224) phases-h_223))"
"(begin"
"(if((lambda(ht_225)(hash? ht_225)) ht_224)(void)(let-values()(default-in-hash ht_224)))"
"((letrec-values(((for-loop_226)"
"(lambda(table_227 i_228)"
"(if i_228"
"(let-values(((phase_229 linklet_230)(hash-iterate-key+value ht_224 i_228)))"
"(if #t"
"(let-values(((table_231)"
"(let-values(((table_232) table_227))"
"(let-values(((table_233)"
"(let-values()"
"(let-values(((key_234 val_235)"
"(let-values()"
"(values"
" phase_229"
"(1/linklet-export-variables"
" linklet_230)))))"
"(hash-set table_232 key_234 val_235)))))"
"(values table_233)))))"
"(if #t(for-loop_226 table_231(hash-iterate-next ht_224 i_228)) table_231))"
" table_227))"
" table_227))))"
" for-loop_226)"
" '#hash()"
"(hash-iterate-first ht_224))))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_1 insp_2)"
"(syntax-map"
" s_1"
"(lambda(tail?_3 d_4) d_4)"
"(lambda(s_5 d_6)"
"(let-values(((the-struct_7) s_5))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((content1_8) d_6)"
"((inspector2_9)"
"(let-values(((or-part_10)(syntax-inspector s_5)))(if or-part_10 or-part_10 insp_2))))"
"(syntax1.1"
" content1_8"
"(syntax-scopes the-struct_7)"
"(syntax-scope-propagations the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-bulk-binding-registry the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
" inspector2_9"
"(syntax-tamper the-struct_7)))"
"           (raise-argument-error 'struct-copy \"syntax?\" the-struct_7))))"
" syntax-content)))"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_1)"
"(lambda(src-namespace3_2 mod-path4_3 dest-namespace1_4 dest-namespace2_5)"
"(let-values(((src-namespace_6) src-namespace3_2))"
"(let-values(((mod-path_7) mod-path4_3))"
"(let-values(((dest-namespace_8)(if dest-namespace2_5 dest-namespace1_4(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:14:2_9) do-attach-module21.1)"
"((temp22_10) 'namespace-attach-module)"
"((src-namespace23_11) src-namespace_6)"
"((mod-path24_12) mod-path_7)"
"((dest-namespace25_13) dest-namespace_8)"
"((temp26_14) #t))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp26_14"
" #t"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:14:2_9"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" 6)"
" '(#:attach-instances?)"
"(list temp26_14)"
" temp22_10"
" src-namespace23_11"
" mod-path24_12"
" dest-namespace25_13))))))))))"
"(case-lambda"
"((src-namespace_15 mod-path_16)(namespace-attach-module5_1 src-namespace_15 mod-path_16 #f #f))"
"((src-namespace_17 mod-path_18 dest-namespace1_19)"
"(namespace-attach-module5_1 src-namespace_17 mod-path_18 dest-namespace1_19 #t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_20)"
"(lambda(src-namespace9_21 mod-path10_22 dest-namespace7_23 dest-namespace8_24)"
"(let-values(((src-namespace_25) src-namespace9_21))"
"(let-values(((mod-path_26) mod-path10_22))"
"(let-values(((dest-namespace_27)"
"(if dest-namespace8_24 dest-namespace7_23(1/current-namespace))))"
"(let-values()"
"(let-values(((...namespace/attach.rkt:21:2_28) do-attach-module21.1)"
"((temp27_29) 'namespace-attach-module-declaration)"
"((src-namespace28_30) src-namespace_25)"
"((mod-path29_31) mod-path_26)"
"((dest-namespace30_32) dest-namespace_27)"
"((temp31_33) #f))"
"(if(variable-reference-constant?(#%variable-reference do-attach-module21.1))"
"(do-attach-module19.1"
" temp31_33"
" #t"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...namespace/attach.rkt:21:2_28"
" keyword-procedure-extract"
" '(#:attach-instances?)"
" 6)"
" '(#:attach-instances?)"
"(list temp31_33)"
" temp27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32))))))))))"
"(case-lambda"
"((src-namespace_34 mod-path_35)(namespace-attach-module-declaration11_20 src-namespace_34 mod-path_35 #f #f))"
"((src-namespace_36 mod-path_37 dest-namespace7_38)"
"(namespace-attach-module-declaration11_20 src-namespace_36 mod-path_37 dest-namespace7_38 #t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_39 attach-instances?14_40 who15_41 src-namespace16_42 mod-path17_43 dest-namespace18_44)"
"(let-values(((who_45) who15_41))"
"(let-values(((src-namespace_46) src-namespace16_42))"
"(let-values(((mod-path_47) mod-path17_43))"
"(let-values(((dest-namespace_48) dest-namespace18_44))"
"(let-values(((attach-instances?_49)(if attach-instances?14_40 attach-instances?13_39 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_46)"
"(void)"
"                                  (let-values () (raise-argument-error who_45 \"namespace?\" src-namespace_46)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_47)"
"(void)"
"                                    (let-values () (raise-argument-error who_45 \"module-path?\" mod-path_47)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_48)"
"(void)"
"                                      (let-values () (raise-argument-error who_45 \"namespace?\" dest-namespace_48)))"
"(values))))"
"(let-values(((phase_50)(namespace-phase src-namespace_46)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_50(namespace-phase dest-namespace_48))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                             \"source and destination namespace phases do not match\""
"                                             \"source phase\""
" phase_50"
"                                             \"destination phase\""
"(namespace-phase dest-namespace_48))))"
"(values))))"
"(let-values(((todo_51)(make-hasheq)))"
"(let-values(((missing_52)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_54)"
"(lambda(mpi_55"
" phase_56"
" attach-instances?_57"
" attach-phase_58)"
"(let-values(((mod-name_59)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_55)))))"
"(let-values(((attach-this-instance?_60)"
"(if attach-instances?_57"
"(eqv? phase_56 attach-phase_58)"
" #f)))"
"(let-values(((m-ns_61)"
"(hash-ref"
"(hash-ref"
" todo_51"
" mod-name_59"
" '#hasheqv())"
" phase_56"
" missing_52)))"
"(if(let-values(((or-part_62)"
"(eq? missing_52 m-ns_61)))"
"(if or-part_62"
" or-part_62"
"(if attach-this-instance?_60"
"(not m-ns_61)"
" #f)))"
"(let-values()"
"(let-values(((m_63)"
"(namespace->module"
" src-namespace_46"
" mod-name_59)))"
"(begin"
"(if m_63"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                     \"module not declared (in the source namespace)\""
"                                                                                     \"module name\""
" mod-name_59)))"
"(if(if(module-cross-phase-persistent?"
" m_63)"
"(if(not(label-phase? phase_56))"
"(not(zero-phase? phase_56))"
" #f)"
" #f)"
"(let-values()"
"(loop_54"
" mpi_55"
" 0"
" attach-instances?_57"
" 0))"
"(let-values()"
"(let-values(((already-m_64)"
"(namespace->module"
" dest-namespace_48"
" mod-name_59)))"
"(let-values((()"
"(begin"
"(if(if already-m_64"
"(not"
"(eq?"
" already-m_64"
" m_63))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                           \"a different declaration is already in the destination namespace\""
"                                                                                                           \"module name\""
" mod-name_59))"
"(void))"
"(values))))"
"(let-values(((m-ns_65"
" already?_66)"
"(if attach-this-instance?_60"
"(let-values()"
"(let-values(((m-ns_67)"
"(let-values(((src-namespace32_69)"
" src-namespace_46)"
"((mod-name33_70)"
" mod-name_59)"
"((phase34_71)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace79.1))"
"(namespace->module-namespace77.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace32_69"
" mod-name33_70"
" phase34_71)"
"(namespace->module-namespace79.1"
" src-namespace32_69"
" mod-name33_70"
" phase34_71)))))"
"(let-values((()"
"(begin"
"(if m-ns_67"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                                 \"module not instantiated (in the source namespace)\""
"                                                                                                                                 \"module name\""
" mod-name_59)))"
"(values))))"
"(let-values(((already-m-ns_68)"
"(if already-m_64"
"(let-values(((dest-namespace35_72)"
" dest-namespace_48)"
"((mod-name36_73)"
" mod-name_59)"
"((phase37_74)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace79.1))"
"(namespace->module-namespace77.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace35_72"
" mod-name36_73"
" phase37_74)"
"(namespace->module-namespace79.1"
" dest-namespace35_72"
" mod-name36_73"
" phase37_74)))"
" #f)))"
"(begin"
"(if(if already-m-ns_68"
"(not"
"(namespace-same-instance?"
" m-ns_67"
" already-m-ns_68))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_45"
"                                                                                                                       \"a different instance is already in the destination namespace\""
"                                                                                                                       \"module name\""
" mod-name_59))"
"(void))"
"(values"
" m-ns_67"
"(if already-m-ns_68"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_56)"
"(not"
"(let-values(((src-namespace38_75)"
" src-namespace_46)"
"((mod-name39_76)"
" mod-name_59)"
"((phase40_77)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace79.1))"
"(namespace->module-namespace77.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace38_75"
" mod-name39_76"
" phase40_77)"
"(namespace->module-namespace79.1"
" src-namespace38_75"
" mod-name39_76"
" phase40_77))))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_46)"
"(let-values()"
"(let-values(((src-namespace41_78)"
" src-namespace_46)"
"((mpi42_79)"
" mpi_55)"
"((phase43_80)"
" phase_56))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!93.1))"
"(namespace-module-instantiate!91.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace41_78"
" mpi42_79"
" phase43_80)"
"(namespace-module-instantiate!93.1"
" src-namespace41_78"
" mpi42_79"
" phase43_80))))))"
"(void))"
"(values"
" #f"
"(if already-m_64"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_51"
" mod-name_59"
"(lambda(ht_81)"
"(hash-set"
" ht_81"
" phase_56"
" m-ns_65))"
" '#hasheqv())"
"(if already?_66"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_82)"
"(module-requires"
" m_63)))"
"(begin"
"(if(list? lst_82)"
"(void)"
"(let-values()"
"(in-list"
" lst_82)))"
"((letrec-values(((for-loop_83)"
"(lambda(fold-var_84"
" lst_85)"
"(if(pair?"
" lst_85)"
"(let-values(((phase+reqs_86)"
"(unsafe-car"
" lst_85)))"
"(if #t"
"(let-values(((fold-var_87)"
"(let-values(((lst_88)"
"(cdr"
" phase+reqs_86)))"
"(begin"
"(if(list?"
" lst_88)"
"(void)"
"(let-values()"
"(in-list"
" lst_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(fold-var_90"
" lst_91)"
"(if(pair?"
" lst_91)"
"(let-values(((req_92)"
"(unsafe-car"
" lst_91)))"
"(if #t"
"(let-values(((fold-var_93)"
"(let-values(((fold-var_94)"
" fold-var_90))"
"(let-values(((fold-var_95)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_54"
"(module-path-index-shift"
" req_92"
"(module-self"
" m_63)"
" mpi_55)"
"(phase+"
" phase_56"
"(car"
" phase+reqs_86))"
" attach-instances?_57"
" attach-phase_58))"
"(void)))))"
"(values"
" fold-var_95)))))"
"(if #t"
"(for-loop_89"
" fold-var_93"
"(unsafe-cdr"
" lst_91))"
" fold-var_93))"
" fold-var_90))"
" fold-var_90))))"
" for-loop_89)"
" fold-var_84"
" lst_88)))))"
"(if #t"
"(for-loop_83"
" fold-var_87"
"(unsafe-cdr"
" lst_85))"
" fold-var_87))"
" fold-var_84))"
" fold-var_84))))"
" for-loop_83)"
"(void)"
" lst_82)))"
"(let-values(((lst_96)"
"(module-submodule-names"
" m_63)))"
"(begin"
"(if(list? lst_96)"
"(void)"
"(let-values()"
"(in-list"
" lst_96)))"
"((letrec-values(((for-loop_97)"
"(lambda(fold-var_98"
" lst_99)"
"(if(pair?"
" lst_99)"
"(let-values(((submod-name_100)"
"(unsafe-car"
" lst_99)))"
"(if #t"
"(let-values(((fold-var_101)"
"(let-values(((fold-var_102)"
" fold-var_98))"
"(let-values(((fold-var_103)"
"(let-values()"
"(begin"
"(let-values()"
"(loop_54"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                       \".\""
" submod-name_100)"
" mpi_55)"
" #f"
" #f"
" attach-phase_58))"
"(void)))))"
"(values"
" fold-var_103)))))"
"(if #t"
"(for-loop_97"
" fold-var_101"
"(unsafe-cdr"
" lst_99))"
" fold-var_101))"
" fold-var_98))"
" fold-var_98))))"
" for-loop_97)"
"(void)"
" lst_96)))"
"(if(module-supermodule-name"
" m_63)"
"(let-values()"
"(loop_54"
"(1/module-path-index-join"
"                                                                                                        '(submod \"..\")"
" mpi_55)"
" #f"
" #f"
" attach-phase_58))"
"(void))))))))))))))"
"(void))))))))"
" loop_54)"
"(1/module-path-index-join mod-path_47 #f)"
" phase_50"
" attach-instances?_49"
" phase_50)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_104) todo_51))"
"(begin"
"(if((lambda(ht_105)(hash? ht_105)) ht_104)"
"(void)"
"(let-values()(default-in-hash ht_104)))"
"((letrec-values(((for-loop_106)"
"(lambda(fold-var_107 i_108)"
"(if i_108"
"(let-values(((mod-name_109 phases_110)"
"(hash-iterate-key+value"
" ht_104"
" i_108)))"
"(if #t"
"(let-values(((fold-var_111)"
"(let-values(((ht_112)"
" phases_110))"
"(begin"
"(if((lambda(ht_113)"
"(hash? ht_113))"
" ht_112)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_112)))"
"((letrec-values(((for-loop_114)"
"(lambda(fold-var_115"
" i_116)"
"(if i_116"
"(let-values(((phase_117"
" m-ns_118)"
"(hash-iterate-key+value"
" ht_112"
" i_116)))"
"(if #t"
"(let-values(((fold-var_119)"
"(let-values(((fold-var_120)"
" fold-var_115))"
"(let-values(((fold-var_121)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_122)"
"(namespace->module"
" src-namespace_46"
" mod-name_109)))"
"(begin"
"(let-values(((dest-namespace44_123)"
" dest-namespace_48)"
"((m45_124)"
" m_122)"
"((mod-name46_125)"
" mod-name_109))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module!53.1))"
"(declare-module!51.1"
" #f"
" #f"
" dest-namespace44_123"
" m45_124"
" mod-name46_125)"
"(declare-module!53.1"
" dest-namespace44_123"
" m45_124"
" mod-name46_125)))"
"(if m-ns_118"
"(let-values()"
"(let-values(((or-part_126)"
"(let-values(((dest-namespace47_127)"
" dest-namespace_48)"
"((mod-name48_128)"
" mod-name_109)"
"((phase49_129)"
" phase_117))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace79.1))"
"(namespace->module-namespace77.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace47_127"
" mod-name48_128"
" phase49_129)"
"(namespace->module-namespace79.1"
" dest-namespace47_127"
" mod-name48_128"
" phase49_129)))))"
"(if or-part_126"
" or-part_126"
"(namespace-install-module-namespace!"
" dest-namespace_48"
" mod-name_109"
" phase_117"
" m_122"
" m-ns_118))))"
"(void)))))"
"(void)))))"
"(values"
" fold-var_121)))))"
"(if #t"
"(for-loop_114"
" fold-var_119"
"(hash-iterate-next"
" ht_112"
" i_116))"
" fold-var_119))"
" fold-var_115))"
" fold-var_115))))"
" for-loop_114)"
" fold-var_107"
"(hash-iterate-first"
" ht_112))))))"
"(if #t"
"(for-loop_106"
" fold-var_111"
"(hash-iterate-next ht_104 i_108))"
" fold-var_111))"
" fold-var_107))"
" fold-var_107))))"
" for-loop_106)"
"(void)"
"(hash-iterate-first ht_104))))"
"(values))))"
"(let-values(((mnr_53)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_48)"
"(let-values()"
"(let-values(((ht_130) todo_51))"
"(begin"
"(if((lambda(ht_131)(hash? ht_131)) ht_130)"
"(void)"
"(let-values()(default-in-hash-keys ht_130)))"
"((letrec-values(((for-loop_132)"
"(lambda(fold-var_133 i_134)"
"(if i_134"
"(let-values(((mod-name_135)"
"(hash-iterate-key ht_130 i_134)))"
"(if #t"
"(let-values(((fold-var_136)"
"(let-values(((fold-var_137)"
" fold-var_133))"
"(let-values(((fold-var_138)"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_53"
" mod-name_135"
" src-namespace_46))"
"(void)))))"
"(values fold-var_138)))))"
"(if #t"
"(for-loop_132"
" fold-var_136"
"(hash-iterate-next ht_130 i_134))"
" fold-var_136))"
" fold-var_133))"
" fold-var_133))))"
" for-loop_132)"
"(void)"
"(hash-iterate-first ht_130))))))))))))))))))))))))"
"(define-values"
"(unpack20.1)"
"(lambda(given-kws_139 given-args_140 who15_141 src-namespace16_142 mod-path17_143 dest-namespace18_144)"
"(let-values(((attach-instances?14_145)(pair? given-kws_139)))"
"(let-values(((attach-instances?13_146)(if attach-instances?14_145(car given-args_140)(void))))"
"(do-attach-module19.1"
" attach-instances?13_146"
" attach-instances?14_145"
" who15_141"
" src-namespace16_142"
" mod-path17_143"
" dest-namespace18_144)))))"
"(define-values"
"(do-attach-module21.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_147 given-argc_148)"
"(if(= given-argc_148 6)"
"(let-values(((l1_149) given-kws_147))"
"(let-values(((l1_150)"
"(if(null? l1_149) l1_149(if(eq?(car l1_149) '#:attach-instances?)(cdr l1_149) l1_149))))"
"(null? l1_150)))"
" #f))"
"(case-lambda"
"((given-kws_151 given-args_152 who_153 src-namespace_154 mod-path_155 dest-namespace_156)"
"(unpack20.1 given-kws_151 given-args_152 who_153 src-namespace_154 mod-path_155 dest-namespace_156)))"
" null"
" '(#:attach-instances?)"
"(let-values(((do-attach-module_157)"
"(case-lambda"
"((who_158 src-namespace_159 mod-path_160 dest-namespace_161)"
"(unpack20.1 null null who_158 src-namespace_159 mod-path_160 dest-namespace_161)))))"
" do-attach-module_157)))"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(let-values(((current-ns_2)(1/current-namespace)))"
"(let-values(((phase_3)(namespace-phase current-ns_2)))"
"(let-values(((ns_4)(namespace->namespace-at-phase(make-namespace) phase_3)))"
"(begin"
"(1/namespace-attach-module current-ns_2 ''#%kernel ns_4)"
"(namespace-primitive-module-visit! ns_4 '#%kernel)"
" ns_4))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_5)"
"(lambda(s3_6 ns1_7 ns2_8)"
"(let-values(((s_9) s3_6))"
"(let-values(((ns_10)(if ns2_8 ns1_7(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_9)"
"(void)"
"(let-values()"
"                                            (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_9)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_10)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-syntax-introduce \"namespace?\" ns_10)))"
"(values))))"
"(let-values(((root-ctx_11)(namespace-get-root-expand-ctx ns_10)))"
"(let-values(((post-scope_12)(root-expand-context-post-expansion-scope root-ctx_11)))"
"(let-values(((other-namespace-scopes_13)"
"(alt-reverse"
"(let-values(((lst_16)(root-expand-context-module-scopes root-ctx_11)))"
"(begin"
"(if(list? lst_16)(void)(let-values()(in-list lst_16)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_18 lst_19)"
"(if(pair? lst_19)"
"(let-values(((sc_20)(unsafe-car lst_19)))"
"(if #t"
"(let-values(((fold-var_21)"
"(let-values(((fold-var_22)"
" fold-var_18))"
"(if(equal?"
" sc_20"
" post-scope_12)"
" fold-var_22"
"(let-values(((fold-var_23)"
" fold-var_22))"
"(let-values(((fold-var_24)"
"(let-values()"
"(cons"
"(let-values()"
" sc_20)"
" fold-var_23))))"
"(values"
" fold-var_24)))))))"
"(if #t"
"(for-loop_17"
" fold-var_21"
"(unsafe-cdr lst_19))"
" fold-var_21))"
" fold-var_18))"
" fold-var_18))))"
" for-loop_17)"
" null"
" lst_16))))))"
"(let-values(((add-ns-scopes_14)"
"(lambda(s_25)"
"(syntax-set-inspector"
"(syntax-transfer-shifts"
"(push-scope"
"(add-scopes s_25 other-namespace-scopes_13)"
" post-scope_12)"
"(root-expand-context-all-scopes-stx root-ctx_11))"
"(let-values(((or-part_26)(namespace-declaration-inspector ns_10)))"
"(if or-part_26 or-part_26(current-code-inspector)))))))"
"(let-values(((maybe-module-id_15)"
"(if(pair?(syntax-e$2 s_9))"
"(if(identifier?(car(syntax-e$2 s_9)))"
"(add-ns-scopes_14(car(syntax-e$2 s_9)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_15"
"(1/free-identifier=?"
" maybe-module-id_15"
"(1/namespace-module-identifier ns_10))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_9"
"(cons maybe-module-id_15(cdr(syntax-e$2 s_9)))"
" s_9"
" s_9))"
"(let-values()(add-ns-scopes_14 s_9))))))))))))))))"
"(case-lambda"
"((s_27)(namespace-syntax-introduce4_5 s_27 #f #f))"
"((s_28 ns1_29)(namespace-syntax-introduce4_5 s_28 ns1_29 #t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_30)"
"(lambda(where6_31 where7_32)"
"(let-values(((where_33)(if where7_32 where6_31(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_34)(1/namespace? where_33)))"
"(if or-part_34 or-part_34(phase? where_33)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                             (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_33)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_33)(namespace-phase where_33) where_33))"
" 'module)))))))"
"(case-lambda"
"(()(namespace-module-identifier8_30 #f #f))"
"((where6_35)(namespace-module-identifier8_30 where6_35 #t)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_36)"
"(begin"
"      (if (symbol? sym_36) (void) (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_36)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_36)))))"
"(define-values"
"(lifted/1.1$17)"
"(make-required"
" 'do-namespace-require"
"(case-lambda((self_37 who_38 req_39 ns_40)(apply missing-kw self_37 who_38 req_39 ns_40 null)))"
" #f"
" #f))"
"(define-values"
"(do-namespace-require17.1)"
"(lambda(run?10_41 visit?11_42 who14_43 req15_44 ns16_45)"
"(let-values(((run?_46) run?10_41))"
"(let-values(((visit?_47) visit?11_42))"
"(let-values(((who_48) who14_43))"
"(let-values(((req_49) req15_44))"
"(let-values(((ns_50) ns16_45))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_50)"
"(void)"
"                                  (let-values () (raise-argument-error who_48 \"namespace?\" ns_50)))"
"(values))))"
"(let-values(((ctx-stx_51)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_50)))))"
"(if(1/module-path-index? req_49)"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:106:4_52) perform-require!55.1)"
"((req70_53) req_49)"
"((temp71_54) #f)"
"((temp72_55) #f)"
"((ctx-stx73_56) ctx-stx_51)"
"((ns74_57) ns_50)"
"((run?75_58) run?_46)"
"((visit?76_59) visit?_47)"
"((temp77_60) 0)"
"((temp78_61)(namespace-phase ns_50)))"
"(if(variable-reference-constant?(#%variable-reference perform-require!55.1))"
"(perform-require!53.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp77_60"
" #f"
" #f"
" temp78_61"
" run?75_58"
" #t"
" visit?76_59"
" #t"
" req70_53"
" temp71_54"
" temp72_55"
" ctx-stx73_56"
" ns74_57)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:106:4_52"
" keyword-procedure-extract"
" '(#:phase-shift #:run-phase #:run? #:visit?)"
" 7)"
" '(#:phase-shift #:run-phase #:run? #:visit?)"
"(list temp77_60 temp78_61 run?75_58 visit?76_59)"
" req70_53"
" temp71_54"
" temp72_55"
" ctx-stx73_56"
" ns74_57))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:113:4_62) parse-and-perform-requires!22.1)"
"((run?79_63) run?_46)"
"((visit?80_64) visit?_47)"
"((temp81_65)(list(1/datum->syntax ctx-stx_51 req_49)))"
"((temp82_66) #f)"
"((ns83_67) ns_50)"
"((temp84_68)(namespace-phase ns_50))"
"((temp85_69)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" #f"
" #f"
" run?79_63"
" #t"
" #f"
" #f"
" visit?80_64"
" #t"
" temp81_65"
" temp82_66"
" ns83_67"
" temp84_68"
" temp85_69)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:113:4_62"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 7)"
" '(#:run? #:visit?)"
"(list run?79_63 visit?80_64)"
" temp81_65"
" temp82_66"
" ns83_67"
" temp84_68"
" temp85_69)))))))))))))))"
"(define-values"
"(unpack18.1)"
"(lambda(given-kws_70 given-args_71 who14_72 req15_73 ns16_74)"
"(let-values(((run?10_75)(car given-args_71))"
"((given-kws_76)(cdr given-kws_70))"
"((given-args_77)(cdr given-args_71)))"
"(let-values(((visit?11_78)(car given-args_77)))"
"(do-namespace-require17.1 run?10_75 visit?11_78 who14_72 req15_73 ns16_74)))))"
"(define-values"
"(do-namespace-require19.1)"
"(lifted/1.1$17"
"(lambda(given-kws_79 given-argc_80)"
"(if(= given-argc_80 5)"
"(let-values(((l2_81) given-kws_79))"
"(if(pair? l2_81)"
"(if(eq?(car l2_81) '#:run?)"
"(let-values(((l2_82)(cdr l2_81)))"
"(if(pair? l2_82)(if(eq?(car l2_82) '#:visit?)(null?(cdr l2_82)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_83 given-args_84 who_85 req_86 ns_87)(unpack18.1 given-kws_83 given-args_84 who_85 req_86 ns_87)))"
" '(#:run? #:visit?)"
" '(#:run? #:visit?)))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require23_88)"
"(lambda(req22_89 ns20_90 ns21_91)"
"(let-values(((req_92) req22_89))"
"(let-values(((ns_93)(if ns21_91 ns20_90(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:122:2_94) do-namespace-require19.1)"
"((temp86_95) #t)"
"((temp87_96) #f)"
"((temp88_97) 'namespace-require)"
"((req89_98) req_92)"
"((ns90_99) ns_93))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require19.1))"
"(do-namespace-require17.1 temp86_95 temp87_96 temp88_97 req89_98 ns90_99)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:122:2_94"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 5)"
" '(#:run? #:visit?)"
"(list temp86_95 temp87_96)"
" temp88_97"
" req89_98"
" ns90_99)))))))))"
"(case-lambda"
"((req_100)(namespace-require23_88 req_100 #f #f))"
"((req_101 ns20_102)(namespace-require23_88 req_101 ns20_102 #t)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time28_103)"
"(lambda(req27_104 ns25_105 ns26_106)"
"(let-values(((req_107) req27_104))"
"(let-values(((ns_108)(if ns26_106 ns25_105(1/current-namespace))))"
"(let-values()"
"(let-values(((...er/namespace/api.rkt:125:2_109) do-namespace-require19.1)"
"((temp91_110) #f)"
"((temp92_111) #t)"
"((temp93_112) 'namespace-require/expansion-time)"
"((req94_113) req_107)"
"((ns95_114) ns_108))"
"(if(variable-reference-constant?(#%variable-reference do-namespace-require19.1))"
"(do-namespace-require17.1 temp91_110 temp92_111 temp93_112 req94_113 ns95_114)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/namespace/api.rkt:125:2_109"
" keyword-procedure-extract"
" '(#:run? #:visit?)"
" 5)"
" '(#:run? #:visit?)"
"(list temp91_110 temp92_111)"
" temp93_112"
" req94_113"
" ns95_114)))))))))"
"(case-lambda"
"((req_115)(namespace-require/expansion-time28_103 req_115 #f #f))"
"((req_116 ns25_117)(namespace-require/expansion-time28_103 req_116 ns25_117 #t)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant33_118)"
"(lambda(req32_119 ns30_120 ns31_121)"
"(let-values(((req_122) req32_119))"
"(let-values(((ns_123)(if ns31_121 ns30_120(1/current-namespace))))"
"(let-values()(1/namespace-require req_122 ns_123)))))))"
"(case-lambda"
"((req_124)(namespace-require/constant33_118 req_124 #f #f))"
"((req_125 ns30_126)(namespace-require/constant33_118 req_125 ns30_126 #t)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy38_127)"
"(lambda(req37_128 ns35_129 ns36_130)"
"(let-values(((req_131) req37_128))"
"(let-values(((ns_132)(if ns36_130 ns35_129(1/current-namespace))))"
"(let-values()(1/namespace-require req_131 ns_132)))))))"
"(case-lambda"
"((req_133)(namespace-require/copy38_127 req_133 #f #f))"
"((req_134 ns35_135)(namespace-require/copy38_127 req_134 ns35_135 #t)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value47_136)"
"(lambda(sym46_137"
" use-mapping?40_138"
" failure-thunk41_139"
" ns42_140"
" use-mapping?43_141"
" failure-thunk44_142"
" ns45_143)"
"(let-values(((sym_144) sym46_137))"
"(let-values(((use-mapping?_145)(if use-mapping?43_141 use-mapping?40_138 #f)))"
"(let-values(((failure-thunk_146)(if failure-thunk44_142 failure-thunk41_139 #f)))"
"(let-values(((ns_147)(if ns45_143 ns42_140(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_144)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_144)))"
"(if(let-values(((or-part_148)(not failure-thunk_146)))"
"(if or-part_148"
" or-part_148"
"(if(procedure? failure-thunk_146)"
"(procedure-arity-includes? failure-thunk_146 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                   \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_146)))"
"(if(1/namespace? ns_147)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_147)))"
"((call/ec"
"(lambda(escape_149)"
"(let-values(((var-ns_150 var-phase-level_151 var-sym_152)"
"(if use-mapping?_145"
"(let-values()"
"(let-values(((id_154)(1/datum->syntax #f sym_144)))"
"(let-values(((b_155)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_154 ns_147)"
"(namespace-phase ns_147)"
" ns_147)))"
"(let-values(((v_156)"
"(if b_155"
"(let-values(((b96_157) b_155)"
"((empty-env97_158) empty-env)"
"((null98_159) null)"
"((ns99_160) ns_147)"
"((temp100_161)"
"(namespace-phase ns_147))"
"((id101_162) id_154))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" binding-lookup48.1))"
"(binding-lookup46.1"
" #f"
" #f"
" #f"
" #f"
" b96_157"
" empty-env97_158"
" null98_159"
" ns99_160"
" temp100_161"
" id101_162)"
"(binding-lookup48.1"
" b96_157"
" empty-env97_158"
" null98_159"
" ns99_160"
" temp100_161"
" id101_162)))"
" variable)))"
"(begin"
"(if(variable? v_156)"
"(void)"
"(let-values()"
"(escape_149"
"(let-values(((or-part_163) failure-thunk_146))"
"(if or-part_163"
" or-part_163"
"(lambda()"
"(raise"
"(make-exn:fail:syntax"
"(format"
"(string-append"
"                                                                           \"namespace-variable-value: bound to syntax\\n\""
"                                                                           \"  in: ~s\")"
" sym_144)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_155)"
"(values"
"(let-values(((ns102_164) ns_147)"
"((temp103_165)"
"(module-binding-module b_155))"
"((temp104_166)"
"(phase-"
"(namespace-phase ns_147)"
"(module-binding-phase b_155))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace79.1))"
"(namespace->module-namespace77.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns102_164"
" temp103_165"
" temp104_166)"
"(namespace->module-namespace79.1"
" ns102_164"
" temp103_165"
" temp104_166)))"
"(module-binding-phase b_155)"
"(module-binding-sym b_155))"
"(values ns_147(namespace-phase ns_147) sym_144)))))))"
"(let-values()(values ns_147(namespace-phase ns_147) sym_144)))))"
"(let-values(((val_153)"
"(namespace-get-variable"
" var-ns_150"
" var-phase-level_151"
" var-sym_152"
"(lambda()"
"(escape_149"
"(let-values(((or-part_167) failure-thunk_146))"
"(if or-part_167"
" or-part_167"
"(raise"
" exn:fail:contract:variable"
"(format"
"(string-append"
"                                                             \"namespace-variable-value: given name is not defined\\n\""
"                                                             \"  name: ~s\"))"
" sym_144))))))))"
"(lambda() val_153)))))))))))))))"
"(case-lambda"
"((sym_168)(namespace-variable-value47_136 sym_168 #f #f #f #f #f #f))"
"((sym_169 use-mapping?_170 failure-thunk_171 ns42_172)"
"(namespace-variable-value47_136 sym_169 use-mapping?_170 failure-thunk_171 ns42_172 #t #t #t))"
"((sym_173 use-mapping?_174 failure-thunk41_175)"
"(namespace-variable-value47_136 sym_173 use-mapping?_174 failure-thunk41_175 #f #t #t #f))"
"((sym_176 use-mapping?40_177)(namespace-variable-value47_136 sym_176 use-mapping?40_177 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!55_178)"
"(lambda(sym53_179 val54_180 map?49_181 ns50_182 map?51_183 ns52_184)"
"(let-values(((sym_185) sym53_179))"
"(let-values(((val_186) val54_180))"
"(let-values(((map?_187)(if map?51_183 map?49_181 #f)))"
"(let-values(((ns_188)(if ns52_184 ns50_182(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_185)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_185)))"
"(if(1/namespace? ns_188)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_188)))"
"(namespace-set-variable! ns_188(namespace-phase ns_188) sym_185 val_186)"
"(if map?_187"
"(let-values()"
"(let-values(((id_189)(1/datum->syntax #f sym_185)))"
"(let-values(((temp105_190)(1/namespace-syntax-introduce id_189 ns_188))"
"((temp106_191)"
"(let-values(((temp108_193)(namespace-mpi ns_188))"
"((temp109_194)(namespace-phase ns_188))"
"((sym110_195) sym_185))"
"(if(variable-reference-constant?"
"(#%variable-reference make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp108_193"
" temp109_194"
" sym110_195)"
"(make-module-binding22.1 temp108_193 temp109_194 sym110_195))))"
"((temp107_192)(namespace-phase ns_188)))"
"(if(variable-reference-constant?(#%variable-reference add-binding!17.1))"
"(add-binding!15.1 #f #f temp105_190 temp106_191 temp107_192)"
"(add-binding!17.1 temp105_190 temp106_191 temp107_192)))))"
"(void)))))))))))"
"(case-lambda"
"((sym_196 val_197)(namespace-set-variable-value!55_178 sym_196 val_197 #f #f #f #f))"
"((sym_198 val_199 map?_200 ns50_201)(namespace-set-variable-value!55_178 sym_198 val_199 map?_200 ns50_201 #t #t))"
"((sym_202 val_203 map?49_204)(namespace-set-variable-value!55_178 sym_202 val_203 map?49_204 #f #t #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!60_205)"
"(lambda(sym59_206 ns57_207 ns58_208)"
"(let-values(((sym_209) sym59_206))"
"(let-values(((ns_210)(if ns58_208 ns57_207(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_209)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_209)))"
"(if(1/namespace? ns_210)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_210)))"
"(namespace-unset-variable! ns_210(namespace-phase ns_210) sym_209))))))))"
"(case-lambda"
"((sym_211)(namespace-undefine-variable!60_205 sym_211 #f #f))"
"((sym_212 ns57_213)(namespace-undefine-variable!60_205 sym_212 ns57_213 #t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols64_214)"
"(lambda(ns62_215 ns63_216)"
"(let-values(((ns_217)(if ns63_216 ns62_215(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_217)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_217)))"
" null))))))"
"(case-lambda"
"(()(namespace-mapped-symbols64_214 #f #f))"
"((ns62_218)(namespace-mapped-symbols64_214 ns62_218 #t)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase68_219)"
"(lambda(ns66_220 ns67_221)"
"(let-values(((ns_222)(if ns67_221 ns66_220(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_222)"
"(void)"
"                          (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_222)))"
"(namespace-phase ns_222)))))))"
"(case-lambda(()(namespace-base-phase68_219 #f #f))((ns66_223)(namespace-base-phase68_219 ns66_223 #t)))))"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_1)"
"(let-values(((extract_2)"
"(lambda(ok?_3)"
"(let-values(((result-l_4)"
"(alt-reverse"
"(let-values(((ht_5) provides_1))"
"(begin"
"(if((lambda(ht_6)(hash? ht_6)) ht_5)"
"(void)"
"(let-values()(default-in-hash ht_5)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 i_9)"
"(if i_9"
"(let-values(((phase_10 at-phase_11)"
"(hash-iterate-key+value ht_5 i_9)))"
"(if #t"
"(let-values(((fold-var_12)"
"(let-values(((l_13)"
"(alt-reverse"
"(let-values(((ht_14)"
" at-phase_11))"
"(begin"
"(if((lambda(ht_15)"
"(hash? ht_15))"
" ht_14)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_14)))"
"((letrec-values(((for-loop_16)"
"(lambda(fold-var_17"
" i_18)"
"(if i_18"
"(let-values(((sym_19"
" b/p_20)"
"(hash-iterate-key+value"
" ht_14"
" i_18)))"
"(if #t"
"(let-values(((fold-var_21)"
"(let-values(((fold-var_22)"
" fold-var_17))"
"(if(ok?_3"
" b/p_20)"
"(let-values(((fold-var_23)"
" fold-var_22))"
"(let-values(((fold-var_24)"
"(let-values()"
"(cons"
"(let-values()"
" sym_19)"
" fold-var_23))))"
"(values"
" fold-var_24)))"
" fold-var_22))))"
"(if #t"
"(for-loop_16"
" fold-var_21"
"(hash-iterate-next"
" ht_14"
" i_18))"
" fold-var_21))"
" fold-var_17))"
" fold-var_17))))"
" for-loop_16)"
" null"
"(hash-iterate-first"
" ht_14)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28)"
" fold-var_26))"
"(if(null?"
" l_13)"
" fold-var_28"
"(let-values(((fold-var_29)"
" fold-var_28))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_10"
"(let-values(((l4_31)"
" l_13)"
"((symbol<?5_32)"
" symbol<?))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l4_31"
" symbol<?5_32)"
"(sort9.1"
" l4_31"
" symbol<?5_32)))))"
" fold-var_29))))"
"(values"
" fold-var_30)))))))"
"(if #f"
"(for-loop_25"
" fold-var_27)"
" fold-var_27))"
" fold-var_26))"
" fold-var_26))))"
" for-loop_25)"
" fold-var_8)))))"
"(if #t"
"(for-loop_7"
" fold-var_12"
"(hash-iterate-next ht_5 i_9))"
" fold-var_12))"
" fold-var_8))"
" fold-var_8))))"
" for-loop_7)"
" null"
"(hash-iterate-first ht_5)))))))"
"(let-values(((.../provide-for-api.rkt:17:4_33) sort9.1)"
"((result-l1_34) result-l_4)"
"((<2_35) <)"
"((car3_36) car))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f car3_36 #t result-l1_34 <2_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:17:4_33"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list car3_36)"
" result-l1_34"
" <2_35)))))))"
"(values"
"(extract_2(lambda(b/p_37)(not(provided-as-transformer? b/p_37))))"
"(extract_2 provided-as-transformer?)))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_38 all-vars_39)"
"(let-values(((result-l_40)"
"(alt-reverse"
"(let-values(((ht_41) all-vars_39))"
"(begin"
"(if((lambda(ht_42)(hash? ht_42)) ht_41)(void)(let-values()(default-in-hash ht_41)))"
"((letrec-values(((for-loop_43)"
"(lambda(fold-var_44 i_45)"
"(if i_45"
"(let-values(((phase_46 vars_47)(hash-iterate-key+value ht_41 i_45)))"
"(if #t"
"(let-values(((fold-var_48)"
"(let-values(((fold-var_49) fold-var_44))"
"(if #t"
"(let-values(((l_50)"
"(let-values(((syms_51)"
"(hash-ref"
" provides_38"
" phase_46"
" '#hasheq())))"
"(alt-reverse"
"(let-values(((lst_52) vars_47))"
"(begin"
"(if(list? lst_52)"
"(void)"
"(let-values()"
"(in-list lst_52)))"
"((letrec-values(((for-loop_53)"
"(lambda(fold-var_54"
" lst_55)"
"(if(pair?"
" lst_55)"
"(let-values(((var-sym_56)"
"(unsafe-car"
" lst_55)))"
"(if #t"
"(let-values(((fold-var_57)"
"(let-values(((fold-var_58)"
" fold-var_54))"
"(if(hash-ref"
" syms_51"
" var-sym_56"
" #f)"
" fold-var_58"
"(let-values(((fold-var_59)"
" fold-var_58))"
"(let-values(((fold-var_60)"
"(let-values()"
"(cons"
"(let-values()"
" var-sym_56)"
" fold-var_59))))"
"(values"
" fold-var_60)))))))"
"(if #t"
"(for-loop_53"
" fold-var_57"
"(unsafe-cdr"
" lst_55))"
" fold-var_57))"
" fold-var_54))"
" fold-var_54))))"
" for-loop_53)"
" null"
" lst_52)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_61)"
"(lambda(fold-var_62)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((fold-var_63)"
"(let-values(((fold-var_64)"
" fold-var_62))"
"(if(null?"
" l_50)"
" fold-var_64"
"(let-values(((fold-var_65)"
" fold-var_64))"
"(let-values(((fold-var_66)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_46"
"(let-values(((l9_67)"
" l_50)"
"((symbol<?10_68)"
" symbol<?))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" sort9.1))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l9_67"
" symbol<?10_68)"
"(sort9.1"
" l9_67"
" symbol<?10_68)))))"
" fold-var_65))))"
"(values"
" fold-var_66)))))))"
"(if #f"
"(for-loop_61"
" fold-var_63)"
" fold-var_63))"
" fold-var_62))"
" fold-var_62))))"
" for-loop_61)"
" fold-var_49)))"
" fold-var_49))))"
"(if #t"
"(for-loop_43 fold-var_48(hash-iterate-next ht_41 i_45))"
" fold-var_48))"
" fold-var_44))"
" fold-var_44))))"
" for-loop_43)"
" null"
"(hash-iterate-first ht_41)))))))"
"(let-values(((.../provide-for-api.rkt:34:2_69) sort9.1)((result-l6_70) result-l_40)((<7_71) <)((car8_72) car))"
"(if(variable-reference-constant?(#%variable-reference sort9.1))"
"(sort7.1 #f #f car8_72 #t result-l6_70 <7_71)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../provide-for-api.rkt:34:2_69"
" keyword-procedure-extract"
" '(#:key)"
" 4)"
" '(#:key)"
"(list car8_72)"
" result-l6_70"
" <7_71))))))"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_1)"
"(let-values(((or-part_2)(compiled-in-memory? c_1)))(if or-part_2 or-part_2(1/linklet-directory? c_1)))))"
"(define-values"
"(compiled->linklet-directory)"
"(lambda(c_3)(if(compiled-in-memory? c_3)(compiled-in-memory-linklet-directory c_3) c_3)))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_4)"
"(let-values(((ld_5)(compiled->linklet-directory c_4)))"
"(if(1/linklet-directory? ld_5)"
"(if(let-values(((b_6)(hash-ref(1/linklet-directory->hash ld_5) #f #f)))"
"(if b_6(hash-ref(1/linklet-bundle->hash b_6) 'decl #f) #f))"
" #t"
" #f)"
" #f))))"
"(define-values"
"(1/module-compiled-name)"
"(case-lambda"
"((c_7)"
"(begin"
"(if(1/compiled-module-expression? c_7)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_7)))"
"(hash-ref"
"(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_7)) #f))"
" 'name)))"
"((c_8 name_9)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_8)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_11)(symbol? name_9)))"
"(if or-part_11"
" or-part_11"
"(if(pair? name_9)(if(list? name_9)(andmap2 symbol? name_9) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                           \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_9)))"
"(values))))"
"(let-values(((prefix_10)(if(symbol? name_9) null(alt-reverse(cdr(alt-reverse name_9))))))"
"(change-module-name c_8 name_9 prefix_10)))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(case-lambda"
"((c_12 non-star?_13)"
"(begin"
"(if(1/compiled-module-expression? c_12)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_12)))"
"(if(compiled-in-memory? c_12)"
"(let-values()"
"(if non-star?_13"
"(compiled-in-memory-pre-compiled-in-memorys c_12)"
"(compiled-in-memory-post-compiled-in-memorys c_12)))"
"(let-values()"
"(let-values(((ht_14)(1/linklet-directory->hash c_12)))"
"(let-values(((bh_15)(1/linklet-bundle->hash(hash-ref ht_14 #f))))"
"(let-values(((names_16)(hash-ref bh_15(if non-star?_13 'pre 'post) null)))"
"(alt-reverse"
"(let-values(((lst_17) names_16))"
"(begin"
"(if(list? lst_17)(void)(let-values()(in-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_19 lst_20)"
"(if(pair? lst_20)"
"(let-values(((name_21)(unsafe-car lst_20)))"
"(if #t"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23) fold-var_19))"
"(let-values(((fold-var_24)"
"(let-values()"
"(cons"
"(let-values()(hash-ref ht_14 name_21))"
" fold-var_23))))"
"(values fold-var_24)))))"
"(if #t(for-loop_18 fold-var_22(unsafe-cdr lst_20)) fold-var_22))"
" fold-var_19))"
" fold-var_19))))"
" for-loop_18)"
" null"
" lst_17)))))))))))"
"((c_25 non-star?_26 submods_27)"
"(begin"
"(if(1/compiled-module-expression? c_25)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_25)))"
"(if(if(list? submods_27)(andmap2 1/compiled-module-expression? submods_27) #f)"
"(void)"
"(let-values()"
"          (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_27)))"
"(if(if(compiled-in-memory? c_25)(andmap2 compiled-in-memory? submods_27) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_28)"
"(if non-star?_26 submods_27(compiled-in-memory-pre-compiled-in-memorys c_25))))"
"(let-values(((post-compiled-in-memorys_29)"
"(if non-star?_26(compiled-in-memory-post-compiled-in-memorys c_25) submods_27)))"
"(fixup-submodule-names"
"(let-values(((the-struct_30) c_25))"
"(if(compiled-in-memory? the-struct_30)"
"(let-values(((pre-compiled-in-memorys1_31) pre-compiled-in-memorys_28)"
"((post-compiled-in-memorys2_32) post-compiled-in-memorys_29)"
"((linklet-directory3_33)"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_25)) #f)"
" non-star?_26"
" submods_27)"
"(append pre-compiled-in-memorys_28 post-compiled-in-memorys_29))))"
"(compiled-in-memory1.1"
" linklet-directory3_33"
"(compiled-in-memory-phase the-struct_30)"
"(compiled-in-memory-max-phase the-struct_30)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_30)"
"(compiled-in-memory-compile-time-inspector the-struct_30)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_30)"
"(compiled-in-memory-mpis the-struct_30)"
"(compiled-in-memory-syntax-literalss the-struct_30)"
" pre-compiled-in-memorys1_31"
" post-compiled-in-memorys2_32))"
"                   (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_30)))))))"
"(let-values()"
"(fixup-submodule-names"
"(rebuild-linklet-directory"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_25)) #f)"
" non-star?_26"
" submods_27)"
"(map2"
" compiled->linklet-directory"
"(append"
"(if non-star?_26 submods_27(1/module-compiled-submodules c_25 #t))"
"(if non-star?_26(1/module-compiled-submodules c_25 #f) submods_27)))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_34)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_34)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_34)))"
"(values))))"
"(let-values(((inst_35)(compiled-module->declaration-instance c_34)))"
"(1/instance-variable-value inst_35 'language-info)))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_36)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_36)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_36)))"
"(values))))"
"(let-values(((inst_37)(compiled-module->declaration-instance c_36)))"
"(1/instance-variable-value inst_37 'requires)))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_38)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_38)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_38)))"
"(values))))"
"(let-values(((inst_39)(compiled-module->declaration-instance c_38)))"
"(provides->api-provides(1/instance-variable-value inst_39 'provides))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_40)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_40)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'module-compiled-indirect-imports \"compiled-module-expression?\" c_40)))"
"(values))))"
"(let-values(((h_41 inst_42)(compiled-module->h+declaration-instance c_40)))"
"(let-values(((min-phase_43)(1/instance-variable-value inst_42 'min-phase)))"
"(let-values(((max-phase_44)(1/instance-variable-value inst_42 'max-phase)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_42 'provides)"
"(let-values(((start_45) min-phase_43)((end_46)(add1 max-phase_44))((inc_47) 1))"
"(begin"
"(if(if(real? start_45)(if(real? end_46)(real? inc_47) #f) #f)"
"(void)"
"(let-values()(in-range start_45 end_46 inc_47)))"
"((letrec-values(((for-loop_48)"
"(lambda(table_49 pos_50)"
"(if(< pos_50 end_46)"
"(let-values(((phase-level_51) pos_50))"
"(if #t"
"(let-values(((table_52)"
"(let-values(((table_53) table_49))"
"(let-values(((table_54)"
"(let-values()"
"(let-values(((key_55 val_56)"
"(let-values()"
"(let-values(((linklet_57)"
"(hash-ref"
" h_41"
" phase-level_51"
" #f)))"
"(values"
" phase-level_51"
"(if linklet_57"
"(1/linklet-export-variables"
" linklet_57)"
" null))))))"
"(hash-set table_53 key_55 val_56)))))"
"(values table_54)))))"
"(if #t(for-loop_48 table_52(+ pos_50 inc_47)) table_52))"
" table_49))"
" table_49))))"
" for-loop_48)"
" '#hash()"
" start_45))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_58)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_58)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                         \"compiled-module-expression?\""
" c_58)))"
"(values))))"
"(let-values(((inst_59)(compiled-module->declaration-instance c_58)))"
"(1/instance-variable-value inst_59 'cross-phase-persistent?)))))"
"(define-values(module-compiled-immediate-name)(lambda(c_60)(car(alt-reverse(1/module-compiled-name c_60)))))"
"(define-values"
"(change-module-name)"
"(lambda(c_61 name_62 prefix_63)"
"(let-values(((full-name_64)(if(null? prefix_63) name_62(append prefix_63(list name_62)))))"
"(let-values(((next-prefix_65)(if(null? prefix_63)(list name_62) full-name_64)))"
"(let-values(((recur_66)"
"(lambda(sub-c_67 name_68)"
"(if(equal?(1/module-compiled-name sub-c_67)(append next-prefix_65(list name_68)))"
" sub-c_67"
"(change-module-name sub-c_67 name_68 next-prefix_65)))))"
"(if(compiled-in-memory? c_61)"
"(let-values()"
"(let-values(((change-submodule-name_69)"
"(lambda(sub-c_72)(recur_66 sub-c_72(module-compiled-immediate-name sub-c_72)))))"
"(let-values(((pre-compiled-in-memorys_70)"
"(map2 change-submodule-name_69(compiled-in-memory-pre-compiled-in-memorys c_61))))"
"(let-values(((post-compiled-in-memorys_71)"
"(map2 change-submodule-name_69(compiled-in-memory-post-compiled-in-memorys c_61))))"
"(let-values(((the-struct_73) c_61))"
"(if(compiled-in-memory? the-struct_73)"
"(let-values(((pre-compiled-in-memorys4_74) pre-compiled-in-memorys_70)"
"((post-compiled-in-memorys5_75) post-compiled-in-memorys_71)"
"((linklet-directory6_76)"
"(rebuild-linklet-directory"
"(update-one-name"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory c_61)) #f)"
" full-name_64)"
"(append pre-compiled-in-memorys_70 post-compiled-in-memorys_71))))"
"(compiled-in-memory1.1"
" linklet-directory6_76"
"(compiled-in-memory-phase the-struct_73)"
"(compiled-in-memory-max-phase the-struct_73)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_73)"
"(compiled-in-memory-compile-time-inspector the-struct_73)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_73)"
"(compiled-in-memory-mpis the-struct_73)"
"(compiled-in-memory-syntax-literalss the-struct_73)"
" pre-compiled-in-memorys4_74"
" post-compiled-in-memorys5_75))"
"                        (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_73)))))))"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_77)(1/linklet-directory->hash c_61)))"
"(begin"
"(if((lambda(ht_78)(hash? ht_78)) ht_77)(void)(let-values()(default-in-hash ht_77)))"
"((letrec-values(((for-loop_79)"
"(lambda(table_80 i_81)"
"(if i_81"
"(let-values(((key_82 val_83)(hash-iterate-key+value ht_77 i_81)))"
"(if #t"
"(let-values(((table_84)"
"(let-values(((table_85) table_80))"
"(let-values(((table_86)"
"(let-values()"
"(let-values(((key_87 val_88)"
"(let-values()"
"(values"
" key_82"
"(if(not key_82)"
"(update-one-name"
" val_83"
" full-name_64)"
"(recur_66"
" val_83"
" key_82))))))"
"(hash-set table_85 key_87 val_88)))))"
"(values table_86)))))"
"(if #t(for-loop_79 table_84(hash-iterate-next ht_77 i_81)) table_84))"
" table_80))"
" table_80))))"
" for-loop_79)"
" '#hasheq()"
"(hash-iterate-first ht_77))))))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_89 name_90)(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_89) 'name name_90))))"
"(define-values(fixup-submodule-names)(lambda(c_91)(1/module-compiled-name c_91(1/module-compiled-name c_91))))"
"(define-values"
"(rebuild-linklet-directory)"
"(lambda(main_92 submods_93)"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_94) submods_93))"
"(begin"
"(if(list? lst_94)(void)(let-values()(in-list lst_94)))"
"((letrec-values(((for-loop_95)"
"(lambda(ht_96 lst_97)"
"(if(pair? lst_97)"
"(let-values(((submod_98)(unsafe-car lst_97)))"
"(if #t"
"(let-values(((ht_99)"
"(let-values(((ht_100) ht_96))"
"(let-values(((ht_101)"
"(let-values()"
"(let-values(((name_102)"
"(module-compiled-immediate-name"
" submod_98)))"
"(if(hash-ref ht_100 name_102 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                           \"change would result in duplicate submodule name\""
"                                                                           \"name\""
" name_102))"
"(let-values()"
"(hash-set ht_100 name_102 submod_98)))))))"
"(values ht_101)))))"
"(if #t(for-loop_95 ht_99(unsafe-cdr lst_97)) ht_99))"
" ht_96))"
" ht_96))))"
" for-loop_95)"
" '#hasheq()"
" lst_94)))"
" #f"
" main_92))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_103 pre?_104 submods_105)"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_103)"
"(if pre?_104 'pre 'post)"
"(map2 module-compiled-immediate-name submods_105)))))"
"(define-values"
"(eval$1)"
"(let-values(((eval6_2)"
"(lambda(s5_3 ns1_4 compile2_5 ns3_6 compile4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((ns_9)(if ns3_6 ns1_4(1/current-namespace))))"
"(let-values(((compile_10)"
"(if compile4_7 compile2_5(lambda(s_11 ns_12)(compile$1 s_11 ns_12 #f)))))"
"(let-values()"
"(if(let-values(((or-part_13)(compiled-in-memory? s_8)))"
"(if or-part_13 or-part_13(1/linklet-directory? s_8)))"
"(let-values()(eval-compiled s_8 ns_9))"
"(if(if(syntax?$1 s_8)"
"(let-values(((or-part_14)(compiled-in-memory?(syntax-e$2 s_8))))"
"(if or-part_14 or-part_14(1/linklet-directory?(syntax-e$2 s_8))))"
" #f)"
"(let-values()(eval-compiled(1/syntax->datum s_8) ns_9))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:52:4_15) per-top-level53.1)"
"((s54_16) s_8)"
"((ns55_17) ns_9)"
"((temp56_18)"
"(lambda(s_19 ns_20)(eval-compiled(compile_10 s_19 ns_20) ns_20))))"
"(if(variable-reference-constant?(#%variable-reference per-top-level53.1))"
"(per-top-level51.1 #f #f #f #f temp56_18 #f #f s54_16 ns55_17)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:52:4_15"
" keyword-procedure-extract"
" '(#:single)"
" 4)"
" '(#:single)"
"(list temp56_18)"
" s54_16"
" ns55_17)))))))))))))"
"(case-lambda"
"((s_21)(eval6_2 s_21 #f #f #f #f))"
"((s_22 ns_23 compile2_24)(eval6_2 s_22 ns_23 compile2_24 #t #t))"
"((s_25 ns1_26)(eval6_2 s_25 ns1_26 #f #t #f)))))"
"(define-values"
"(eval-compiled)"
"(lambda(c_27 ns_28)"
"(if(1/compiled-module-expression? c_27)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:59:4_29) eval-module10.1)((c57_30) c_27)((ns58_31) ns_28))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 #f #f ns58_31 #t #f #f c57_30)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:59:4_29"
" keyword-procedure-extract"
" '(#:namespace)"
" 3)"
" '(#:namespace)"
"(list ns58_31)"
" c57_30))))"
"(let-values()(eval-top c_27 ns_28 eval-compiled)))))"
"(define-values"
"(compile$1)"
"(let-values(((compile17_32)"
"(lambda(s16_33"
" ns8_34"
" serializable?9_35"
" expand10_36"
" to-source?11_37"
" ns12_38"
" serializable?13_39"
" expand14_40"
" to-source?15_41)"
"(let-values(((s_42) s16_33))"
"(let-values(((ns_43)(if ns12_38 ns8_34(1/current-namespace))))"
"(let-values(((serializable?_44)(if serializable?13_39 serializable?9_35 #t)))"
"(let-values(((expand_45)(if expand14_40 expand10_36 expand$1)))"
"(let-values(((to-source?_46)(if to-source?15_41 to-source?11_37 #f)))"
"(let-values()"
"(let-values(((cs_47)"
"(if(1/compiled-expression? s_42)"
"(let-values()(list s_42))"
"(if(if(syntax?$1 s_42)(1/compiled-expression?(syntax-e$2 s_42)) #f)"
"(let-values()(list(syntax-e$2 s_42)))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:79:6_48) per-top-level53.1)"
"((s59_49) s_42)"
"((ns60_50) ns_43)"
"((temp61_51)"
"(lambda(s_53 ns_54)"
"(list"
"(compile-single$1"
" s_53"
" ns_54"
" expand_45"
" serializable?_44"
" to-source?_46))))"
"((append62_52) append))"
"(if(variable-reference-constant?"
"(#%variable-reference per-top-level53.1))"
"(per-top-level51.1"
" append62_52"
" #t"
" #f"
" #f"
" temp61_51"
" #f"
" #f"
" s59_49"
" ns60_50)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:79:6_48"
" keyword-procedure-extract"
" '(#:combine #:single)"
" 4)"
" '(#:combine #:single)"
"(list append62_52 temp61_51)"
" s59_49"
" ns60_50))))))))"
"(if(= 1(length cs_47))"
"(car cs_47)"
"(let-values(((...pander/eval/main.rkt:86:6_55) compiled-tops->compiled-top6.1)"
"((cs63_56) cs_47)"
"((to-source?64_57) to-source?_46))"
"(if(variable-reference-constant?"
"(#%variable-reference compiled-tops->compiled-top6.1))"
"(compiled-tops->compiled-top4.1 to-source?64_57 #t cs63_56)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:86:6_55"
" keyword-procedure-extract"
" '(#:to-source?)"
" 3)"
" '(#:to-source?)"
"(list to-source?64_57)"
" cs63_56))))))))))))))"
"(case-lambda"
"((s_58)(compile17_32 s_58 #f #f #f #f #f #f #f #f))"
"((s_59 ns_60 serializable?_61 expand_62 to-source?11_63)"
"(compile17_32 s_59 ns_60 serializable?_61 expand_62 to-source?11_63 #t #t #t #t))"
"((s_64 ns_65 serializable?_66 expand10_67)(compile17_32 s_64 ns_65 serializable?_66 expand10_67 #f #t #t #t #f))"
"((s_68 ns_69 serializable?9_70)(compile17_32 s_68 ns_69 serializable?9_70 #f #f #t #t #f #f))"
"((s_71 ns8_72)(compile17_32 s_71 ns8_72 #f #f #f #t #f #f #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets22_73)"
"(lambda(s21_74 ns19_75 ns20_76)"
"(let-values(((s_77) s21_74))"
"(let-values(((ns_78)(if ns20_76 ns19_75(1/current-namespace))))"
"(let-values()(compile$1 s_77 ns_78 #t expand$1 #t)))))))"
"(case-lambda"
"((s_79)(compile-to-linklets22_73 s_79 #f #f))"
"((s_80 ns19_81)(compile-to-linklets22_73 s_80 ns19_81 #t)))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_82 ns_83 expand_84 serializable?_85 to-source?_86)"
"(let-values(((exp-s_87)(expand_84 s_82 ns_83)))"
"((letrec-values(((loop_88)"
"(lambda(exp-s_89)"
"(let-values(((disarmed-exp-s_90)(syntax-disarm$1 exp-s_89)))"
"(let-values(((tmp_91)(core-form-sym disarmed-exp-s_90(namespace-phase ns_83))))"
"(if(equal? tmp_91 'module)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:101:7_92) compile-module13.1)"
"((exp-s65_93) exp-s_89)"
"((temp66_94)"
"(let-values(((...pander/eval/main.rkt:101:29_97)"
" make-compile-context16.1)"
"((ns69_98) ns_83))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1 #f #f #f #f #f #f ns69_98 #t #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:101:29_97"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list ns69_98)))))"
"((serializable?67_95) serializable?_85)"
"((to-source?68_96) to-source?_86))"
"(if(variable-reference-constant?(#%variable-reference compile-module13.1))"
"(compile-module11.1"
" #f"
" #f"
" #f"
" #f"
" serializable?67_95"
" #t"
" to-source?68_96"
" #t"
" exp-s65_93"
" temp66_94)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:101:7_92"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?67_95 to-source?68_96)"
" exp-s65_93"
" temp66_94))))"
"(if(equal? tmp_91 'begin)"
"(let-values()"
"(let-values(((ok?_99 begin70_100 e71_101)"
"(let-values(((s_112) disarmed-exp-s_90))"
"(if(if #t #t #f)"
"(let-values(((orig-s_113) s_112))"
"(let-values(((begin70_114 e71_115)"
"(let-values(((s_116)"
"(if(syntax?$1 s_112)"
"(syntax-e$1 s_112)"
" s_112)))"
"(if(pair? s_116)"
"(let-values(((begin72_117)"
"(let-values(((s_119)"
"(car s_116)))"
" s_119))"
"((e73_118)"
"(let-values(((s_120)"
"(cdr s_116)))"
"(let-values(((s_121)"
"(if(syntax?$1"
" s_120)"
"(syntax-e$1"
" s_120)"
" s_120)))"
"(let-values(((flat-s_122)"
"(to-syntax-list.1$1"
" s_121)))"
"(if(not flat-s_122)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_113))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_113))"
"(let-values()"
"(let-values(((e_123)"
"(let-values(((lst_124)"
" flat-s_122))"
"(begin"
"(if(list?"
" lst_124)"
"(void)"
"(let-values()"
"(in-list"
" lst_124)))"
"((letrec-values(((for-loop_125)"
"(lambda(e_126"
" lst_127)"
"(if(pair?"
" lst_127)"
"(let-values(((s_128)"
"(unsafe-car"
" lst_127)))"
"(if #t"
"(let-values(((e_129)"
"(let-values(((e_130)"
" e_126))"
"(let-values(((e_131)"
"(let-values()"
"(let-values(((e76_132)"
"(let-values()"
" s_128)))"
"(cons"
" e76_132"
" e_130)))))"
"(values"
" e_131)))))"
"(if #t"
"(for-loop_125"
" e_129"
"(unsafe-cdr"
" lst_127))"
" e_129))"
" e_126))"
" e_126))))"
" for-loop_125)"
" null"
" lst_124)))))"
"(alt-reverse"
" e_123))))))))))"
"(values begin72_117 e73_118))"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_113)))))"
"(values #t begin70_114 e71_115)))"
"(values #f #f #f)))))"
"(let-values(((...pander/eval/main.rkt:107:7_133) compiled-tops->compiled-top6.1)"
"((temp74_134)"
"(alt-reverse"
"(let-values(((lst_136) e71_101))"
"(begin"
"(if(list? lst_136)(void)(let-values()(in-list lst_136)))"
"((letrec-values(((for-loop_137)"
"(lambda(fold-var_138 lst_139)"
"(if(pair? lst_139)"
"(let-values(((e_140)"
"(unsafe-car lst_139)))"
"(if #t"
"(let-values(((fold-var_141)"
"(let-values(((fold-var_142)"
" fold-var_138))"
"(let-values(((fold-var_143)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_88"
" e_140))"
" fold-var_142))))"
"(values"
" fold-var_143)))))"
"(if #t"
"(for-loop_137"
" fold-var_141"
"(unsafe-cdr lst_139))"
" fold-var_141))"
" fold-var_138))"
" fold-var_138))))"
" for-loop_137)"
" null"
" lst_136)))))"
"((to-source?75_135) to-source?_86))"
"(if(variable-reference-constant?"
"(#%variable-reference compiled-tops->compiled-top6.1))"
"(compiled-tops->compiled-top4.1 to-source?75_135 #t temp74_134)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:107:7_133"
" keyword-procedure-extract"
" '(#:to-source?)"
" 3)"
" '(#:to-source?)"
"(list to-source?75_135)"
" temp74_134)))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:112:7_144) compile-top9.1)"
"((exp-s77_145) exp-s_89)"
"((temp78_146)"
"(let-values(((...pander/eval/main.rkt:112:26_149)"
" make-compile-context16.1)"
"((ns81_150) ns_83))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns81_150"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:112:26_149"
" keyword-procedure-extract"
" '(#:namespace)"
" 2)"
" '(#:namespace)"
"(list ns81_150)))))"
"((serializable?79_147) serializable?_85)"
"((to-source?80_148) to-source?_86))"
"(if(variable-reference-constant?(#%variable-reference compile-top9.1))"
"(compile-top7.1"
" serializable?79_147"
" #t"
" to-source?80_148"
" #t"
" exp-s77_145"
" temp78_146)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:112:7_144"
" keyword-procedure-extract"
" '(#:serializable? #:to-source?)"
" 4)"
" '(#:serializable? #:to-source?)"
"(list serializable?79_147 to-source?80_148)"
" exp-s77_145"
" temp78_146)))))))))))"
" loop_88)"
" exp-s_87))))"
"(define-values"
"(expand$1)"
"(let-values(((expand29_151)"
"(lambda(s28_152 ns24_153 log-expand?25_154 ns26_155 log-expand?27_156)"
"(let-values(((s_157) s28_152))"
"(let-values(((ns_158)(if ns26_155 ns24_153(1/current-namespace))))"
"(let-values(((log-expand?_159)(if log-expand?27_156 log-expand?25_154 #f)))"
"(let-values()"
"(begin"
"(if log-expand?_159(let-values()(log-expand-start))(void))"
"(let-values(((...pander/eval/main.rkt:122:2_160) per-top-level53.1)"
"((s82_161) s_157)"
"((ns83_162) ns_158)"
"((expand-single84_163) expand-single)"
"((cons85_164) cons)"
"((re-pair86_165) re-pair))"
"(if(variable-reference-constant?(#%variable-reference per-top-level53.1))"
"(per-top-level51.1"
" cons85_164"
" #t"
" #f"
" #f"
" expand-single84_163"
" re-pair86_165"
" #t"
" s82_161"
" ns83_162)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:122:2_160"
" keyword-procedure-extract"
" '(#:combine #:single #:wrap)"
" 4)"
" '(#:combine #:single #:wrap)"
"(list cons85_164 expand-single84_163 re-pair86_165)"
" s82_161"
" ns83_162)))))))))))"
"(case-lambda"
"((s_166)(expand29_151 s_166 #f #f #f #f))"
"((s_167 ns_168 log-expand?25_169)(expand29_151 s_167 ns_168 log-expand?25_169 #t #t))"
"((s_170 ns24_171)(expand29_151 s_170 ns24_171 #f #t #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_172 ns_173)"
"(let-values(((require-lifts_174 lifts_175 exp-s_176)(expand-capturing-lifts s_172(make-expand-context ns_173))))"
"(if(if(null? require-lifts_174)(null? lifts_175) #f)"
"(let-values() exp-s_176)"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:133:4_177) wrap-lifts-as-begin17.1)"
"((temp87_178)(append require-lifts_174 lifts_175))"
"((temp88_179)(lambda(form_183)(expand-single form_183 ns_173)))"
"((exp-s89_180) exp-s_176)"
"((s90_181) s_172)"
"((temp91_182)(namespace-phase ns_173)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 temp88_179 #t temp87_178 exp-s89_180 s90_181 temp91_182)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:133:4_177"
" keyword-procedure-extract"
" '(#:adjust-form)"
" 6)"
" '(#:adjust-form)"
"(list temp88_179)"
" temp87_178"
" exp-s89_180"
" s90_181"
" temp91_182))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once34_184)"
"(lambda(s33_185 ns31_186 ns32_187)"
"(let-values(((s_188) s33_185))"
"(let-values(((ns_189)(if ns32_187 ns31_186(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:139:2_190) per-top-level53.1)"
"((s92_191) s_188)"
"((ns93_192) ns_189)"
"((expand-single-once94_193) expand-single-once)"
"((cons95_194) cons)"
"((re-pair96_195) re-pair)"
"((temp97_196) #t))"
"(if(variable-reference-constant?(#%variable-reference per-top-level53.1))"
"(per-top-level51.1"
" cons95_194"
" #t"
" temp97_196"
" #t"
" expand-single-once94_193"
" re-pair96_195"
" #t"
" s92_191"
" ns93_192)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:139:2_190"
" keyword-procedure-extract"
" '(#:combine #:just-once? #:single #:wrap)"
" 4)"
" '(#:combine #:just-once? #:single #:wrap)"
"(list cons95_194 temp97_196 expand-single-once94_193 re-pair96_195)"
" s92_191"
" ns93_192)))))))))"
"(case-lambda((s_197)(expand-once34_184 s_197 #f #f))((s_198 ns31_199)(expand-once34_184 s_198 ns31_199 #t)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_200 ns_201)"
"(let-values(((require-lifts_202 lifts_203 exp-s_204)"
"(expand-capturing-lifts"
" s_200"
"(let-values(((the-struct_205)(make-expand-context ns_201)))"
"(if(expand-context? the-struct_205)"
"(let-values(((just-once?98_206) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_205)"
"(root-expand-context-post-expansion-scope the-struct_205)"
"(root-expand-context-top-level-bind-scope the-struct_205)"
"(root-expand-context-all-scopes-stx the-struct_205)"
"(root-expand-context-use-site-scopes the-struct_205)"
"(root-expand-context-defined-syms the-struct_205)"
"(root-expand-context-frame-id the-struct_205)"
"(root-expand-context-counter the-struct_205)"
"(root-expand-context-lift-key the-struct_205)"
"(expand-context-context the-struct_205)"
"(expand-context-phase the-struct_205)"
"(expand-context-namespace the-struct_205)"
"(expand-context-env the-struct_205)"
"(expand-context-post-expansion-scope-action the-struct_205)"
"(expand-context-scopes the-struct_205)"
"(expand-context-def-ctx-scopes the-struct_205)"
"(expand-context-reference-records the-struct_205)"
"(expand-context-only-immediate? the-struct_205)"
" just-once?98_206"
"(expand-context-module-begin-k the-struct_205)"
"(expand-context-need-eventually-defined the-struct_205)"
"(expand-context-allow-unbound? the-struct_205)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_205)"
"(expand-context-stops the-struct_205)"
"(expand-context-current-introduction-scopes the-struct_205)"
"(expand-context-declared-submodule-names the-struct_205)"
"(expand-context-lifts the-struct_205)"
"(expand-context-lift-envs the-struct_205)"
"(expand-context-module-lifts the-struct_205)"
"(expand-context-require-lifts the-struct_205)"
"(expand-context-to-module-lifts the-struct_205)"
"(expand-context-requires+provides the-struct_205)"
"(expand-context-name the-struct_205)"
"(expand-context-observer the-struct_205)))"
"                       (raise-argument-error 'struct-copy \"expand-context?\" the-struct_205))))))"
"(if(if(null? require-lifts_202)(null? lifts_203) #f)"
"(let-values() exp-s_204)"
"(let-values()"
"(let-values(((temp99_207)(append require-lifts_202 lifts_203))"
"((exp-s100_208) exp-s_204)"
"((s101_209) s_200)"
"((temp102_210)(namespace-phase ns_201)))"
"(if(variable-reference-constant?(#%variable-reference wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1 #f #f temp99_207 exp-s100_208 s101_209 temp102_210)"
"(wrap-lifts-as-begin17.1 temp99_207 exp-s100_208 s101_209 temp102_210))))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form39_211)"
"(lambda(s38_212 ns36_213 ns37_214)"
"(let-values(((s_215) s38_212))"
"(let-values(((ns_216)(if ns37_214 ns36_213(1/current-namespace))))"
"(let-values()"
"(let-values(((...pander/eval/main.rkt:159:2_217) per-top-level53.1)"
"((s103_218) s_215)"
"((ns104_219) ns_216)"
"((temp105_220) #f))"
"(if(variable-reference-constant?(#%variable-reference per-top-level53.1))"
"(per-top-level51.1 #f #f #f #f temp105_220 #f #f s103_218 ns104_219)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:159:2_217"
" keyword-procedure-extract"
" '(#:single)"
" 4)"
" '(#:single)"
"(list temp105_220)"
" s103_218"
" ns104_219)))))))))"
"(case-lambda"
"((s_221)(expand-to-top-form39_211 s_221 #f #f))"
"((s_222 ns36_223)(expand-to-top-form39_211 s_222 ns36_223 #t)))))"
"(define-values"
"(lifted/1.1$13)"
"(make-required"
" 'per-top-level"
"(case-lambda((self_224 given-s_225 ns_226)(apply missing-kw self_224 given-s_225 ns_226 null)))"
" #f"
" #f))"
"(define-values"
"(per-top-level51.1)"
"(lambda(combine42_227"
" combine46_228"
" just-once?44_229"
" just-once?48_230"
" single41_231"
" wrap43_232"
" wrap47_233"
" given-s49_234"
" ns50_235)"
"(let-values(((given-s_236) given-s49_234))"
"(let-values(((ns_237) ns50_235))"
"(let-values(((single_238) single41_231))"
"(let-values(((combine_239)(if combine46_228 combine42_227 #f)))"
"(let-values(((wrap_240)(if wrap47_233 wrap43_232 #f)))"
"(let-values(((just-once?_241)(if just-once?48_230 just-once?44_229 #f)))"
"(let-values()"
"(let-values(((s_242)(maybe-intro given-s_236 ns_237)))"
"(let-values(((ctx_243)(make-expand-context ns_237)))"
"(let-values(((phase_244)(namespace-phase ns_237)))"
"((letrec-values(((loop_245)"
"(lambda(s_246 phase_247 ns_248)"
"(let-values(((tl-ctx_249)"
"(let-values(((the-struct_254) ctx_243))"
"(if(expand-context? the-struct_254)"
"(let-values(((phase106_255) phase_247)"
"((namespace107_256) ns_248)"
"((just-once?108_257) just-once?_241))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_254)"
"(root-expand-context-post-expansion-scope"
" the-struct_254)"
"(root-expand-context-top-level-bind-scope"
" the-struct_254)"
"(root-expand-context-all-scopes-stx the-struct_254)"
"(root-expand-context-use-site-scopes the-struct_254)"
"(root-expand-context-defined-syms the-struct_254)"
"(root-expand-context-frame-id the-struct_254)"
"(root-expand-context-counter the-struct_254)"
"(root-expand-context-lift-key the-struct_254)"
"(expand-context-context the-struct_254)"
" phase106_255"
" namespace107_256"
"(expand-context-env the-struct_254)"
"(expand-context-post-expansion-scope-action"
" the-struct_254)"
"(expand-context-scopes the-struct_254)"
"(expand-context-def-ctx-scopes the-struct_254)"
"(expand-context-reference-records the-struct_254)"
"(expand-context-only-immediate? the-struct_254)"
" just-once?108_257"
"(expand-context-module-begin-k the-struct_254)"
"(expand-context-need-eventually-defined the-struct_254)"
"(expand-context-allow-unbound? the-struct_254)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_254)"
"(expand-context-stops the-struct_254)"
"(expand-context-current-introduction-scopes"
" the-struct_254)"
"(expand-context-declared-submodule-names"
" the-struct_254)"
"(expand-context-lifts the-struct_254)"
"(expand-context-lift-envs the-struct_254)"
"(expand-context-module-lifts the-struct_254)"
"(expand-context-require-lifts the-struct_254)"
"(expand-context-to-module-lifts the-struct_254)"
"(expand-context-requires+provides the-struct_254)"
"(expand-context-name the-struct_254)"
"(expand-context-observer the-struct_254)))"
"(raise-argument-error"
" 'struct-copy"
"                                                               \"expand-context?\""
" the-struct_254)))))"
"(let-values(((require-lifts_250 lifts_251 exp-s_252)"
"(expand-capturing-lifts"
" s_246"
"(let-values(((the-struct_258) tl-ctx_249))"
"(if(expand-context? the-struct_258)"
"(let-values(((only-immediate?109_259) #t)"
"((phase110_260) phase_247)"
"((namespace111_261) ns_248))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_258)"
"(root-expand-context-post-expansion-scope"
" the-struct_258)"
"(root-expand-context-top-level-bind-scope"
" the-struct_258)"
"(root-expand-context-all-scopes-stx the-struct_258)"
"(root-expand-context-use-site-scopes the-struct_258)"
"(root-expand-context-defined-syms the-struct_258)"
"(root-expand-context-frame-id the-struct_258)"
"(root-expand-context-counter the-struct_258)"
"(root-expand-context-lift-key the-struct_258)"
"(expand-context-context the-struct_258)"
" phase110_260"
" namespace111_261"
"(expand-context-env the-struct_258)"
"(expand-context-post-expansion-scope-action"
" the-struct_258)"
"(expand-context-scopes the-struct_258)"
"(expand-context-def-ctx-scopes the-struct_258)"
"(expand-context-reference-records the-struct_258)"
" only-immediate?109_259"
"(expand-context-just-once? the-struct_258)"
"(expand-context-module-begin-k the-struct_258)"
"(expand-context-need-eventually-defined"
" the-struct_258)"
"(expand-context-allow-unbound? the-struct_258)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_258)"
"(expand-context-stops the-struct_258)"
"(expand-context-current-introduction-scopes"
" the-struct_258)"
"(expand-context-declared-submodule-names"
" the-struct_258)"
"(expand-context-lifts the-struct_258)"
"(expand-context-lift-envs the-struct_258)"
"(expand-context-module-lifts the-struct_258)"
"(expand-context-require-lifts the-struct_258)"
"(expand-context-to-module-lifts the-struct_258)"
"(expand-context-requires+provides the-struct_258)"
"(expand-context-name the-struct_258)"
"(expand-context-observer the-struct_258)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                  \"expand-context?\""
" the-struct_258))))))"
"(let-values(((disarmed-exp-s_253)(syntax-disarm$1 exp-s_252)))"
"(if(let-values(((or-part_262)(pair? require-lifts_250)))"
"(if or-part_262 or-part_262(pair? lifts_251)))"
"(let-values()"
"(let-values(((new-s_263)"
"(let-values(((temp112_264)"
"(append require-lifts_250 lifts_251))"
"((exp-s113_265) exp-s_252)"
"((s114_266) s_246)"
"((phase115_267) phase_247))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" wrap-lifts-as-begin17.1))"
"(wrap-lifts-as-begin15.1"
" #f"
" #f"
" temp112_264"
" exp-s113_265"
" s114_266"
" phase115_267)"
"(wrap-lifts-as-begin17.1"
" temp112_264"
" exp-s113_265"
" s114_266"
" phase115_267)))))"
"(if just-once?_241"
" new-s_263"
"(loop_245 new-s_263 phase_247 ns_248))))"
"(if(not single_238)"
"(let-values() exp-s_252)"
"(if(if just-once?_241(not(eq? exp-s_252 s_246)) #f)"
"(let-values() exp-s_252)"
"(let-values()"
"(let-values(((tmp_268)"
"(core-form-sym disarmed-exp-s_253 phase_247)))"
"(if(equal? tmp_268 'begin)"
"(let-values()"
"(let-values(((ok?_269 begin116_270 e117_271)"
"(let-values(((s_283) disarmed-exp-s_253))"
"(if(if #t #t #f)"
"(let-values(((orig-s_284) s_283))"
"(let-values(((begin116_285"
" e117_286)"
"(let-values(((s_287)"
"(if(syntax?$1"
" s_283)"
"(syntax-e$1"
" s_283)"
" s_283)))"
"(if(pair? s_287)"
"(let-values(((begin118_288)"
"(let-values(((s_290)"
"(car"
" s_287)))"
" s_290))"
"((e119_289)"
"(let-values(((s_291)"
"(cdr"
" s_287)))"
"(let-values(((s_292)"
"(if(syntax?$1"
" s_291)"
"(syntax-e$1"
" s_291)"
" s_291)))"
"(let-values(((flat-s_293)"
"(to-syntax-list.1$1"
" s_292)))"
"(if(not"
" flat-s_293)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_284))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_284))"
"(let-values()"
"(let-values(((e_294)"
"(let-values(((lst_295)"
" flat-s_293))"
"(begin"
"(if(list?"
" lst_295)"
"(void)"
"(let-values()"
"(in-list"
" lst_295)))"
"((letrec-values(((for-loop_296)"
"(lambda(e_297"
" lst_298)"
"(if(pair?"
" lst_298)"
"(let-values(((s_299)"
"(unsafe-car"
" lst_298)))"
"(if #t"
"(let-values(((e_300)"
"(let-values(((e_301)"
" e_297))"
"(let-values(((e_302)"
"(let-values()"
"(let-values(((e120_303)"
"(let-values()"
" s_299)))"
"(cons"
" e120_303"
" e_301)))))"
"(values"
" e_302)))))"
"(if #t"
"(for-loop_296"
" e_300"
"(unsafe-cdr"
" lst_298))"
" e_300))"
" e_297))"
" e_297))))"
" for-loop_296)"
" null"
" lst_295)))))"
"(alt-reverse"
" e_294))))))))))"
"(values"
" begin118_288"
" e119_289))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_284)))))"
"(values"
" #t"
" begin116_285"
" e117_286)))"
"(values #f #f #f)))))"
"(letrec-values(((begin-loop_282)"
"(lambda(es_304)"
"(if(null? es_304)"
"(let-values()"
"(if combine_239 null(void)))"
"(if(if(not combine_239)"
"(null?(cdr es_304))"
" #f)"
"(let-values()"
"(loop_245"
"(car es_304)"
" phase_247"
" ns_248))"
"(let-values()"
"(let-values(((a_305)"
"(loop_245"
"(car es_304)"
" phase_247"
" ns_248)))"
"(if combine_239"
"(combine_239"
" a_305"
"(begin-loop_282"
"(cdr es_304)))"
"(begin-loop_282"
"(cdr es_304))))))))))"
"(if wrap_240"
"(wrap_240"
" begin116_270"
" exp-s_252"
"(begin-loop_282 e117_271))"
"(begin-loop_282 e117_271)))))"
"(if(equal? tmp_268 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_306"
" begin-for-syntax121_307"
" e122_308)"
"(let-values(((s_322)"
" disarmed-exp-s_253))"
"(if(if #t #t #f)"
"(let-values(((orig-s_323) s_322))"
"(let-values(((begin-for-syntax121_324"
" e122_325)"
"(let-values(((s_326)"
"(if(syntax?$1"
" s_322)"
"(syntax-e$1"
" s_322)"
" s_322)))"
"(if(pair? s_326)"
"(let-values(((begin-for-syntax123_327)"
"(let-values(((s_329)"
"(car"
" s_326)))"
" s_329))"
"((e124_328)"
"(let-values(((s_330)"
"(cdr"
" s_326)))"
"(let-values(((s_331)"
"(if(syntax?$1"
" s_330)"
"(syntax-e$1"
" s_330)"
" s_330)))"
"(let-values(((flat-s_332)"
"(to-syntax-list.1$1"
" s_331)))"
"(if(not"
" flat-s_332)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_323))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_323))"
"(let-values()"
"(let-values(((e_333)"
"(let-values(((lst_334)"
" flat-s_332))"
"(begin"
"(if(list?"
" lst_334)"
"(void)"
"(let-values()"
"(in-list"
" lst_334)))"
"((letrec-values(((for-loop_335)"
"(lambda(e_336"
" lst_337)"
"(if(pair?"
" lst_337)"
"(let-values(((s_338)"
"(unsafe-car"
" lst_337)))"
"(if #t"
"(let-values(((e_339)"
"(let-values(((e_340)"
" e_336))"
"(let-values(((e_341)"
"(let-values()"
"(let-values(((e125_342)"
"(let-values()"
" s_338)))"
"(cons"
" e125_342"
" e_340)))))"
"(values"
" e_341)))))"
"(if #t"
"(for-loop_335"
" e_339"
"(unsafe-cdr"
" lst_337))"
" e_339))"
" e_336))"
" e_336))))"
" for-loop_335)"
" null"
" lst_334)))))"
"(alt-reverse"
" e_333))))))))))"
"(values"
" begin-for-syntax123_327"
" e124_328))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_323)))))"
"(values"
" #t"
" begin-for-syntax121_324"
" e122_325)))"
"(values #f #f #f)))))"
"(let-values(((next-phase_319)(add1 phase_247)))"
"(let-values(((next-ns_320)"
"(namespace->namespace-at-phase"
" ns_248"
" next-phase_319)))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_320)"
"(values))))"
"(let-values(((l_321)"
"(alt-reverse"
"(let-values(((lst_343)"
" e122_308))"
"(begin"
"(if(list? lst_343)"
"(void)"
"(let-values()"
"(in-list lst_343)))"
"((letrec-values(((for-loop_344)"
"(lambda(fold-var_345"
" lst_346)"
"(if(pair?"
" lst_346)"
"(let-values(((s_347)"
"(unsafe-car"
" lst_346)))"
"(if #t"
"(let-values(((fold-var_348)"
"(let-values(((fold-var_349)"
" fold-var_345))"
"(let-values(((fold-var_350)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_245"
" s_347"
" next-phase_319"
" next-ns_320))"
" fold-var_349))))"
"(values"
" fold-var_350)))))"
"(if #t"
"(for-loop_344"
" fold-var_348"
"(unsafe-cdr"
" lst_346))"
" fold-var_348))"
" fold-var_345))"
" fold-var_345))))"
" for-loop_344)"
" null"
" lst_343))))))"
"(if wrap_240"
"(let-values()"
"(wrap_240"
" begin-for-syntax121_307"
" exp-s_252"
" l_321))"
"(if combine_239"
"(let-values() l_321)"
"(let-values()(void))))))))))"
"(let-values()"
"(single_238 exp-s_252 ns_248)))))))))))))))"
" loop_245)"
" s_242"
" phase_244"
" ns_237)))))))))))))"
"(define-values"
"(unpack52.1$1)"
"(lambda(given-kws_351 given-args_352 given-s49_353 ns50_354)"
"(let-values(((combine46_355)(if(pair? given-kws_351)(eq? '#:combine(car given-kws_351)) #f)))"
"(let-values(((combine42_356)(if combine46_355(car given-args_352)(void)))"
"((given-kws_357)(if combine46_355(cdr given-kws_351) given-kws_351))"
"((given-args_358)(if combine46_355(cdr given-args_352) given-args_352)))"
"(let-values(((just-once?48_359)(if(pair? given-kws_357)(eq? '#:just-once?(car given-kws_357)) #f)))"
"(let-values(((just-once?44_360)(if just-once?48_359(car given-args_358)(void)))"
"((given-kws_361)(if just-once?48_359(cdr given-kws_357) given-kws_357))"
"((given-args_362)(if just-once?48_359(cdr given-args_358) given-args_358)))"
"(let-values(((single41_363)(car given-args_362))"
"((given-kws_364)(cdr given-kws_361))"
"((given-args_365)(cdr given-args_362)))"
"(let-values(((wrap47_366)(pair? given-kws_364)))"
"(let-values(((wrap43_367)(if wrap47_366(car given-args_365)(void))))"
"(per-top-level51.1"
" combine42_356"
" combine46_355"
" just-once?44_360"
" just-once?48_359"
" single41_363"
" wrap43_367"
" wrap47_366"
" given-s49_353"
" ns50_354))))))))))"
"(define-values"
"(per-top-level53.1)"
"(lifted/1.1$13"
"(lambda(given-kws_368 given-argc_369)"
"(if(= given-argc_369 4)(subsets? '(#:single) given-kws_368 '(#:combine #:just-once? #:single #:wrap)) #f))"
"(case-lambda"
"((given-kws_370 given-args_371 given-s_372 ns_373)(unpack52.1$1 given-kws_370 given-args_371 given-s_372 ns_373)))"
" '(#:single)"
" '(#:combine #:just-once? #:single #:wrap)))"
"(define-values"
"(maybe-intro)"
"(lambda(s_374 ns_375)(if(syntax?$1 s_374) s_374(1/namespace-syntax-introduce(1/datum->syntax #f s_374) ns_375))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_376 s_377 r_378)"
"(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_377)(cons form-id_376 r_378) s_377 s_377) s_377)))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_379 ctx_380)"
"(let-values(((ns_381)(expand-context-namespace ctx_380)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_381)(values))))"
"(let-values(((lift-ctx_382)"
"(let-values(((temp126_385)(make-top-level-lift ctx_380)))"
"(if(variable-reference-constant?(#%variable-reference make-lift-context8.1))"
"(make-lift-context6.1 #f #f temp126_385)"
"(make-lift-context8.1 temp126_385)))))"
"(let-values(((require-lift-ctx_383)"
"(make-require-lift-context(namespace-phase ns_381)(make-parse-top-lifted-require ns_381))))"
"(let-values(((exp-s_384)"
"(let-values(((s127_386) s_379)"
"((temp128_387)"
"(let-values(((the-struct_388) ctx_380))"
"(if(expand-context? the-struct_388)"
"(let-values(((lifts129_389) lift-ctx_382)"
"((module-lifts130_390) lift-ctx_382)"
"((require-lifts131_391) require-lift-ctx_383))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_388)"
"(root-expand-context-post-expansion-scope the-struct_388)"
"(root-expand-context-top-level-bind-scope the-struct_388)"
"(root-expand-context-all-scopes-stx the-struct_388)"
"(root-expand-context-use-site-scopes the-struct_388)"
"(root-expand-context-defined-syms the-struct_388)"
"(root-expand-context-frame-id the-struct_388)"
"(root-expand-context-counter the-struct_388)"
"(root-expand-context-lift-key the-struct_388)"
"(expand-context-context the-struct_388)"
"(expand-context-phase the-struct_388)"
"(expand-context-namespace the-struct_388)"
"(expand-context-env the-struct_388)"
"(expand-context-post-expansion-scope-action the-struct_388)"
"(expand-context-scopes the-struct_388)"
"(expand-context-def-ctx-scopes the-struct_388)"
"(expand-context-reference-records the-struct_388)"
"(expand-context-only-immediate? the-struct_388)"
"(expand-context-just-once? the-struct_388)"
"(expand-context-module-begin-k the-struct_388)"
"(expand-context-need-eventually-defined the-struct_388)"
"(expand-context-allow-unbound? the-struct_388)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_388)"
"(expand-context-stops the-struct_388)"
"(expand-context-current-introduction-scopes the-struct_388)"
"(expand-context-declared-submodule-names the-struct_388)"
" lifts129_389"
"(expand-context-lift-envs the-struct_388)"
" module-lifts130_390"
" require-lifts131_391"
"(expand-context-to-module-lifts the-struct_388)"
"(expand-context-requires+provides the-struct_388)"
"(expand-context-name the-struct_388)"
"(expand-context-observer the-struct_388)))"
"                                            (raise-argument-error 'struct-copy \"expand-context?\" the-struct_388)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f s127_386 temp128_387)"
"(expand7.1 s127_386 temp128_387)))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_383)"
"(get-and-clear-lifts! lift-ctx_382)"
" exp-s_384))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_392)"
"(lambda(s_393 phase_394)"
"(let-values(((ok?_395 #%require132_396 req133_397)"
"(let-values(((s_408)(syntax-disarm$1 s_393)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_409) s_408))"
"(let-values(((#%require132_410 req133_411)"
"(let-values(((s_412)(if(syntax?$1 s_408)(syntax-e$1 s_408) s_408)))"
"(if(pair? s_412)"
"(let-values(((#%require134_413)(let-values(((s_415)(car s_412))) s_415))"
"((req135_414)"
"(let-values(((s_416)(cdr s_412)))"
"(let-values(((s_417)"
"(if(syntax?$1 s_416)"
"(syntax-e$1 s_416)"
" s_416)))"
"(if(pair? s_417)"
"(let-values(((req136_418)"
"(let-values(((s_419)(car s_417)))"
" s_419))"
"(()"
"(let-values(((s_420)(cdr s_417)))"
"(let-values(((s_421)"
"(if(syntax?$1 s_420)"
"(syntax-e$1 s_420)"
" s_420)))"
"(if(null? s_421)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_409))))))"
"(values req136_418))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_409))))))"
"(values #%require134_413 req135_414))"
"                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_409)))))"
"(values #t #%require132_410 req133_411)))"
"(values #f #f #f)))))"
"(let-values(((...pander/eval/main.rkt:269:4_422) parse-and-perform-requires!22.1)"
"((temp137_423)(list req133_397))"
"((s138_424) s_393)"
"((ns139_425) ns_392)"
"((phase140_426) phase_394)"
"((phase141_427) phase_394)"
"((temp142_428)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" phase141_427"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp137_423"
" s138_424"
" ns139_425"
" phase140_426"
" temp142_428)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...pander/eval/main.rkt:269:4_422"
" keyword-procedure-extract"
" '(#:run-phase)"
" 7)"
" '(#:run-phase)"
"(list phase141_427)"
" temp137_423"
" s138_424"
" ns139_425"
" phase140_426"
" temp142_428)))))))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require5_1)"
"(lambda(mod-path3_2 sym4_3 fail-k1_4 fail-k2_5)"
"(let-values(((mod-path_6) mod-path3_2))"
"(let-values(((sym_7) sym4_3))"
"(let-values(((fail-k_8)(if fail-k2_5 fail-k1_4 default-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_13)(1/module-path? mod-path_6)))"
"(if or-part_13"
" or-part_13"
"(let-values(((or-part_14)(1/module-path-index? mod-path_6)))"
"(if or-part_14 or-part_14(1/resolved-module-path? mod-path_6)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'dynamic-require"
"                                               \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_6)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_15)(symbol? sym_7)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_16)(not sym_7)))"
"(if or-part_16"
" or-part_16"
"(let-values(((or-part_17)(equal? sym_7 0)))"
"(if or-part_17 or-part_17(void? sym_7)))))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'dynamic-require"
"                                                 \"(or/c symbol? #f 0 void?)\""
" sym_7)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_8)(procedure-arity-includes? fail-k_8 0) #f)"
"(void)"
"(let-values()"
"                                                  (raise-argument-error 'dynamic-require \"(-> any)\" fail-k_8)))"
"(values))))"
"(let-values(((ns_9)(1/current-namespace)))"
"(let-values(((mpi_10)"
"(if(1/module-path? mod-path_6)"
"(let-values()(1/module-path-index-join mod-path_6 #f))"
"(if(1/module-path-index? mod-path_6)"
"(let-values() mod-path_6)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_6)"
" #f))))))"
"(let-values(((mod-name_11)(1/module-path-index-resolve mpi_10 #t)))"
"(let-values(((phase_12)(namespace-phase ns_9)))"
"(if(not sym_7)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:41:4_18)"
" namespace-module-instantiate!93.1)"
"((ns7_19) ns_9)"
"((mpi8_20) mpi_10)"
"((phase9_21) phase_12)"
"((phase10_22) phase_12)"
"((temp11_23) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!93.1))"
"(namespace-module-instantiate!91.1"
" temp11_23"
" #t"
" phase10_22"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns7_19"
" mpi8_20"
" phase9_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:41:4_18"
" keyword-procedure-extract"
" '(#:otherwise-available? #:run-phase)"
" 5)"
" '(#:otherwise-available? #:run-phase)"
"(list temp11_23 phase10_22)"
" ns7_19"
" mpi8_20"
" phase9_21))))"
"(if(equal? sym_7 0)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:45:4_24)"
" namespace-module-instantiate!93.1)"
"((ns12_25) ns_9)"
"((mpi13_26) mpi_10)"
"((phase14_27) phase_12)"
"((phase15_28) phase_12))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-instantiate!93.1))"
"(namespace-module-instantiate!91.1"
" #f"
" #f"
" phase15_28"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns12_25"
" mpi13_26"
" phase14_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:45:4_24"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list phase15_28)"
" ns12_25"
" mpi13_26"
" phase14_27))))"
"(if(void? sym_7)"
"(let-values()"
"(let-values(((.../dynamic-require.rkt:48:4_29)"
" namespace-module-visit!101.1)"
"((ns16_30) ns_9)"
"((mpi17_31) mpi_10)"
"((phase18_32) phase_12)"
"((phase19_33) phase_12))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-visit!101.1))"
"(namespace-module-visit!99.1"
" phase19_33"
" #t"
" ns16_30"
" mpi17_31"
" phase18_32)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:48:4_29"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list phase19_33)"
" ns16_30"
" mpi17_31"
" phase18_32))))"
"(let-values()"
"(let-values(((m_34)(namespace->module ns_9 mod-name_11)))"
"(let-values(((binding/p_35)"
"(hash-ref"
"(hash-ref(module-provides m_34) 0 '#hasheq())"
" sym_7"
" #f)))"
"(if(not binding/p_35)"
"(let-values()"
"(if(eq? fail-k_8 default-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                           \"name is not provided\""
"                                                           \"name\""
" sym_7"
"                                                           \"module\""
" mod-name_11)"
"(fail-k_8)))"
"(let-values()"
"(let-values(((binding_36)(provided-as-binding binding/p_35)))"
"(let-values(((ex-sym_37)(module-binding-sym binding_36)))"
"(let-values(((ex-phase_38)"
"(module-binding-phase binding_36)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:69:6_41)"
" namespace-module-instantiate!93.1)"
"((ns20_42) ns_9)"
"((mpi21_43) mpi_10)"
"((phase22_44) phase_12)"
"((phase23_45) phase_12))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-instantiate!93.1))"
"(namespace-module-instantiate!91.1"
" #f"
" #f"
" phase23_45"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns20_42"
" mpi21_43"
" phase22_44)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:69:6_41"
" keyword-procedure-extract"
" '(#:run-phase)"
" 5)"
" '(#:run-phase)"
"(list phase23_45)"
" ns20_42"
" mpi21_43"
" phase22_44)))"
"(values))))"
"(let-values(((m-ns_39)"
"(let-values(((.../dynamic-require.rkt:70:19_46)"
" namespace->module-namespace79.1)"
"((ns24_47) ns_9)"
"((temp25_48)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module"
" binding_36)"
"(module-self m_34)"
" mpi_10)))"
"((temp26_49)"
"(phase-"
" phase_12"
" ex-phase_38))"
"((temp27_50) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace->module-namespace79.1))"
"(namespace->module-namespace77.1"
" #f"
" #f"
" temp27_50"
" #t"
" #f"
" #f"
" ns24_47"
" temp25_48"
" temp26_49)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:70:19_46"
" keyword-procedure-extract"
" '(#:complain-on-failure?)"
" 5)"
" '(#:complain-on-failure?)"
"(list temp27_50)"
" ns24_47"
" temp25_48"
" temp26_49)))))"
"(let-values((()"
"(begin"
"(if(if(provided-as-protected?"
" binding/p_35)"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_39)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_36)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_36)"
"(namespace-inspector"
" m-ns_39))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamc-require"
"                                                                                       \"name is protected\""
"                                                                                       \"name\""
" sym_7"
"                                                                                       \"module\""
" mod-name_11))"
"(void))"
"(values))))"
"(let-values(((fail_40)"
"(lambda()"
"(if(eq?"
" fail-k_8"
" default-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                       \"name is not provided\""
"                                                                                       \"name\""
" sym_7"
"                                                                                       \"module\""
" mod-name_11)"
"(fail-k_8)))))"
"(if(not(provided-as-transformer? binding/p_35))"
"(let-values()"
"(namespace-get-variable"
" m-ns_39"
" ex-phase_38"
" ex-sym_37"
" fail_40))"
"(let-values()"
"(let-values(((missing_51)(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((.../dynamic-require.rkt:99:8_53)"
" namespace-module-visit!101.1)"
"((ns28_54)"
" ns_9)"
"((mpi29_55)"
" mpi_10)"
"((phase30_56)"
" phase_12)"
"((phase31_57)"
" phase_12))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!101.1))"
"(namespace-module-visit!99.1"
" phase31_57"
" #t"
" ns28_54"
" mpi29_55"
" phase30_56)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" .../dynamic-require.rkt:99:8_53"
" keyword-procedure-extract"
" '(#:visit-phase)"
" 5)"
" '(#:visit-phase)"
"(list phase31_57)"
" ns28_54"
" mpi29_55"
" phase30_56)))"
"(values))))"
"(let-values(((t_52)"
"(namespace-get-transformer"
" m-ns_39"
" ex-phase_38"
" ex-sym_37"
" missing_51)))"
"(if(eq? t_52 missing_51)"
"(let-values()(fail_40))"
"(let-values()"
"(let-values(((tmp-ns_58)"
"(let-values(((ns32_60)"
" ns_9))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" new-namespace11.1))"
"(new-namespace9.1"
" #f"
" #f"
" #f"
" #f"
" ns32_60"
" #t)"
"(new-namespace11.1"
" ns32_60)))))"
"(let-values(((mod-path_59)"
"(resolved-module-path->module-path"
" mod-name_11)))"
"(begin"
"(1/namespace-require"
" mod-path_59"
" tmp-ns_58)"
"(eval$1"
" sym_7"
" tmp-ns_58))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((mod-path_61 sym_62)(dynamic-require5_1 mod-path_61 sym_62 #f #f))"
"((mod-path_63 sym_64 fail-k1_65)(dynamic-require5_1 mod-path_63 sym_64 fail-k1_65 #t)))))"
" (define-values (default-fail-thunk) (lambda () (error \"failed\")))"
"(define-values"
"(1/eval)"
"(case-lambda"
"((s_1)((current-eval)(intro s_1)))"
"((s_2 ns_3)"
"(begin"
"      (if (1/namespace? ns_3) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_3)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_3)"
"(let-values()((current-eval)(intro s_2 ns_3))))))))"
"(define-values"
"(1/eval-syntax)"
"(case-lambda"
"((s_4)"
"(begin"
"      (if (syntax?$1 s_4) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_4)))"
"((current-eval) s_4)))"
"((s_5 ns_6)"
"(begin"
"      (if (syntax?$1 s_5) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_5)))"
"      (if (1/namespace? ns_6) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_6)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_6)"
"(let-values()((current-eval) s_5)))))))"
"(define-values(compile$2)(lambda(s_7)((current-compile)(intro s_7) #f)))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_8)"
"(begin"
"      (if (syntax?$1 s_8) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_8)))"
"((current-compile) s_8 #f))))"
"(define-values(1/expand)(lambda(s_9)(expand$1(intro s_9)(1/current-namespace) #t)))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_10)"
"(begin"
"      (if (syntax?$1 s_10) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_10)))"
"(expand$1 s_10(1/current-namespace) #t))))"
"(define-values(1/expand-once)(lambda(s_11)(expand-once$1(intro s_11))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_12)"
"(begin"
"      (if (syntax?$1 s_12) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_12)))"
"(expand-once$1 s_12))))"
"(define-values(1/expand-to-top-form)(lambda(s_13)(expand-to-top-form$1(intro s_13))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_14)"
"(begin"
"      (if (syntax?$1 s_14) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_14)))"
"(expand-to-top-form$1 s_14))))"
"(define-values"
"(intro)"
"(let-values(((intro4_15)"
"(lambda(given-s3_16 ns1_17 ns2_18)"
"(let-values(((given-s_19) given-s3_16))"
"(let-values(((ns_20)(if ns2_18 ns1_17(1/current-namespace))))"
"(let-values()"
"(let-values(((s_21)(if(syntax?$1 given-s_19) given-s_19(1/datum->syntax #f given-s_19))))"
"(1/namespace-syntax-introduce s_21 ns_20))))))))"
"(case-lambda((given-s_22)(intro4_15 given-s_22 #f #f))((given-s_23 ns1_24)(intro4_15 given-s_23 ns1_24 #t)))))"
"(define-values(lifted/1.1$14)(void))"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_2)"
"(lambda(mod3_3 load?1_4 load?2_5)"
"(let-values(((mod_6) mod3_3))"
"(let-values(((load?_7)(if load?2_5 load?1_4 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_6)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_6)))"
"(values))))"
"(let-values(((ns_8)(1/current-namespace)))"
"(let-values(((name_9)"
"(let-values(((...space/api-module.rkt:26:15_10)"
" reference->resolved-module-path34.1)"
"((mod35_11) mod_6)"
"((load?36_12) load?_7))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?36_12 mod35_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:26:15_10"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list load?36_12)"
" mod35_11)))))"
"(if(namespace->module ns_8 name_9) #t #f))))))))))"
"(case-lambda"
"((mod_13)(module-declared?4_2 mod_13 #f #f))"
"((mod_14 load?1_15)(module-declared?4_2 mod_14 load?1_15 #t)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_16)"
"(let-values((()"
"(begin"
"(if(module-reference? mod_16)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_16)))"
"(values))))"
"(let-values(((ns_17)(1/current-namespace)))"
"(let-values(((name_18)"
"(let-values(((...space/api-module.rkt:33:15_20) reference->resolved-module-path34.1)"
"((mod37_21) mod_16)"
"((temp38_22) #f))"
"(if(variable-reference-constant?(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp38_22 mod37_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:33:15_20"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp38_22)"
" mod37_21)))))"
"(let-values(((m_19)(namespace->module ns_17 name_18)))(if m_19(module-primitive? m_19) #f)))))))"
"(define-values"
"(module->)"
"(let-values(((module->11_23)"
"(lambda(extract8_24 who9_25 mod10_26 load?6_27 load?7_28)"
"(let-values(((extract_29) extract8_24))"
"(let-values(((who_30) who9_25))"
"(let-values(((mod_31) mod10_26))"
"(let-values(((load?_32)(if load?7_28 load?6_27 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_31)"
"(void)"
"(let-values()(raise-argument-error who_30 module-reference-str mod_31)))"
"(values))))"
"(let-values(((m_33)"
"(namespace->module/complain"
" who_30"
"(1/current-namespace)"
"(let-values(((...space/api-module.rkt:42:40_34)"
" reference->resolved-module-path34.1)"
"((mod39_35) mod_31)"
"((load?40_36) load?_32))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 load?40_36 mod39_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:42:40_34"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list load?40_36)"
" mod39_35))))))"
"(extract_29 m_33)))))))))))"
"(case-lambda"
"((extract_37 who_38 mod_39)(module->11_23 extract_37 who_38 mod_39 #f #f))"
"((extract_40 who_41 mod_42 load?6_43)(module->11_23 extract_40 who_41 mod_42 load?6_43 #t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info16_44)"
"(lambda(mod15_45 load?13_46 load?14_47)"
"(let-values(((mod_48) mod15_45))"
"(let-values(((load?_49)(if load?14_47 load?13_46 #f)))"
"(let-values()(module-> module-language-info 'module->language-info mod_48 load?_49)))))))"
"(case-lambda"
"((mod_50)(module->language-info16_44 mod_50 #f #f))"
"((mod_51 load?13_52)(module->language-info16_44 mod_51 load?13_52 #t)))))"
"(define-values(1/module->imports)(lambda(mod_53)(module-> module-requires 'module->imports mod_53)))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_54)(provides->api-provides(module-> module-provides 'module->exports mod_54))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_55)"
"(module->"
"(lambda(m_56)(variables->api-nonprovides(module-provides m_56)((module-get-all-variables m_56))))"
" 'module->indirect-exports"
" mod_55)))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace21_57)"
"(lambda(mod20_58 ns18_59 ns19_60)"
"(let-values(((mod_61) mod20_58))"
"(let-values(((ns_62)(if ns19_60 ns18_59(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_61)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->namespace module-reference-str mod_61)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_62)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'module->namespace \"namespace?\" ns_62)))"
"(values))))"
"(let-values(((name_63)"
"(let-values(((...space/api-module.rkt:64:15_66)"
" reference->resolved-module-path34.1)"
"((mod44_67) mod_61)"
"((temp45_68) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp45_68 mod44_67)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:64:15_66"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp45_68)"
" mod44_67)))))"
"(let-values(((phase_64)(namespace-phase ns_62)))"
"(let-values(((m-ns_65)"
"(let-values(((ns46_69) ns_62)"
"((name47_70) name_63)"
"((phase48_71) phase_64))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace79.1))"
"(namespace->module-namespace77.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns46_69"
" name47_70"
" phase48_71)"
"(namespace->module-namespace79.1 ns46_69 name47_70 phase48_71)))))"
"(begin"
"(if m-ns_65"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_62 name_63)"
"(raise-arguments-error"
" 'module->namespace"
"                                           \"module not instantiated in the current namespace\""
"                                           \"name\""
" name_63))))"
"(if(inspector-superior?(current-code-inspector)(namespace-inspector m-ns_65))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                         \"current code inspector cannot access namespace of module\""
"                                         \"module name\""
" name_63)))"
"(if(namespace-get-root-expand-ctx m-ns_65)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_65"
"(let-values()"
"(if(variable-reference-constant?"
"(#%variable-reference make-root-expand-context12.1))"
"(make-root-expand-context10.1 #f #f #f #f #f #f #f #f)"
"(make-root-expand-context12.1))))))"
"(let-values(((ns41_72) ns_62)"
"((temp42_73)(namespace-mpi m-ns_65))"
"((phase43_74) phase_64))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace-module-make-available!109.1))"
"(namespace-module-make-available!107.1 #f #f ns41_72 temp42_73 phase43_74)"
"(namespace-module-make-available!109.1 ns41_72 temp42_73 phase43_74)))"
" m-ns_65))))))))))))"
"(case-lambda"
"((mod_75)(module->namespace21_57 mod_75 #f #f))"
"((mod_76 ns18_77)(module->namespace21_57 mod_76 ns18_77 #t)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module27_78)"
"(lambda(insp25_79 mod26_80 ns23_81 ns24_82)"
"(let-values(((insp_83) insp25_79))"
"(let-values(((mod_84) mod26_80))"
"(let-values(((ns_85)(if ns24_82 ns23_81(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_83)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-unprotect-module \"inspector?\" insp_83)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_84)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                 \"module-path?\""
" mod_84)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_85)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                   \"namespace?\""
" ns_85)))"
"(values))))"
"(let-values(((name_86)"
"(let-values(((...space/api-module.rkt:89:15_89)"
" reference->resolved-module-path34.1)"
"((mod49_90) mod_84)"
"((temp50_91) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference reference->resolved-module-path34.1))"
"(reference->resolved-module-path32.1 temp50_91 mod49_90)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...space/api-module.rkt:89:15_89"
" keyword-procedure-extract"
" '(#:load?)"
" 3)"
" '(#:load?)"
"(list temp50_91)"
" mod49_90)))))"
"(let-values(((phase_87)(namespace-phase ns_85)))"
"(let-values(((m-ns_88)"
"(let-values(((ns51_92) ns_85)"
"((name52_93) name_86)"
"((phase53_94) phase_87))"
"(if(variable-reference-constant?"
"(#%variable-reference namespace->module-namespace79.1))"
"(namespace->module-namespace77.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns51_92"
" name52_93"
" phase53_94)"
"(namespace->module-namespace79.1 ns51_92 name52_93 phase53_94)))))"
"(begin"
"(if m-ns_88"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                             \"module not instantiated\""
"                                             \"module name\""
" name_86)))"
"(if(inspector-superior? insp_83(namespace-inspector m-ns_88))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_88"
"(make-inspector(current-code-inspector))))"
"(void))))))))))))))))"
"(case-lambda"
"((insp_95 mod_96)(namespace-unprotect-module27_78 insp_95 mod_96 #f #f))"
"((insp_97 mod_98 ns23_99)(namespace-unprotect-module27_78 insp_97 mod_98 ns23_99 #t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_100 ns_101 name_102)"
"(let-values(((or-part_103)(namespace->module ns_101 name_102)))"
"(if or-part_103"
" or-part_103"
"        (raise-arguments-error who_100 \"unknown module in the current namespace\" \"name\" name_102)))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_104)"
"(let-values(((or-part_105)(1/module-path? mod_104)))"
"(if or-part_105"
" or-part_105"
"(let-values(((or-part_106)(1/module-path-index? mod_104)))"
"(if or-part_106 or-part_106(1/resolved-module-path? mod_104)))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(lifted/1.1$16)"
"(make-required"
" 'reference->resolved-module-path"
"(case-lambda((self_107 mod_108)(apply missing-kw self_107 mod_108 null)))"
" #f"
" #f))"
"(define-values"
"(reference->resolved-module-path32.1)"
"(lambda(load?29_109 mod31_110)"
"(let-values(((mod_111) mod31_110))"
"(let-values(((load?_112) load?29_109))"
"(let-values()"
"(if(1/resolved-module-path? mod_111)"
"(let-values() mod_111)"
"(let-values()"
"(let-values(((mpi_113)"
"(if(1/module-path-index? mod_111) mod_111(1/module-path-index-join mod_111 #f))))"
"(1/module-path-index-resolve mpi_113 load?_112)))))))))"
"(define-values"
"(unpack33.1$1)"
"(lambda(given-kws_114 given-args_115 mod31_116)"
"(let-values(((load?29_117)(car given-args_115)))(reference->resolved-module-path32.1 load?29_117 mod31_116))))"
"(define-values"
"(reference->resolved-module-path34.1)"
"(lifted/1.1$16"
"(lambda(given-kws_118 given-argc_119)"
"(if(= given-argc_119 3)"
"(let-values(((l2_120) given-kws_118))"
"(if(pair? l2_120)(if(eq?(car l2_120) '#:load?)(null?(cdr l2_120)) #f) #f))"
" #f))"
"(case-lambda((given-kws_121 given-args_122 mod_123)(unpack33.1$1 given-kws_121 given-args_122 mod_123)))"
" '(#:load?)"
" '(#:load?)))"
"(define-values(lifted/1.1$1)(void))"
"(define-values(lifted/2.1$7)(void))"
"(define-values"
"(prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_3 info_4)"
"(begin"
"(if(if(procedure? v_3)(procedure-arity-includes? v_3 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:missing-module \"(procedure-arity-includes/c 1)\" v_3)))"
" v_3))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list(cons prop:missing-module(lambda(e_26)(1/exn:fail:filesystem:missing-module-path e_26))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_27 make-_28 ?_29 -ref_30 -set!_31)"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons prop:missing-module(lambda(e_48)(1/exn:fail:syntax:missing-module-path e_48))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))"
"(values struct:_27 make-_28 ?_29(make-struct-field-accessor -ref_30 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_49)"
"(begin"
"(if(let-values(((or-part_50)(not v_49)))"
"(if or-part_50"
" or-part_50"
"(let-values(((or-part_51)(1/module-path? v_49)))"
"(if or-part_51 or-part_51(if(syntax?$1 v_49)(1/module-path?(syntax->datum$1 v_49)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_49)))"
" v_49))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_52 filename_53 pre_54 rel_55 post_56 errstr_57)"
"(let-values(((path_58)(1/current-module-path-for-load)))"
"(if path_58"
"(let-values()"
"(begin"
"(if(syntax?$1 path_58)"
"(let-values()"
"(raise"
"(make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                    \"~a: cannot open module file\\n\""
"                    \"  module path: ~a\\n\""
"                    \"  path: ~a\\n\""
"                    \"  system error: ~a\")"
"(if(syntax-srcloc path_58)(srcloc->string(syntax-srcloc path_58)) name_52)"
"(syntax->datum$1 path_58)"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)"
"(list path_58)"
"(syntax->datum$1 path_58))))"
"(void))"
"(raise"
"(make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                \"~a: cannot open module file\\n\""
"                \"  module path: ~a\\n\""
"                \"  path: ~a~a~a~a\\n\""
"                \"  system error: ~a\")"
" name_52"
" path_58"
" filename_53"
" pre_54"
" rel_55"
" post_56"
" errstr_57)"
"(current-continuation-marks)))))"
"(void)))))"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_1)"
"(lambda(s3_2 context4_3 stop-ids5_4 intdefs1_5 intdefs2_6)"
"(let-values(((s_7) s3_2))"
"(let-values(((context_8) context4_3))"
"(let-values(((stop-ids_9) stop-ids5_4))"
"(let-values(((intdefs_10)(if intdefs2_6 intdefs1_5 #f)))"
"(let-values()"
"(let-values(((temp50_11) 'local-expand)"
"((s51_12) s_7)"
"((context52_13) context_8)"
"((stop-ids53_14) stop-ids_9)"
"((intdefs54_15) intdefs_10))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp50_11"
" s51_12"
" context52_13"
" stop-ids53_14"
" intdefs54_15"
" #t)"
"(do-local-expand49.1 temp50_11 s51_12 context52_13 stop-ids53_14 intdefs54_15)))))))))))"
"(case-lambda"
"((s_16 context_17 stop-ids_18)(local-expand6_1 s_16 context_17 stop-ids_18 #f #f))"
"((s_19 context_20 stop-ids_21 intdefs1_22)(local-expand6_1 s_19 context_20 stop-ids_21 intdefs1_22 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_23)"
"(lambda(s12_24 context13_25 stop-ids14_26 intdefs8_27 lift-key9_28 intdefs10_29 lift-key11_30)"
"(let-values(((s_31) s12_24))"
"(let-values(((context_32) context13_25))"
"(let-values(((stop-ids_33) stop-ids14_26))"
"(let-values(((intdefs_34)(if intdefs10_29 intdefs8_27 #f)))"
"(let-values(((lift-key_35)(if lift-key11_30 lift-key9_28(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:25:2_36) do-local-expand49.1)"
"((temp55_37) 'local-expand)"
"((s56_38) s_31)"
"((context57_39) context_32)"
"((stop-ids58_40) stop-ids_33)"
"((intdefs59_41) intdefs_34)"
"((temp60_42) #t)"
"((lift-key61_43) lift-key_35))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" #f"
" #f"
" temp60_42"
" #t"
" lift-key61_43"
" #t"
" #f"
" #f"
" temp55_37"
" s56_38"
" context57_39"
" stop-ids58_40"
" intdefs59_41"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:25:2_36"
" keyword-procedure-extract"
" '(#:capture-lifts? #:lift-key)"
" 7)"
" '(#:capture-lifts? #:lift-key)"
"(list temp60_42 lift-key61_43)"
" temp55_37"
" s56_38"
" context57_39"
" stop-ids58_40"
" intdefs59_41))))))))))))"
"(case-lambda"
"((s_44 context_45 stop-ids_46)(local-expand/capture-lifts15_23 s_44 context_45 stop-ids_46 #f #f #f #f))"
"((s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51)"
"(local-expand/capture-lifts15_23 s_47 context_48 stop-ids_49 intdefs_50 lift-key9_51 #t #t))"
"((s_52 context_53 stop-ids_54 intdefs8_55)"
"(local-expand/capture-lifts15_23 s_52 context_53 stop-ids_54 intdefs8_55 #f #t #f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_56)"
"(lambda(s19_57 context20_58 stop-ids21_59 intdefs17_60 intdefs18_61)"
"(let-values(((s_62) s19_57))"
"(let-values(((context_63) context20_58))"
"(let-values(((stop-ids_64) stop-ids21_59))"
"(let-values(((intdefs_65)(if intdefs18_61 intdefs17_60 #f)))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:30:2_66) do-local-expand49.1)"
"((temp62_67) 'local-expand)"
"((s63_68) s_62)"
"((context64_69) context_63)"
"((stop-ids65_70) stop-ids_64)"
"((intdefs66_71) intdefs_65)"
"((temp67_72) #t))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" temp67_72"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp62_67"
" s63_68"
" context64_69"
" stop-ids65_70"
" intdefs66_71"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:30:2_66"
" keyword-procedure-extract"
" '(#:as-transformer?)"
" 7)"
" '(#:as-transformer?)"
"(list temp67_72)"
" temp62_67"
" s63_68"
" context64_69"
" stop-ids65_70"
" intdefs66_71)))))))))))"
"(case-lambda"
"((s_73 context_74 stop-ids_75)(local-transformer-expand22_56 s_73 context_74 stop-ids_75 #f #f))"
"((s_76 context_77 stop-ids_78 intdefs17_79)"
"(local-transformer-expand22_56 s_76 context_77 stop-ids_78 intdefs17_79 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_80)"
"(lambda(s28_81 context29_82 stop-ids30_83 intdefs24_84 lift-key25_85 intdefs26_86 lift-key27_87)"
"(let-values(((s_88) s28_81))"
"(let-values(((context_89) context29_82))"
"(let-values(((stop-ids_90) stop-ids30_83))"
"(let-values(((intdefs_91)(if intdefs26_86 intdefs24_84 #f)))"
"(let-values(((lift-key_92)(if lift-key27_87 lift-key25_85(generate-lift-key))))"
"(let-values()"
"(let-values(((...and/local-expand.rkt:34:2_93) do-local-expand49.1)"
"((temp68_94) 'local-expand)"
"((s69_95) s_88)"
"((context70_96) context_89)"
"((stop-ids71_97) stop-ids_90)"
"((intdefs72_98) intdefs_91)"
"((temp73_99) #t)"
"((temp74_100) #t)"
"((lift-key75_101) lift-key_92))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" temp73_99"
" #t"
" temp74_100"
" #t"
" lift-key75_101"
" #t"
" #f"
" #f"
" temp68_94"
" s69_95"
" context70_96"
" stop-ids71_97"
" intdefs72_98"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:34:2_93"
" keyword-procedure-extract"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
" 7)"
" '(#:as-transformer? #:capture-lifts? #:lift-key)"
"(list temp73_99 temp74_100 lift-key75_101)"
" temp68_94"
" s69_95"
" context70_96"
" stop-ids71_97"
" intdefs72_98))))))))))))"
"(case-lambda"
"((s_102 context_103 stop-ids_104)"
"(local-transformer-expand/capture-lifts31_80 s_102 context_103 stop-ids_104 #f #f #f #f))"
"((s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109)"
"(local-transformer-expand/capture-lifts31_80 s_105 context_106 stop-ids_107 intdefs_108 lift-key25_109 #t #t))"
"((s_110 context_111 stop-ids_112 intdefs24_113)"
"(local-transformer-expand/capture-lifts31_80 s_110 context_111 stop-ids_112 intdefs24_113 #f #t #f)))))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(lambda(s_114)"
"(let-values(((exp-s_115)"
"(let-values(((...and/local-expand.rkt:40:16_117) do-local-expand49.1)"
"((temp76_118) 'local-expand)"
"((s77_119) s_114)"
"((temp78_120) 'expression)"
"((null79_121) null)"
"((temp80_122) #f)"
"((temp81_123) #t))"
"(if(variable-reference-constant?(#%variable-reference do-local-expand49.1))"
"(do-local-expand47.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_123"
" #t"
" temp76_118"
" s77_119"
" temp78_120"
" null79_121"
" temp80_122"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:40:16_117"
" keyword-procedure-extract"
" '(#:skip-log-exit?)"
" 7)"
" '(#:skip-log-exit?)"
"(list temp81_123)"
" temp76_118"
" s77_119"
" temp78_120"
" null79_121"
" temp80_122)))))"
"(let-values(((ae_116)"
"(already-expanded1.1"
" exp-s_115"
"(root-expand-context-all-scopes-stx"
"(let-values(((temp82_124) 'syntax-local-expand-expression))"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f temp82_124 #t)"
"(get-current-expand-context8.1 temp82_124)))))))"
"(begin"
"(let-values(((ctx_125)"
"(let-values()"
"(if(variable-reference-constant?(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f #f #f)"
"(get-current-expand-context8.1)))))"
"(begin"
"(let-values(((obs_126)(expand-context-observer ctx_125)))"
"(if obs_126"
"(let-values()(if #t(let-values()(call-expand-observe obs_126 'opaque-expr ae_116))(void)))"
"(void)))"
"(let-values(((obs_127)(expand-context-observer ctx_125)))"
"(if obs_127"
"(let-values()(if #t(let-values()(call-expand-observe obs_127 'exit-local exp-s_115))(void)))"
"(void)))))"
"(values exp-s_115 ae_116))))))"
"(define-values"
"(do-local-expand47.1)"
"(lambda(as-transformer?34_128"
" as-transformer?38_129"
" capture-lifts?33_130"
" capture-lifts?37_131"
" lift-key35_132"
" lift-key39_133"
" skip-log-exit?36_134"
" skip-log-exit?40_135"
" who43_136"
" s44_137"
" context45_138"
" stop-ids46_139"
" intdefs41_140"
" intdefs42_141)"
"(let-values(((who_142) who43_136))"
"(let-values(((s_143) s44_137))"
"(let-values(((context_144) context45_138))"
"(let-values(((stop-ids_145) stop-ids46_139))"
"(let-values(((intdefs_146)(if intdefs42_141 intdefs41_140 #f)))"
"(let-values(((capture-lifts?_147)(if capture-lifts?37_131 capture-lifts?33_130 #f)))"
"(let-values(((as-transformer?_148)(if as-transformer?38_129 as-transformer?34_128 #f)))"
"(let-values(((lift-key_149)"
"(if lift-key39_133"
" lift-key35_132"
"(if(let-values(((or-part_150) capture-lifts?_147))"
"(if or-part_150 or-part_150 as-transformer?_148))"
"(generate-lift-key)"
" #f))))"
"(let-values(((skip-log-exit?_151)(if skip-log-exit?40_135 skip-log-exit?36_134 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_143)"
"(void)"
"                                          (let-values () (raise-argument-error who_142 \"syntax?\" s_143)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_158)(list? context_144)))"
"(if or-part_158"
" or-part_158"
"(memq"
" context_144"
"(if as-transformer?_148"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_142"
"(if as-transformer?_148"
"                                                 \"(or/c 'expression 'top-level list?)\""
"                                                 \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_144)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_159)(not stop-ids_145)))"
"(if or-part_159"
" or-part_159"
"(if(list? stop-ids_145)(andmap2 identifier? stop-ids_145) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_142"
"                                                 \"(or/c (listof identifier?) #f)\""
" stop-ids_145)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_160)(not intdefs_146)))"
"(if or-part_160"
" or-part_160"
"(let-values(((or-part_161)"
"(1/internal-definition-context? intdefs_146)))"
"(if or-part_161"
" or-part_161"
"(if(list? intdefs_146)"
"(andmap2 1/internal-definition-context? intdefs_146)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_142"
"                                                   \"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_146)))"
"(values))))"
"(let-values(((ctx_152)"
"(let-values(((who83_162) who_142))"
"(if(variable-reference-constant?"
"(#%variable-reference get-current-expand-context8.1))"
"(get-current-expand-context6.1 #f #f who83_162 #t)"
"(get-current-expand-context8.1 who83_162)))))"
"(let-values(((phase_153)"
"(if as-transformer?_148"
"(add1(expand-context-phase ctx_152))"
"(expand-context-phase ctx_152))))"
"(let-values(((local-ctx_154)"
"(let-values(((...and/local-expand.rkt:86:20_163)"
" make-local-expand-context35.1)"
"((ctx84_164) ctx_152)"
"((context85_165) context_144)"
"((phase86_166) phase_153)"
"((intdefs87_167) intdefs_146)"
"((stop-ids88_168) stop-ids_145))"
"(if(variable-reference-constant?"
"(#%variable-reference make-local-expand-context35.1))"
"(make-local-expand-context33.1"
" context85_165"
" intdefs87_167"
" phase86_166"
" #t"
" stop-ids88_168"
" #t"
" ctx84_164)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:86:20_163"
" keyword-procedure-extract"
" '(#:context #:intdefs #:phase #:stop-ids)"
" 3)"
" '(#:context #:intdefs #:phase #:stop-ids)"
"(list context85_165 intdefs87_167 phase86_166 stop-ids88_168)"
" ctx84_164)))))"
"(let-values(((input-s_155)"
"(let-values(((temp89_169)(flip-introduction-scopes s_143 ctx_152))"
"((intdefs90_170) intdefs_146))"
"(if(variable-reference-constant?"
"(#%variable-reference add-intdef-scopes23.1))"
"(add-intdef-scopes21.1 #f #f #f #f temp89_169 intdefs90_170)"
"(add-intdef-scopes23.1 temp89_169 intdefs90_170)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_171)"
"(expand-context-observer local-ctx_154)))"
"(if obs_171"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_171 'enter-local))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if as-transformer?_148"
"(let-values()"
"(let-values(((obs_172)"
"(expand-context-observer local-ctx_154)))"
"(if obs_172"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_172 'phase-up))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_173)"
"(expand-context-observer local-ctx_154)))"
"(if obs_173"
"(let-values()"
"(if #t"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_173"
" 'local-pre"
" input-s_155)"
"(call-expand-observe obs_173 'start-expand)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((output-s_156)"
"(if(if as-transformer?_148 capture-lifts?_147 #f)"
"(let-values()"
"(let-values(((...and/local-expand.rkt:100:21_174)"
" expand-transformer93.1)"
"((input-s91_175) input-s_155)"
"((local-ctx92_176) local-ctx_154)"
"((context93_177) context_144)"
"((temp94_178) #t)"
"((lift-key95_179) lift-key_149))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1"
" temp94_178"
" #t"
" context93_177"
" #t"
" #f"
" #f"
" lift-key95_179"
" #t"
" input-s91_175"
" local-ctx92_176)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:100:21_174"
" keyword-procedure-extract"
" '(#:begin-form? #:context #:lift-key)"
" 4)"
" '(#:begin-form? #:context #:lift-key)"
"(list temp94_178 context93_177 lift-key95_179)"
" input-s91_175"
" local-ctx92_176))))"
"(if as-transformer?_148"
"(let-values()"
"(let-values(((...and/local-expand.rkt:105:21_180)"
" expand-transformer93.1)"
"((input-s96_181) input-s_155)"
"((local-ctx97_182) local-ctx_154)"
"((context98_183) context_144)"
"((temp99_184) #f)"
"((temp100_185)"
"(eq? 'top-level context_144))"
"((lift-key101_186) lift-key_149))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1"
" temp100_185"
" #t"
" context98_183"
" #t"
" temp99_184"
" #t"
" lift-key101_186"
" #t"
" input-s96_181"
" local-ctx97_182)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:105:21_180"
" keyword-procedure-extract"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
" 4)"
" '(#:begin-form?"
" #:context"
" #:expand-lifts?"
" #:lift-key)"
"(list"
" temp100_185"
" context98_183"
" temp99_184"
" lift-key101_186)"
" input-s96_181"
" local-ctx97_182))))"
"(if capture-lifts?_147"
"(let-values()"
"(let-values(((...and/local-expand.rkt:111:21_187)"
" expand/capture-lifts80.1)"
"((input-s102_188) input-s_155)"
"((local-ctx103_189) local-ctx_154)"
"((temp104_190) #t)"
"((lift-key105_191) lift-key_149))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand/capture-lifts80.1))"
"(expand/capture-lifts78.1"
" temp104_190"
" #t"
" #f"
" #f"
" lift-key105_191"
" #t"
" input-s102_188"
" local-ctx103_189)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...and/local-expand.rkt:111:21_187"
" keyword-procedure-extract"
" '(#:begin-form? #:lift-key)"
" 4)"
" '(#:begin-form? #:lift-key)"
"(list temp104_190 lift-key105_191)"
" input-s102_188"
" local-ctx103_189))))"
"(let-values()"
"(let-values(((input-s106_192) input-s_155)"
"((local-ctx107_193) local-ctx_154))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" input-s106_192"
" local-ctx107_193)"
"(expand7.1"
" input-s106_192"
" local-ctx107_193)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_194)"
"(expand-context-observer local-ctx_154)))"
"(if obs_194"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_194"
" 'local-post"
" output-s_156))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((result-s_157)"
"(flip-introduction-scopes output-s_156 ctx_152)))"
"(begin"
"(if skip-log-exit?_151"
"(void)"
"(let-values()"
"(let-values(((obs_195)"
"(expand-context-observer local-ctx_154)))"
"(if obs_195"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_195"
" 'exit-local"
" result-s_157))"
"(void)))"
"(void)))))"
" result-s_157)))))))))))))))))))))))))))"
"(define-values"
"(unpack48.1)"
"(lambda(given-kws_196 given-args_197 who43_198 s44_199 context45_200 stop-ids46_201 intdefs41_202 intdefs42_203)"
"(let-values(((as-transformer?38_204)(if(pair? given-kws_196)(eq? '#:as-transformer?(car given-kws_196)) #f)))"
"(let-values(((as-transformer?34_205)(if as-transformer?38_204(car given-args_197)(void)))"
"((given-kws_206)(if as-transformer?38_204(cdr given-kws_196) given-kws_196))"
"((given-args_207)(if as-transformer?38_204(cdr given-args_197) given-args_197)))"
"(let-values(((capture-lifts?37_208)(if(pair? given-kws_206)(eq? '#:capture-lifts?(car given-kws_206)) #f)))"
"(let-values(((capture-lifts?33_209)(if capture-lifts?37_208(car given-args_207)(void)))"
"((given-kws_210)(if capture-lifts?37_208(cdr given-kws_206) given-kws_206))"
"((given-args_211)(if capture-lifts?37_208(cdr given-args_207) given-args_207)))"
"(let-values(((lift-key39_212)(if(pair? given-kws_210)(eq? '#:lift-key(car given-kws_210)) #f)))"
"(let-values(((lift-key35_213)(if lift-key39_212(car given-args_211)(void)))"
"((given-kws_214)(if lift-key39_212(cdr given-kws_210) given-kws_210))"
"((given-args_215)(if lift-key39_212(cdr given-args_211) given-args_211)))"
"(let-values(((skip-log-exit?40_216)(pair? given-kws_214)))"
"(let-values(((skip-log-exit?36_217)(if skip-log-exit?40_216(car given-args_215)(void))))"
"(do-local-expand47.1"
" as-transformer?34_205"
" as-transformer?38_204"
" capture-lifts?33_209"
" capture-lifts?37_208"
" lift-key35_213"
" lift-key39_212"
" skip-log-exit?36_217"
" skip-log-exit?40_216"
" who43_198"
" s44_199"
" context45_200"
" stop-ids46_201"
" intdefs41_202"
" intdefs42_203)))))))))))"
"(define-values"
"(do-local-expand49.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_218 given-argc_219)"
"(if(if(>= given-argc_219 6)(<= given-argc_219 7) #f)"
"(let-values(((l1_220) given-kws_218))"
"(let-values(((l1_221)"
"(if(null? l1_220) l1_220(if(eq?(car l1_220) '#:as-transformer?)(cdr l1_220) l1_220))))"
"(let-values(((l1_222) l1_221))"
"(let-values(((l1_223)"
"(if(null? l1_222) l1_222(if(eq?(car l1_222) '#:capture-lifts?)(cdr l1_222) l1_222))))"
"(let-values(((l1_224) l1_223))"
"(let-values(((l1_225)"
"(if(null? l1_224) l1_224(if(eq?(car l1_224) '#:lift-key)(cdr l1_224) l1_224))))"
"(let-values(((l1_226) l1_225))"
"(let-values(((l1_227)"
"(if(null? l1_226)"
" l1_226"
"(if(eq?(car l1_226) '#:skip-log-exit?)(cdr l1_226) l1_226))))"
"(null? l1_227)))))))))"
" #f))"
"(case-lambda"
"((given-kws_228 given-args_229 who_230 s_231 context_232 stop-ids_233)"
"(unpack48.1 given-kws_228 given-args_229 who_230 s_231 context_232 stop-ids_233 #f #f))"
"((given-kws_234 given-args_235 who_236 s_237 context_238 stop-ids_239 intdefs41_240)"
"(unpack48.1 given-kws_234 given-args_235 who_236 s_237 context_238 stop-ids_239 intdefs41_240 #t)))"
" null"
" '(#:as-transformer? #:capture-lifts? #:lift-key #:skip-log-exit?)"
"(let-values(((do-local-expand_241)"
"(case-lambda"
"((who_242 s_243 context_244 stop-ids_245)"
"(unpack48.1 null null who_242 s_243 context_244 stop-ids_245 #f #f))"
"((who_246 s_247 context_248 stop-ids_249 intdefs41_250)"
"(unpack48.1 null null who_246 s_247 context_248 stop-ids_249 intdefs41_250 #t)))))"
" do-local-expand_241)))"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_1)"
"(begin"
"      (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_1)))"
"(syntax-tainted?$1 s_1))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_2)"
"(lambda(s5_3 maybe-insp1_4 use-mode?2_5 maybe-insp3_6 use-mode?4_7)"
"(let-values(((s_8) s5_3))"
"(let-values(((maybe-insp_9)(if maybe-insp3_6 maybe-insp1_4 #f)))"
"(let-values(((use-mode?_10)(if use-mode?4_7 use-mode?2_5 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_8)"
"(void)"
"                                            (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_9)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_9)))"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'syntax-arm \"(or/c inspector? #f)\" maybe-insp_9)))"
"(values))))"
"(let-values(((insp_11)(inspector-for-taint maybe-insp_9)))"
"(if use-mode?_10"
"(let-values()"
"(taint-dispatch"
" s_8"
"(lambda(s_13)(syntax-arm$1 s_13 insp_11))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_8 insp_11)))))))))))))"
"(case-lambda"
"((s_14)(syntax-arm6_2 s_14 #f #f #f #f))"
"((s_15 maybe-insp_16 use-mode?2_17)(syntax-arm6_2 s_15 maybe-insp_16 use-mode?2_17 #t #t))"
"((s_18 maybe-insp1_19)(syntax-arm6_2 s_18 maybe-insp1_19 #f #t #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_20 maybe-insp_21)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_20) (void) (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_20)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_23)(not maybe-insp_21)))"
"(if or-part_23 or-part_23(inspector? maybe-insp_21)))"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_21)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_21)))(syntax-disarm$1 s_20 insp_22))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_24)"
"(lambda(s10_25 from-s11_26 use-mode?8_27 use-mode?9_28)"
"(let-values(((s_29) s10_25))"
"(let-values(((from-s_30) from-s11_26))"
"(let-values(((use-mode?_31)(if use-mode?9_28 use-mode?8_27 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_29)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_29)))"
"(if(syntax?$1 from-s_30)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" from-s_30)))"
"(if use-mode?_31"
"(let-values()"
"(taint-dispatch"
" s_29"
"(lambda(s_32)(syntax-rearm$1 s_32 from-s_30))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_29 from-s_30)))))))))))"
"(case-lambda"
"((s_33 from-s_34)(syntax-rearm12_24 s_33 from-s_34 #f #f))"
"((s_35 from-s_36 use-mode?8_37)(syntax-rearm12_24 s_35 from-s_36 use-mode?8_37 #t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_38)"
"(begin"
"      (if (syntax?$1 s_38) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_38)))"
"(syntax-taint$1 s_38))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_39)"
"(let-values(((or-part_40) maybe-insp_39))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(current-module-code-inspector)))"
"(if or-part_41 or-part_41(current-code-inspector)))))))"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_1)"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_1)))"
"(let-values(((temp1_2)(1/variable-reference->namespace vr_1)))"
"(if(variable-reference-constant?(#%variable-reference new-namespace11.1))"
"(new-namespace9.1 #f #f #f #f temp1_2 #t)"
"(new-namespace11.1 temp1_2))))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_3)"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_3)))"
"(1/instance-data(1/variable-reference->instance vr_3)))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_4)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((mpi_5)(namespace-mpi(1/variable-reference->namespace vr_4))))"
"(if(top-level-module-path-index? mpi_5) #f mpi_5)))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_6)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->resolved-module-path \"variable-reference?\" vr_6)))"
"(values))))"
"(let-values(((mpi_7)(1/variable-reference->module-path-index vr_6)))"
"(if mpi_7(1/module-path-index-resolve mpi_7) #f)))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_8)"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_8)"
"(void)"
"(let-values()"
"                        (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_8)))"
"(values))))"
"(let-values(((r_9)(1/variable-reference->resolved-module-path vr_8)))"
"(if r_9(resolved-module-path-root-name r_9) #f)))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_10)"
"(begin"
"(if(1/variable-reference? vr_10)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_10)))"
"(namespace-phase(1/variable-reference->namespace vr_10)))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_11)"
"(begin"
"(if(1/variable-reference? vr_11)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_11)))"
"(namespace-0-phase(1/variable-reference->namespace vr_11)))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_12)"
"(begin"
"(if(1/variable-reference? vr_12)"
"(void)"
"        (let-values () (raise-argument-error 'variable-reference->base-phase \"variable-reference?\" vr_12)))"
"(let-values(((or-part_13)(namespace-declaration-inspector(1/variable-reference->namespace vr_12))))"
"(if or-part_13"
" or-part_13"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"           \"given variable reference is not from a module\"))))))"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'read-syntax"
" 'read-syntax/recursive"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector))"
"(call-with-values(lambda()(add-core-primitive! 'syntax? syntax?$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-e syntax-e$2)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->datum 1/syntax->datum)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'datum->syntax 1/datum->syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-identifier=? 1/free-identifier=?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-binding 1/identifier-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source-module 1/syntax-source-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-source syntax-source$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-line 1/syntax-line)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-column syntax-column$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-position syntax-position$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-span 1/syntax-span)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax->list 1/syntax->list)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-property syntax-property$1)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-property-symbol-keys syntax-property-symbol-keys$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-original? 1/syntax-original?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-arm 1/syntax-arm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-disarm 1/syntax-disarm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-rearm 1/syntax-rearm)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-taint 1/syntax-taint)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:missing-module prop:missing-module)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:filesystem:missing-module make-exn:fail:filesystem:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-exn:fail:syntax:missing-module make-exn:fail:syntax:missing-module))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax 1/read-syntax)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-context 1/syntax-local-context)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-name 1/syntax-local-name)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-value 1/syntax-local-value)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-expand 1/local-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'set!-transformer? 1/set!-transformer?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'rename-transformer? 1/rename-transformer?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path? 1/module-path?)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index? 1/module-path-index?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-join 1/module-path-index-join)) print-values)"
"(call-with-values(lambda()(add-core-primitive! 'module-path-index-split 1/module-path-index-split)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'current-namespace 1/current-namespace)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'namespace-module-registry namespace-module-registry$1))"
" print-values)"
"(call-with-values(lambda()(add-core-primitive! 'namespace? 1/namespace?)) print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase))"
" print-values)"
"(call-with-values"
"(lambda()(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector))"
" print-values)"
"(define-values"
"(lifted/1.1$22)"
"(make-required 'declare-kernel-module!(case-lambda((self_5 ns_6)(apply missing-kw self_5 ns_6 null))) #f #f))"
"(define-values"
"(declare-kernel-module!6.1)"
"(lambda(eval1_7 main-ids2_8 ns5_9)"
"(let-values(((ns_10) ns5_9))"
"(let-values(((eval_11) eval1_7))"
"(let-values(((main-ids_12) main-ids2_8))"
"(let-values()"
"(begin"
"(let-values(((...nder/boot/kernel.rkt:23:2_13) copy-runtime-module!26.1)"
"((temp51_14) '#%kernel)"
"((temp52_15) '#%runtime)"
"((temp53_16)(set-union primitive-ids main-ids_12))"
"((temp54_17)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"((ns55_18) ns_10))"
"(if(variable-reference-constant?(#%variable-reference copy-runtime-module!26.1))"
"(copy-runtime-module!24.1 #f #f temp54_17 #t ns55_18 #f #f #f #f temp53_16 #t temp52_15 #t temp51_14)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:23:2_13"
" keyword-procedure-extract"
" '(#:extras #:namespace #:skip #:to)"
" 3)"
" '(#:extras #:namespace #:skip #:to)"
"(list temp54_17 ns55_18 temp53_16 temp52_15)"
" temp51_14)))"
"(let-values(((...nder/boot/kernel.rkt:30:2_19) declare-reexporting-module!50.1)"
"((temp56_20) '#%kernel)"
"((temp57_21) '(#%core #%runtime #%main))"
"((ns58_22) ns_10))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!50.1))"
"(declare-reexporting-module!48.1 ns58_22 #f #f temp56_20 temp57_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:30:2_19"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns58_22)"
" temp56_20"
" temp57_21))))))))))"
"(define-values"
"(unpack7.1$1)"
"(lambda(given-kws_23 given-args_24 ns5_25)"
"(let-values(((eval1_26)(car given-args_24))"
"((given-kws_27)(cdr given-kws_23))"
"((given-args_28)(cdr given-args_24)))"
"(let-values(((main-ids2_29)(car given-args_28)))(declare-kernel-module!6.1 eval1_26 main-ids2_29 ns5_25)))))"
"(define-values"
"(declare-kernel-module!8.1)"
"(lifted/1.1$22"
"(lambda(given-kws_30 given-argc_31)"
"(if(= given-argc_31 3)"
"(let-values(((l2_32) given-kws_30))"
"(if(pair? l2_32)"
"(if(eq?(car l2_32) '#:eval)"
"(let-values(((l2_33)(cdr l2_32)))"
"(if(pair? l2_33)(if(eq?(car l2_33) '#:main-ids)(null?(cdr l2_33)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_34 given-args_35 ns_36)(unpack7.1$1 given-kws_34 given-args_35 ns_36)))"
" '(#:eval #:main-ids)"
" '(#:eval #:main-ids)))"
"(define-values"
"(lifted/2.1$10)"
"(make-required 'copy-runtime-module!(case-lambda((self_37 name_38)(apply missing-kw self_37 name_38 null))) #f #f))"
"(define-values"
"(copy-runtime-module!24.1)"
"(lambda(alts12_39"
" alts19_40"
" extras13_41"
" extras20_42"
" namespace10_43"
" primitive?14_44"
" primitive?21_45"
" protected?15_46"
" protected?22_47"
" skip11_48"
" skip18_49"
" to9_50"
" to16_51"
" name23_52)"
"(let-values(((name_53) name23_52))"
"(let-values(((to-name_54)(if to16_51 to9_50 name_53)))"
"(let-values(((ns_55) namespace10_43))"
"(let-values(((skip-syms_56)(if skip18_49 skip11_48(seteq))))"
"(let-values(((alts_57)(if alts19_40 alts12_39 '#hasheq())))"
"(let-values(((extras_58)(if extras20_42 extras13_41 '#hasheq())))"
"(let-values(((primitive?_59)(if primitive?21_45 primitive?14_44 #t)))"
"(let-values(((protected?_60)(if protected?22_47 protected?15_46 #f)))"
"(let-values()"
"(let-values(((mod-name_61)(list 'quote name_53)))"
"(let-values(((prims_62)(1/primitive-table name_53)))"
"(let-values((()"
"(begin"
"(let-values(((ht_65) prims_62))"
"(begin"
"(if((lambda(ht_66)(hash? ht_66)) ht_65)"
"(void)"
"(let-values()(default-in-hash-keys ht_65)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_68 i_69)"
"(if i_69"
"(let-values(((sym_70)"
"(hash-iterate-key ht_65 i_69)))"
"(if #t"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72)"
" fold-var_68))"
"(let-values(((fold-var_73)"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_70))"
"(void)))))"
"(values fold-var_73)))))"
"(if #t"
"(for-loop_67"
" fold-var_71"
"(hash-iterate-next ht_65 i_69))"
" fold-var_71))"
" fold-var_68))"
" fold-var_68))))"
" for-loop_67)"
"(void)"
"(hash-iterate-first ht_65))))"
"(values))))"
"(let-values(((ht_63)"
"(let-values(((ht_74) prims_62))"
"(begin"
"(if((lambda(ht_75)(hash? ht_75)) ht_74)"
"(void)"
"(let-values()(default-in-hash ht_74)))"
"((letrec-values(((for-loop_76)"
"(lambda(table_77 i_78)"
"(if i_78"
"(let-values(((sym_79 val_80)"
"(hash-iterate-key+value ht_74 i_78)))"
"(if #t"
"(let-values(((table_81)"
"(let-values(((table_82)"
" table_77))"
"(if(set-member?"
" skip-syms_56"
" sym_79)"
" table_82"
"(let-values(((table_83)"
" table_82))"
"(let-values(((table_84)"
"(let-values()"
"(let-values(((key_85"
" val_86)"
"(let-values()"
"(values"
" sym_79"
"(let-values(((or-part_87)"
"(hash-ref"
" alts_57"
" sym_79"
" #f)))"
"(if or-part_87"
" or-part_87"
" val_80))))))"
"(hash-set"
" table_83"
" key_85"
" val_86)))))"
"(values table_84)))))))"
"(if #t"
"(for-loop_76"
" table_81"
"(hash-iterate-next ht_74 i_78))"
" table_81))"
" table_77))"
" table_77))))"
" for-loop_76)"
" '#hasheq()"
"(hash-iterate-first ht_74))))))"
"(let-values(((ht+extras_64)"
"(let-values(((ht_88) extras_58))"
"(begin"
"(if((lambda(ht_89)(hash? ht_89)) ht_88)"
"(void)"
"(let-values()(default-in-hash ht_88)))"
"((letrec-values(((for-loop_90)"
"(lambda(ht_91 i_92)"
"(if i_92"
"(let-values(((k_93 v_94)"
"(hash-iterate-key+value"
" ht_88"
" i_92)))"
"(if #t"
"(let-values(((ht_95)"
"(let-values(((ht_96) ht_91))"
"(let-values(((ht_97)"
"(let-values()"
"(hash-set"
" ht_96"
" k_93"
" v_94))))"
"(values ht_97)))))"
"(if #t"
"(for-loop_90"
" ht_95"
"(hash-iterate-next ht_88 i_92))"
" ht_95))"
" ht_91))"
" ht_91))))"
" for-loop_90)"
" ht_63"
"(hash-iterate-first ht_88))))))"
"(let-values(((...nder/boot/kernel.rkt:51:2_98) declare-hash-based-module!41.1)"
"((to-name59_99) to-name_54)"
"((ht+extras60_100) ht+extras_64)"
"((ns61_101) ns_55)"
"((primitive?62_102) primitive?_59)"
"((protected?63_103) protected?_60))"
"(if(variable-reference-constant?"
"(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns61_101"
" primitive?62_102"
" #t"
" #f"
" #f"
" protected?63_103"
" #t"
" #f"
" #f"
" to-name59_99"
" ht+extras60_100)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:51:2_98"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:protected?)"
" 4)"
" '(#:namespace #:primitive? #:protected?)"
"(list ns61_101 primitive?62_102 protected?63_103)"
" to-name59_99"
" ht+extras60_100)))))))))))))))))))"
"(define-values"
"(unpack25.1)"
"(lambda(given-kws_104 given-args_105 name23_106)"
"(let-values(((alts19_107)(if(pair? given-kws_104)(eq? '#:alts(car given-kws_104)) #f)))"
"(let-values(((alts12_108)(if alts19_107(car given-args_105)(void)))"
"((given-kws_109)(if alts19_107(cdr given-kws_104) given-kws_104))"
"((given-args_110)(if alts19_107(cdr given-args_105) given-args_105)))"
"(let-values(((extras20_111)(if(pair? given-kws_109)(eq? '#:extras(car given-kws_109)) #f)))"
"(let-values(((extras13_112)(if extras20_111(car given-args_110)(void)))"
"((given-kws_113)(if extras20_111(cdr given-kws_109) given-kws_109))"
"((given-args_114)(if extras20_111(cdr given-args_110) given-args_110)))"
"(let-values(((namespace10_115)(car given-args_114))"
"((given-kws_116)(cdr given-kws_113))"
"((given-args_117)(cdr given-args_114)))"
"(let-values(((primitive?21_118)(if(pair? given-kws_116)(eq? '#:primitive?(car given-kws_116)) #f)))"
"(let-values(((primitive?14_119)(if primitive?21_118(car given-args_117)(void)))"
"((given-kws_120)(if primitive?21_118(cdr given-kws_116) given-kws_116))"
"((given-args_121)(if primitive?21_118(cdr given-args_117) given-args_117)))"
"(let-values(((protected?22_122)"
"(if(pair? given-kws_120)(eq? '#:protected?(car given-kws_120)) #f)))"
"(let-values(((protected?15_123)(if protected?22_122(car given-args_121)(void)))"
"((given-kws_124)(if protected?22_122(cdr given-kws_120) given-kws_120))"
"((given-args_125)(if protected?22_122(cdr given-args_121) given-args_121)))"
"(let-values(((skip18_126)(if(pair? given-kws_124)(eq? '#:skip(car given-kws_124)) #f)))"
"(let-values(((skip11_127)(if skip18_126(car given-args_125)(void)))"
"((given-kws_128)(if skip18_126(cdr given-kws_124) given-kws_124))"
"((given-args_129)(if skip18_126(cdr given-args_125) given-args_125)))"
"(let-values(((to16_130)(pair? given-kws_128)))"
"(let-values(((to9_131)(if to16_130(car given-args_129)(void))))"
"(copy-runtime-module!24.1"
" alts12_108"
" alts19_107"
" extras13_112"
" extras20_111"
" namespace10_115"
" primitive?14_119"
" primitive?21_118"
" protected?15_123"
" protected?22_122"
" skip11_127"
" skip18_126"
" to9_131"
" to16_130"
" name23_106))))))))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lifted/2.1$10"
"(lambda(given-kws_132 given-argc_133)"
"(if(= given-argc_133 3)"
"(subsets? '(#:namespace) given-kws_132 '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to))"
" #f))"
"(case-lambda((given-kws_134 given-args_135 name_136)(unpack25.1 given-kws_134 given-args_135 name_136)))"
" '(#:namespace)"
" '(#:alts #:extras #:namespace #:primitive? #:protected? #:skip #:to)))"
"(define-values"
"(lifted/3.1$3)"
"(make-required"
" 'declare-hash-based-module!"
"(case-lambda((self_137 name_138 ht_139)(apply missing-kw self_137 name_138 ht_139 null)))"
" #f"
" #f))"
"(define-values"
"(declare-hash-based-module!39.1)"
"(lambda(namespace27_140"
" primitive?28_141"
" primitive?33_142"
" protected30_143"
" protected35_144"
" protected?29_145"
" protected?34_146"
" register-builtin?31_147"
" register-builtin?36_148"
" name37_149"
" ht38_150)"
"(let-values(((name_151) name37_149))"
"(let-values(((ht_152) ht38_150))"
"(let-values(((ns_153) namespace27_140))"
"(let-values(((primitive?_154)(if primitive?33_142 primitive?28_141 #f)))"
"(let-values(((protected?_155)(if protected?34_146 protected?29_145 #f)))"
"(let-values(((protected-syms_156)(if protected35_144 protected30_143 null)))"
"(let-values(((register-builtin?_157)(if register-builtin?36_148 register-builtin?31_147 #f)))"
"(let-values()"
"(let-values(((mpi_158)(1/module-path-index-join(list 'quote name_151) #f)))"
"(let-values(((ns64_159) ns_153)"
"((temp65_160)"
"(let-values(((...nder/boot/kernel.rkt:65:3_162) make-module34.1)"
"((temp67_163) #t)"
"((primitive?68_164) primitive?_154)"
"((temp69_165) #t)"
"((temp70_166)(not protected?_155))"
"((mpi71_167) mpi_158)"
"((temp72_168)"
"(hasheqv"
" 0"
"(let-values(((ht_170) ht_152))"
"(begin"
"(if((lambda(ht_171)(hash? ht_171)) ht_170)"
"(void)"
"(let-values()(default-in-hash-keys ht_170)))"
"((letrec-values(((for-loop_172)"
"(lambda(table_173 i_174)"
"(if i_174"
"(let-values(((sym_175)"
"(hash-iterate-key"
" ht_170"
" i_174)))"
"(if #t"
"(let-values(((table_176)"
"(let-values(((table_177)"
" table_173))"
"(let-values(((table_178)"
"(let-values()"
"(let-values(((key_179"
" val_180)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_157"
"(let-values()"
"(register-built-in-symbol!"
" sym_175))"
"(void))"
"(values))))"
"(let-values(((binding_181)"
"(let-values(((mpi74_182)"
" mpi_158)"
"((temp75_183)"
" 0)"
"((sym76_184)"
" sym_175))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-binding22.1))"
"(make-module-binding20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi74_182"
" temp75_183"
" sym76_184)"
"(make-module-binding22.1"
" mpi74_182"
" temp75_183"
" sym76_184)))))"
"(values"
" sym_175"
"(if(let-values(((or-part_185)"
" protected?_155))"
"(if or-part_185"
" or-part_185"
"(member"
" sym_175"
" protected-syms_156)))"
"(provided1.1"
" binding_181"
" #t"
" #f)"
" binding_181)))))))"
"(hash-set"
" table_177"
" key_179"
" val_180)))))"
"(values"
" table_178)))))"
"(if #t"
"(for-loop_172"
" table_176"
"(hash-iterate-next ht_170 i_174))"
" table_176))"
" table_173))"
" table_173))))"
" for-loop_172)"
" '#hash()"
"(hash-iterate-first ht_170))))))"
"((temp73_169)"
"(lambda(data-box_186"
" ns_187"
" phase-shift_188"
" phase-level_189"
" self_190"
" bulk-binding-registry_191"
" insp_192)"
"(if(= 0 phase-level_189)"
"(let-values()"
"(let-values(((ht_193) ht_152))"
"(begin"
"(if((lambda(ht_194)(hash? ht_194)) ht_193)"
"(void)"
"(let-values()(default-in-hash ht_193)))"
"((letrec-values(((for-loop_195)"
"(lambda(fold-var_196 i_197)"
"(if i_197"
"(let-values(((sym_198 val_199)"
"(hash-iterate-key+value"
" ht_193"
" i_197)))"
"(if #t"
"(let-values(((fold-var_200)"
"(let-values(((fold-var_201)"
" fold-var_196))"
"(let-values(((fold-var_202)"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_187"
" 0"
" sym_198"
" val_199))"
"(void)))))"
"(values"
" fold-var_202)))))"
"(if #t"
"(for-loop_195"
" fold-var_200"
"(hash-iterate-next"
" ht_193"
" i_197))"
" fold-var_200))"
" fold-var_196))"
" fold-var_196))))"
" for-loop_195)"
"(void)"
"(hash-iterate-first ht_193)))))"
"(void)))))"
"(if(variable-reference-constant?(#%variable-reference make-module34.1))"
"(make-module32.1"
" temp67_163"
" #t"
" #f"
" #f"
" temp73_169"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp70_166"
" #t"
" temp69_165"
" #t"
" #f"
" #f"
" primitive?68_164"
" #t"
" temp72_168"
" #f"
" #f"
" mpi71_167"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:65:3_162"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:primitive?"
" #:provides"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:no-protected?"
" #:predefined?"
" #:primitive?"
" #:provides"
" #:self)"
"(list"
" temp67_163"
" temp73_169"
" temp70_166"
" temp69_165"
" primitive?68_164"
" temp72_168"
" mpi71_167)))))"
"((temp66_161)(1/module-path-index-resolve mpi_158)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!53.1))"
"(declare-module!51.1 #f #f ns64_159 temp65_160 temp66_161)"
"(declare-module!53.1 ns64_159 temp65_160 temp66_161))))))))))))))"
"(define-values"
"(unpack40.1)"
"(lambda(given-kws_203 given-args_204 name37_205 ht38_206)"
"(let-values(((namespace27_207)(car given-args_204))"
"((given-kws_208)(cdr given-kws_203))"
"((given-args_209)(cdr given-args_204)))"
"(let-values(((primitive?33_210)(if(pair? given-kws_208)(eq? '#:primitive?(car given-kws_208)) #f)))"
"(let-values(((primitive?28_211)(if primitive?33_210(car given-args_209)(void)))"
"((given-kws_212)(if primitive?33_210(cdr given-kws_208) given-kws_208))"
"((given-args_213)(if primitive?33_210(cdr given-args_209) given-args_209)))"
"(let-values(((protected35_214)(if(pair? given-kws_212)(eq? '#:protected(car given-kws_212)) #f)))"
"(let-values(((protected30_215)(if protected35_214(car given-args_213)(void)))"
"((given-kws_216)(if protected35_214(cdr given-kws_212) given-kws_212))"
"((given-args_217)(if protected35_214(cdr given-args_213) given-args_213)))"
"(let-values(((protected?34_218)(if(pair? given-kws_216)(eq? '#:protected?(car given-kws_216)) #f)))"
"(let-values(((protected?29_219)(if protected?34_218(car given-args_217)(void)))"
"((given-kws_220)(if protected?34_218(cdr given-kws_216) given-kws_216))"
"((given-args_221)(if protected?34_218(cdr given-args_217) given-args_217)))"
"(let-values(((register-builtin?36_222)(pair? given-kws_220)))"
"(let-values(((register-builtin?31_223)(if register-builtin?36_222(car given-args_221)(void))))"
"(declare-hash-based-module!39.1"
" namespace27_207"
" primitive?28_211"
" primitive?33_210"
" protected30_215"
" protected35_214"
" protected?29_219"
" protected?34_218"
" register-builtin?31_223"
" register-builtin?36_222"
" name37_205"
" ht38_206))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lifted/3.1$3"
"(lambda(given-kws_224 given-argc_225)"
"(if(= given-argc_225 4)"
"(subsets? '(#:namespace) given-kws_224 '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?))"
" #f))"
"(case-lambda"
"((given-kws_226 given-args_227 name_228 ht_229)(unpack40.1 given-kws_226 given-args_227 name_228 ht_229)))"
" '(#:namespace)"
" '(#:namespace #:primitive? #:protected #:protected? #:register-builtin?)))"
"(define-values"
"(lifted/4.1)"
"(make-required"
" 'declare-reexporting-module!"
"(case-lambda((self_230 name_231 require-names_232)(apply missing-kw self_230 name_231 require-names_232 null)))"
" #f"
" #f))"
"(define-values"
"(declare-reexporting-module!48.1)"
"(lambda(namespace43_233 reexport?42_234 reexport?44_235 name46_236 require-names47_237)"
"(let-values(((name_238) name46_236))"
"(let-values(((require-names_239) require-names47_237))"
"(let-values(((reexport?_240)(if reexport?44_235 reexport?42_234 #t)))"
"(let-values(((ns_241) namespace43_233))"
"(let-values()"
"(let-values(((mpi_242)(1/module-path-index-join(list 'quote name_238) #f)))"
"(let-values(((require-mpis_243)"
"(alt-reverse"
"(let-values(((lst_244) require-names_239))"
"(begin"
"(if(list? lst_244)(void)(let-values()(in-list lst_244)))"
"((letrec-values(((for-loop_245)"
"(lambda(fold-var_246 lst_247)"
"(if(pair? lst_247)"
"(let-values(((require-name_248)(unsafe-car lst_247)))"
"(if #t"
"(let-values(((fold-var_249)"
"(let-values(((fold-var_250) fold-var_246))"
"(let-values(((fold-var_251)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_248)"
" #f))"
" fold-var_250))))"
"(values fold-var_251)))))"
"(if #t"
"(for-loop_245 fold-var_249(unsafe-cdr lst_247))"
" fold-var_249))"
" fold-var_246))"
" fold-var_246))))"
" for-loop_245)"
" null"
" lst_244))))))"
"(let-values(((ns77_252) ns_241)"
"((temp78_253)"
"(let-values(((...nder/boot/kernel.rkt:95:3_255) make-module34.1)"
"((temp80_256) #t)"
"((temp81_257) #t)"
"((mpi82_258) mpi_242)"
"((temp83_259)(list(cons 0 require-mpis_243)))"
"((temp84_260)"
"(if reexport?_240"
"(hasheqv"
" 0"
"(let-values(((lst_262) require-mpis_243))"
"(begin"
"(if(list? lst_262)(void)(let-values()(in-list lst_262)))"
"((letrec-values(((for-loop_263)"
"(lambda(table_264 lst_265)"
"(if(pair? lst_265)"
"(let-values(((require-mpi_266)"
"(unsafe-car lst_265)))"
"(if #t"
"(let-values(((table_267)"
"(let-values(((m_268)"
"(namespace->module"
" ns_241"
"(1/module-path-index-resolve"
" require-mpi_266))))"
"(begin"
" #t"
"((letrec-values(((for-loop_269)"
"(lambda(table_270)"
"(if #t"
"(let-values()"
"(if #t"
"(let-values(((table_271)"
"(let-values(((ht_272)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_268)"
"(module-self"
" m_268)"
" require-mpi_266)"
" 0)))"
"(begin"
"(if((lambda(ht_273)"
"(hash?"
" ht_273))"
" ht_272)"
"(void)"
"(let-values()"
"(default-in-hash"
" ht_272)))"
"((letrec-values(((for-loop_274)"
"(lambda(table_275"
" i_276)"
"(if i_276"
"(let-values(((sym_277"
" binding_278)"
"(hash-iterate-key+value"
" ht_272"
" i_276)))"
"(if #t"
"(let-values(((table_279)"
"(let-values(((table_280)"
" table_275))"
"(let-values(((table_281)"
"(let-values()"
"(let-values(((key_282"
" val_283)"
"(let-values()"
"(values"
" sym_277"
" binding_278))))"
"(hash-set"
" table_280"
" key_282"
" val_283)))))"
"(values"
" table_281)))))"
"(if #t"
"(for-loop_274"
" table_279"
"(hash-iterate-next"
" ht_272"
" i_276))"
" table_279))"
" table_275))"
" table_275))))"
" for-loop_274)"
" table_270"
"(hash-iterate-first"
" ht_272))))))"
"(if #f"
"(for-loop_269"
" table_271)"
" table_271))"
" table_270))"
" table_270))))"
" for-loop_269)"
" table_264)))))"
"(if #t"
"(for-loop_263"
" table_267"
"(unsafe-cdr lst_265))"
" table_267))"
" table_264))"
" table_264))))"
" for-loop_263)"
" '#hash()"
" lst_262))))"
" '#hasheqv()))"
"((void85_261) void))"
"(if(variable-reference-constant?(#%variable-reference make-module34.1))"
"(make-module32.1"
" temp80_256"
" #t"
" #f"
" #f"
" void85_261"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp81_257"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp84_260"
" temp83_259"
" #t"
" mpi82_258"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/boot/kernel.rkt:95:3_255"
" keyword-procedure-extract"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:predefined?"
" #:provides"
" #:requires"
" #:self)"
" 2)"
" '(#:cross-phase-persistent?"
" #:instantiate-phase-callback"
" #:predefined?"
" #:provides"
" #:requires"
" #:self)"
"(list temp80_256 void85_261 temp81_257 temp84_260 temp83_259 mpi82_258)))))"
"((temp79_254)(1/module-path-index-resolve mpi_242)))"
"(if(variable-reference-constant?(#%variable-reference declare-module!53.1))"
"(declare-module!51.1 #f #f ns77_252 temp78_253 temp79_254)"
"(declare-module!53.1 ns77_252 temp78_253 temp79_254))))))))))))"
"(define-values"
"(unpack49.1)"
"(lambda(given-kws_284 given-args_285 name46_286 require-names47_287)"
"(let-values(((namespace43_288)(car given-args_285))"
"((given-kws_289)(cdr given-kws_284))"
"((given-args_290)(cdr given-args_285)))"
"(let-values(((reexport?44_291)(pair? given-kws_289)))"
"(let-values(((reexport?42_292)(if reexport?44_291(car given-args_290)(void))))"
"(declare-reexporting-module!48.1"
" namespace43_288"
" reexport?42_292"
" reexport?44_291"
" name46_286"
" require-names47_287))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lifted/4.1"
"(lambda(given-kws_293 given-argc_294)"
"(if(= given-argc_294 4)(subsets? '(#:namespace) given-kws_293 '(#:namespace #:reexport?)) #f))"
"(case-lambda"
"((given-kws_295 given-args_296 name_297 require-names_298)"
"(unpack49.1 given-kws_295 given-args_296 name_297 require-names_298)))"
" '(#:namespace)"
" '(#:namespace #:reexport?)))"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" 1/eval"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$2"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" new:collection-path"
" 'collection-file-path"
" new:collection-file-path"
" 'find-library-collection-paths"
" find-library-collection-paths"
" 'find-library-collection-links"
" find-library-collection-links"
" 'load/use-compiled"
" load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_1)(TH-place-channel-ref x_1 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_2)(TH-place-channel-ref x_2 0))(lambda(x_3)(TH-place-channel-ref x_3 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?))"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(call-with-default-reading-parameterization"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t"
" read-accept-compiled"
" #t)"
"(let-values()(thunk_1)))))))"
"(define-values"
"(raise-wrong-module-name)"
"(lambda(filename_2 expected-name_3 name_4)"
"(error"
" 'load-handler"
"     \"expected a `module' declaration for `~a' in ~s, found: ~a\""
" expected-name_3"
" filename_2"
" name_4)))"
"(define-values"
"(check-module-form)"
"(lambda(exp_5 filename_6)"
"(if(let-values(((or-part_7)(eof-object? exp_5)))(if or-part_7 or-part_7(eof-object?(syntax-e$2 exp_5))))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
"           (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_6)"
" #f))"
"(if(1/compiled-module-expression?(syntax-e$2 exp_5))"
"(let-values() exp_5)"
"(if(if(syntax?$1 exp_5)"
"(if(pair?(syntax-e$2 exp_5))"
"(if(eq? 'module(syntax-e$2(car(syntax-e$2 exp_5))))"
"(let-values(((r_8)(cdr(syntax-e$2 exp_5))))"
"(let-values(((r_9)(if(syntax?$1 r_8)(syntax-e$2 r_8) r_8)))"
"(if(pair? r_9)(identifier?(car r_9)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_5(cons(1/namespace-module-identifier)(cdr(syntax-e$2 exp_5))) exp_5 exp_5))"
"(let-values()"
"(if filename_6"
"(error"
" 'load-handler"
"               (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_6)"
" #f)))))))"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_1)"
"(lambda(s_2)"
"(if(complete-path? s_2)"
" s_2"
"(let-values(((d_3)(current-load-relative-directory)))"
"(if d_3(path->complete-path s_2 d_3) s_2))))))"
"(let-values(((date-of-1_4)"
"(lambda(a_5)"
"(let-values(((v_6)(file-or-directory-modify-seconds a_5 #f(lambda() #f))))"
"(if v_6(cons a_5 v_6) #f)))))"
"(let-values(((date-of_7)"
"(lambda(a_8 modes_9 roots_10)"
"(ormap2"
"(lambda(root-dir_11)"
"(ormap2"
"(lambda(compiled-dir_12)"
"(let-values(((a_13)(a_8 root-dir_11 compiled-dir_12)))(date-of-1_4 a_13)))"
" modes_9))"
" roots_10))))"
"(let-values(((date>=?_14)"
"(lambda(modes_15 roots_16 a_17 bm_18)"
"(if a_17"
"(let-values(((am_19)(date-of_7 a_17 modes_15 roots_16)))"
"(let-values(((or-part_20)(if(not bm_18) am_19 #f)))"
"(if or-part_20"
" or-part_20"
"(if am_19(if bm_18(if(>=(cdr am_19)(cdr bm_18)) am_19 #f) #f) #f))))"
" #f))))"
"(let-values(((with-dir*_21)"
"(lambda(base_22 t_23)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_22) base_22(current-directory)))"
"(let-values()(t_23))))))"
"(lambda(path_24 expect-module_25)"
"(let-values((()"
"(begin"
"(if(path-string? path_24)"
"(void)"
"                                (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_29)(not expect-module_25)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? expect-module_25)))"
"(if or-part_30"
" or-part_30"
"(if(list? expect-module_25)"
"(if(>(length expect-module_25) 1)"
"(if(let-values(((or-part_31)(symbol?(car expect-module_25))))"
"(if or-part_31 or-part_31(not(car expect-module_25))))"
"(andmap2 symbol?(cdr expect-module_25))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                     \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_24)))"
"(values))))"
"(let-values(((name_26)(if expect-module_25(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_27)"
"(if name_26"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" #f)"
" #f)))"
"(let-values(((use-path/src_28)(if ns-hts_27(hash-ref(cdr ns-hts_27) name_26 #f) #f)))"
"(if use-path/src_28"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_28))"
"(let-values()"
"(with-dir*_21"
"(caddr use-path/src_28)"
"(lambda()((current-load)(car use-path/src_28) expect-module_25)))))"
"(let-values(((orig-path_32)(resolve_1 path_24)))"
"(let-values(((base_33 orig-file_34 dir?_35)(split-path path_24)))"
"(let-values(((file_36 alt-file_37)"
"(if expect-module_25"
"(let-values(((b_38)(path->bytes orig-file_34)))"
"(let-values(((len_39)(bytes-length b_38)))"
"(if(if(>= len_39 4)"
"                                                        (bytes=? #\".rkt\" (subbytes b_38 (- len_39 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_34"
"(bytes->path"
"                                                        (bytes-append (subbytes b_38 0 (- len_39 4)) #\".ss\"))))"
"(let-values()(values orig-file_34 #f)))))"
"(values orig-file_34 #f))))"
"(let-values(((path_40)"
"(if(eq? file_36 orig-file_34)"
" orig-path_32"
"(build-path base_33 file_36))))"
"(let-values(((alt-path_41)"
"(if alt-file_37"
"(if(eq? alt-file_37 orig-file_34)"
" orig-path_32"
"(build-path base_33 alt-file_37))"
" #f)))"
"(let-values(((base_42)(if(eq? base_33 'relative) 'same base_33)))"
"(let-values(((modes_43)(use-compiled-file-paths)))"
"(let-values(((roots_44)(current-compiled-file-roots)))"
"(let-values(((reroot_45)"
"(lambda(p_46 d_47)"
"(if(eq? d_47 'same)"
"(let-values() p_46)"
"(if(relative-path? d_47)"
"(let-values()(build-path p_46 d_47))"
"(let-values()(reroot-path p_46 d_47)))))))"
"(let-values(((main-path-d_48)(date-of-1_4 path_40)))"
"(let-values(((alt-path-d_49)"
"(if alt-path_41"
"(if(not main-path-d_48)(date-of-1_4 alt-path_41) #f)"
" #f)))"
"(let-values(((path-d_50)"
"(let-values(((or-part_51) main-path-d_48))"
"(if or-part_51 or-part_51 alt-path-d_49))))"
"(let-values(((get-so_52)"
"(lambda(file_53 rep-sfx?_54)"
"(lambda(root-dir_55 compiled-dir_56)"
"(build-path"
"(reroot_45 base_42 root-dir_55)"
" compiled-dir_56"
"                                                                     \"native\""
"(system-library-subpath)"
"(if rep-sfx?_54"
"(path-add-extension file_53 dll-suffix)"
" file_53))))))"
"(let-values(((zo_57)"
"(lambda(root-dir_58 compiled-dir_59)"
"(build-path"
"(reroot_45 base_42 root-dir_58)"
" compiled-dir_59"
"                                                                     (path-add-extension file_36 #\".zo\")))))"
"(let-values(((alt-zo_60)"
"(lambda(root-dir_61 compiled-dir_62)"
"(build-path"
"(reroot_45 base_42 root-dir_61)"
" compiled-dir_62"
"                                                                       (path-add-extension alt-file_37 #\".zo\")))))"
"(let-values(((so_63)(get-so_52 file_36 #t)))"
"(let-values(((alt-so_64)(get-so_52 alt-file_37 #t)))"
"(let-values(((try-main?_65)"
"(let-values(((or-part_66) main-path-d_48))"
"(if or-part_66"
" or-part_66"
"(not alt-path-d_49)))))"
"(let-values(((try-alt?_67)"
"(if alt-file_37"
"(let-values(((or-part_68) alt-path-d_49))"
"(if or-part_68"
" or-part_68"
"(not main-path-d_48)))"
" #f)))"
"(let-values(((with-dir_69)"
"(lambda(t_70)"
"(with-dir*_21 base_42 t_70))))"
"(let-values(((c90082_71)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" so_63"
" path-d_50)"
" #f)))"
"(if c90082_71"
"((lambda(so-d_72)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_72)"
" expect-module_25))))))"
" c90082_71)"
"(let-values(((c90083_73)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-so_64"
" alt-path-d_49)"
" #f)))"
"(if c90083_73"
"((lambda(so-d_74)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_74)"
" expect-module_25))))))"
" c90083_73)"
"(let-values(((c90084_75)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" zo_57"
" path-d_50)"
" #f)))"
"(if c90084_75"
"((lambda(zo-d_76)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_76)"
" #f"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_76)"
" expect-module_25)))))))"
" c90084_75)"
"(let-values(((c90085_77)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-zo_60"
" path-d_50)"
" #f)))"
"(if c90085_77"
"((lambda(zo-d_78)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_78)"
" alt-path_41"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
"(car zo-d_78)"
" expect-module_25)))))))"
" c90085_77)"
"(if(let-values(((or-part_79)"
"(not"
"(pair?"
" expect-module_25))))"
"(if or-part_79"
" or-part_79"
"(car expect-module_25)))"
"(let-values()"
"(let-values(((p_80)"
"(if try-main?_65"
" path_40"
" alt-path_41)))"
"(if(if(pair? expect-module_25)"
"(not(file-exists? p_80))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_25"
"(if(not try-main?_65)"
" p_80"
" #f)"
" #f))"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load)"
" p_80"
" expect-module_25)))))))))"
"(void)))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_81 ns-hts_82 path_83 src-path_84 base_85)"
"(if ns-hts_82(let-values()(hash-set!(cdr ns-hts_82) name_81(list path_83 src-path_84 base_85)))(void))))"
"(define-values(default-reader-guard)(lambda(path_86) path_86))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_87)"
"(let-values(((i_88)(modulo(abs(equal-hash-code p_87)) CACHE-N)))"
"(let-values(((w_89)(vector-ref -path-cache i_88)))"
"(let-values(((l_90)(if w_89(weak-box-value w_89) #f)))"
"(if l_90(let-values(((a_91)(1/assoc p_87 l_90)))(if a_91(cdr a_91) #f)) #f))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_92 v_93)"
"(let-values(((i_94)(modulo(abs(equal-hash-code p_92)) CACHE-N)))"
"(let-values(((w_95)(vector-ref -path-cache i_94)))"
"(let-values(((l_96)(if w_95(weak-box-value w_95) #f)))"
"(vector-set!"
" -path-cache"
" i_94"
"(make-weak-box"
"(cons(cons p_92 v_93)(let-values(((or-part_97) l_96))(if or-part_97 or-part_97 null))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_98 coll-mode?_99)"
"(let-values(((l_100)"
"((letrec-values(((loop_101)"
"(lambda(s_102)"
"(let-values(((len_103)(string-length s_102)))"
"((letrec-values(((iloop_104)"
"(lambda(i_105)"
"(if(= i_105 len_103)"
"(let-values()(list s_102))"
"(if(char=? '#\\/(string-ref s_102 i_105))"
"(let-values()"
"(cons"
"(substring s_102 0 i_105)"
"(loop_101(substring s_102(add1 i_105)))))"
"(let-values()(iloop_104(add1 i_105))))))))"
" iloop_104)"
" 0)))))"
" loop_101)"
" s_98)))"
"(if coll-mode?_99"
" l_100"
"((letrec-values(((loop_106)"
"(lambda(l_107)"
"(if(null?(cdr l_107))"
"(values null(car l_107))"
"(let-values(((c_108 f_109)(loop_106(cdr l_107))))"
"(values(cons(car l_107) c_108) f_109))))))"
" loop_106)"
" l_100)))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_110)"
"(srcloc->string"
"(srcloc"
"(syntax-source$1 stx_110)"
"(1/syntax-line stx_110)"
"(syntax-column$1 stx_110)"
"(syntax-position$1 stx_110)"
"(1/syntax-span stx_110)))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_111) #f))"
"(let-values(((prep-planet-resolver!_112)"
"(lambda()"
"(if planet-resolver_111"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_111"
"                             (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver))))))))"
"(letrec-values(((standard-module-name-resolver_113)"
"(case-lambda"
"((s_114 from-namespace_115)"
"(begin"
"(if(1/resolved-module-path? s_114)"
"(void)"
"(let-values()"
"                                 (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_114)))"
"(if(let-values(((or-part_116)(not from-namespace_115)))"
"(if or-part_116 or-part_116(1/namespace? from-namespace_115)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                  \"(or/c #f namespace?)\""
" from-namespace_115)))"
"(if planet-resolver_111(let-values()(planet-resolver_111 s_114))(void))"
"(let-values(((hts_117)"
"(let-values(((or-part_118)"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" #f)))"
"(if or-part_118"
" or-part_118"
"(let-values(((hts_119)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(namespace-module-registry$1(1/current-namespace))"
" hts_119)"
" hts_119))))))"
"(begin"
"(hash-set!(car hts_117) s_114 'declared)"
"(if from-namespace_115"
"(let-values()"
"(let-values(((root-name_120)"
"(if(pair?(1/resolved-module-path-name s_114))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_114)))"
" s_114))"
"((from-hts_121)"
"(hash-ref"
" -module-hash-table-table"
"(namespace-module-registry$1 from-namespace_115)"
" #f)))"
"(if from-hts_121"
"(let-values()"
"(let-values(((use-path/src_122)"
"(hash-ref(cdr from-hts_121) root-name_120 #f)))"
"(if use-path/src_122"
"(let-values()(hash-set!(cdr hts_117) root-name_120 use-path/src_122))"
"(void))))"
"(void))))"
"(void))))))"
"((s_123 relto_124 stx_125)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_113 s_123 relto_124 stx_125 #t)))"
"((s_126 relto_127 stx_128 load?_129)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_126)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_128)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_126))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_131)(not relto_127)))"
"(if or-part_131 or-part_131(1/resolved-module-path? relto_127)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_127)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_132)(not stx_128)))"
"(if or-part_132 or-part_132(syntax?$1 stx_128)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_128)))"
"(values))))"
"(let-values(((flatten-sub-path_130)"
"(lambda(base_133 orig-l_134)"
"((letrec-values(((loop_135)"
"(lambda(a_136 l_137)"
"(if(null? l_137)"
"(let-values()"
"(if(null? a_136)"
" base_133"
"(cons base_133(alt-reverse a_136))))"
"                                                                       (if (equal? (car l_137) \"..\")"
"(let-values()"
"(if(null? a_136)"
"(error"
" 'standard-module-name-resolver"
"                                                                              \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                               (if (equal? base_133 \".\")"
" base_133"
"(if(path? base_133)"
" base_133"
"(list"
"(if(symbol? base_133) 'quote 'file)"
" base_133)))"
" orig-l_134))"
"(loop_135(cdr a_136)(cdr l_137))))"
"(let-values()"
"(loop_135"
"(cons(car l_137) a_136)"
"(cdr l_137))))))))"
" loop_135)"
" null"
" orig-l_134))))"
"(if(if(pair? s_126)(eq?(car s_126) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_126)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path"
"(flatten-sub-path_130(cadadr s_126)(cddr s_126))))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"                                               (if (let-values (((or-part_138) (equal? (cadr s_126) \".\")))"
"                                                     (if or-part_138 or-part_138 (equal? (cadr s_126) \"..\")))"
"(if relto_127"
"(let-values(((p_139)(1/resolved-module-path-name relto_127)))"
"(let-values(((or-part_140)(symbol? p_139)))"
"(if or-part_140"
" or-part_140"
"(if(pair? p_139)(symbol?(car p_139)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_141)(1/resolved-module-path-name relto_127)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_130"
"(if(pair? rp_141)(car rp_141) rp_141)"
"(let-values(((r_142)"
"                                                             (if (equal? (cadr s_126) \"..\") (cdr s_126) (cddr s_126))))"
"(if(pair? rp_141)(append(cdr rp_141) r_142) r_142))))))"
"(if(if(pair? s_126)(eq?(car s_126) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111 s_126 relto_127 stx_128 load?_129 #f orig-paramz)))"
"(if(if(pair? s_126)"
"(if(eq?(car s_126) 'submod)"
"(if(pair?(cadr s_126))(eq?(caadr s_126) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_112)"
"(planet-resolver_111"
"(cadr s_126)"
" relto_127"
" stx_128"
" load?_129"
"(cddr s_126)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_143)"
"(lambda()"
"(let-values(((or-part_150)"
"(if relto_127"
"(if(eq? relto_127 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_151)"
"(1/resolved-module-path-name"
" relto_127)))"
"(let-values(((p_152)"
"(if(pair? p_151)"
"(car p_151)"
" p_151)))"
"(if(path? p_152)"
"(let-values(((base_153"
" n_154"
" d?_155)"
"(split-path"
" p_152)))"
"(begin"
"(set! -prev-relto relto_127)"
"(set! -prev-relto-dir"
" base_153)"
" base_153))"
" #f))))"
" #f)))"
"(if or-part_150"
" or-part_150"
"(let-values(((or-part_156)"
"(current-load-relative-directory)))"
"(if or-part_156"
" or-part_156"
"(current-directory)))))))"
"((get-reg_144)"
"(lambda()"
"(namespace-module-registry$1(1/current-namespace))))"
"((show-collection-err_145)"
"(lambda(msg_157)"
"(let-values(((msg_158)"
"(string-append"
"(let-values(((or-part_159)"
"(if stx_128"
"(if(error-print-source-location)"
"(format-source-location"
" stx_128)"
" #f)"
" #f)))"
"(if or-part_159"
" or-part_159"
"                                                                                  \"standard-module-name-resolver\"))"
"                                                                              \": \""
"(regexp-replace"
"                                                                               '#rx\"\\n\""
" msg_157"
"(format"
"                                                                                \"\\n  for module path: ~s\\n\""
" s_126)))))"
"(raise"
"(if stx_128"
"(make-exn:fail:syntax:missing-module"
" msg_158"
"(current-continuation-marks)"
"(list stx_128)"
" s_126)"
"(make-exn:fail:filesystem:missing-module"
" msg_158"
"(current-continuation-marks)"
" s_126))))))"
"((ss->rkt_146)"
"(lambda(s_160)"
"(let-values(((len_161)(string-length s_160)))"
"(if(if(>= len_161 3)"
"(if(equal?"
" '#\\."
"(string-ref s_160(- len_161 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_160(- len_161 2)))"
"(equal?"
" '#\\s"
"(string-ref s_160(- len_161 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_160 0(- len_161 3))"
"                                                                    \".rkt\")"
" s_160))))"
"((path-ss->rkt_147)"
"(lambda(p_162)"
"(let-values(((base_163 name_164 dir?_165)"
"(split-path p_162)))"
"                                                                 (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_164))"
"                                                                   (path-replace-extension p_162 #\".rkt\")"
" p_162))))"
"((s_148)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((v_166)(cadr s_126)))"
"                                                                 (if (let-values (((or-part_167) (equal? v_166 \".\")))"
"                                                                       (if or-part_167 or-part_167 (equal? v_166 \"..\")))"
"(if relto_127"
"(let-values(((p_168)"
"(1/resolved-module-path-name"
" relto_127)))"
"(if(pair? p_168)(car p_168) p_168))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_126))"
" v_166))"
" s_126))"
"((subm-path_149)"
"(if(if(pair? s_126)(eq? 'submod(car s_126)) #f)"
"(let-values(((p_169)"
"(if(if(let-values(((or-part_170)"
"(equal?"
"(cadr s_126)"
"                                                                                                    \".\")))"
"(if or-part_170"
" or-part_170"
"                                                                                         (equal? (cadr s_126) \"..\")))"
" relto_127"
" #f)"
"(let-values(((p_171)"
"(1/resolved-module-path-name"
" relto_127))"
"((r_172)"
"(if(equal?"
"(cadr s_126)"
"                                                                                                  \"..\")"
"(cdr s_126)"
"(cddr s_126))))"
"(if(pair? p_171)"
"(flatten-sub-path_130"
"(car p_171)"
"(append(cdr p_171) r_172))"
"(flatten-sub-path_130 p_171 r_172)))"
"(flatten-sub-path_130"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_126) \"..\")"
"(cdr s_126)"
"(cddr s_126))))))"
"(if(pair? p_169)(cdr p_169) #f))"
" #f)))"
"(let-values(((s-parsed_173)"
"(if(symbol? s_148)"
"(let-values()"
"(let-values(((or-part_174)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_174"
" or-part_174"
"(let-values(((cols_175 file_176)"
"(split-relative-string"
"(symbol->string s_148)"
" #f)))"
"(let-values(((f-file_177)"
"(if(null? cols_175)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_176"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_145"
"(if(null? cols_175)"
" file_176"
"(car cols_175))"
"(if(null? cols_175) null(cdr cols_175))"
" f-file_177"
" #t))))))"
"(if(string? s_148)"
"(let-values()"
"(let-values(((dir_178)(get-dir_143)))"
"(let-values(((or-part_179)"
"(path-cache-get"
"(cons s_148 dir_178))))"
"(if or-part_179"
" or-part_179"
"(let-values(((cols_180 file_181)"
"(split-relative-string"
" s_148"
" #f)))"
"(if(null? cols_180)"
"(build-path"
" dir_178"
"(ss->rkt_146 file_181))"
"(apply"
" build-path"
" dir_178"
"(append"
"(map2"
"(lambda(s_182)"
"                                                                                    (if (string=? s_182 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_182 \"..\")"
"(let-values() 'up)"
"(let-values() s_182))))"
" cols_180)"
"(list(ss->rkt_146 file_181))))))))))"
"(if(path? s_148)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(if(complete-path? s_148)"
" s_148"
"(path->complete-path s_148(get-dir_143))))))"
"(if(eq?(car s_148) 'lib)"
"(let-values()"
"(let-values(((or-part_183)"
"(path-cache-get"
"(cons s_148(get-reg_144)))))"
"(if or-part_183"
" or-part_183"
"(let-values(((cols_184 file_185)"
"(split-relative-string"
"(cadr s_148)"
" #f)))"
"(let-values(((old-style?_186)"
"(if(null?(cddr s_148))"
"(if(null? cols_184)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_185)"
" #f)"
" #t)))"
"(let-values(((f-file_187)"
"(if old-style?_186"
"(ss->rkt_146 file_185)"
"(if(null? cols_184)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_185)"
"(ss->rkt_146"
" file_185)"
"(string-append"
" file_185"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_188)"
"(if old-style?_186"
"(append"
"(if(null?"
"(cddr s_148))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_189)"
"(split-relative-string"
" p_189"
" #t))"
"(cddr s_148))))"
" cols_184)"
"(if(null? cols_184)"
"(list file_185)"
" cols_184))))"
"(find-col-file"
" show-collection-err_145"
"(car cols_188)"
"(cdr cols_188)"
" f-file_187"
" #t))))))))"
"(if(eq?(car s_148) 'file)"
"(let-values()"
"(path-ss->rkt_147"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_148))"
"(get-dir_143)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_190)(path? s-parsed_173)))"
"(if or-part_190 or-part_190(vector? s-parsed_173)))"
"(void)"
"(let-values()"
"(if stx_128"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_173 (car s-parsed_173) \"\"))"
" stx_128)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_148))))"
"(let-values(((filename_191)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 0)"
"(simplify-path(cleanse-path s-parsed_173) #f))))"
"(let-values(((normal-filename_192)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 1)"
"(normal-case-path filename_191))))"
"(let-values(((base_193 name_194 dir?_195)"
"(if(vector? s-parsed_173)"
"(values"
" 'ignored"
"(vector-ref s-parsed_173 2)"
" 'ignored)"
"(split-path filename_191))))"
"(let-values(((no-sfx_196)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 3)"
"                                                                           (path-replace-extension name_194 #\"\"))))"
"(let-values(((root-modname_197)"
"(if(vector? s-parsed_173)"
"(vector-ref s-parsed_173 4)"
"(1/make-resolved-module-path"
" filename_191))))"
"(let-values(((hts_198)"
"(let-values(((or-part_199)"
"(hash-ref"
" -module-hash-table-table"
"(get-reg_144)"
" #f)))"
"(if or-part_199"
" or-part_199"
"(let-values(((hts_200)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(hash-set!"
" -module-hash-table-table"
"(get-reg_144)"
" hts_200)"
" hts_200))))))"
"(let-values(((modname_201)"
"(if subm-path_149"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_197)"
" subm-path_149))"
" root-modname_197)))"
"(begin"
"(if load?_129"
"(let-values()"
"(let-values(((got_202)"
"(hash-ref"
"(car hts_198)"
" modname_201"
" #f)))"
"(if got_202"
"(void)"
"(let-values()"
"(let-values(((loading_203)"
"(let-values(((tag_205)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_205)))"
"((nsr_204)(get-reg_144)))"
"(begin"
"(for-each2"
"(lambda(s_206)"
"(if(if(equal?"
"(cdr s_206)"
" normal-filename_192)"
"(eq?(car s_206) nsr_204)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_191"
"(apply"
" string-append"
"((letrec-values(((loop_207)"
"(lambda(l_208)"
"(if(null?"
" l_208)"
" '()"
"(list*"
"                                                                                                                   \"\\n   \""
"(path->string"
"(cdar"
" l_208))"
"(loop_207"
"(cdr"
" l_208)))))))"
" loop_207)"
"(alt-reverse"
" loading_203)))))"
"(void)))"
" loading_203)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_209)(f_209))"
"(lambda(f_210)"
"(call-with-continuation-prompt"
" f_210"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons"
" nsr_204"
" normal-filename_192)"
" loading_203)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_197"
" 1/current-module-path-for-load"
"((if stx_128"
"(lambda(p_211)"
"(1/datum->syntax"
" #f"
" p_211"
" stx_128))"
" values)"
"(if(symbol? s_148)"
"(let-values() s_148)"
"(if(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)"
"(let-values() s_148)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_197)"
"(let-values(((src_212)"
"(1/resolved-module-path-name"
" root-modname_197)))"
"(if(symbol?"
" src_212)"
"(list"
" 'quote"
" src_212)"
" src_212))"
" root-modname_197))))))"
"(let-values()"
"((current-load/use-compiled)"
" filename_191"
"(let-values(((sym_213)"
"(string->symbol"
"(path->string"
" no-sfx_196))))"
"(if subm-path_149"
"(if(hash-ref"
"(car hts_198)"
" root-modname_197"
" #f)"
"(cons #f subm-path_149)"
"(cons"
" sym_213"
" subm-path_149))"
" sym_213))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_173))"
"(if load?_129"
"(let-values(((or-part_214)"
"(string? s_148)))"
"(if or-part_214"
" or-part_214"
"(let-values(((or-part_215)"
"(symbol? s_148)))"
"(if or-part_215"
" or-part_215"
"(if(pair? s_148)"
"(eq?(car s_148) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_148)"
"(cons s_148(get-dir_143))"
"(cons s_148(get-reg_144)))"
"(vector"
" filename_191"
" normal-filename_192"
" name_194"
" no-sfx_196"
" root-modname_197)))"
"(void))"
" modname_201)))))))))))))))))))))))))"
" standard-module-name-resolver_113)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_216)"
"(eval$1"
" s_216"
"(1/current-namespace)"
"(let-values(((c_217)(current-compile)))(lambda(e_218 ns_219)(c_217 e_218 #t))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_220 immediate-eval?_221)(compile$1 s_220(1/current-namespace)(not immediate-eval?_221))))"
"(define-values"
"(default-load-handler)"
"(lambda(path_222 expected-mod_223)"
"(begin"
"(if(path-string? path_222)"
"(void)"
"        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_222)))"
"(if(let-values(((or-part_224)(not expected-mod_223)))"
"(if or-part_224"
" or-part_224"
"(let-values(((or-part_225)(symbol? expected-mod_223)))"
"(if or-part_225"
" or-part_225"
"(if(pair? expected-mod_223)"
"(if(list? expected-mod_223)"
"(if(let-values(((or-part_226)(not(car expected-mod_223))))"
"(if or-part_226 or-part_226(symbol?(car expected-mod_223))))"
"(andmap2 symbol?(cdr expected-mod_223))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"           \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_223)))"
"(if expected-mod_223"
"(let-values()"
"(let-values(((m-s_227)"
"(let-values(((path1_228) path_222)"
"((temp2_229)"
"(lambda(i_230)"
"(begin"
"                                          (if (regexp-match? '#rx\"[.]zo$\" path_222)"
"(void)"
"(let-values()(port-count-lines! i_230)))"
"(with-module-reading-parameterization"
"(lambda()"
"(let-values(((s_231)(1/read-syntax(object-name i_230) i_230)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_231)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                                     \"expected a `module' declaration;\\n\""
"                                                                     \" found end-of-file\\n\""
"                                                                     \"  in: ~e\")"
"(object-name i_230)))"
"(void))"
"(values))))"
"(let-values(((m-s_232)(check-module-form s_231 path_222)))"
"(let-values(((s2_233)(1/read-syntax(object-name i_230) i_230)))"
"(begin"
"(if(eof-object? s2_233)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                             \"expected a `module' declaration;\\n\""
"                                                             \" found an extra form\\n\""
"                                                             \"  in: ~e\\n\""
"                                                             \"  found: ~.s\")"
"(object-name i_230)"
" s2_233)))"
" m-s_232)))))))))))"
"(if(variable-reference-constant?(#%variable-reference call-with-input-file*63.1))"
"(call-with-input-file*61.1 #f #f path1_228 temp2_229)"
"(call-with-input-file*63.1 path1_228 temp2_229)))))"
"((current-eval) m-s_227)))"
"(let-values()"
"(let-values(((add-top-interaction_234)"
"(lambda(s_235)"
"(1/namespace-syntax-introduce(1/datum->syntax #f(cons '#%top-interaction s_235))))))"
"(let-values(((path3_236) path_222)"
"((temp4_237)"
"(lambda(i_238)"
"(begin"
"(port-count-lines! i_238)"
"((letrec-values(((loop_239)"
"(lambda(vals_240)"
"(let-values(((s_241)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-compiled"
" #t"
" read-accept-reader"
" #t"
" read-accept-lang"
" #t)"
"(let-values()"
"(1/read-syntax(object-name i_238) i_238)))))"
"(if(eof-object? s_241)"
"(apply values vals_240)"
"(loop_239"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()((current-eval)(add-top-interaction_234 s_241)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_242"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_242)))))))))"
" loop_239)"
"(list(void)))))))"
"(if(variable-reference-constant?(#%variable-reference call-with-input-file*63.1))"
"(call-with-input-file*61.1 #f #f path3_236 temp4_237)"
"(call-with-input-file*63.1 path3_236 temp4_237)))))))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_243 in_244)"
"(begin"
"(if(input-port? in_244)"
"(void)"
"        (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_244)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-accept-reader"
" #t"
" read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_243 in_244))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(current-load/use-compiled default-load/use-compiled)"
"(current-reader-guard default-reader-guard)"
"(current-eval default-eval-handler)"
"(current-compile default-compile-handler)"
"(current-load default-load-handler)"
"(current-read-interaction default-read-interaction))))"
"(define-values"
"(seal)"
"(lambda()(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key)))))"
"(define-values(boot-primitives)(hash 'boot boot 'seal seal 'orig-paramz orig-paramz))"
"(define-values"
"(dynamic-require-reader)"
"(lambda(mod-path_1 sym_2)"
"(let-values(((proc_3)(1/dynamic-require mod-path_1 sym_2)))"
"(if(if(eq? sym_2 'read-syntax)(procedure-arity-includes? proc_3 6) #f)"
"(let-values()"
"(lambda(name_4 input_5 mod-s_6 line_7 column_8 position_9)"
"(proc_3 name_4 input_5(host-syntax->syntax mod-s_6) line_7 column_8 position_9)))"
"(let-values() proc_3)))))"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_3 disarmed-s_4 formals_5 bodys_6 ctx_7 log-renames-tag_8)"
"(let-values(((sc_9)(new-scope 'local)))"
"(let-values(((phase_10)(expand-context-phase ctx_7)))"
"(let-values(((ids_11)(parse-and-flatten-formals formals_5 sc_9 disarmed-s_4)))"
"(let-values((()"
"(begin"
"(let-values(((...nder/expand/expr.rkt:34:2_19) check-no-duplicate-ids10.1)"
"((ids30_20) ids_11)"
"((phase31_21) phase_10)"
"((s32_22) s_3)"
"                                       ((temp33_23) \"argument name\"))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 temp33_23 #t ids30_20 phase31_21 s32_22 #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:34:2_19"
" keyword-procedure-extract"
" '(#:what)"
" 5)"
" '(#:what)"
"(list temp33_23)"
" ids30_20"
" phase31_21"
" s32_22)))"
"(values))))"
"(let-values(((counter_12)(root-expand-context-counter ctx_7)))"
"(let-values(((keys_13)"
"(alt-reverse"
"(let-values(((lst_24) ids_11))"
"(begin"
"(if(list? lst_24)(void)(let-values()(in-list lst_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_26 lst_27)"
"(if(pair? lst_27)"
"(let-values(((id_28)(unsafe-car lst_27)))"
"(if #t"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_30) fold-var_26))"
"(let-values(((fold-var_31)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:39:17_32)"
" add-local-binding!35.1)"
"((id34_33)"
" id_28)"
"((phase35_34)"
" phase_10)"
"((counter36_35)"
" counter_12)"
"((s37_36)"
" s_3))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" #f"
" #f"
" s37_36"
" #t"
" id34_33"
" phase35_34"
" counter36_35)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:39:17_32"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list s37_36)"
" id34_33"
" phase35_34"
" counter36_35))))"
" fold-var_30))))"
"(values fold-var_31)))))"
"(if #t"
"(for-loop_25 fold-var_29(unsafe-cdr lst_27))"
" fold-var_29))"
" fold-var_26))"
" fold-var_26))))"
" for-loop_25)"
" null"
" lst_24))))))"
"(let-values(((body-env_14)"
"(let-values(((lst_37) keys_13)((lst_38) ids_11))"
"(begin"
"(if(list? lst_37)(void)(let-values()(in-list lst_37)))"
"(if(list? lst_38)(void)(let-values()(in-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(env_40 lst_41 lst_42)"
"(if(if(pair? lst_41)(pair? lst_42) #f)"
"(let-values(((key_43)(unsafe-car lst_41))"
"((id_44)(unsafe-car lst_42)))"
"(if(if #t #t #f)"
"(let-values(((env_45)"
"(let-values(((env_46) env_40))"
"(let-values(((env_47)"
"(let-values()"
"(env-extend"
" env_46"
" key_43"
"(local-variable1.1"
" id_44)))))"
"(values env_47)))))"
"(if(if #t #t #f)"
"(for-loop_39"
" env_45"
"(unsafe-cdr lst_41)"
"(unsafe-cdr lst_42))"
" env_45))"
" env_40))"
" env_40))))"
" for-loop_39)"
"(expand-context-env ctx_7)"
" lst_37"
" lst_38)))))"
"(let-values(((sc-formals_15)(add-scope formals_5 sc_9)))"
"(let-values(((sc-bodys_16)"
"(alt-reverse"
"(let-values(((lst_48) bodys_6))"
"(begin"
"(if(list? lst_48)(void)(let-values()(in-list lst_48)))"
"((letrec-values(((for-loop_49)"
"(lambda(fold-var_50 lst_51)"
"(if(pair? lst_51)"
"(let-values(((body_52)(unsafe-car lst_51)))"
"(if #t"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54) fold-var_50))"
"(let-values(((fold-var_55)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_52"
" sc_9))"
" fold-var_54))))"
"(values fold-var_55)))))"
"(if #t"
"(for-loop_49 fold-var_53(unsafe-cdr lst_51))"
" fold-var_53))"
" fold-var_50))"
" fold-var_50))))"
" for-loop_49)"
" null"
" lst_48))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_56)(expand-context-observer ctx_7)))"
"(if obs_56"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_56"
" log-renames-tag_8"
" sc-formals_15"
"(datum->syntax$2 #f sc-bodys_16)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_17)"
"(let-values(((the-struct_57) ctx_7))"
"(if(expand-context? the-struct_57)"
"(let-values(((env38_58) body-env_14)"
"((scopes39_59)(cons sc_9(expand-context-scopes ctx_7)))"
"((all-scopes-stx40_60)"
"(add-scope(root-expand-context-all-scopes-stx ctx_7) sc_9)))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_57)"
"(root-expand-context-post-expansion-scope the-struct_57)"
"(root-expand-context-top-level-bind-scope the-struct_57)"
" all-scopes-stx40_60"
"(root-expand-context-use-site-scopes the-struct_57)"
"(root-expand-context-defined-syms the-struct_57)"
"(root-expand-context-frame-id the-struct_57)"
"(root-expand-context-counter the-struct_57)"
"(root-expand-context-lift-key the-struct_57)"
"(expand-context-context the-struct_57)"
"(expand-context-phase the-struct_57)"
"(expand-context-namespace the-struct_57)"
" env38_58"
"(expand-context-post-expansion-scope-action the-struct_57)"
" scopes39_59"
"(expand-context-def-ctx-scopes the-struct_57)"
"(expand-context-reference-records the-struct_57)"
"(expand-context-only-immediate? the-struct_57)"
"(expand-context-just-once? the-struct_57)"
"(expand-context-module-begin-k the-struct_57)"
"(expand-context-need-eventually-defined the-struct_57)"
"(expand-context-allow-unbound? the-struct_57)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_57)"
"(expand-context-stops the-struct_57)"
"(expand-context-current-introduction-scopes the-struct_57)"
"(expand-context-declared-submodule-names the-struct_57)"
"(expand-context-lifts the-struct_57)"
"(expand-context-lift-envs the-struct_57)"
"(expand-context-module-lifts the-struct_57)"
"(expand-context-require-lifts the-struct_57)"
"(expand-context-to-module-lifts the-struct_57)"
"(expand-context-requires+provides the-struct_57)"
"(expand-context-name the-struct_57)"
"(expand-context-observer the-struct_57)))"
"                                          (raise-argument-error 'struct-copy \"expand-context?\" the-struct_57)))))"
"(let-values(((exp-body_18)"
"(let-values(((...nder/expand/expr.rkt:53:19_61) expand-body30.1)"
"((sc-bodys41_62) sc-bodys_16)"
"((body-ctx42_63) body-ctx_17)"
"((s43_64) s_3)"
"((disarmed-s44_65) disarmed-s_4))"
"(if(variable-reference-constant?(#%variable-reference expand-body30.1))"
"(expand-body28.1"
" disarmed-s44_65"
" s43_64"
" #f"
" #f"
" #f"
" #f"
" sc-bodys41_62"
" body-ctx42_63)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:53:19_61"
" keyword-procedure-extract"
" '(#:disarmed-source #:source)"
" 4)"
" '(#:disarmed-source #:source)"
"(list disarmed-s44_65 s43_64)"
" sc-bodys41_62"
" body-ctx42_63)))))"
"(values sc-formals_15 exp-body_18)))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_66)"
"(lambda(s_67 ctx_68)"
"(let-values((()"
"(begin"
"(let-values(((obs_88)(expand-context-observer ctx_68)))"
"(if obs_88"
"(let-values()(if #t(let-values()(call-expand-observe obs_88 'prim-lambda))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_69)(syntax-disarm$1 s_67)))"
"(let-values(((ok?_70 lambda45_71 formals46_72 body47_73)"
"(let-values(((s_89) disarmed-s_69))"
"(if(if #t #t #f)"
"(let-values(((orig-s_90) s_89))"
"(let-values(((lambda45_91 formals46_92 body47_93)"
"(let-values(((s_94)(if(syntax?$1 s_89)(syntax-e$1 s_89) s_89)))"
"(if(pair? s_94)"
"(let-values(((lambda48_95)(let-values(((s_98)(car s_94))) s_98))"
"((formals49_96 body50_97)"
"(let-values(((s_99)(cdr s_94)))"
"(let-values(((s_100)"
"(if(syntax?$1 s_99)"
"(syntax-e$1 s_99)"
" s_99)))"
"(if(pair? s_100)"
"(let-values(((formals51_101)"
"(let-values(((s_103)(car s_100)))"
" s_103))"
"((body52_102)"
"(let-values(((s_104)(cdr s_100)))"
"(let-values(((s_105)"
"(if(syntax?$1 s_104)"
"(syntax-e$1 s_104)"
" s_104)))"
"(let-values(((flat-s_106)"
"(to-syntax-list.1$1"
" s_105)))"
"(if(not flat-s_106)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_90))"
"(if(null? flat-s_106)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_90))"
"(let-values()"
"(let-values(((body_107)"
"(let-values(((lst_108)"
" flat-s_106))"
"(begin"
"(if(list?"
" lst_108)"
"(void)"
"(let-values()"
"(in-list"
" lst_108)))"
"((letrec-values(((for-loop_109)"
"(lambda(body_110"
" lst_111)"
"(if(pair?"
" lst_111)"
"(let-values(((s_112)"
"(unsafe-car"
" lst_111)))"
"(if #t"
"(let-values(((body_113)"
"(let-values(((body_114)"
" body_110))"
"(let-values(((body_115)"
"(let-values()"
"(let-values(((body56_116)"
"(let-values()"
" s_112)))"
"(cons"
" body56_116"
" body_114)))))"
"(values"
" body_115)))))"
"(if #t"
"(for-loop_109"
" body_113"
"(unsafe-cdr"
" lst_111))"
" body_113))"
" body_110))"
" body_110))))"
" for-loop_109)"
" null"
" lst_108)))))"
"(alt-reverse"
" body_107))))))))))"
"(values formals51_101 body52_102))"
"(raise-syntax-error$1"
" #f"
"                                                                     \"bad syntax\""
" orig-s_90))))))"
"(values lambda48_95 formals49_96 body50_97))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_90)))))"
"(values #t lambda45_91 formals46_92 body47_93)))"
"(values #f #f #f #f)))))"
"(let-values(((formals_86 body_87)"
"(lambda-clause-expander s_67 disarmed-s_69 formals46_72 body47_73 ctx_68 'lambda-renames)))"
"(let-values(((s53_117) s_67)"
"((disarmed-s54_118) disarmed-s_69)"
"((temp55_119)(list(get-lambda_66 ctx_68 lambda45_71) formals_86 body_87)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s53_117 disarmed-s54_118 temp55_119)"
"(rebuild101.1 s53_117 disarmed-s54_118 temp55_119))))))))))"
"(call-with-values"
"(lambda()(add-core-form! 'lambda(make-expand-lambda(lambda(ctx_120 lam-id_121) lam-id_121))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_122 lam-id_123)"
"(datum->syntax$2"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_122))"
" 'lambda"
" lam-id_123"
" lam-id_123)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'case-lambda"
"(lambda(s_124 ctx_125)"
"(let-values((()"
"(begin"
"(let-values(((obs_156)(expand-context-observer ctx_125)))"
"(if obs_156"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_156 'prim-case-lambda))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_126)(syntax-disarm$1 s_124)))"
"(let-values(((ok?_127 case-lambda57_128 formals58_129 body59_130)"
"(let-values(((s_157) disarmed-s_126))"
"(if(if #t #t #f)"
"(let-values(((orig-s_158) s_157))"
"(let-values(((case-lambda57_159 formals58_160 body59_161)"
"(let-values(((s_162)(if(syntax?$1 s_157)(syntax-e$1 s_157) s_157)))"
"(if(pair? s_162)"
"(let-values(((case-lambda60_163)"
"(let-values(((s_166)(car s_162))) s_166))"
"((formals61_164 body62_165)"
"(let-values(((s_167)(cdr s_162)))"
"(let-values(((s_168)"
"(if(syntax?$1 s_167)"
"(syntax-e$1 s_167)"
" s_167)))"
"(let-values(((flat-s_169)"
"(to-syntax-list.1$1 s_168)))"
"(if(not flat-s_169)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_158))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_158))"
"(let-values()"
"(let-values(((formals_170 body_171)"
"(let-values(((lst_172)"
" flat-s_169))"
"(begin"
"(if(list? lst_172)"
"(void)"
"(let-values()"
"(in-list lst_172)))"
"((letrec-values(((for-loop_173)"
"(lambda(formals_174"
" body_175"
" lst_176)"
"(if(pair?"
" lst_176)"
"(let-values(((s_177)"
"(unsafe-car"
" lst_176)))"
"(if #t"
"(let-values(((formals_178"
" body_179)"
"(let-values(((formals_180)"
" formals_174)"
"((body_181)"
" body_175))"
"(let-values(((formals_182"
" body_183)"
"(let-values()"
"(let-values(((formals72_184"
" body73_185)"
"(let-values()"
"(let-values(((s_186)"
"(if(syntax?$1"
" s_177)"
"(syntax-e$1"
" s_177)"
" s_177)))"
"(if(pair?"
" s_186)"
"(let-values(((formals63_187)"
"(let-values(((s_189)"
"(car"
" s_186)))"
" s_189))"
"((body64_188)"
"(let-values(((s_190)"
"(cdr"
" s_186)))"
"(let-values(((s_191)"
"(if(syntax?$1"
" s_190)"
"(syntax-e$1"
" s_190)"
" s_190)))"
"(let-values(((flat-s_192)"
"(to-syntax-list.1$1"
" s_191)))"
"(if(not"
" flat-s_192)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                    \"bad syntax\""
" orig-s_158))"
"(if(null?"
" flat-s_192)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                      \"bad syntax\""
" orig-s_158))"
"(let-values()"
"(let-values(((body_193)"
"(let-values(((lst_194)"
" flat-s_192))"
"(begin"
"(if(list?"
" lst_194)"
"(void)"
"(let-values()"
"(in-list"
" lst_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(body_196"
" lst_197)"
"(if(pair?"
" lst_197)"
"(let-values(((s_198)"
"(unsafe-car"
" lst_197)))"
"(if #t"
"(let-values(((body_199)"
"(let-values(((body_200)"
" body_196))"
"(let-values(((body_201)"
"(let-values()"
"(let-values(((body74_202)"
"(let-values()"
" s_198)))"
"(cons"
" body74_202"
" body_200)))))"
"(values"
" body_201)))))"
"(if #t"
"(for-loop_195"
" body_199"
"(unsafe-cdr"
" lst_197))"
" body_199))"
" body_196))"
" body_196))))"
" for-loop_195)"
" null"
" lst_194)))))"
"(alt-reverse"
" body_193))))))))))"
"(values"
" formals63_187"
" body64_188))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_158))))))"
"(values"
"(cons"
" formals72_184"
" formals_180)"
"(cons"
" body73_185"
" body_181))))))"
"(values"
" formals_182"
" body_183)))))"
"(if #t"
"(for-loop_173"
" formals_178"
" body_179"
"(unsafe-cdr"
" lst_176))"
"(values"
" formals_178"
" body_179)))"
"(values"
" formals_174"
" body_175)))"
"(values"
" formals_174"
" body_175)))))"
" for-loop_173)"
" null"
" null"
" lst_172)))))"
"(values"
"(alt-reverse formals_170)"
"(alt-reverse body_171)))))))))))"
"(values case-lambda60_163 formals61_164 body62_165))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_158)))))"
"(values #t case-lambda57_159 formals58_160 body59_161)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_143 case-lambda65_144 clause66_145)"
"(let-values(((s_203) disarmed-s_126))"
"(if(if #t #t #f)"
"(let-values(((orig-s_204) s_203))"
"(let-values(((case-lambda65_205 clause66_206)"
"(let-values(((s_207)(if(syntax?$1 s_203)(syntax-e$1 s_203) s_203)))"
"(if(pair? s_207)"
"(let-values(((case-lambda67_208)"
"(let-values(((s_210)(car s_207))) s_210))"
"((clause68_209)"
"(let-values(((s_211)(cdr s_207)))"
"(let-values(((s_212)"
"(if(syntax?$1 s_211)"
"(syntax-e$1 s_211)"
" s_211)))"
"(let-values(((flat-s_213)"
"(to-syntax-list.1$1 s_212)))"
"(if(not flat-s_213)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_204))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_204))"
"(let-values()"
"(let-values(((clause_214)"
"(let-values(((lst_215)"
" flat-s_213))"
"(begin"
"(if(list? lst_215)"
"(void)"
"(let-values()"
"(in-list lst_215)))"
"((letrec-values(((for-loop_216)"
"(lambda(clause_217"
" lst_218)"
"(if(pair?"
" lst_218)"
"(let-values(((s_219)"
"(unsafe-car"
" lst_218)))"
"(if #t"
"(let-values(((clause_220)"
"(let-values(((clause_221)"
" clause_217))"
"(let-values(((clause_222)"
"(let-values()"
"(let-values(((clause75_223)"
"(let-values()"
" s_219)))"
"(cons"
" clause75_223"
" clause_221)))))"
"(values"
" clause_222)))))"
"(if #t"
"(for-loop_216"
" clause_220"
"(unsafe-cdr"
" lst_218))"
" clause_220))"
" clause_217))"
" clause_217))))"
" for-loop_216)"
" null"
" lst_215)))))"
"(alt-reverse clause_214))))))))))"
"(values case-lambda67_208 clause68_209))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_204)))))"
"(values #t case-lambda65_205 clause66_206)))"
"(values #f #f #f)))))"
"(let-values(((s69_224) s_124)"
"((disarmed-s70_225) disarmed-s_126)"
"((temp71_226)"
"(list*"
" case-lambda57_128"
"(alt-reverse"
"(let-values(((lst_227) formals58_129)((lst_228) body59_130)((lst_229) clause66_145))"
"(begin"
"(if(list? lst_227)(void)(let-values()(in-list lst_227)))"
"(if(list? lst_228)(void)(let-values()(in-list lst_228)))"
"(if(list? lst_229)(void)(let-values()(in-list lst_229)))"
"((letrec-values(((for-loop_230)"
"(lambda(fold-var_231 lst_232 lst_233 lst_234)"
"(if(if(pair? lst_232)"
"(if(pair? lst_233)(pair? lst_234) #f)"
" #f)"
"(let-values(((formals_235)(unsafe-car lst_232))"
"((bodys_236)(unsafe-car lst_233))"
"((clause_237)(unsafe-car lst_234)))"
"(if(if #t(if #t #t #f) #f)"
"(let-values(((fold-var_238)"
"(let-values(((fold-var_239) fold-var_231))"
"(let-values(((fold-var_240)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_243)"
"(expand-context-observer"
" ctx_125)))"
"(if obs_243"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_243"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-formals_241"
" exp-body_242)"
"(lambda-clause-expander"
" s_124"
" disarmed-s_126"
" formals_235"
" bodys_236"
" ctx_125"
" 'case-lambda-renames)))"
"(let-values(((clause76_244)"
" clause_237)"
"((clause77_245)"
" clause_237)"
"((temp78_246)"
"(list"
" exp-formals_241"
" exp-body_242)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" clause76_244"
" clause77_245"
" temp78_246)"
"(rebuild101.1"
" clause76_244"
" clause77_245"
" temp78_246))))))"
" fold-var_239))))"
"(values fold-var_240)))))"
"(if(if #t(if #t #t #f) #f)"
"(for-loop_230"
" fold-var_238"
"(unsafe-cdr lst_232)"
"(unsafe-cdr lst_233)"
"(unsafe-cdr lst_234))"
" fold-var_238))"
" fold-var_231))"
" fold-var_231))))"
" for-loop_230)"
" null"
" lst_227"
" lst_228"
" lst_229)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s69_224 disarmed-s70_225 temp71_226)"
"(rebuild101.1 s69_224 disarmed-s70_225 temp71_226))))))))))"
" print-values)"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_247 sc_248 s_249)"
"((letrec-values(((loop_250)"
"(lambda(formals_251)"
"(if(identifier? formals_251)"
"(let-values()(list(add-scope formals_251 sc_248)))"
"(if(syntax?$1 formals_251)"
"(let-values()"
"(let-values(((p_252)(syntax-e$1 formals_251)))"
"(if(pair? p_252)"
"(let-values()(loop_250 p_252))"
"(if(null? p_252)"
"(let-values() null)"
"                                    (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_249 p_252))))))"
"(if(pair? formals_251)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_251))"
"(void)"
"(let-values()"
"                                      (raise-syntax-error$1 #f \"not an identifier\" s_249 (car formals_251))))"
"(cons(add-scope(car formals_251) sc_248)(loop_250(cdr formals_251)))))"
"(if(null? formals_251)"
"(let-values() null)"
"(let-values()"
"                                  (raise-syntax-error$1 \"bad argument sequence\" s_249 all-formals_247)))))))))"
" loop_250)"
" all-formals_247)))"
"(define-values"
"(lifted/1.1$21)"
"(make-required 'make-let-values-form(case-lambda((self_253)(apply missing-kw self_253 null))) #f #f))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_254"
" rec?3_255"
" rec?8_256"
" renames-log-tag5_257"
" renames-log-tag10_258"
" split-by-reference?4_259"
" split-by-reference?9_260"
" syntaxes?2_261"
" syntaxes?7_262)"
"(let-values(((log-tag_263) log-tag1_254))"
"(let-values(((syntaxes?_264)(if syntaxes?7_262 syntaxes?2_261 #f)))"
"(let-values(((rec?_265)(if rec?8_256 rec?3_255 #f)))"
"(let-values(((split-by-reference?_266)(if split-by-reference?9_260 split-by-reference?4_259 #f)))"
"(let-values(((renames-log-tag_267)(if renames-log-tag10_258 renames-log-tag5_257 'let-renames)))"
"(let-values()"
"(lambda(s_268 ctx_269)"
"(let-values((()"
"(begin"
"(let-values(((obs_333)(expand-context-observer ctx_269)))"
"(if obs_333"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_333 log-tag_263))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_270)(syntax-disarm$1 s_268)))"
"(let-values(((ok?_271"
" letrec-syntaxes+values79_272"
" trans-id80_273"
" trans-rhs81_274"
" val-id82_275"
" val-rhs83_276"
" body84_277)"
"(let-values(((s_334) disarmed-s_270))"
"(if(if syntaxes?_264 #t #f)"
"(let-values(((orig-s_335) s_334))"
"(let-values(((letrec-syntaxes+values79_336"
" trans-id80_337"
" trans-rhs81_338"
" val-id82_339"
" val-rhs83_340"
" body84_341)"
"(let-values(((s_342)"
"(if(syntax?$1 s_334)(syntax-e$1 s_334) s_334)))"
"(if(pair? s_342)"
"(let-values(((letrec-syntaxes+values85_343)"
"(let-values(((s_349)(car s_342))) s_349))"
"((trans-id86_344"
" trans-rhs87_345"
" val-id88_346"
" val-rhs89_347"
" body90_348)"
"(let-values(((s_350)(cdr s_342)))"
"(let-values(((s_351)"
"(if(syntax?$1 s_350)"
"(syntax-e$1 s_350)"
" s_350)))"
"(if(pair? s_351)"
"(let-values(((trans-id91_352"
" trans-rhs92_353)"
"(let-values(((s_357)"
"(car"
" s_351)))"
"(let-values(((s_358)"
"(if(syntax?$1"
" s_357)"
"(syntax-e$1"
" s_357)"
" s_357)))"
"(let-values(((flat-s_359)"
"(to-syntax-list.1$1"
" s_358)))"
"(if(not flat-s_359)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_335))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_335))"
"(let-values()"
"(let-values(((trans-id_360"
" trans-rhs_361)"
"(let-values(((lst_362)"
" flat-s_359))"
"(begin"
"(if(list?"
" lst_362)"
"(void)"
"(let-values()"
"(in-list"
" lst_362)))"
"((letrec-values(((for-loop_363)"
"(lambda(trans-id_364"
" trans-rhs_365"
" lst_366)"
"(if(pair?"
" lst_366)"
"(let-values(((s_367)"
"(unsafe-car"
" lst_366)))"
"(if #t"
"(let-values(((trans-id_368"
" trans-rhs_369)"
"(let-values(((trans-id_370)"
" trans-id_364)"
"((trans-rhs_371)"
" trans-rhs_365))"
"(let-values(((trans-id_372"
" trans-rhs_373)"
"(let-values()"
"(let-values(((trans-id122_374"
" trans-rhs123_375)"
"(let-values()"
"(let-values(((s_376)"
"(if(syntax?$1"
" s_367)"
"(syntax-e$1"
" s_367)"
" s_367)))"
"(if(pair?"
" s_376)"
"(let-values(((trans-id96_377)"
"(let-values(((s_379)"
"(car"
" s_376)))"
"(let-values(((s_380)"
"(if(syntax?$1"
" s_379)"
"(syntax-e$1"
" s_379)"
" s_379)))"
"(let-values(((flat-s_381)"
"(to-syntax-list.1$1"
" s_380)))"
"(if(not"
" flat-s_381)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_335))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_335))"
"(let-values()"
"(let-values(((trans-id_382)"
"(let-values(((lst_383)"
" flat-s_381))"
"(begin"
"(if(list?"
" lst_383)"
"(void)"
"(let-values()"
"(in-list"
" lst_383)))"
"((letrec-values(((for-loop_384)"
"(lambda(trans-id_385"
" lst_386)"
"(if(pair?"
" lst_386)"
"(let-values(((s_387)"
"(unsafe-car"
" lst_386)))"
"(if #t"
"(let-values(((trans-id_388)"
"(let-values(((trans-id_389)"
" trans-id_385))"
"(let-values(((trans-id_390)"
"(let-values()"
"(let-values(((trans-id124_391)"
"(let-values()"
" s_387)))"
"(cons"
" trans-id124_391"
" trans-id_389)))))"
"(values"
" trans-id_390)))))"
"(if #t"
"(for-loop_384"
" trans-id_388"
"(unsafe-cdr"
" lst_386))"
" trans-id_388))"
" trans-id_385))"
" trans-id_385))))"
" for-loop_384)"
" null"
" lst_383)))))"
"(alt-reverse"
" trans-id_382)))))))))"
"((trans-rhs97_378)"
"(let-values(((s_392)"
"(cdr"
" s_376)))"
"(let-values(((s_393)"
"(if(syntax?$1"
" s_392)"
"(syntax-e$1"
" s_392)"
" s_392)))"
"(if(pair?"
" s_393)"
"(let-values(((trans-rhs98_394)"
"(let-values(((s_395)"
"(car"
" s_393)))"
" s_395))"
"(()"
"(let-values(((s_396)"
"(cdr"
" s_393)))"
"(let-values(((s_397)"
"(if(syntax?$1"
" s_396)"
"(syntax-e$1"
" s_396)"
" s_396)))"
"(if(null?"
" s_397)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_335))))))"
"(values"
" trans-rhs98_394))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_335))))))"
"(values"
" trans-id96_377"
" trans-rhs97_378))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_335))))))"
"(values"
"(cons"
" trans-id122_374"
" trans-id_370)"
"(cons"
" trans-rhs123_375"
" trans-rhs_371))))))"
"(values"
" trans-id_372"
" trans-rhs_373)))))"
"(if #t"
"(for-loop_363"
" trans-id_368"
" trans-rhs_369"
"(unsafe-cdr"
" lst_366))"
"(values"
" trans-id_368"
" trans-rhs_369)))"
"(values"
" trans-id_364"
" trans-rhs_365)))"
"(values"
" trans-id_364"
" trans-rhs_365)))))"
" for-loop_363)"
" null"
" null"
" lst_362)))))"
"(values"
"(alt-reverse"
" trans-id_360)"
"(alt-reverse"
" trans-rhs_361))))))))))"
"((val-id93_354"
" val-rhs94_355"
" body95_356)"
"(let-values(((s_398)"
"(cdr"
" s_351)))"
"(let-values(((s_399)"
"(if(syntax?$1"
" s_398)"
"(syntax-e$1"
" s_398)"
" s_398)))"
"(if(pair? s_399)"
"(let-values(((val-id99_400"
" val-rhs100_401)"
"(let-values(((s_403)"
"(car"
" s_399)))"
"(let-values(((s_404)"
"(if(syntax?$1"
" s_403)"
"(syntax-e$1"
" s_403)"
" s_403)))"
"(let-values(((flat-s_405)"
"(to-syntax-list.1$1"
" s_404)))"
"(if(not"
" flat-s_405)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_335))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_335))"
"(let-values()"
"(let-values(((val-id_406"
" val-rhs_407)"
"(let-values(((lst_408)"
" flat-s_405))"
"(begin"
"(if(list?"
" lst_408)"
"(void)"
"(let-values()"
"(in-list"
" lst_408)))"
"((letrec-values(((for-loop_409)"
"(lambda(val-id_410"
" val-rhs_411"
" lst_412)"
"(if(pair?"
" lst_412)"
"(let-values(((s_413)"
"(unsafe-car"
" lst_412)))"
"(if #t"
"(let-values(((val-id_414"
" val-rhs_415)"
"(let-values(((val-id_416)"
" val-id_410)"
"((val-rhs_417)"
" val-rhs_411))"
"(let-values(((val-id_418"
" val-rhs_419)"
"(let-values()"
"(let-values(((val-id125_420"
" val-rhs126_421)"
"(let-values()"
"(let-values(((s_422)"
"(if(syntax?$1"
" s_413)"
"(syntax-e$1"
" s_413)"
" s_413)))"
"(if(pair?"
" s_422)"
"(let-values(((val-id102_423)"
"(let-values(((s_425)"
"(car"
" s_422)))"
"(let-values(((s_426)"
"(if(syntax?$1"
" s_425)"
"(syntax-e$1"
" s_425)"
" s_425)))"
"(let-values(((flat-s_427)"
"(to-syntax-list.1$1"
" s_426)))"
"(if(not"
" flat-s_427)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_335))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_335))"
"(let-values()"
"(let-values(((val-id_428)"
"(let-values(((lst_429)"
" flat-s_427))"
"(begin"
"(if(list?"
" lst_429)"
"(void)"
"(let-values()"
"(in-list"
" lst_429)))"
"((letrec-values(((for-loop_430)"
"(lambda(val-id_431"
" lst_432)"
"(if(pair?"
" lst_432)"
"(let-values(((s_433)"
"(unsafe-car"
" lst_432)))"
"(if #t"
"(let-values(((val-id_434)"
"(let-values(((val-id_435)"
" val-id_431))"
"(let-values(((val-id_436)"
"(let-values()"
"(let-values(((val-id127_437)"
"(let-values()"
" s_433)))"
"(cons"
" val-id127_437"
" val-id_435)))))"
"(values"
" val-id_436)))))"
"(if #t"
"(for-loop_430"
" val-id_434"
"(unsafe-cdr"
" lst_432))"
" val-id_434))"
" val-id_431))"
" val-id_431))))"
" for-loop_430)"
" null"
" lst_429)))))"
"(alt-reverse"
" val-id_428)))))))))"
"((val-rhs103_424)"
"(let-values(((s_438)"
"(cdr"
" s_422)))"
"(let-values(((s_439)"
"(if(syntax?$1"
" s_438)"
"(syntax-e$1"
" s_438)"
" s_438)))"
"(if(pair?"
" s_439)"
"(let-values(((val-rhs104_440)"
"(let-values(((s_441)"
"(car"
" s_439)))"
" s_441))"
"(()"
"(let-values(((s_442)"
"(cdr"
" s_439)))"
"(let-values(((s_443)"
"(if(syntax?$1"
" s_442)"
"(syntax-e$1"
" s_442)"
" s_442)))"
"(if(null?"
" s_443)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_335))))))"
"(values"
" val-rhs104_440))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_335))))))"
"(values"
" val-id102_423"
" val-rhs103_424))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_335))))))"
"(values"
"(cons"
" val-id125_420"
" val-id_416)"
"(cons"
" val-rhs126_421"
" val-rhs_417))))))"
"(values"
" val-id_418"
" val-rhs_419)))))"
"(if #t"
"(for-loop_409"
" val-id_414"
" val-rhs_415"
"(unsafe-cdr"
" lst_412))"
"(values"
" val-id_414"
" val-rhs_415)))"
"(values"
" val-id_410"
" val-rhs_411)))"
"(values"
" val-id_410"
" val-rhs_411)))))"
" for-loop_409)"
" null"
" null"
" lst_408)))))"
"(values"
"(alt-reverse"
" val-id_406)"
"(alt-reverse"
" val-rhs_407))))))))))"
"((body101_402)"
"(let-values(((s_444)"
"(cdr"
" s_399)))"
"(let-values(((s_445)"
"(if(syntax?$1"
" s_444)"
"(syntax-e$1"
" s_444)"
" s_444)))"
"(let-values(((flat-s_446)"
"(to-syntax-list.1$1"
" s_445)))"
"(if(not"
" flat-s_446)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_335))"
"(if(null?"
" flat-s_446)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_335))"
"(let-values()"
"(let-values(((body_447)"
"(let-values(((lst_448)"
" flat-s_446))"
"(begin"
"(if(list?"
" lst_448)"
"(void)"
"(let-values()"
"(in-list"
" lst_448)))"
"((letrec-values(((for-loop_449)"
"(lambda(body_450"
" lst_451)"
"(if(pair?"
" lst_451)"
"(let-values(((s_452)"
"(unsafe-car"
" lst_451)))"
"(if #t"
"(let-values(((body_453)"
"(let-values(((body_454)"
" body_450))"
"(let-values(((body_455)"
"(let-values()"
"(let-values(((body128_456)"
"(let-values()"
" s_452)))"
"(cons"
" body128_456"
" body_454)))))"
"(values"
" body_455)))))"
"(if #t"
"(for-loop_449"
" body_453"
"(unsafe-cdr"
" lst_451))"
" body_453))"
" body_450))"
" body_450))))"
" for-loop_449)"
" null"
" lst_448)))))"
"(alt-reverse"
" body_447))))))))))"
"(values"
" val-id99_400"
" val-rhs100_401"
" body101_402))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_335))))))"
"(values"
" trans-id91_352"
" trans-rhs92_353"
" val-id93_354"
" val-rhs94_355"
" body95_356))"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_335))))))"
"(values"
" letrec-syntaxes+values85_343"
" trans-id86_344"
" trans-rhs87_345"
" val-id88_346"
" val-rhs89_347"
" body90_348))"
"                                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_335)))))"
"(values"
" #t"
" letrec-syntaxes+values79_336"
" trans-id80_337"
" trans-rhs81_338"
" val-id82_339"
" val-rhs83_340"
" body84_341)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_296 let-values105_297 val-id106_298 val-rhs107_299 body108_300)"
"(let-values(((s_457) disarmed-s_270))"
"(if(if(not syntaxes?_264) #t #f)"
"(let-values(((orig-s_458) s_457))"
"(let-values(((let-values105_459 val-id106_460 val-rhs107_461 body108_462)"
"(let-values(((s_463)"
"(if(syntax?$1 s_457)"
"(syntax-e$1 s_457)"
" s_457)))"
"(if(pair? s_463)"
"(let-values(((let-values109_464)"
"(let-values(((s_468)(car s_463))) s_468))"
"((val-id110_465 val-rhs111_466 body112_467)"
"(let-values(((s_469)(cdr s_463)))"
"(let-values(((s_470)"
"(if(syntax?$1 s_469)"
"(syntax-e$1 s_469)"
" s_469)))"
"(if(pair? s_470)"
"(let-values(((val-id113_471"
" val-rhs114_472)"
"(let-values(((s_474)"
"(car"
" s_470)))"
"(let-values(((s_475)"
"(if(syntax?$1"
" s_474)"
"(syntax-e$1"
" s_474)"
" s_474)))"
"(let-values(((flat-s_476)"
"(to-syntax-list.1$1"
" s_475)))"
"(if(not"
" flat-s_476)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_458))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_458))"
"(let-values()"
"(let-values(((val-id_477"
" val-rhs_478)"
"(let-values(((lst_479)"
" flat-s_476))"
"(begin"
"(if(list?"
" lst_479)"
"(void)"
"(let-values()"
"(in-list"
" lst_479)))"
"((letrec-values(((for-loop_480)"
"(lambda(val-id_481"
" val-rhs_482"
" lst_483)"
"(if(pair?"
" lst_483)"
"(let-values(((s_484)"
"(unsafe-car"
" lst_483)))"
"(if #t"
"(let-values(((val-id_485"
" val-rhs_486)"
"(let-values(((val-id_487)"
" val-id_481)"
"((val-rhs_488)"
" val-rhs_482))"
"(let-values(((val-id_489"
" val-rhs_490)"
"(let-values()"
"(let-values(((val-id129_491"
" val-rhs130_492)"
"(let-values()"
"(let-values(((s_493)"
"(if(syntax?$1"
" s_484)"
"(syntax-e$1"
" s_484)"
" s_484)))"
"(if(pair?"
" s_493)"
"(let-values(((val-id116_494)"
"(let-values(((s_496)"
"(car"
" s_493)))"
"(let-values(((s_497)"
"(if(syntax?$1"
" s_496)"
"(syntax-e$1"
" s_496)"
" s_496)))"
"(let-values(((flat-s_498)"
"(to-syntax-list.1$1"
" s_497)))"
"(if(not"
" flat-s_498)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_458))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_458))"
"(let-values()"
"(let-values(((val-id_499)"
"(let-values(((lst_500)"
" flat-s_498))"
"(begin"
"(if(list?"
" lst_500)"
"(void)"
"(let-values()"
"(in-list"
" lst_500)))"
"((letrec-values(((for-loop_501)"
"(lambda(val-id_502"
" lst_503)"
"(if(pair?"
" lst_503)"
"(let-values(((s_504)"
"(unsafe-car"
" lst_503)))"
"(if #t"
"(let-values(((val-id_505)"
"(let-values(((val-id_506)"
" val-id_502))"
"(let-values(((val-id_507)"
"(let-values()"
"(let-values(((val-id131_508)"
"(let-values()"
" s_504)))"
"(cons"
" val-id131_508"
" val-id_506)))))"
"(values"
" val-id_507)))))"
"(if #t"
"(for-loop_501"
" val-id_505"
"(unsafe-cdr"
" lst_503))"
" val-id_505))"
" val-id_502))"
" val-id_502))))"
" for-loop_501)"
" null"
" lst_500)))))"
"(alt-reverse"
" val-id_499)))))))))"
"((val-rhs117_495)"
"(let-values(((s_509)"
"(cdr"
" s_493)))"
"(let-values(((s_510)"
"(if(syntax?$1"
" s_509)"
"(syntax-e$1"
" s_509)"
" s_509)))"
"(if(pair?"
" s_510)"
"(let-values(((val-rhs118_511)"
"(let-values(((s_512)"
"(car"
" s_510)))"
" s_512))"
"(()"
"(let-values(((s_513)"
"(cdr"
" s_510)))"
"(let-values(((s_514)"
"(if(syntax?$1"
" s_513)"
"(syntax-e$1"
" s_513)"
" s_513)))"
"(if(null?"
" s_514)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_458))))))"
"(values"
" val-rhs118_511))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_458))))))"
"(values"
" val-id116_494"
" val-rhs117_495))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_458))))))"
"(values"
"(cons"
" val-id129_491"
" val-id_487)"
"(cons"
" val-rhs130_492"
" val-rhs_488))))))"
"(values"
" val-id_489"
" val-rhs_490)))))"
"(if #t"
"(for-loop_480"
" val-id_485"
" val-rhs_486"
"(unsafe-cdr"
" lst_483))"
"(values"
" val-id_485"
" val-rhs_486)))"
"(values"
" val-id_481"
" val-rhs_482)))"
"(values"
" val-id_481"
" val-rhs_482)))))"
" for-loop_480)"
" null"
" null"
" lst_479)))))"
"(values"
"(alt-reverse"
" val-id_477)"
"(alt-reverse"
" val-rhs_478))))))))))"
"((body115_473)"
"(let-values(((s_515)"
"(cdr"
" s_470)))"
"(let-values(((s_516)"
"(if(syntax?$1"
" s_515)"
"(syntax-e$1"
" s_515)"
" s_515)))"
"(let-values(((flat-s_517)"
"(to-syntax-list.1$1"
" s_516)))"
"(if(not"
" flat-s_517)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_458))"
"(if(null?"
" flat-s_517)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_458))"
"(let-values()"
"(let-values(((body_518)"
"(let-values(((lst_519)"
" flat-s_517))"
"(begin"
"(if(list?"
" lst_519)"
"(void)"
"(let-values()"
"(in-list"
" lst_519)))"
"((letrec-values(((for-loop_520)"
"(lambda(body_521"
" lst_522)"
"(if(pair?"
" lst_522)"
"(let-values(((s_523)"
"(unsafe-car"
" lst_522)))"
"(if #t"
"(let-values(((body_524)"
"(let-values(((body_525)"
" body_521))"
"(let-values(((body_526)"
"(let-values()"
"(let-values(((body132_527)"
"(let-values()"
" s_523)))"
"(cons"
" body132_527"
" body_525)))))"
"(values"
" body_526)))))"
"(if #t"
"(for-loop_520"
" body_524"
"(unsafe-cdr"
" lst_522))"
" body_524))"
" body_521))"
" body_521))))"
" for-loop_520)"
" null"
" lst_519)))))"
"(alt-reverse"
" body_518))))))))))"
"(values"
" val-id113_471"
" val-rhs114_472"
" body115_473))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_458))))))"
"(values"
" let-values109_464"
" val-id110_465"
" val-rhs111_466"
" body112_467))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_458)))))"
"(values #t let-values105_459 val-id106_460 val-rhs107_461 body108_462)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_315)(new-scope 'local)))"
"(let-values(((phase_316)(expand-context-phase ctx_269)))"
"(let-values(((frame-id_317)(if split-by-reference?_266(make-reference-record) #f)))"
"(let-values(((trans-idss_318)"
"(alt-reverse"
"(let-values(((lst_528)(if syntaxes?_264 trans-id80_273 null)))"
"(begin"
"(if(list? lst_528)(void)(let-values()(in-list lst_528)))"
"((letrec-values(((for-loop_529)"
"(lambda(fold-var_530 lst_531)"
"(if(pair? lst_531)"
"(let-values(((ids_532)(unsafe-car lst_531)))"
"(if #t"
"(let-values(((fold-var_533)"
"(let-values(((fold-var_534)"
" fold-var_530))"
"(let-values(((fold-var_535)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_536)"
" ids_532))"
"(begin"
"(if(list?"
" lst_536)"
"(void)"
"(let-values()"
"(in-list"
" lst_536)))"
"((letrec-values(((for-loop_537)"
"(lambda(fold-var_538"
" lst_539)"
"(if(pair?"
" lst_539)"
"(let-values(((id_540)"
"(unsafe-car"
" lst_539)))"
"(if #t"
"(let-values(((fold-var_541)"
"(let-values(((fold-var_542)"
" fold-var_538))"
"(let-values(((fold-var_543)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_540"
" sc_315))"
" fold-var_542))))"
"(values"
" fold-var_543)))))"
"(if #t"
"(for-loop_537"
" fold-var_541"
"(unsafe-cdr"
" lst_539))"
" fold-var_541))"
" fold-var_538))"
" fold-var_538))))"
" for-loop_537)"
" null"
" lst_536)))))"
" fold-var_534))))"
"(values fold-var_535)))))"
"(if #t"
"(for-loop_529"
" fold-var_533"
"(unsafe-cdr lst_531))"
" fold-var_533))"
" fold-var_530))"
" fold-var_530))))"
" for-loop_529)"
" null"
" lst_528))))))"
"(let-values(((val-idss_319)"
"(alt-reverse"
"(let-values(((lst_544)(if syntaxes?_264 val-id82_275 val-id106_298)))"
"(begin"
"(if(list? lst_544)(void)(let-values()(in-list lst_544)))"
"((letrec-values(((for-loop_545)"
"(lambda(fold-var_546 lst_547)"
"(if(pair? lst_547)"
"(let-values(((ids_548)"
"(unsafe-car lst_547)))"
"(if #t"
"(let-values(((fold-var_549)"
"(let-values(((fold-var_550)"
" fold-var_546))"
"(let-values(((fold-var_551)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_552)"
" ids_548))"
"(begin"
"(if(list?"
" lst_552)"
"(void)"
"(let-values()"
"(in-list"
" lst_552)))"
"((letrec-values(((for-loop_553)"
"(lambda(fold-var_554"
" lst_555)"
"(if(pair?"
" lst_555)"
"(let-values(((id_556)"
"(unsafe-car"
" lst_555)))"
"(if #t"
"(let-values(((fold-var_557)"
"(let-values(((fold-var_558)"
" fold-var_554))"
"(let-values(((fold-var_559)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_556"
" sc_315))"
" fold-var_558))))"
"(values"
" fold-var_559)))))"
"(if #t"
"(for-loop_553"
" fold-var_557"
"(unsafe-cdr"
" lst_555))"
" fold-var_557))"
" fold-var_554))"
" fold-var_554))))"
" for-loop_553)"
" null"
" lst_552)))))"
" fold-var_550))))"
"(values"
" fold-var_551)))))"
"(if #t"
"(for-loop_545"
" fold-var_549"
"(unsafe-cdr lst_547))"
" fold-var_549))"
" fold-var_546))"
" fold-var_546))))"
" for-loop_545)"
" null"
" lst_544))))))"
"(let-values((()"
"(begin"
"(let-values(((temp119_560)(list trans-idss_318 val-idss_319))"
"((phase120_561) phase_316)"
"((s121_562) s_268))"
"(if(variable-reference-constant?"
"(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" temp119_560"
" phase120_561"
" s121_562"
" #f"
" #f)"
"(check-no-duplicate-ids10.1 temp119_560 phase120_561 s121_562)))"
"(values))))"
"(let-values(((counter_320)(root-expand-context-counter ctx_269)))"
"(let-values(((trans-keyss_321)"
"(alt-reverse"
"(let-values(((lst_563) trans-idss_318))"
"(begin"
"(if(list? lst_563)(void)(let-values()(in-list lst_563)))"
"((letrec-values(((for-loop_564)"
"(lambda(fold-var_565 lst_566)"
"(if(pair? lst_566)"
"(let-values(((ids_567)"
"(unsafe-car lst_566)))"
"(if #t"
"(let-values(((fold-var_568)"
"(let-values(((fold-var_569)"
" fold-var_565))"
"(let-values(((fold-var_570)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_571)"
" ids_567))"
"(begin"
"(if(list?"
" lst_571)"
"(void)"
"(let-values()"
"(in-list"
" lst_571)))"
"((letrec-values(((for-loop_572)"
"(lambda(fold-var_573"
" lst_574)"
"(if(pair?"
" lst_574)"
"(let-values(((id_575)"
"(unsafe-car"
" lst_574)))"
"(if #t"
"(let-values(((fold-var_576)"
"(let-values(((fold-var_577)"
" fold-var_573))"
"(let-values(((fold-var_578)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:156:27_579)"
" add-local-binding!35.1)"
"((id133_580)"
" id_575)"
"((phase134_581)"
" phase_316)"
"((counter135_582)"
" counter_320)"
"((s136_583)"
" s_268))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" #f"
" #f"
" s136_583"
" #t"
" id133_580"
" phase134_581"
" counter135_582)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:156:27_579"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" s136_583)"
" id133_580"
" phase134_581"
" counter135_582))))"
" fold-var_577))))"
"(values"
" fold-var_578)))))"
"(if #t"
"(for-loop_572"
" fold-var_576"
"(unsafe-cdr"
" lst_574))"
" fold-var_576))"
" fold-var_573))"
" fold-var_573))))"
" for-loop_572)"
" null"
" lst_571)))))"
" fold-var_569))))"
"(values"
" fold-var_570)))))"
"(if #t"
"(for-loop_564"
" fold-var_568"
"(unsafe-cdr lst_566))"
" fold-var_568))"
" fold-var_565))"
" fold-var_565))))"
" for-loop_564)"
" null"
" lst_563))))))"
"(let-values(((val-keyss_322)"
"(alt-reverse"
"(let-values(((lst_584) val-idss_319))"
"(begin"
"(if(list? lst_584)"
"(void)"
"(let-values()(in-list lst_584)))"
"((letrec-values(((for-loop_585)"
"(lambda(fold-var_586 lst_587)"
"(if(pair? lst_587)"
"(let-values(((ids_588)"
"(unsafe-car lst_587)))"
"(if #t"
"(let-values(((fold-var_589)"
"(let-values(((fold-var_590)"
" fold-var_586))"
"(let-values(((fold-var_591)"
"(let-values()"
"(cons"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_592)"
" ids_588))"
"(begin"
"(if(list?"
" lst_592)"
"(void)"
"(let-values()"
"(in-list"
" lst_592)))"
"((letrec-values(((for-loop_593)"
"(lambda(fold-var_594"
" lst_595)"
"(if(pair?"
" lst_595)"
"(let-values(((id_596)"
"(unsafe-car"
" lst_595)))"
"(if #t"
"(let-values(((fold-var_597)"
"(let-values(((fold-var_598)"
" fold-var_594))"
"(let-values(((fold-var_599)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((...nder/expand/expr.rkt:159:25_600)"
" add-local-binding!35.1)"
"((id137_601)"
" id_596)"
"((phase138_602)"
" phase_316)"
"((counter139_603)"
" counter_320)"
"((frame-id140_604)"
" frame-id_317)"
"((s141_605)"
" s_268))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-local-binding!35.1))"
"(add-local-binding!33.1"
" frame-id140_604"
" #t"
" s141_605"
" #t"
" id137_601"
" phase138_602"
" counter139_603)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:159:25_600"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in)"
" 5)"
" '(#:frame-id"
" #:in)"
"(list"
" frame-id140_604"
" s141_605)"
" id137_601"
" phase138_602"
" counter139_603))))"
" fold-var_598))))"
"(values"
" fold-var_599)))))"
"(if #t"
"(for-loop_593"
" fold-var_597"
"(unsafe-cdr"
" lst_595))"
" fold-var_597))"
" fold-var_594))"
" fold-var_594))))"
" for-loop_593)"
" null"
" lst_592)))))"
" fold-var_590))))"
"(values"
" fold-var_591)))))"
"(if #t"
"(for-loop_585"
" fold-var_589"
"(unsafe-cdr lst_587))"
" fold-var_589))"
" fold-var_586))"
" fold-var_586))))"
" for-loop_585)"
" null"
" lst_584))))))"
"(let-values(((bodys_323)"
"(alt-reverse"
"(let-values(((lst_606)"
"(if syntaxes?_264 body84_277 body108_300)))"
"(begin"
"(if(list? lst_606)"
"(void)"
"(let-values()(in-list lst_606)))"
"((letrec-values(((for-loop_607)"
"(lambda(fold-var_608 lst_609)"
"(if(pair? lst_609)"
"(let-values(((body_610)"
"(unsafe-car"
" lst_609)))"
"(if #t"
"(let-values(((fold-var_611)"
"(let-values(((fold-var_612)"
" fold-var_608))"
"(let-values(((fold-var_613)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_610"
" sc_315))"
" fold-var_612))))"
"(values"
" fold-var_613)))))"
"(if #t"
"(for-loop_607"
" fold-var_611"
"(unsafe-cdr lst_609))"
" fold-var_611))"
" fold-var_608))"
" fold-var_608))))"
" for-loop_607)"
" null"
" lst_606))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_614)"
"(expand-context-observer ctx_269)))"
"(if obs_614"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_614"
" renames-log-tag_267"
" val-idss_319"
"(datum->syntax$2 #f bodys_323)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_264"
"(let-values()"
"(begin"
"(let-values(((obs_615)"
"(expand-context-observer ctx_269)))"
"(if obs_615"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_615"
" 'prepare-env))"
"(void)))"
"(void)))"
"(let-values(((obs_616)"
"(expand-context-observer ctx_269)))"
"(if obs_616"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_616"
" 'enter-bind))"
"(void)))"
"(void)))))"
"(void))"
"(values))))"
"(let-values(((trans-valss_324)"
"(alt-reverse"
"(let-values(((lst_617)"
"(if syntaxes?_264 trans-rhs81_274 '()))"
"((lst_618) trans-idss_318))"
"(begin"
"(if(list? lst_617)"
"(void)"
"(let-values()(in-list lst_617)))"
"(if(list? lst_618)"
"(void)"
"(let-values()(in-list lst_618)))"
"((letrec-values(((for-loop_619)"
"(lambda(fold-var_620"
" lst_621"
" lst_622)"
"(if(if(pair? lst_621)"
"(pair? lst_622)"
" #f)"
"(let-values(((rhs_623)"
"(unsafe-car"
" lst_621))"
"((ids_624)"
"(unsafe-car"
" lst_622)))"
"(if(if #t #t #f)"
"(let-values(((fold-var_625)"
"(let-values(((fold-var_626)"
" fold-var_620))"
"(let-values(((fold-var_627)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_628)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_628"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_628"
" 'next))"
"(void)))"
"(void)))"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_623"
" sc_315)"
" ids_624"
" ctx_269)))"
" fold-var_626))))"
"(values"
" fold-var_627)))))"
"(if(if #t #t #f)"
"(for-loop_619"
" fold-var_625"
"(unsafe-cdr lst_621)"
"(unsafe-cdr"
" lst_622))"
" fold-var_625))"
" fold-var_620))"
" fold-var_620))))"
" for-loop_619)"
" null"
" lst_617"
" lst_618))))))"
"(let-values(((rec-val-env_325)"
"(let-values(((lst_629) val-keyss_322)"
"((lst_630) val-idss_319))"
"(begin"
"(if(list? lst_629)"
"(void)"
"(let-values()(in-list lst_629)))"
"(if(list? lst_630)"
"(void)"
"(let-values()(in-list lst_630)))"
"((letrec-values(((for-loop_631)"
"(lambda(env_632"
" lst_633"
" lst_634)"
"(if(if(pair? lst_633)"
"(pair? lst_634)"
" #f)"
"(let-values(((keys_635)"
"(unsafe-car"
" lst_633))"
"((ids_636)"
"(unsafe-car"
" lst_634)))"
"(if(if #t #t #f)"
"(let-values(((env_637)"
"(let-values(((env_638)"
" env_632))"
"(if #t"
"(let-values(((lst_639)"
" keys_635)"
"((lst_640)"
" ids_636))"
"(begin"
"(if(list?"
" lst_639)"
"(void)"
"(let-values()"
"(in-list"
" lst_639)))"
"(if(list?"
" lst_640)"
"(void)"
"(let-values()"
"(in-list"
" lst_640)))"
"((letrec-values(((for-loop_641)"
"(lambda(env_642"
" lst_643"
" lst_644)"
"(if(if(pair?"
" lst_643)"
"(pair?"
" lst_644)"
" #f)"
"(let-values(((key_645)"
"(unsafe-car"
" lst_643))"
"((id_646)"
"(unsafe-car"
" lst_644)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((env_647)"
"(let-values(((env_648)"
" env_642))"
"(let-values(((env_649)"
"(let-values()"
"(env-extend"
" env_648"
" key_645"
"(local-variable1.1"
" id_646)))))"
"(values"
" env_649)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_641"
" env_647"
"(unsafe-cdr"
" lst_643)"
"(unsafe-cdr"
" lst_644))"
" env_647))"
" env_642))"
" env_642))))"
" for-loop_641)"
" env_638"
" lst_639"
" lst_640)))"
" env_638))))"
"(if(if #t #t #f)"
"(for-loop_631"
" env_637"
"(unsafe-cdr"
" lst_633)"
"(unsafe-cdr"
" lst_634))"
" env_637))"
" env_632))"
" env_632))))"
" for-loop_631)"
"(expand-context-env ctx_269)"
" lst_629"
" lst_630)))))"
"(let-values(((rec-env_326)"
"(let-values(((lst_650) trans-keyss_321)"
"((lst_651) trans-valss_324)"
"((lst_652) trans-idss_318))"
"(begin"
"(if(list? lst_650)"
"(void)"
"(let-values()(in-list lst_650)))"
"(if(list? lst_651)"
"(void)"
"(let-values()(in-list lst_651)))"
"(if(list? lst_652)"
"(void)"
"(let-values()(in-list lst_652)))"
"((letrec-values(((for-loop_653)"
"(lambda(env_654"
" lst_655"
" lst_656"
" lst_657)"
"(if(if(pair? lst_655)"
"(if(pair? lst_656)"
"(pair? lst_657)"
" #f)"
" #f)"
"(let-values(((keys_658)"
"(unsafe-car"
" lst_655))"
"((vals_659)"
"(unsafe-car"
" lst_656))"
"((ids_660)"
"(unsafe-car"
" lst_657)))"
"(if(if #t"
"(if #t #t #f)"
" #f)"
"(let-values(((env_661)"
"(let-values(((env_662)"
" env_654))"
"(let-values(((env_663)"
"(let-values()"
"(let-values(((lst_664)"
" keys_658)"
"((lst_665)"
" vals_659)"
"((lst_666)"
" ids_660))"
"(begin"
"(if(list?"
" lst_664)"
"(void)"
"(let-values()"
"(in-list"
" lst_664)))"
"(if(list?"
" lst_665)"
"(void)"
"(let-values()"
"(in-list"
" lst_665)))"
"(if(list?"
" lst_666)"
"(void)"
"(let-values()"
"(in-list"
" lst_666)))"
"((letrec-values(((for-loop_667)"
"(lambda(env_668"
" lst_669"
" lst_670"
" lst_671)"
"(if(if(pair?"
" lst_669)"
"(if(pair?"
" lst_670)"
"(pair?"
" lst_671)"
" #f)"
" #f)"
"(let-values(((key_672)"
"(unsafe-car"
" lst_669))"
"((val_673)"
"(unsafe-car"
" lst_670))"
"((id_674)"
"(unsafe-car"
" lst_671)))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(let-values(((env_675)"
"(let-values(((env_676)"
" env_668))"
"(let-values(((env_677)"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_673"
" id_674"
" phase_316)"
"(env-extend"
" env_676"
" key_672"
" val_673)))))"
"(values"
" env_677)))))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(for-loop_667"
" env_675"
"(unsafe-cdr"
" lst_669)"
"(unsafe-cdr"
" lst_670)"
"(unsafe-cdr"
" lst_671))"
" env_675))"
" env_668))"
" env_668))))"
" for-loop_667)"
" env_662"
" lst_664"
" lst_665"
" lst_666))))))"
"(values"
" env_663)))))"
"(if(if #t"
"(if #t #t #f)"
" #f)"
"(for-loop_653"
" env_661"
"(unsafe-cdr"
" lst_655)"
"(unsafe-cdr"
" lst_656)"
"(unsafe-cdr"
" lst_657))"
" env_661))"
" env_654))"
" env_654))))"
" for-loop_653)"
" rec-val-env_325"
" lst_650"
" lst_651"
" lst_652)))))"
"(let-values((()"
"(begin"
"(if syntaxes?_264"
"(let-values()"
"(let-values(((obs_678)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_678"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_678"
" 'exit-bind))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((expr-ctx_327)(as-expression-context ctx_269)))"
"(let-values(((orig-rrs_328)"
"(expand-context-reference-records"
" expr-ctx_327)))"
"(let-values(((rec-ctx_329)"
"(let-values(((the-struct_679)"
" expr-ctx_327))"
"(if(expand-context? the-struct_679)"
"(let-values(((env142_680) rec-env_326)"
"((scopes143_681)"
"(cons"
" sc_315"
"(expand-context-scopes"
" ctx_269)))"
"((reference-records144_682)"
"(if split-by-reference?_266"
"(cons"
" frame-id_317"
" orig-rrs_328)"
" orig-rrs_328))"
"((all-scopes-stx145_683)"
"(add-scope"
"(root-expand-context-all-scopes-stx"
" ctx_269)"
" sc_315)))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_679)"
"(root-expand-context-post-expansion-scope"
" the-struct_679)"
"(root-expand-context-top-level-bind-scope"
" the-struct_679)"
" all-scopes-stx145_683"
"(root-expand-context-use-site-scopes"
" the-struct_679)"
"(root-expand-context-defined-syms"
" the-struct_679)"
"(root-expand-context-frame-id"
" the-struct_679)"
"(root-expand-context-counter"
" the-struct_679)"
"(root-expand-context-lift-key"
" the-struct_679)"
"(expand-context-context"
" the-struct_679)"
"(expand-context-phase the-struct_679)"
"(expand-context-namespace"
" the-struct_679)"
" env142_680"
"(expand-context-post-expansion-scope-action"
" the-struct_679)"
" scopes143_681"
"(expand-context-def-ctx-scopes"
" the-struct_679)"
" reference-records144_682"
"(expand-context-only-immediate?"
" the-struct_679)"
"(expand-context-just-once?"
" the-struct_679)"
"(expand-context-module-begin-k"
" the-struct_679)"
"(expand-context-need-eventually-defined"
" the-struct_679)"
"(expand-context-allow-unbound?"
" the-struct_679)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_679)"
"(expand-context-stops the-struct_679)"
"(expand-context-current-introduction-scopes"
" the-struct_679)"
"(expand-context-declared-submodule-names"
" the-struct_679)"
"(expand-context-lifts the-struct_679)"
"(expand-context-lift-envs"
" the-struct_679)"
"(expand-context-module-lifts"
" the-struct_679)"
"(expand-context-require-lifts"
" the-struct_679)"
"(expand-context-to-module-lifts"
" the-struct_679)"
"(expand-context-requires+provides"
" the-struct_679)"
"(expand-context-name the-struct_679)"
"(expand-context-observer"
" the-struct_679)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                 \"expand-context?\""
" the-struct_679)))))"
"(let-values(((letrec-values-id_330)"
"(if syntaxes?_264"
"(datum->syntax$2"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_316)"
" 'letrec-values)"
" let-values105_297)))"
"(let-values(((get-body_331)"
"(lambda(track?_684)"
"(let-values((()"
"(begin"
"(let-values(((obs_687)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_687"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_687"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_685)"
"(let-values(((the-struct_688)"
" rec-ctx_329))"
"(if(expand-context?"
" the-struct_688)"
"(let-values(((reference-records146_689)"
" orig-rrs_328))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_688)"
"(root-expand-context-post-expansion-scope"
" the-struct_688)"
"(root-expand-context-top-level-bind-scope"
" the-struct_688)"
"(root-expand-context-all-scopes-stx"
" the-struct_688)"
"(root-expand-context-use-site-scopes"
" the-struct_688)"
"(root-expand-context-defined-syms"
" the-struct_688)"
"(root-expand-context-frame-id"
" the-struct_688)"
"(root-expand-context-counter"
" the-struct_688)"
"(root-expand-context-lift-key"
" the-struct_688)"
"(expand-context-context"
" the-struct_688)"
"(expand-context-phase"
" the-struct_688)"
"(expand-context-namespace"
" the-struct_688)"
"(expand-context-env"
" the-struct_688)"
"(expand-context-post-expansion-scope-action"
" the-struct_688)"
"(expand-context-scopes"
" the-struct_688)"
"(expand-context-def-ctx-scopes"
" the-struct_688)"
" reference-records146_689"
"(expand-context-only-immediate?"
" the-struct_688)"
"(expand-context-just-once?"
" the-struct_688)"
"(expand-context-module-begin-k"
" the-struct_688)"
"(expand-context-need-eventually-defined"
" the-struct_688)"
"(expand-context-allow-unbound?"
" the-struct_688)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_688)"
"(expand-context-stops"
" the-struct_688)"
"(expand-context-current-introduction-scopes"
" the-struct_688)"
"(expand-context-declared-submodule-names"
" the-struct_688)"
"(expand-context-lifts"
" the-struct_688)"
"(expand-context-lift-envs"
" the-struct_688)"
"(expand-context-module-lifts"
" the-struct_688)"
"(expand-context-require-lifts"
" the-struct_688)"
"(expand-context-to-module-lifts"
" the-struct_688)"
"(expand-context-requires+provides"
" the-struct_688)"
"(expand-context-name"
" the-struct_688)"
"(expand-context-observer"
" the-struct_688)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                       \"expand-context?\""
" the-struct_688)))))"
"(let-values(((exp-body_686)"
"(let-values(((...nder/expand/expr.rkt:211:22_690)"
" expand-body30.1)"
"((bodys147_691)"
" bodys_323)"
"((temp148_692)"
"(let-values(((...nder/expand/expr.rkt:211:41_695)"
" as-tail-context14.1)"
"((body-ctx151_696)"
" body-ctx_685)"
"((ctx152_697)"
" ctx_269))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx152_697"
" body-ctx151_696)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:211:41_695"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list"
" ctx152_697)"
" body-ctx151_696))))"
"((s149_693)"
" s_268)"
"((disarmed-s150_694)"
" disarmed-s_270))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-body30.1))"
"(expand-body28.1"
" disarmed-s150_694"
" s149_693"
" #f"
" #f"
" #f"
" #f"
" bodys147_691"
" temp148_692)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:211:22_690"
" keyword-procedure-extract"
" '(#:disarmed-source"
" #:source)"
" 4)"
" '(#:disarmed-source"
" #:source)"
"(list"
" disarmed-s150_694"
" s149_693)"
" bodys147_691"
" temp148_692)))))"
"(if track?_684"
"(let-values(((result-s_698)"
"(syntax-track-origin$1"
" exp-body_686"
" s_268)))"
"(begin"
"(let-values(((obs_699)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_699"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_699"
" 'tag"
" result-s_698))"
"(void)))"
"(void)))"
" result-s_698))"
" exp-body_686)))))))"
"(let-values(((result-s_332)"
"(if(not split-by-reference?_266)"
"(let-values()"
"(let-values(((s153_700) s_268)"
"((disarmed-s154_701)"
" disarmed-s_270)"
"((temp155_702)"
"(list"
" letrec-values-id_330"
"(alt-reverse"
"(let-values(((lst_703)"
" val-idss_319)"
"((lst_704)"
"(if syntaxes?_264"
" val-rhs83_276"
" val-rhs107_299)))"
"(begin"
"(if(list?"
" lst_703)"
"(void)"
"(let-values()"
"(in-list"
" lst_703)))"
"(if(list?"
" lst_704)"
"(void)"
"(let-values()"
"(in-list"
" lst_704)))"
"((letrec-values(((for-loop_705)"
"(lambda(fold-var_706"
" lst_707"
" lst_708)"
"(if(if(pair?"
" lst_707)"
"(pair?"
" lst_708)"
" #f)"
"(let-values(((ids_709)"
"(unsafe-car"
" lst_707))"
"((rhs_710)"
"(unsafe-car"
" lst_708)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_711)"
"(let-values(((fold-var_712)"
" fold-var_706))"
"(let-values(((fold-var_713)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_714)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_714"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_714"
" 'next))"
"(void)))"
"(void)))"
"(list"
" ids_709"
"(if rec?_265"
"(let-values(((temp156_715)"
"(add-scope"
" rhs_710"
" sc_315))"
"((temp157_716)"
"(as-named-context"
" rec-ctx_329"
" ids_709)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp156_715"
" temp157_716)"
"(expand7.1"
" temp156_715"
" temp157_716)))"
"(let-values(((rhs158_717)"
" rhs_710)"
"((temp159_718)"
"(as-named-context"
" expr-ctx_327"
" ids_709)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" rhs158_717"
" temp159_718)"
"(expand7.1"
" rhs158_717"
" temp159_718)))))))"
" fold-var_712))))"
"(values"
" fold-var_713)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_705"
" fold-var_711"
"(unsafe-cdr"
" lst_707)"
"(unsafe-cdr"
" lst_708))"
" fold-var_711))"
" fold-var_706))"
" fold-var_706))))"
" for-loop_705)"
" null"
" lst_703"
" lst_704))))"
"(get-body_331"
" #f))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" s153_700"
" disarmed-s154_701"
" temp155_702)"
"(rebuild101.1"
" s153_700"
" disarmed-s154_701"
" temp155_702))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_720)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_720"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_720"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_721)"
"(expand-context-observer"
" ctx_269)))"
"(if obs_721"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_721"
" 'letrec-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((val-rhss_719)"
"(alt-reverse"
"(let-values(((lst_722)"
"(if syntaxes?_264"
" val-rhs83_276"
" val-rhs107_299)))"
"(begin"
"(if(list?"
" lst_722)"
"(void)"
"(let-values()"
"(in-list"
" lst_722)))"
"((letrec-values(((for-loop_723)"
"(lambda(fold-var_724"
" lst_725)"
"(if(pair?"
" lst_725)"
"(let-values(((rhs_726)"
"(unsafe-car"
" lst_725)))"
"(if #t"
"(let-values(((fold-var_727)"
"(let-values(((fold-var_728)"
" fold-var_724))"
"(let-values(((fold-var_729)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_726"
" sc_315))"
" fold-var_728))))"
"(values"
" fold-var_729)))))"
"(if #t"
"(for-loop_723"
" fold-var_727"
"(unsafe-cdr"
" lst_725))"
" fold-var_727))"
" fold-var_724))"
" fold-var_724))))"
" for-loop_723)"
" null"
" lst_722))))))"
"(let-values(((...nder/expand/expr.rkt:238:7_730)"
" expand-and-split-bindings-by-reference69.1)"
"((val-idss160_731)"
" val-idss_319)"
"((val-keyss161_732)"
" val-keyss_322)"
"((val-rhss162_733)"
" val-rhss_719)"
"((temp163_734)"
"(alt-reverse"
"(let-values(((lst_742)"
" val-idss_319))"
"(begin"
"(if(list?"
" lst_742)"
"(void)"
"(let-values()"
"(in-list"
" lst_742)))"
"((letrec-values(((for-loop_743)"
"(lambda(fold-var_744"
" lst_745)"
"(if(pair?"
" lst_745)"
"(let-values(((rhs_746)"
"(unsafe-car"
" lst_745)))"
"(if #t"
"(let-values(((fold-var_747)"
"(let-values(((fold-var_748)"
" fold-var_744))"
"(let-values(((fold-var_749)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_748))))"
"(values"
" fold-var_749)))))"
"(if #t"
"(for-loop_743"
" fold-var_747"
"(unsafe-cdr"
" lst_745))"
" fold-var_747))"
" fold-var_744))"
" fold-var_744))))"
" for-loop_743)"
" null"
" lst_742)))))"
"((temp164_735)"
" #t)"
"((frame-id165_736)"
" frame-id_317)"
"((rec-ctx166_737)"
" rec-ctx_329)"
"((s167_738)"
" s_268)"
"((disarmed-s168_739)"
" disarmed-s_270)"
"((get-body169_740)"
" get-body_331)"
"((temp170_741)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-and-split-bindings-by-reference69.1))"
"(expand-and-split-bindings-by-reference67.1"
" rec-ctx166_737"
" disarmed-s168_739"
" frame-id165_736"
" get-body169_740"
" s167_738"
" temp164_735"
" temp170_741"
" val-idss160_731"
" val-keyss161_732"
" val-rhss162_733"
" temp163_734)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:238:7_730"
" keyword-procedure-extract"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
" 6)"
" '(#:ctx"
" #:disarmed-source"
" #:frame-id"
" #:get-body"
" #:source"
" #:split?"
" #:track?)"
"(list"
" rec-ctx166_737"
" disarmed-s168_739"
" frame-id165_736"
" get-body169_740"
" s167_738"
" temp164_735"
" temp170_741)"
" val-idss160_731"
" val-keyss161_732"
" val-rhss162_733"
" temp163_734))))))))))"
"(attach-disappeared-transformer-bindings"
" result-s_332"
" trans-idss_318))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack12.1$1)"
"(lambda(given-kws_750 given-args_751)"
"(let-values(((log-tag1_752)(car given-args_751))"
"((given-kws_753)(cdr given-kws_750))"
"((given-args_754)(cdr given-args_751)))"
"(let-values(((rec?8_755)(if(pair? given-kws_753)(eq? '#:rec?(car given-kws_753)) #f)))"
"(let-values(((rec?3_756)(if rec?8_755(car given-args_754)(void)))"
"((given-kws_757)(if rec?8_755(cdr given-kws_753) given-kws_753))"
"((given-args_758)(if rec?8_755(cdr given-args_754) given-args_754)))"
"(let-values(((renames-log-tag10_759)"
"(if(pair? given-kws_757)(eq? '#:renames-log-tag(car given-kws_757)) #f)))"
"(let-values(((renames-log-tag5_760)(if renames-log-tag10_759(car given-args_758)(void)))"
"((given-kws_761)(if renames-log-tag10_759(cdr given-kws_757) given-kws_757))"
"((given-args_762)(if renames-log-tag10_759(cdr given-args_758) given-args_758)))"
"(let-values(((split-by-reference?9_763)"
"(if(pair? given-kws_761)(eq? '#:split-by-reference?(car given-kws_761)) #f)))"
"(let-values(((split-by-reference?4_764)(if split-by-reference?9_763(car given-args_762)(void)))"
"((given-kws_765)(if split-by-reference?9_763(cdr given-kws_761) given-kws_761))"
"((given-args_766)(if split-by-reference?9_763(cdr given-args_762) given-args_762)))"
"(let-values(((syntaxes?7_767)(pair? given-kws_765)))"
"(let-values(((syntaxes?2_768)(if syntaxes?7_767(car given-args_766)(void))))"
"(make-let-values-form11.1"
" log-tag1_752"
" rec?3_756"
" rec?8_755"
" renames-log-tag5_760"
" renames-log-tag10_759"
" split-by-reference?4_764"
" split-by-reference?9_763"
" syntaxes?2_768"
" syntaxes?7_767))))))))))))"
"(define-values"
"(make-let-values-form13.1)"
"(lifted/1.1$21"
"(lambda(given-kws_769 given-argc_770)"
"(if(= given-argc_770 2)"
"(subsets? '(#:log-tag) given-kws_769 '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?))"
" #f))"
"(case-lambda((given-kws_771 given-args_772)(unpack12.1$1 given-kws_771 given-args_772)))"
" '(#:log-tag)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'let-values"
"(let-values(((...nder/expand/expr.rkt:250:1_773) make-let-values-form13.1)((temp171_774) 'prim-let-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp171_774 #f #f #f #f #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:250:1_773"
" keyword-procedure-extract"
" '(#:log-tag)"
" 2)"
" '(#:log-tag)"
"(list temp171_774))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-values"
"(let-values(((...nder/expand/expr.rkt:254:1_775) make-let-values-form13.1)"
"((temp172_776) #t)"
"((temp173_777) 'prim-letrec-values))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp173_777 temp172_776 #t #f #f #f #f #f #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:254:1_775"
" keyword-procedure-extract"
" '(#:log-tag #:rec?)"
" 2)"
" '(#:log-tag #:rec?)"
"(list temp173_777 temp172_776))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'letrec-syntaxes+values"
"(let-values(((...nder/expand/expr.rkt:258:1_778) make-let-values-form13.1)"
"((temp174_779) #t)"
"((temp175_780) #t)"
"((temp176_781) #t)"
"((temp177_782) 'prim-letrec-syntaxes+values)"
"((temp178_783) 'letrec-syntaxes-renames))"
"(if(variable-reference-constant?(#%variable-reference make-let-values-form13.1))"
"(make-let-values-form11.1 temp177_782 temp175_780 #t temp178_783 #t temp176_781 #t temp174_779 #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:258:1_778"
" keyword-procedure-extract"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
" 2)"
" '(#:log-tag #:rec? #:renames-log-tag #:split-by-reference? #:syntaxes?)"
"(list temp177_782 temp175_780 temp178_783 temp176_781 temp174_779))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%stratified-body"
"(lambda(s_784 ctx_785)"
"(let-values((()"
"(begin"
"(let-values(((obs_800)(expand-context-observer ctx_785)))"
"(if obs_800"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_800 'prim-#%stratified))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_786)(syntax-disarm$1 s_784)))"
"(let-values(((ok?_787 #%stratified-body179_788 body180_789)"
"(let-values(((s_801) disarmed-s_786))"
"(if(if #t #t #f)"
"(let-values(((orig-s_802) s_801))"
"(let-values(((#%stratified-body179_803 body180_804)"
"(let-values(((s_805)(if(syntax?$1 s_801)(syntax-e$1 s_801) s_801)))"
"(if(pair? s_805)"
"(let-values(((#%stratified-body181_806)"
"(let-values(((s_808)(car s_805))) s_808))"
"((body182_807)"
"(let-values(((s_809)(cdr s_805)))"
"(let-values(((s_810)"
"(if(syntax?$1 s_809)"
"(syntax-e$1 s_809)"
" s_809)))"
"(let-values(((flat-s_811)"
"(to-syntax-list.1$1 s_810)))"
"(if(not flat-s_811)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_802))"
"(if(null? flat-s_811)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_802))"
"(let-values()"
"(let-values(((body_812)"
"(let-values(((lst_813)"
" flat-s_811))"
"(begin"
"(if(list? lst_813)"
"(void)"
"(let-values()"
"(in-list lst_813)))"
"((letrec-values(((for-loop_814)"
"(lambda(body_815"
" lst_816)"
"(if(pair?"
" lst_816)"
"(let-values(((s_817)"
"(unsafe-car"
" lst_816)))"
"(if #t"
"(let-values(((body_818)"
"(let-values(((body_819)"
" body_815))"
"(let-values(((body_820)"
"(let-values()"
"(let-values(((body189_821)"
"(let-values()"
" s_817)))"
"(cons"
" body189_821"
" body_819)))))"
"(values"
" body_820)))))"
"(if #t"
"(for-loop_814"
" body_818"
"(unsafe-cdr"
" lst_816))"
" body_818))"
" body_815))"
" body_815))))"
" for-loop_814)"
" null"
" lst_813)))))"
"(alt-reverse body_812))))))))))"
"(values #%stratified-body181_806 body182_807))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_802)))))"
"(values #t #%stratified-body179_803 body180_804)))"
"(values #f #f #f)))))"
"(let-values(((...nder/expand/expr.rkt:270:3_822) expand-body30.1)"
"((temp183_823) body180_789)"
"((ctx184_824) ctx_785)"
"((temp185_825) #t)"
"((temp186_826) #t)"
"((s187_827) s_784)"
"((disarmed-s188_828) disarmed-s_786))"
"(if(variable-reference-constant?(#%variable-reference expand-body30.1))"
"(expand-body28.1 disarmed-s188_828 s187_827 temp185_825 #t temp186_826 #t temp183_823 ctx184_824)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:270:3_822"
" keyword-procedure-extract"
" '(#:disarmed-source #:source #:stratified? #:track?)"
" 4)"
" '(#:disarmed-source #:source #:stratified? #:track?)"
"(list disarmed-s188_828 s187_827 temp185_825 temp186_826)"
" temp183_823"
" ctx184_824)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%datum"
"(lambda(s_829 ctx_830)"
"(let-values((()"
"(begin"
"(let-values(((obs_847)(expand-context-observer ctx_830)))"
"(if obs_847"
"(let-values()(if #t(let-values()(call-expand-observe obs_847 'prim-#%datum))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_831)(syntax-disarm$1 s_829)))"
"(let-values(((ok?_832 #%datum190_833 datum191_834)"
"(let-values(((s_848) disarmed-s_831))"
"(if(if #t #t #f)"
"(let-values(((orig-s_849) s_848))"
"(let-values(((#%datum190_850 datum191_851)"
"(let-values(((s_852)(if(syntax?$1 s_848)(syntax-e$1 s_848) s_848)))"
"(if(pair? s_852)"
"(let-values(((#%datum192_853)"
"(let-values(((s_855)(car s_852))) s_855))"
"((datum193_854)"
"(let-values(((s_856)(cdr s_852))) s_856)))"
"(values #%datum192_853 datum193_854))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_849)))))"
"(values #t #%datum190_850 datum191_851)))"
"(values #f #f #f)))))"
"(let-values(((datum_845) datum191_834))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_845)(keyword?(syntax-e$1 datum_845)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_845))"
"(void))"
"(values))))"
"(let-values(((phase_846)(expand-context-phase ctx_830)))"
"(let-values(((s194_857) s_829)"
"((disarmed-s195_858) disarmed-s_831)"
"((temp196_859)"
"(list"
"(datum->syntax$2(syntax-shift-phase-level$1 core-stx phase_846) 'quote)"
" datum_845)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s194_857 disarmed-s195_858 temp196_859)"
"(rebuild101.1 s194_857 disarmed-s195_858 temp196_859))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%app"
"(lambda(s_860 ctx_861)"
"(let-values((()"
"(begin"
"(let-values(((obs_877)(expand-context-observer ctx_861)))"
"(if obs_877"
"(let-values()(if #t(let-values()(call-expand-observe obs_877 'prim-#%app))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_862)(syntax-disarm$1 s_860)))"
"(let-values(((ok?_863 #%app197_864 e198_865)"
"(let-values(((s_878) disarmed-s_862))"
"(if(if #t #t #f)"
"(let-values(((orig-s_879) s_878))"
"(let-values(((#%app197_880 e198_881)"
"(let-values(((s_882)(if(syntax?$1 s_878)(syntax-e$1 s_878) s_878)))"
"(if(pair? s_882)"
"(let-values(((#%app199_883)"
"(let-values(((s_885)(car s_882))) s_885))"
"((e200_884)"
"(let-values(((s_886)(cdr s_882)))"
"(let-values(((s_887)"
"(if(syntax?$1 s_886)"
"(syntax-e$1 s_886)"
" s_886)))"
"(let-values(((flat-s_888)"
"(to-syntax-list.1$1 s_887)))"
"(if(not flat-s_888)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_879))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_879))"
"(let-values()"
"(let-values(((e_889)"
"(let-values(((lst_890)"
" flat-s_888))"
"(begin"
"(if(list? lst_890)"
"(void)"
"(let-values()"
"(in-list lst_890)))"
"((letrec-values(((for-loop_891)"
"(lambda(e_892"
" lst_893)"
"(if(pair?"
" lst_893)"
"(let-values(((s_894)"
"(unsafe-car"
" lst_893)))"
"(if #t"
"(let-values(((e_895)"
"(let-values(((e_896)"
" e_892))"
"(let-values(((e_897)"
"(let-values()"
"(let-values(((e201_898)"
"(let-values()"
" s_894)))"
"(cons"
" e201_898"
" e_896)))))"
"(values"
" e_897)))))"
"(if #t"
"(for-loop_891"
" e_895"
"(unsafe-cdr"
" lst_893))"
" e_895))"
" e_892))"
" e_892))))"
" for-loop_891)"
" null"
" lst_890)))))"
"(alt-reverse e_889))))))))))"
"(values #%app199_883 e200_884))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_879)))))"
"(values #t #%app197_880 e198_881)))"
"(values #f #f #f)))))"
"(let-values(((es_876) e198_865))"
"(if(null? es_876)"
"(let-values()"
"(let-values(((phase_899)(expand-context-phase ctx_861)))"
"(let-values(((s202_900) s_860)"
"((disarmed-s203_901) disarmed-s_862)"
"((temp204_902)"
"(list"
"(datum->syntax$2(syntax-shift-phase-level$1 core-stx phase_899) 'quote)"
" null)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s202_900 disarmed-s203_901 temp204_902)"
"(rebuild101.1 s202_900 disarmed-s203_901 temp204_902)))))"
"(let-values()"
"(let-values(((expr-ctx_903)(as-expression-context ctx_861)))"
"(let-values(((exp-es_904)"
"(alt-reverse"
"(let-values(((lst_906) es_876))"
"(begin"
"(if(list? lst_906)(void)(let-values()(in-list lst_906)))"
"((letrec-values(((for-loop_907)"
"(lambda(fold-var_908 lst_909)"
"(if(pair? lst_909)"
"(let-values(((e_910)(unsafe-car lst_909)))"
"(if #t"
"(let-values(((fold-var_911)"
"(let-values(((fold-var_912)"
" fold-var_908))"
"(let-values(((fold-var_913)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((e208_914)"
" e_910)"
"((expr-ctx209_915)"
" expr-ctx_903))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" e208_914"
" expr-ctx209_915)"
"(expand7.1"
" e208_914"
" expr-ctx209_915))))"
" fold-var_912))))"
"(values fold-var_913)))))"
"(if #t"
"(for-loop_907 fold-var_911(unsafe-cdr lst_909))"
" fold-var_911))"
" fold-var_908))"
" fold-var_908))))"
" for-loop_907)"
" null"
" lst_906))))))"
"(let-values(((prefixless_905)(cdr(syntax-e$1 disarmed-s_862))))"
"(let-values(((s205_916) s_860)"
"((disarmed-s206_917) disarmed-s_862)"
"((temp207_918)"
"(cons"
" #%app197_864"
"(if(syntax?$1 prefixless_905)"
"(let-values(((prefixless210_919) prefixless_905)"
"((prefixless211_920) prefixless_905)"
"((exp-es212_921) exp-es_904))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f prefixless210_919 prefixless211_920 exp-es212_921)"
"(rebuild101.1 prefixless210_919 prefixless211_920 exp-es212_921)))"
" exp-es_904))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s205_916 disarmed-s206_917 temp207_918)"
"(rebuild101.1 s205_916 disarmed-s206_917 temp207_918)))))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote"
"(lambda(s_922 ctx_923)"
"(let-values((()"
"(begin"
"(let-values(((obs_937)(expand-context-observer ctx_923)))"
"(if obs_937"
"(let-values()(if #t(let-values()(call-expand-observe obs_937 'prim-quote))(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_924 quote213_925 datum214_926)"
"(let-values(((s_938)(syntax-disarm$1 s_922)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_939) s_938))"
"(let-values(((quote213_940 datum214_941)"
"(let-values(((s_942)(if(syntax?$1 s_938)(syntax-e$1 s_938) s_938)))"
"(if(pair? s_942)"
"(let-values(((quote215_943)(let-values(((s_945)(car s_942))) s_945))"
"((datum216_944)"
"(let-values(((s_946)(cdr s_942)))"
"(let-values(((s_947)"
"(if(syntax?$1 s_946)"
"(syntax-e$1 s_946)"
" s_946)))"
"(if(pair? s_947)"
"(let-values(((datum217_948)"
"(let-values(((s_949)(car s_947)))"
" s_949))"
"(()"
"(let-values(((s_950)(cdr s_947)))"
"(let-values(((s_951)"
"(if(syntax?$1 s_950)"
"(syntax-e$1 s_950)"
" s_950)))"
"(if(null? s_951)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_939))))))"
"(values datum217_948))"
"(raise-syntax-error$1"
" #f"
"                                                                    \"bad syntax\""
" orig-s_939))))))"
"(values quote215_943 datum216_944))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_939)))))"
"(values #t quote213_940 datum214_941)))"
"(values #f #f #f)))))"
" s_922)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'quote-syntax"
"(lambda(s_952 ctx_953)"
"(let-values((()"
"(begin"
"(let-values(((obs_981)(expand-context-observer ctx_953)))"
"(if obs_981"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_981 'prim-quote-syntax))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_954)(syntax-disarm$1 s_952)))"
"(let-values(((ok?_955 quote-syntax218_956 datum219_957)"
"(let-values(((s_982) disarmed-s_954))"
"(if(if #t"
"(let-values(((s_983)(if(syntax?$1 s_982)(syntax-e$1 s_982) s_982)))"
"(if(pair? s_983)"
"(if(let-values(((s_984)(car s_983))) #t)"
"(let-values(((s_985)(cdr s_983)))"
"(let-values(((s_986)(if(syntax?$1 s_985)(syntax-e$1 s_985) s_985)))"
"(if(pair? s_986)"
"(if(let-values(((s_987)(car s_986))) #t)"
"(let-values(((s_988)(cdr s_986)))"
"(let-values(((s_989)(if(syntax?$1 s_988)(syntax-e$1 s_988) s_988)))"
"(if(pair? s_989)"
"(if(let-values(((s_990)(car s_989)))"
"(let-values(((s_991)"
"(if(syntax?$1 s_990)"
"(syntax-e$1 s_990)"
" s_990)))"
"(eq? '#:local s_991)))"
"(let-values(((s_992)(cdr s_989)))"
"(let-values(((s_993)"
"(if(syntax?$1 s_992)(syntax-e$1 s_992) s_992)))"
"(null? s_993)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_994) s_982))"
"(let-values(((quote-syntax218_995 datum219_996)"
"(let-values(((s_997)(if(syntax?$1 s_982)(syntax-e$1 s_982) s_982)))"
"(if #t"
"(let-values(((quote-syntax220_998)"
"(let-values(((s_1000)(car s_997))) s_1000))"
"((datum221_999)"
"(let-values(((s_1001)(cdr s_997)))"
"(let-values(((s_1002)"
"(if(syntax?$1 s_1001)"
"(syntax-e$1 s_1001)"
" s_1001)))"
"(if #t"
"(let-values(((datum222_1003)"
"(let-values(((s_1004)(car s_1002)))"
" s_1004))"
"(()"
"(let-values(((s_1005)(cdr s_1002)))"
"(let-values(((s_1006)"
"(if(syntax?$1"
" s_1005)"
"(syntax-e$1 s_1005)"
" s_1005)))"
"(if #t"
"(let-values((()"
"(let-values(((s_1007)"
"(car"
" s_1006)))"
"(let-values(((s_1008)"
"(if(syntax?$1"
" s_1007)"
"(syntax-e$1"
" s_1007)"
" s_1007)))"
"(values))))"
"(()"
"(let-values(((s_1009)"
"(cdr"
" s_1006)))"
"(let-values(((s_1010)"
"(if(syntax?$1"
" s_1009)"
"(syntax-e$1"
" s_1009)"
" s_1009)))"
"(values)))))"
"(values))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_994))))))"
"(values datum222_1003))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_994))))))"
"(values quote-syntax220_998 datum221_999))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_994)))))"
"(values #t quote-syntax218_995 datum219_996)))"
"(values #f #f #f)))))"
"(let-values(((ok?_968 quote-syntax223_969 datum224_970)"
"(let-values(((s_1011) disarmed-s_954))"
"(if(if(not ok?_955) #t #f)"
"(let-values(((orig-s_1012) s_1011))"
"(let-values(((quote-syntax223_1013 datum224_1014)"
"(let-values(((s_1015)"
"(if(syntax?$1 s_1011)(syntax-e$1 s_1011) s_1011)))"
"(if(pair? s_1015)"
"(let-values(((quote-syntax225_1016)"
"(let-values(((s_1018)(car s_1015))) s_1018))"
"((datum226_1017)"
"(let-values(((s_1019)(cdr s_1015)))"
"(let-values(((s_1020)"
"(if(syntax?$1 s_1019)"
"(syntax-e$1 s_1019)"
" s_1019)))"
"(if(pair? s_1020)"
"(let-values(((datum227_1021)"
"(let-values(((s_1022)"
"(car s_1020)))"
" s_1022))"
"(()"
"(let-values(((s_1023)"
"(cdr s_1020)))"
"(let-values(((s_1024)"
"(if(syntax?$1"
" s_1023)"
"(syntax-e$1"
" s_1023)"
" s_1023)))"
"(if(null? s_1024)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_1012))))))"
"(values datum227_1021))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1012))))))"
"(values quote-syntax225_1016 datum226_1017))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_1012)))))"
"(values #t quote-syntax223_1013 datum224_1014)))"
"(values #f #f #f)))))"
"(if ok?_955"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_953))"
"(values))))"
"(let-values(((ok?_1025 _228_1026 _229_1027 kw230_1028)"
"(let-values(((s_1041) disarmed-s_954))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1042) s_1041))"
"(let-values(((_228_1043 _229_1044 kw230_1045)"
"(let-values(((s_1046)"
"(if(syntax?$1 s_1041)"
"(syntax-e$1 s_1041)"
" s_1041)))"
"(if(pair? s_1046)"
"(let-values(((_231_1047)"
"(let-values(((s_1050)(car s_1046))) s_1050))"
"((_232_1048 kw233_1049)"
"(let-values(((s_1051)(cdr s_1046)))"
"(let-values(((s_1052)"
"(if(syntax?$1 s_1051)"
"(syntax-e$1 s_1051)"
" s_1051)))"
"(if(pair? s_1052)"
"(let-values(((_234_1053)"
"(let-values(((s_1055)"
"(car"
" s_1052)))"
" s_1055))"
"((kw235_1054)"
"(let-values(((s_1056)"
"(cdr"
" s_1052)))"
"(let-values(((s_1057)"
"(if(syntax?$1"
" s_1056)"
"(syntax-e$1"
" s_1056)"
" s_1056)))"
"(if(pair? s_1057)"
"(let-values(((kw236_1058)"
"(let-values(((s_1059)"
"(car"
" s_1057)))"
" s_1059))"
"(()"
"(let-values(((s_1060)"
"(cdr"
" s_1057)))"
"(let-values(((s_1061)"
"(if(syntax?$1"
" s_1060)"
"(syntax-e$1"
" s_1060)"
" s_1060)))"
"(if(null?"
" s_1061)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_1042))))))"
"(values"
" kw236_1058))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1042))))))"
"(values _234_1053 kw235_1054))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_1042))))))"
"(values _231_1047 _232_1048 kw233_1049))"
"                                                           (raise-syntax-error$1 #f \"bad syntax\" orig-s_1042)))))"
"(values #t _228_1043 _229_1044 kw230_1045)))"
"(values #f #f #f #f)))))"
"(let-values(((s237_1062) s_952)"
"((disarmed-s238_1063) disarmed-s_954)"
"((temp239_1064)(list quote-syntax218_956 datum219_957 kw230_1028)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s237_1062 disarmed-s238_1063 temp239_1064)"
"(rebuild101.1 s237_1062 disarmed-s238_1063 temp239_1064))))))"
"(let-values()"
"(let-values(((s240_1065) s_952)"
"((disarmed-s241_1066) disarmed-s_954)"
"((temp242_1067)"
"(list"
" quote-syntax223_969"
"(remove-scopes datum224_970(expand-context-scopes ctx_953)))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s240_1065 disarmed-s241_1066 temp242_1067)"
"(rebuild101.1 s240_1065 disarmed-s241_1066 temp242_1067))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'if"
"(lambda(s_1068 ctx_1069)"
"(let-values((()"
"(begin"
"(let-values(((obs_1092)(expand-context-observer ctx_1069)))"
"(if obs_1092"
"(let-values()(if #t(let-values()(call-expand-observe obs_1092 'prim-if))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1070)(syntax-disarm$1 s_1068)))"
"(let-values(((ok?_1071 if243_1072 tst244_1073 thn245_1074 els246_1075)"
"(let-values(((s_1093) disarmed-s_1070))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1094) s_1093))"
"(let-values(((if243_1095 tst244_1096 thn245_1097 els246_1098)"
"(let-values(((s_1099)(if(syntax?$1 s_1093)(syntax-e$1 s_1093) s_1093)))"
"(if(pair? s_1099)"
"(let-values(((if247_1100)"
"(let-values(((s_1104)(car s_1099))) s_1104))"
"((tst248_1101 thn249_1102 els250_1103)"
"(let-values(((s_1105)(cdr s_1099)))"
"(let-values(((s_1106)"
"(if(syntax?$1 s_1105)"
"(syntax-e$1 s_1105)"
" s_1105)))"
"(if(pair? s_1106)"
"(let-values(((tst251_1107)"
"(let-values(((s_1110)(car s_1106)))"
" s_1110))"
"((thn252_1108 els253_1109)"
"(let-values(((s_1111)(cdr s_1106)))"
"(let-values(((s_1112)"
"(if(syntax?$1"
" s_1111)"
"(syntax-e$1 s_1111)"
" s_1111)))"
"(if(pair? s_1112)"
"(let-values(((thn254_1113)"
"(let-values(((s_1115)"
"(car"
" s_1112)))"
" s_1115))"
"((els255_1114)"
"(let-values(((s_1116)"
"(cdr"
" s_1112)))"
"(let-values(((s_1117)"
"(if(syntax?$1"
" s_1116)"
"(syntax-e$1"
" s_1116)"
" s_1116)))"
"(if(pair?"
" s_1117)"
"(let-values(((els256_1118)"
"(let-values(((s_1119)"
"(car"
" s_1117)))"
" s_1119))"
"(()"
"(let-values(((s_1120)"
"(cdr"
" s_1117)))"
"(let-values(((s_1121)"
"(if(syntax?$1"
" s_1120)"
"(syntax-e$1"
" s_1120)"
" s_1120)))"
"(if(null?"
" s_1121)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_1094))))))"
"(values"
" els256_1118))"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_1094))))))"
"(values"
" thn254_1113"
" els255_1114))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1094))))))"
"(values tst251_1107 thn252_1108 els253_1109))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1094))))))"
"(values if247_1100 tst248_1101 thn249_1102 els250_1103))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1094)))))"
"(values #t if243_1095 tst244_1096 thn245_1097 els246_1098)))"
"(values #f #f #f #f #f)))))"
"(let-values(((expr-ctx_1090)(as-expression-context ctx_1069)))"
"(let-values(((tail-ctx_1091)"
"(let-values(((...nder/expand/expr.rkt:355:20_1122) as-tail-context14.1)"
"((expr-ctx260_1123) expr-ctx_1090)"
"((ctx261_1124) ctx_1069))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx261_1124 expr-ctx260_1123)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:355:20_1122"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx261_1124)"
" expr-ctx260_1123)))))"
"(begin"
"(let-values(((obs_1125)(expand-context-observer ctx_1069)))"
"(if obs_1125"
"(let-values()(if #t(let-values()(call-expand-observe obs_1125 'next-group))(void)))"
"(void)))"
"(let-values(((s257_1126) s_1068)"
"((disarmed-s258_1127) disarmed-s_1070)"
"((temp259_1128)"
"(list"
" if243_1072"
"(let-values(((temp262_1129) tst244_1073)((expr-ctx263_1130) expr-ctx_1090))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp262_1129 expr-ctx263_1130)"
"(expand7.1 temp262_1129 expr-ctx263_1130)))"
"(begin"
"(let-values(((obs_1131)(expand-context-observer ctx_1069)))"
"(if obs_1131"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1131 'next))(void)))"
"(void)))"
"(let-values(((temp264_1132) thn245_1074)((tail-ctx265_1133) tail-ctx_1091))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp264_1132 tail-ctx265_1133)"
"(expand7.1 temp264_1132 tail-ctx265_1133))))"
"(begin"
"(let-values(((obs_1134)(expand-context-observer ctx_1069)))"
"(if obs_1134"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1134 'next))(void)))"
"(void)))"
"(let-values(((temp266_1135) els246_1075)((tail-ctx267_1136) tail-ctx_1091))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp266_1135 tail-ctx267_1136)"
"(expand7.1 temp266_1135 tail-ctx267_1136)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s257_1126 disarmed-s258_1127 temp259_1128)"
"(rebuild101.1 s257_1126 disarmed-s258_1127 temp259_1128))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'with-continuation-mark"
"(lambda(s_1137 ctx_1138)"
"(let-values((()"
"(begin"
"(let-values(((obs_1160)(expand-context-observer ctx_1138)))"
"(if obs_1160"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1160 'prim-with-continuation-mark))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1139)(syntax-disarm$1 s_1137)))"
"(let-values(((ok?_1140 with-continuation-mark268_1141 key269_1142 val270_1143 body271_1144)"
"(let-values(((s_1161) disarmed-s_1139))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1162) s_1161))"
"(let-values(((with-continuation-mark268_1163 key269_1164 val270_1165 body271_1166)"
"(let-values(((s_1167)(if(syntax?$1 s_1161)(syntax-e$1 s_1161) s_1161)))"
"(if(pair? s_1167)"
"(let-values(((with-continuation-mark272_1168)"
"(let-values(((s_1172)(car s_1167))) s_1172))"
"((key273_1169 val274_1170 body275_1171)"
"(let-values(((s_1173)(cdr s_1167)))"
"(let-values(((s_1174)"
"(if(syntax?$1 s_1173)"
"(syntax-e$1 s_1173)"
" s_1173)))"
"(if(pair? s_1174)"
"(let-values(((key276_1175)"
"(let-values(((s_1178)(car s_1174)))"
" s_1178))"
"((val277_1176 body278_1177)"
"(let-values(((s_1179)(cdr s_1174)))"
"(let-values(((s_1180)"
"(if(syntax?$1"
" s_1179)"
"(syntax-e$1 s_1179)"
" s_1179)))"
"(if(pair? s_1180)"
"(let-values(((val279_1181)"
"(let-values(((s_1183)"
"(car"
" s_1180)))"
" s_1183))"
"((body280_1182)"
"(let-values(((s_1184)"
"(cdr"
" s_1180)))"
"(let-values(((s_1185)"
"(if(syntax?$1"
" s_1184)"
"(syntax-e$1"
" s_1184)"
" s_1184)))"
"(if(pair?"
" s_1185)"
"(let-values(((body281_1186)"
"(let-values(((s_1187)"
"(car"
" s_1185)))"
" s_1187))"
"(()"
"(let-values(((s_1188)"
"(cdr"
" s_1185)))"
"(let-values(((s_1189)"
"(if(syntax?$1"
" s_1188)"
"(syntax-e$1"
" s_1188)"
" s_1188)))"
"(if(null?"
" s_1189)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_1162))))))"
"(values"
" body281_1186))"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_1162))))))"
"(values"
" val279_1181"
" body280_1182))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1162))))))"
"(values key276_1175 val277_1176 body278_1177))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1162))))))"
"(values"
" with-continuation-mark272_1168"
" key273_1169"
" val274_1170"
" body275_1171))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1162)))))"
"(values #t with-continuation-mark268_1163 key269_1164 val270_1165 body271_1166)))"
"(values #f #f #f #f #f)))))"
"(let-values(((expr-ctx_1159)(as-expression-context ctx_1138)))"
"(let-values(((s282_1190) s_1137)"
"((disarmed-s283_1191) disarmed-s_1139)"
"((temp284_1192)"
"(list"
" with-continuation-mark268_1141"
"(let-values(((temp285_1193) key269_1142)((expr-ctx286_1194) expr-ctx_1159))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp285_1193 expr-ctx286_1194)"
"(expand7.1 temp285_1193 expr-ctx286_1194)))"
"(begin"
"(let-values(((obs_1195)(expand-context-observer ctx_1138)))"
"(if obs_1195"
"(let-values()(if #t(let-values()(call-expand-observe obs_1195 'next))(void)))"
"(void)))"
"(let-values(((temp287_1196) val270_1143)((expr-ctx288_1197) expr-ctx_1159))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp287_1196 expr-ctx288_1197)"
"(expand7.1 temp287_1196 expr-ctx288_1197))))"
"(begin"
"(let-values(((obs_1198)(expand-context-observer ctx_1138)))"
"(if obs_1198"
"(let-values()(if #t(let-values()(call-expand-observe obs_1198 'next))(void)))"
"(void)))"
"(let-values(((temp289_1199) body271_1144)"
"((temp290_1200)"
"(let-values(((...nder/expand/expr.rkt:384:30_1201) as-tail-context14.1)"
"((expr-ctx291_1202) expr-ctx_1159)"
"((ctx292_1203) ctx_1138))"
"(if(variable-reference-constant?"
"(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx292_1203 expr-ctx291_1202)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:384:30_1201"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx292_1203)"
" expr-ctx291_1202)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp289_1199 temp290_1200)"
"(expand7.1 temp289_1199 temp290_1200)))))))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s282_1190 disarmed-s283_1191 temp284_1192)"
"(rebuild101.1 s282_1190 disarmed-s283_1191 temp284_1192))))))))))"
" print-values)"
"(define-values"
"(lifted/2.1)"
"(make-required"
" 'make-begin"
"(case-lambda((self_1204 log-tag_1205)(apply missing-kw self_1204 log-tag_1205 null)))"
" #f"
" #f))"
"(define-values"
"(make-begin17.1)"
"(lambda(list-start-index14_1206 log-tag16_1207)"
"(let-values(((log-tag_1208) log-tag16_1207))"
"(let-values(((list-start-index_1209) list-start-index14_1206))"
"(let-values()"
"(lambda(s_1210 ctx_1211)"
"(let-values((()"
"(begin"
"(let-values(((obs_1230)(expand-context-observer ctx_1211)))"
"(if obs_1230"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1230 log-tag_1208))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1212)(syntax-disarm$1 s_1210)))"
"(let-values(((ok?_1213 begin293_1214 e294_1215)"
"(let-values(((s_1231) disarmed-s_1212))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1232) s_1231))"
"(let-values(((begin293_1233 e294_1234)"
"(let-values(((s_1235)"
"(if(syntax?$1 s_1231)(syntax-e$1 s_1231) s_1231)))"
"(if(pair? s_1235)"
"(let-values(((begin295_1236)"
"(let-values(((s_1238)(car s_1235))) s_1238))"
"((e296_1237)"
"(let-values(((s_1239)(cdr s_1235)))"
"(let-values(((s_1240)"
"(if(syntax?$1 s_1239)"
"(syntax-e$1 s_1239)"
" s_1239)))"
"(let-values(((flat-s_1241)"
"(to-syntax-list.1$1 s_1240)))"
"(if(not flat-s_1241)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                               \"bad syntax\""
" orig-s_1232))"
"(if(null? flat-s_1241)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                 \"bad syntax\""
" orig-s_1232))"
"(let-values()"
"(let-values(((e_1242)"
"(let-values(((lst_1243)"
" flat-s_1241))"
"(begin"
"(if(list? lst_1243)"
"(void)"
"(let-values()"
"(in-list"
" lst_1243)))"
"((letrec-values(((for-loop_1244)"
"(lambda(e_1245"
" lst_1246)"
"(if(pair?"
" lst_1246)"
"(let-values(((s_1247)"
"(unsafe-car"
" lst_1246)))"
"(if #t"
"(let-values(((e_1248)"
"(let-values(((e_1249)"
" e_1245))"
"(let-values(((e_1250)"
"(let-values()"
"(let-values(((e300_1251)"
"(let-values()"
" s_1247)))"
"(cons"
" e300_1251"
" e_1249)))))"
"(values"
" e_1250)))))"
"(if #t"
"(for-loop_1244"
" e_1248"
"(unsafe-cdr"
" lst_1246))"
" e_1248))"
" e_1245))"
" e_1245))))"
" for-loop_1244)"
" null"
" lst_1243)))))"
"(alt-reverse e_1242))))))))))"
"(values begin295_1236 e296_1237))"
"                                                      (raise-syntax-error$1 #f \"bad syntax\" orig-s_1232)))))"
"(values #t begin293_1233 e294_1234)))"
"(values #f #f #f)))))"
"(let-values(((expr-ctx_1226)(as-expression-context ctx_1211)))"
"(let-values(((es_1227) e294_1215))"
"(let-values(((last-i_1228)(sub1(length es_1227))))"
"(let-values(((exp-es_1229)"
"(alt-reverse"
"(let-values(((lst_1252) es_1227)((start_1253) 0))"
"(begin"
"(if(list? lst_1252)(void)(let-values()(in-list lst_1252)))"
"(if(exact-nonnegative-integer? start_1253)"
"(void)"
"(let-values()(in-naturals start_1253)))"
"((letrec-values(((for-loop_1254)"
"(lambda(fold-var_1255 lst_1256 pos_1257)"
"(if(if(pair? lst_1256) #t #f)"
"(let-values(((e_1258)(unsafe-car lst_1256))"
"((i_1259) pos_1257))"
"(if(if #t #t #f)"
"(let-values(((fold-var_1260)"
"(let-values(((fold-var_1261)"
" fold-var_1255))"
"(let-values(((fold-var_1262)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(if(="
" i_1259"
" list-start-index_1209)"
"(let-values()"
"(let-values(((obs_1263)"
"(expand-context-observer"
" ctx_1211)))"
"(if obs_1263"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1263"
" 'enter-list"
"(list-tail"
" es_1227"
" i_1259)))"
"(void)))"
"(void))))"
"(void))"
"(let-values(((obs_1264)"
"(expand-context-observer"
" ctx_1211)))"
"(if obs_1264"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1264"
" 'next))"
"(void)))"
"(void)))"
"(let-values(((e301_1265)"
" e_1258)"
"((temp302_1266)"
"(if(="
" i_1259"
" last-i_1228)"
"(let-values(((...nder/expand/expr.rkt:401:21_1267)"
" as-tail-context14.1)"
"((expr-ctx303_1268)"
" expr-ctx_1226)"
"((ctx304_1269)"
" ctx_1211))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" as-tail-context14.1))"
"(as-tail-context12.1"
" ctx304_1269"
" expr-ctx303_1268)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:401:21_1267"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list"
" ctx304_1269)"
" expr-ctx303_1268)))"
" expr-ctx_1226)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" e301_1265"
" temp302_1266)"
"(expand7.1"
" e301_1265"
" temp302_1266)))))"
" fold-var_1261))))"
"(values fold-var_1262)))))"
"(if(if #t #t #f)"
"(for-loop_1254"
" fold-var_1260"
"(unsafe-cdr lst_1256)"
"(+ pos_1257 1))"
" fold-var_1260))"
" fold-var_1255))"
" fold-var_1255))))"
" for-loop_1254)"
" null"
" lst_1252"
" start_1253))))))"
"(begin"
"(if(if(= 1 list-start-index_1209)(null?(cdr es_1227)) #f)"
"(let-values()"
"(let-values(((obs_1270)(expand-context-observer ctx_1211)))"
"(if obs_1270"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1270 'enter-list(cdr es_1227)))"
"(void)))"
"(void))))"
"(void))"
"(let-values(((obs_1271)(expand-context-observer ctx_1211)))"
"(if obs_1271"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1271"
" 'exit-list"
"(list-tail exp-es_1229 list-start-index_1209)))"
"(void)))"
"(void)))"
"(let-values(((s297_1272) s_1210)"
"((disarmed-s298_1273) disarmed-s_1212)"
"((temp299_1274)(cons begin293_1214 exp-es_1229)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s297_1272 disarmed-s298_1273 temp299_1274)"
"(rebuild101.1 s297_1272 disarmed-s298_1273 temp299_1274)))))))))))))))))"
"(define-values"
"(unpack18.1$3)"
"(lambda(given-kws_1275 given-args_1276 log-tag16_1277)"
"(let-values(((list-start-index14_1278)(car given-args_1276)))"
"(make-begin17.1 list-start-index14_1278 log-tag16_1277))))"
"(define-values"
"(make-begin19.1)"
"(lifted/2.1"
"(lambda(given-kws_1279 given-argc_1280)"
"(if(= given-argc_1280 3)"
"(let-values(((l2_1281) given-kws_1279))"
"(if(pair? l2_1281)(if(eq?(car l2_1281) '#:list-start-index)(null?(cdr l2_1281)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1282 given-args_1283 log-tag_1284)(unpack18.1$3 given-kws_1282 given-args_1283 log-tag_1284)))"
" '(#:list-start-index)"
" '(#:list-start-index)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin"
"(let-values(((...nder/expand/expr.rkt:413:1_1285) make-begin19.1)"
"((temp305_1286) 'prim-begin0)"
"((temp306_1287) 0))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp306_1287 temp305_1286)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:413:1_1285"
" keyword-procedure-extract"
" '(#:list-start-index)"
" 3)"
" '(#:list-start-index)"
"(list temp306_1287)"
" temp305_1286)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin0"
"(let-values(((...nder/expand/expr.rkt:417:1_1288) make-begin19.1)"
"((temp307_1289) 'prim-begin0)"
"((temp308_1290) 1))"
"(if(variable-reference-constant?(#%variable-reference make-begin19.1))"
"(make-begin17.1 temp308_1290 temp307_1289)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:417:1_1288"
" keyword-procedure-extract"
" '(#:list-start-index)"
" 3)"
" '(#:list-start-index)"
"(list temp308_1290)"
" temp307_1289)))))"
" print-values)"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_1291 ctx_1292)"
"(if(if(expand-context-need-eventually-defined ctx_1292)(>=(expand-context-phase ctx_1292) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_1292)"
"(expand-context-phase ctx_1292)"
"(lambda(l_1293)(cons id_1291 l_1293))"
" null)"
" #t))"
"(let-values() #f))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%top"
"(let-values(((core313_1294)"
"(lambda(s311_1295 ctx312_1296 implicit-omitted?309_1297 implicit-omitted?310_1298)"
"(let-values(((s_1299) s311_1295))"
"(let-values(((ctx_1300) ctx312_1296))"
"(let-values(((implicit-omitted?_1301)"
"(if implicit-omitted?310_1298 implicit-omitted?309_1297 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1305)(expand-context-observer ctx_1300)))"
"(if obs_1305"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1305 'prim-#%top))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1302)(syntax-disarm$1 s_1299)))"
"(let-values(((id_1303)"
"(if implicit-omitted?_1301"
"(let-values() s_1299)"
"(let-values()"
"(let-values(((ok?_1306 #%top315_1307 id316_1308)"
"(let-values(((s_1319) disarmed-s_1302))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1320) s_1319))"
"(let-values(((#%top315_1321 id316_1322)"
"(let-values(((s_1323)"
"(if(syntax?$1"
" s_1319)"
"(syntax-e$1 s_1319)"
" s_1319)))"
"(if(pair? s_1323)"
"(let-values(((#%top317_1324)"
"(let-values(((s_1326)"
"(car"
" s_1323)))"
" s_1326))"
"((id318_1325)"
"(let-values(((s_1327)"
"(cdr"
" s_1323)))"
"(if(let-values(((or-part_1328)"
"(if(syntax?$1"
" s_1327)"
"(symbol?"
"(syntax-e$1"
" s_1327))"
" #f)))"
"(if or-part_1328"
" or-part_1328"
"(symbol?"
" s_1327)))"
" s_1327"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"not an identifier\""
" orig-s_1320"
" s_1327)))))"
"(values"
" #%top317_1324"
" id318_1325))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1320)))))"
"(values #t #%top315_1321 id316_1322)))"
"(values #f #f #f)))))"
" id316_1308)))))"
"(let-values(((b_1304)"
"(let-values(((...nder/expand/expr.rkt:445:13_1329) resolve+shift15.1)"
"((id319_1330) id_1303)"
"((temp320_1331)(expand-context-phase ctx_1300))"
"((temp321_1332) 'ambiguous))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp321_1332"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id319_1330"
" temp320_1331)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:445:13_1329"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" 4)"
" '(#:ambiguous-value)"
"(list temp321_1332)"
" id319_1330"
" temp320_1331)))))"
"(if(eq? b_1304 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1303 ctx_1300))"
"(if(if b_1304"
"(if(module-binding? b_1304)"
"(eq?"
"(module-binding-module b_1304)"
"(namespace-mpi(expand-context-namespace ctx_1300)))"
" #f)"
" #f)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_1304))"
"(let-values() s_1299)"
"(let-values() id_1303)))"
"(if(register-eventual-variable!? id_1303 ctx_1300)"
"(let-values() id_1303)"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_1300))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_1303"
" #f"
" null"
"(syntax-debug-info-string id_1303 ctx_1300)))"
"(let-values()"
"(let-values(((tl-id_1333)"
"(add-scope"
" id_1303"
"(root-expand-context-top-level-bind-scope ctx_1300))))"
"(if(let-values(((tl-id322_1334) tl-id_1333)"
"((temp323_1335)(expand-context-phase ctx_1300)))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve23.1))"
"(resolve21.1 #f #f #f #f #f #f tl-id322_1334 temp323_1335)"
"(resolve23.1 tl-id322_1334 temp323_1335)))"
"(let-values()"
"(let-values(((ok?_1336 #%top324_1337 id325_1338)"
"(let-values(((s_1349) disarmed-s_1302))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1350) s_1349))"
"(let-values(((#%top324_1351 id325_1352)"
"(let-values(((s_1353)"
"(if(syntax?$1"
" s_1349)"
"(syntax-e$1"
" s_1349)"
" s_1349)))"
"(if(pair? s_1353)"
"(let-values(((#%top326_1354)"
"(let-values(((s_1356)"
"(car"
" s_1353)))"
" s_1356))"
"((id327_1355)"
"(let-values(((s_1357)"
"(cdr"
" s_1353)))"
"(if(let-values(((or-part_1358)"
"(if(syntax?$1"
" s_1357)"
"(symbol?"
"(syntax-e$1"
" s_1357))"
" #f)))"
"(if or-part_1358"
" or-part_1358"
"(symbol?"
" s_1357)))"
" s_1357"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"not an identifier\""
" orig-s_1350"
" s_1357)))))"
"(values"
" #%top326_1354"
" id327_1355))"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_1350)))))"
"(values #t #%top324_1351 id325_1352)))"
"(values #f #f #f)))))"
"(let-values(((s328_1359) s_1299)"
"((disarmed-s329_1360) disarmed-s_1302)"
"((temp330_1361)(cons #%top324_1337 tl-id_1333)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" s328_1359"
" disarmed-s329_1360"
" temp330_1361)"
"(rebuild101.1"
" s328_1359"
" disarmed-s329_1360"
" temp330_1361)))))"
"(let-values() s_1299))))))))))))))))))))"
"(case-lambda"
"((s_1362 ctx_1363)(core313_1294 s_1362 ctx_1363 #f #f))"
"((s_1364 ctx_1365 implicit-omitted?309_1366)(core313_1294 s_1364 ctx_1365 implicit-omitted?309_1366 #t))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'set!"
"(lambda(s_1367 ctx_1368)"
"(let-values((()"
"(begin"
"(let-values(((obs_1387)(expand-context-observer ctx_1368)))"
"(if obs_1387"
"(let-values()(if #t(let-values()(call-expand-observe obs_1387 'prim-set!))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1369)(syntax-disarm$1 s_1367)))"
"(let-values(((ok?_1370 set!331_1371 id332_1372 rhs333_1373)"
"(let-values(((s_1388) disarmed-s_1369))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1389) s_1388))"
"(let-values(((set!331_1390 id332_1391 rhs333_1392)"
"(let-values(((s_1393)(if(syntax?$1 s_1388)(syntax-e$1 s_1388) s_1388)))"
"(if(pair? s_1393)"
"(let-values(((set!334_1394)"
"(let-values(((s_1397)(car s_1393))) s_1397))"
"((id335_1395 rhs336_1396)"
"(let-values(((s_1398)(cdr s_1393)))"
"(let-values(((s_1399)"
"(if(syntax?$1 s_1398)"
"(syntax-e$1 s_1398)"
" s_1398)))"
"(if(pair? s_1399)"
"(let-values(((id337_1400)"
"(let-values(((s_1402)(car s_1399)))"
"(if(let-values(((or-part_1403)"
"(if(syntax?$1"
" s_1402)"
"(symbol?"
"(syntax-e$1"
" s_1402))"
" #f)))"
"(if or-part_1403"
" or-part_1403"
"(symbol? s_1402)))"
" s_1402"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"not an identifier\""
" orig-s_1389"
" s_1402))))"
"((rhs338_1401)"
"(let-values(((s_1404)(cdr s_1399)))"
"(let-values(((s_1405)"
"(if(syntax?$1"
" s_1404)"
"(syntax-e$1 s_1404)"
" s_1404)))"
"(if(pair? s_1405)"
"(let-values(((rhs339_1406)"
"(let-values(((s_1407)"
"(car"
" s_1405)))"
" s_1407))"
"(()"
"(let-values(((s_1408)"
"(cdr"
" s_1405)))"
"(let-values(((s_1409)"
"(if(syntax?$1"
" s_1408)"
"(syntax-e$1"
" s_1408)"
" s_1408)))"
"(if(null?"
" s_1409)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_1389))))))"
"(values rhs339_1406))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1389))))))"
"(values id337_1400 rhs338_1401))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1389))))))"
"(values set!334_1394 id335_1395 rhs336_1396))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1389)))))"
"(values #t set!331_1390 id332_1391 rhs333_1392)))"
"(values #f #f #f #f)))))"
"(let-values(((id_1386) id332_1372))"
"((letrec-values(((rename-loop_1410)"
"(lambda(id_1411 from-rename?_1412)"
"(let-values(((binding_1413)"
"(let-values(((...nder/expand/expr.rkt:487:21_1416) resolve+shift15.1)"
"((id340_1417) id_1411)"
"((temp341_1418)(expand-context-phase ctx_1368))"
"((temp342_1419) 'ambiguous)"
"((temp343_1420) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp342_1419"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp343_1420"
" #t"
" #f"
" #f"
" id340_1417"
" temp341_1418)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:487:21_1416"
" keyword-procedure-extract"
" '(#:ambiguous-value #:immediate?)"
" 4)"
" '(#:ambiguous-value #:immediate?)"
"(list temp342_1419 temp343_1420)"
" id340_1417"
" temp341_1418)))))"
"(let-values((()"
"(begin"
"(if(eq? binding_1413 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1411 ctx_1368))"
"(void))"
"(values))))"
"(let-values(((t_1414 insp_1415)"
"(if binding_1413"
"(let-values(((binding344_1421) binding_1413)"
"((ctx345_1422) ctx_1368)"
"((s346_1423) s_1367))"
"(if(variable-reference-constant?"
"(#%variable-reference lookup17.1))"
"(lookup15.1"
" #f"
" #f"
" #f"
" #f"
" binding344_1421"
" ctx345_1422"
" s346_1423)"
"(lookup17.1 binding344_1421 ctx345_1422 s346_1423)))"
"(values #f #f))))"
"(begin"
"(let-values(((obs_1424)(expand-context-observer ctx_1368)))"
"(if obs_1424"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1424 'resolve id_1411))"
"(void)))"
"(void)))"
"(if(let-values(((or-part_1425)(variable? t_1414)))"
"(if or-part_1425"
" or-part_1425"
"(if(not binding_1413)"
"(let-values(((or-part_1426)"
"(register-eventual-variable!? id_1411 ctx_1368)))"
"(if or-part_1426"
" or-part_1426"
"(expand-context-allow-unbound? ctx_1368)))"
" #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_1427)(expand-context-observer ctx_1368)))"
"(if obs_1427"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1427 'next))"
"(void)))"
"(void)))"
"(register-variable-referenced-if-local! binding_1413)"
"(let-values(((s347_1428) s_1367)"
"((disarmed-s348_1429) disarmed-s_1369)"
"((temp349_1430)"
"(list"
" set!331_1371"
"(let-values(((...nder/expand/expr.rkt:506:14_1431)"
" substitute-variable8.1)"
"((id350_1432) id_1411)"
"((t351_1433) t_1414)"
"((temp352_1434)"
"(free-id-set-empty?"
"(expand-context-stops ctx_1368))))"
"(if(variable-reference-constant?"
"(#%variable-reference substitute-variable8.1))"
"(substitute-variable6.1"
" temp352_1434"
" id350_1432"
" t351_1433)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:506:14_1431"
" keyword-procedure-extract"
" '(#:no-stops?)"
" 4)"
" '(#:no-stops?)"
"(list temp352_1434)"
" id350_1432"
" t351_1433)))"
"(let-values(((temp353_1435) rhs333_1373)"
"((temp354_1436)"
"(as-expression-context ctx_1368)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp353_1435 temp354_1436)"
"(expand7.1 temp353_1435 temp354_1436))))))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s347_1428 disarmed-s348_1429 temp349_1430)"
"(rebuild101.1 s347_1428 disarmed-s348_1429 temp349_1430)))))"
"(if(not binding_1413)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_1367"
" id_1411"
" null"
"(syntax-debug-info-string id_1411 ctx_1368)))"
"(if(1/set!-transformer? t_1414)"
"(let-values()"
"(if(not-in-this-expand-context? t_1414 ctx_1368)"
"(let-values()"
"(let-values(((temp355_1437)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1367"
" disarmed-s_1369"
" set!331_1371"
" rhs333_1373"
" id_1411"
" from-rename?_1412)"
" t_1414"
" ctx_1368))"
"((ctx356_1438) ctx_1368))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp355_1437 ctx356_1438)"
"(expand7.1 temp355_1437 ctx356_1438))))"
"(let-values()"
"(let-values(((exp-s_1439 re-ctx_1440)"
"(apply-transformer"
" t_1414"
" insp_1415"
" s_1367"
" id_1411"
" ctx_1368"
" binding_1413)))"
"(if(expand-context-just-once? ctx_1368)"
"(let-values() exp-s_1439)"
"(let-values()"
"(let-values(((exp-s357_1441) exp-s_1439)"
"((re-ctx358_1442) re-ctx_1440))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f exp-s357_1441 re-ctx358_1442)"
"(expand7.1 exp-s357_1441 re-ctx358_1442)))))))))"
"(if(1/rename-transformer? t_1414)"
"(let-values()"
"(if(not-in-this-expand-context? t_1414 ctx_1368)"
"(let-values()"
"(let-values(((temp359_1443)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_1367"
" disarmed-s_1369"
" set!331_1371"
" rhs333_1373"
" id_1411"
" from-rename?_1412"
" t_1414)"
" t_1414"
" ctx_1368))"
"((ctx360_1444) ctx_1368))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp359_1443 ctx360_1444)"
"(expand7.1 temp359_1443 ctx360_1444))))"
"(let-values()"
"(rename-loop_1410(1/rename-transformer-target t_1414) #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_1367"
" id_1411)))))))))))))"
" rename-loop_1410)"
" id_1386"
" #f))))))))"
" print-values)"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename28_1445)"
"(lambda(s22_1446"
" disarmed-s23_1447"
" set!-id24_1448"
" id25_1449"
" rhs-s26_1450"
" from-rename?27_1451"
" t20_1452"
" t21_1453)"
"(let-values(((s_1454) s22_1446))"
"(let-values(((disarmed-s_1455) disarmed-s23_1447))"
"(let-values(((set!-id_1456) set!-id24_1448))"
"(let-values(((id_1457) id25_1449))"
"(let-values(((rhs-s_1458) rhs-s26_1450))"
"(let-values(((from-rename?_1459) from-rename?27_1451))"
"(let-values(((t_1460)(if t21_1453 t20_1452 #f)))"
"(let-values()"
"(if(let-values(((or-part_1461) t_1460))"
"(if or-part_1461 or-part_1461 from-rename?_1459))"
"(let-values()"
"(let-values(((new-id_1462)"
"(if t_1460(1/rename-transformer-target t_1460) id_1457)))"
"(syntax-rearm$1"
"(datum->syntax$2"
" disarmed-s_1455"
"(list set!-id_1456 new-id_1462 rhs-s_1458)"
" disarmed-s_1455"
" disarmed-s_1455)"
" s_1454)))"
"(let-values() s_1454)))))))))))))"
"(case-lambda"
"((s_1463 disarmed-s_1464 set!-id_1465 id_1466 rhs-s_1467 from-rename?_1468)"
"(substitute-set!-rename28_1445 s_1463 disarmed-s_1464 set!-id_1465 id_1466 rhs-s_1467 from-rename?_1468 #f #f))"
"((s_1469 disarmed-s_1470 set!-id_1471 id_1472 rhs-s_1473 from-rename?_1474 t20_1475)"
"(substitute-set!-rename28_1445"
" s_1469"
" disarmed-s_1470"
" set!-id_1471"
" id_1472"
" rhs-s_1473"
" from-rename?_1474"
" t20_1475"
" #t)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%variable-reference"
"(lambda(s_1476 ctx_1477)"
"(let-values((()"
"(begin"
"(let-values(((obs_1518)(expand-context-observer ctx_1477)))"
"(if obs_1518"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1518 'prim-#%variable-reference))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1478)(syntax-disarm$1 s_1476)))"
"(let-values(((ok?_1479 #%variable-reference361_1480 id362_1481)"
"(let-values(((s_1519) disarmed-s_1478))"
"(if(if #t"
"(let-values(((s_1520)(if(syntax?$1 s_1519)(syntax-e$1 s_1519) s_1519)))"
"(if(pair? s_1520)"
"(if(let-values(((s_1521)(car s_1520))) #t)"
"(let-values(((s_1522)(cdr s_1520)))"
"(let-values(((s_1523)(if(syntax?$1 s_1522)(syntax-e$1 s_1522) s_1522)))"
"(if(pair? s_1523)"
"(if(let-values(((s_1524)(car s_1523)))"
"(if(syntax?$1 s_1524)(symbol?(syntax-e$1 s_1524)) #f))"
"(let-values(((s_1525)(cdr s_1523)))"
"(let-values(((s_1526)"
"(if(syntax?$1 s_1525)(syntax-e$1 s_1525) s_1525)))"
"(null? s_1526)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1527) s_1519))"
"(let-values(((#%variable-reference361_1528 id362_1529)"
"(let-values(((s_1530)(if(syntax?$1 s_1519)(syntax-e$1 s_1519) s_1519)))"
"(if #t"
"(let-values(((#%variable-reference363_1531)"
"(let-values(((s_1533)(car s_1530))) s_1533))"
"((id364_1532)"
"(let-values(((s_1534)(cdr s_1530)))"
"(let-values(((s_1535)"
"(if(syntax?$1 s_1534)"
"(syntax-e$1 s_1534)"
" s_1534)))"
"(if #t"
"(let-values(((id365_1536)"
"(let-values(((s_1537)(car s_1535)))"
" s_1537))"
"(()"
"(let-values(((s_1538)(cdr s_1535)))"
"(let-values(((s_1539)"
"(if(syntax?$1"
" s_1538)"
"(syntax-e$1 s_1538)"
" s_1538)))"
"(values)))))"
"(values id365_1536))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1527))))))"
"(values #%variable-reference363_1531 id364_1532))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1527)))))"
"(values #t #%variable-reference361_1528 id362_1529)))"
"(values #f #f #f)))))"
"(let-values(((ok?_1492 #%variable-reference366_1493 #%top367_1494 id368_1495)"
"(let-values(((s_1540) disarmed-s_1478))"
"(if(if(not ok?_1479)"
"(let-values(((s_1541)(if(syntax?$1 s_1540)(syntax-e$1 s_1540) s_1540)))"
"(if(pair? s_1541)"
"(if(let-values(((s_1542)(car s_1541))) #t)"
"(let-values(((s_1543)(cdr s_1541)))"
"(let-values(((s_1544)(if(syntax?$1 s_1543)(syntax-e$1 s_1543) s_1543)))"
"(if(pair? s_1544)"
"(if(let-values(((s_1545)(car s_1544)))"
"(let-values(((s_1546)"
"(if(syntax?$1 s_1545)(syntax-e$1 s_1545) s_1545)))"
"(if(pair? s_1546)"
"(if(let-values(((s_1547)(car s_1546))) #t)"
"(let-values(((s_1548)(cdr s_1546)))"
"(if(syntax?$1 s_1548)(symbol?(syntax-e$1 s_1548)) #f))"
" #f)"
" #f)))"
"(let-values(((s_1549)(cdr s_1544)))"
"(let-values(((s_1550)"
"(if(syntax?$1 s_1549)(syntax-e$1 s_1549) s_1549)))"
"(null? s_1550)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1551) s_1540))"
"(let-values(((#%variable-reference366_1552 #%top367_1553 id368_1554)"
"(let-values(((s_1555)"
"(if(syntax?$1 s_1540)(syntax-e$1 s_1540) s_1540)))"
"(if #t"
"(let-values(((#%variable-reference369_1556)"
"(let-values(((s_1559)(car s_1555))) s_1559))"
"((#%top370_1557 id371_1558)"
"(let-values(((s_1560)(cdr s_1555)))"
"(let-values(((s_1561)"
"(if(syntax?$1 s_1560)"
"(syntax-e$1 s_1560)"
" s_1560)))"
"(if #t"
"(let-values(((#%top372_1562 id373_1563)"
"(let-values(((s_1564)"
"(car s_1561)))"
"(let-values(((s_1565)"
"(if(syntax?$1"
" s_1564)"
"(syntax-e$1"
" s_1564)"
" s_1564)))"
"(if #t"
"(let-values(((#%top374_1566)"
"(let-values(((s_1568)"
"(car"
" s_1565)))"
" s_1568))"
"((id375_1567)"
"(let-values(((s_1569)"
"(cdr"
" s_1565)))"
" s_1569)))"
"(values"
" #%top374_1566"
" id375_1567))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_1551)))))"
"(()"
"(let-values(((s_1570)"
"(cdr s_1561)))"
"(let-values(((s_1571)"
"(if(syntax?$1"
" s_1570)"
"(syntax-e$1"
" s_1570)"
" s_1570)))"
"(values)))))"
"(values #%top372_1562 id373_1563))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1551))))))"
"(values #%variable-reference369_1556 #%top370_1557 id371_1558))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_1551)))))"
"(values #t #%variable-reference366_1552 #%top367_1553 id368_1554)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_1508 #%variable-reference376_1509)"
"(let-values(((s_1572) disarmed-s_1478))"
"(if(if(not"
"(let-values(((or-part_1573) ok?_1479))"
"(if or-part_1573 or-part_1573 ok?_1492)))"
" #t"
" #f)"
"(let-values(((orig-s_1574) s_1572))"
"(let-values(((#%variable-reference376_1575)"
"(let-values(((s_1576)"
"(if(syntax?$1 s_1572)(syntax-e$1 s_1572) s_1572)))"
"(if(pair? s_1576)"
"(let-values(((#%variable-reference377_1577)"
"(let-values(((s_1578)(car s_1576))) s_1578))"
"(()"
"(let-values(((s_1579)(cdr s_1576)))"
"(let-values(((s_1580)"
"(if(syntax?$1 s_1579)"
"(syntax-e$1 s_1579)"
" s_1579)))"
"(if(null? s_1580)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_1574))))))"
"(values #%variable-reference377_1577))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_1574)))))"
"(values #t #%variable-reference376_1575)))"
"(values #f #f)))))"
"(begin"
"(if(let-values(((or-part_1581) ok?_1479))(if or-part_1581 or-part_1581 ok?_1492))"
"(let-values()"
"(let-values(((var-id_1582)(if ok?_1479 id362_1481 id368_1495)))"
"(let-values(((binding_1583)"
"(let-values(((...nder/expand/expr.rkt:551:21_1584) resolve+shift15.1)"
"((var-id378_1585) var-id_1582)"
"((temp379_1586)(expand-context-phase ctx_1477))"
"((temp380_1587) 'ambiguous))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1"
" temp380_1587"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" var-id378_1585"
" temp379_1586)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:551:21_1584"
" keyword-procedure-extract"
" '(#:ambiguous-value)"
" 4)"
" '(#:ambiguous-value)"
"(list temp380_1587)"
" var-id378_1585"
" temp379_1586)))))"
"(begin"
"(if(eq? binding_1583 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_1582 ctx_1477))"
"(void))"
"(if binding_1583"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                  \"unbound identifier\""
" s_1476"
" var-id_1582"
" null"
"(syntax-debug-info-string var-id_1582 ctx_1477))))))))"
"(void))"
" s_1476)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%expression"
"(lambda(s_1588 ctx_1589)"
"(let-values((()"
"(begin"
"(let-values(((obs_1605)(expand-context-observer ctx_1589)))"
"(if obs_1605"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1605 'prim-#%expression))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1590)(syntax-disarm$1 s_1588)))"
"(let-values(((ok?_1591 #%expression381_1592 e382_1593)"
"(let-values(((s_1606) disarmed-s_1590))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1607) s_1606))"
"(let-values(((#%expression381_1608 e382_1609)"
"(let-values(((s_1610)(if(syntax?$1 s_1606)(syntax-e$1 s_1606) s_1606)))"
"(if(pair? s_1610)"
"(let-values(((#%expression383_1611)"
"(let-values(((s_1613)(car s_1610))) s_1613))"
"((e384_1612)"
"(let-values(((s_1614)(cdr s_1610)))"
"(let-values(((s_1615)"
"(if(syntax?$1 s_1614)"
"(syntax-e$1 s_1614)"
" s_1614)))"
"(if(pair? s_1615)"
"(let-values(((e385_1616)"
"(let-values(((s_1617)(car s_1615)))"
" s_1617))"
"(()"
"(let-values(((s_1618)(cdr s_1615)))"
"(let-values(((s_1619)"
"(if(syntax?$1"
" s_1618)"
"(syntax-e$1 s_1618)"
" s_1618)))"
"(if(null? s_1619)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1607))))))"
"(values e385_1616))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1607))))))"
"(values #%expression383_1611 e384_1612))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1607)))))"
"(values #t #%expression381_1608 e382_1609)))"
"(values #f #f #f)))))"
"(let-values(((exp-e_1604)"
"(let-values(((temp386_1620) e382_1593)"
"((temp387_1621)"
"(let-values(((...nder/expand/expr.rkt:566:32_1622) as-tail-context14.1)"
"((temp388_1623)(as-expression-context ctx_1589))"
"((ctx389_1624) ctx_1589))"
"(if(variable-reference-constant?(#%variable-reference as-tail-context14.1))"
"(as-tail-context12.1 ctx389_1624 temp388_1623)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...nder/expand/expr.rkt:566:32_1622"
" keyword-procedure-extract"
" '(#:wrt)"
" 3)"
" '(#:wrt)"
"(list ctx389_1624)"
" temp388_1623)))))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp386_1620 temp387_1621)"
"(expand7.1 temp386_1620 temp387_1621)))))"
"(let-values(((tmp_1625)"
"(if(not(expand-context-preserve-#%expression-and-do-not-add-#%top? ctx_1589))"
"(expand-context-context ctx_1589)"
" #f)))"
"(if(equal? tmp_1625 'expression)"
"(let-values()"
"(let-values(((result-s_1626)(syntax-track-origin$1 exp-e_1604 s_1588)))"
"(begin"
"(let-values(((obs_1627)(expand-context-observer ctx_1589)))"
"(if obs_1627"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_1627 'tag result-s_1626))(void)))"
"(void)))"
" result-s_1626)))"
"(let-values()"
"(let-values(((s390_1628) s_1588)"
"((disarmed-s391_1629) disarmed-s_1590)"
"((temp392_1630)(list #%expression381_1592 exp-e_1604)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s390_1628 disarmed-s391_1629 temp392_1630)"
"(rebuild101.1 s390_1628 disarmed-s391_1629 temp392_1630)))))))))))))"
" print-values)"
"(call-with-values"
"  (lambda () (add-core-form! 'unquote (lambda (s_1631 ctx_1632) (raise-syntax-error$1 #f \"not in quasiquote\" s_1631))))"
" print-values)"
"(call-with-values"
"(lambda()"
"    (add-core-form! 'unquote-splicing (lambda (s_1633 ctx_1634) (raise-syntax-error$1 #f \"not in quasiquote\" s_1633))))"
" print-values)"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_1 id_2 at-phase_3 ns_4)"
"(if(not at-phase_3)"
"(let-values()"
"(let-values(((m_5)(namespace->module ns_4(1/module-path-index-resolve(module-binding-nominal-module b_1)))))"
"(let-values(((b/p_6)"
"(hash-ref"
"(hash-ref(module-provides m_5)(module-binding-nominal-phase b_1) '#hasheq())"
"(module-binding-nominal-sym b_1)"
" #f)))"
"(provided-as-transformer? b/p_6))))"
"(let-values()"
"(let-values(((val_7 insp_8)"
"(let-values(((b1_9) b_1)"
"((empty-env2_10) empty-env)"
"((null3_11) null)"
"((ns4_12) ns_4)"
"((at-phase5_13) at-phase_3)"
"((id6_14) id_2))"
"(if(variable-reference-constant?(#%variable-reference binding-lookup48.1))"
"(binding-lookup46.1 #f #f #f #f b1_9 empty-env2_10 null3_11 ns4_12 at-phase5_13 id6_14)"
"(binding-lookup48.1 b1_9 empty-env2_10 null3_11 ns4_12 at-phase5_13 id6_14)))))"
"(not(variable? val_7)))))))"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_1 orig-s_2 rp_3 self_4 phase_5 ctx_6 expand_7 rebuild_8)"
"(let-values(((ns_9)(expand-context-namespace ctx_6)))"
"((letrec-values(((loop_10)"
"(lambda(specs_11 at-phase_12 protected?_13 layer_14)"
"(apply"
" append"
"(alt-reverse"
"(let-values(((lst_15) specs_11))"
"(begin"
"(if(list? lst_15)(void)(let-values()(in-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(fold-var_17 lst_18)"
"(if(pair? lst_18)"
"(let-values(((spec_19)(unsafe-car lst_18)))"
"(if #t"
"(let-values(((fold-var_20)"
"(let-values(((fold-var_21) fold-var_17))"
"(let-values(((fold-var_22)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((disarmed-spec_23)"
"(syntax-disarm$1"
" spec_19)))"
"(let-values(((fm_24)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_23))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_23)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_23)))"
" #f)"
" #f)))"
"(let-values(((check-nested_25)"
"(lambda(want-layer_26)"
"(if(member"
" want-layer_26"
"(member"
" layer_14"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                       \"nested `~a' not allowed\""
" fm_24)"
" orig-s_2"
" spec_19))))))"
"(let-values(((tmp_27)"
" fm_24))"
"(let-values(((index_28)"
"(if(symbol?"
" tmp_27)"
"(hash-ref"
" '#hasheq((rename ."
" 5)"
"(all-from-except"
" ."
" 8)"
"(for-meta"
" ."
" 1)"
"(all-defined-except"
" ."
" 10)"
"(for-syntax"
" ."
" 2)"
"(all-from"
" ."
" 7)"
"(prefix-all-defined"
" ."
" 11)"
"(protect"
" ."
" 4)"
"(prefix-all-defined-except"
" ."
" 12)"
"(struct"
" ."
" 6)"
"(all-defined"
" ."
" 9)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3))"
" tmp_27"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_28"
" 6)"
"(if(unsafe-fx<"
" index_28"
" 2)"
"(if(unsafe-fx<"
" index_28"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_19)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_19"
" orig-s_2"
"(syntax-e$1"
" spec_19)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                    \"bad syntax\""
" orig-s_2"
" spec_19))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'raw)"
"(values))))"
"(let-values(((ok?_29"
" for-meta1_30"
" phase-level2_31"
" spec3_32)"
"(let-values(((s_46)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_47)"
" s_46))"
"(let-values(((for-meta1_48"
" phase-level2_49"
" spec3_50)"
"(let-values(((s_51)"
"(if(syntax?$1"
" s_46)"
"(syntax-e$1"
" s_46)"
" s_46)))"
"(if(pair?"
" s_51)"
"(let-values(((for-meta4_52)"
"(let-values(((s_55)"
"(car"
" s_51)))"
" s_55))"
"((phase-level5_53"
" spec6_54)"
"(let-values(((s_56)"
"(cdr"
" s_51)))"
"(let-values(((s_57)"
"(if(syntax?$1"
" s_56)"
"(syntax-e$1"
" s_56)"
" s_56)))"
"(if(pair?"
" s_57)"
"(let-values(((phase-level7_58)"
"(let-values(((s_60)"
"(car"
" s_57)))"
" s_60))"
"((spec8_59)"
"(let-values(((s_61)"
"(cdr"
" s_57)))"
"(let-values(((s_62)"
"(if(syntax?$1"
" s_61)"
"(syntax-e$1"
" s_61)"
" s_61)))"
"(let-values(((flat-s_63)"
"(to-syntax-list.1$1"
" s_62)))"
"(if(not"
" flat-s_63)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                    \"bad syntax\""
" orig-s_47))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                      \"bad syntax\""
" orig-s_47))"
"(let-values()"
"(let-values(((spec_64)"
"(let-values(((lst_65)"
" flat-s_63))"
"(begin"
"(if(list?"
" lst_65)"
"(void)"
"(let-values()"
"(in-list"
" lst_65)))"
"((letrec-values(((for-loop_66)"
"(lambda(spec_67"
" lst_68)"
"(if(pair?"
" lst_68)"
"(let-values(((s_69)"
"(unsafe-car"
" lst_68)))"
"(if #t"
"(let-values(((spec_70)"
"(let-values(((spec_71)"
" spec_67))"
"(let-values(((spec_72)"
"(let-values()"
"(let-values(((spec9_73)"
"(let-values()"
" s_69)))"
"(cons"
" spec9_73"
" spec_71)))))"
"(values"
" spec_72)))))"
"(if #t"
"(for-loop_66"
" spec_70"
"(unsafe-cdr"
" lst_68))"
" spec_70))"
" spec_67))"
" spec_67))))"
" for-loop_66)"
" null"
" lst_65)))))"
"(alt-reverse"
" spec_64))))))))))"
"(values"
" phase-level7_58"
" spec8_59))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_47))))))"
"(values"
" for-meta4_52"
" phase-level5_53"
" spec6_54))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                        \"bad syntax\""
" orig-s_47)))))"
"(values"
" #t"
" for-meta1_48"
" phase-level2_49"
" spec3_50)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((p_45)"
"(syntax-e$1"
" phase-level2_31)))"
"(begin"
"(if(phase?"
" p_45)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                            \"bad `for-meta' phase\""
" orig-s_2"
" spec_19)))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
" for-meta1_30"
" phase-level2_31"
"(loop_10"
" spec3_32"
"(phase+"
" p_45"
" at-phase_12)"
" protected?_13"
" 'phaseless))))))))))"
"(if(unsafe-fx<"
" index_28"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'raw)"
"(values))))"
"(let-values(((ok?_74"
" for-syntax10_75"
" spec11_76)"
"(let-values(((s_87)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_88)"
" s_87))"
"(let-values(((for-syntax10_89"
" spec11_90)"
"(let-values(((s_91)"
"(if(syntax?$1"
" s_87)"
"(syntax-e$1"
" s_87)"
" s_87)))"
"(if(pair?"
" s_91)"
"(let-values(((for-syntax12_92)"
"(let-values(((s_94)"
"(car"
" s_91)))"
" s_94))"
"((spec13_93)"
"(let-values(((s_95)"
"(cdr"
" s_91)))"
"(let-values(((s_96)"
"(if(syntax?$1"
" s_95)"
"(syntax-e$1"
" s_95)"
" s_95)))"
"(let-values(((flat-s_97)"
"(to-syntax-list.1$1"
" s_96)))"
"(if(not"
" flat-s_97)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_88))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                  \"bad syntax\""
" orig-s_88))"
"(let-values()"
"(let-values(((spec_98)"
"(let-values(((lst_99)"
" flat-s_97))"
"(begin"
"(if(list?"
" lst_99)"
"(void)"
"(let-values()"
"(in-list"
" lst_99)))"
"((letrec-values(((for-loop_100)"
"(lambda(spec_101"
" lst_102)"
"(if(pair?"
" lst_102)"
"(let-values(((s_103)"
"(unsafe-car"
" lst_102)))"
"(if #t"
"(let-values(((spec_104)"
"(let-values(((spec_105)"
" spec_101))"
"(let-values(((spec_106)"
"(let-values()"
"(let-values(((spec14_107)"
"(let-values()"
" s_103)))"
"(cons"
" spec14_107"
" spec_105)))))"
"(values"
" spec_106)))))"
"(if #t"
"(for-loop_100"
" spec_104"
"(unsafe-cdr"
" lst_102))"
" spec_104))"
" spec_101))"
" spec_101))))"
" for-loop_100)"
" null"
" lst_99)))))"
"(alt-reverse"
" spec_98))))))))))"
"(values"
" for-syntax12_92"
" spec13_93))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                        \"bad syntax\""
" orig-s_88)))))"
"(values"
" #t"
" for-syntax10_89"
" spec11_90)))"
"(values"
" #f"
" #f"
" #f)))))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
" for-syntax10_75"
"(loop_10"
" spec11_76"
"(phase+"
" 1"
" at-phase_12)"
" protected?_13"
" 'phaseless)))))))"
"(if(unsafe-fx<"
" index_28"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'raw)"
"(values))))"
"(let-values(((ok?_108"
" for-label15_109"
" spec16_110)"
"(let-values(((s_121)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_122)"
" s_121))"
"(let-values(((for-label15_123"
" spec16_124)"
"(let-values(((s_125)"
"(if(syntax?$1"
" s_121)"
"(syntax-e$1"
" s_121)"
" s_121)))"
"(if(pair?"
" s_125)"
"(let-values(((for-label17_126)"
"(let-values(((s_128)"
"(car"
" s_125)))"
" s_128))"
"((spec18_127)"
"(let-values(((s_129)"
"(cdr"
" s_125)))"
"(let-values(((s_130)"
"(if(syntax?$1"
" s_129)"
"(syntax-e$1"
" s_129)"
" s_129)))"
"(let-values(((flat-s_131)"
"(to-syntax-list.1$1"
" s_130)))"
"(if(not"
" flat-s_131)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                  \"bad syntax\""
" orig-s_122))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                    \"bad syntax\""
" orig-s_122))"
"(let-values()"
"(let-values(((spec_132)"
"(let-values(((lst_133)"
" flat-s_131))"
"(begin"
"(if(list?"
" lst_133)"
"(void)"
"(let-values()"
"(in-list"
" lst_133)))"
"((letrec-values(((for-loop_134)"
"(lambda(spec_135"
" lst_136)"
"(if(pair?"
" lst_136)"
"(let-values(((s_137)"
"(unsafe-car"
" lst_136)))"
"(if #t"
"(let-values(((spec_138)"
"(let-values(((spec_139)"
" spec_135))"
"(let-values(((spec_140)"
"(let-values()"
"(let-values(((spec19_141)"
"(let-values()"
" s_137)))"
"(cons"
" spec19_141"
" spec_139)))))"
"(values"
" spec_140)))))"
"(if #t"
"(for-loop_134"
" spec_138"
"(unsafe-cdr"
" lst_136))"
" spec_138))"
" spec_135))"
" spec_135))))"
" for-loop_134)"
" null"
" lst_133)))))"
"(alt-reverse"
" spec_132))))))))))"
"(values"
" for-label17_126"
" spec18_127))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_122)))))"
"(values"
" #t"
" for-label15_123"
" spec16_124)))"
"(values"
" #f"
" #f"
" #f)))))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
" for-label15_109"
"(loop_10"
" spec16_110"
" #f"
" protected?_13"
" 'phaseless)))))))"
"(if(unsafe-fx<"
" index_28"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_13"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                          \"nested `protect' not allowed\""
" orig-s_2"
" spec_19))"
"(void))"
"(values))))"
"(let-values(((ok?_142"
" protect20_143"
" p-spec21_144)"
"(let-values(((s_155)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_156)"
" s_155))"
"(let-values(((protect20_157"
" p-spec21_158)"
"(let-values(((s_159)"
"(if(syntax?$1"
" s_155)"
"(syntax-e$1"
" s_155)"
" s_155)))"
"(if(pair?"
" s_159)"
"(let-values(((protect22_160)"
"(let-values(((s_162)"
"(car"
" s_159)))"
" s_162))"
"((p-spec23_161)"
"(let-values(((s_163)"
"(cdr"
" s_159)))"
"(let-values(((s_164)"
"(if(syntax?$1"
" s_163)"
"(syntax-e$1"
" s_163)"
" s_163)))"
"(let-values(((flat-s_165)"
"(to-syntax-list.1$1"
" s_164)))"
"(if(not"
" flat-s_165)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                      \"bad syntax\""
" orig-s_156))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                        \"bad syntax\""
" orig-s_156))"
"(let-values()"
"(let-values(((p-spec_166)"
"(let-values(((lst_167)"
" flat-s_165))"
"(begin"
"(if(list?"
" lst_167)"
"(void)"
"(let-values()"
"(in-list"
" lst_167)))"
"((letrec-values(((for-loop_168)"
"(lambda(p-spec_169"
" lst_170)"
"(if(pair?"
" lst_170)"
"(let-values(((s_171)"
"(unsafe-car"
" lst_170)))"
"(if #t"
"(let-values(((p-spec_172)"
"(let-values(((p-spec_173)"
" p-spec_169))"
"(let-values(((p-spec_174)"
"(let-values()"
"(let-values(((p-spec24_175)"
"(let-values()"
" s_171)))"
"(cons"
" p-spec24_175"
" p-spec_173)))))"
"(values"
" p-spec_174)))))"
"(if #t"
"(for-loop_168"
" p-spec_172"
"(unsafe-cdr"
" lst_170))"
" p-spec_172))"
" p-spec_169))"
" p-spec_169))))"
" for-loop_168)"
" null"
" lst_167)))))"
"(alt-reverse"
" p-spec_166))))))))))"
"(values"
" protect22_160"
" p-spec23_161))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                              \"bad syntax\""
" orig-s_156)))))"
"(values"
" #t"
" protect20_157"
" p-spec21_158)))"
"(values"
" #f"
" #f"
" #f)))))"
"(list"
"(rebuild_8"
" spec_19"
" spec_19"
"(list*"
" protect20_143"
"(loop_10"
" p-spec21_144"
" at-phase_12"
" #t"
" layer_14))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_176"
" rename25_177"
" id:from26_178"
" id:to27_179)"
"(let-values(((s_192)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_193)"
" s_192))"
"(let-values(((rename25_194"
" id:from26_195"
" id:to27_196)"
"(let-values(((s_197)"
"(if(syntax?$1"
" s_192)"
"(syntax-e$1"
" s_192)"
" s_192)))"
"(if(pair?"
" s_197)"
"(let-values(((rename28_198)"
"(let-values(((s_201)"
"(car"
" s_197)))"
" s_201))"
"((id:from29_199"
" id:to30_200)"
"(let-values(((s_202)"
"(cdr"
" s_197)))"
"(let-values(((s_203)"
"(if(syntax?$1"
" s_202)"
"(syntax-e$1"
" s_202)"
" s_202)))"
"(if(pair?"
" s_203)"
"(let-values(((id:from31_204)"
"(let-values(((s_206)"
"(car"
" s_203)))"
"(if(let-values(((or-part_207)"
"(if(syntax?$1"
" s_206)"
"(symbol?"
"(syntax-e$1"
" s_206))"
" #f)))"
"(if or-part_207"
" or-part_207"
"(symbol?"
" s_206)))"
" s_206"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"not an identifier\""
" orig-s_193"
" s_206))))"
"((id:to32_205)"
"(let-values(((s_208)"
"(cdr"
" s_203)))"
"(let-values(((s_209)"
"(if(syntax?$1"
" s_208)"
"(syntax-e$1"
" s_208)"
" s_208)))"
"(if(pair?"
" s_209)"
"(let-values(((id:to33_210)"
"(let-values(((s_211)"
"(car"
" s_209)))"
"(if(let-values(((or-part_212)"
"(if(syntax?$1"
" s_211)"
"(symbol?"
"(syntax-e$1"
" s_211))"
" #f)))"
"(if or-part_212"
" or-part_212"
"(symbol?"
" s_211)))"
" s_211"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                      \"not an identifier\""
" orig-s_193"
" s_211))))"
"(()"
"(let-values(((s_213)"
"(cdr"
" s_209)))"
"(let-values(((s_214)"
"(if(syntax?$1"
" s_213)"
"(syntax-e$1"
" s_213)"
" s_213)))"
"(if(null?"
" s_214)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                        \"bad syntax\""
" orig-s_193))))))"
"(values"
" id:to33_210))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                    \"bad syntax\""
" orig-s_193))))))"
"(values"
" id:from31_204"
" id:to32_205))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_193))))))"
"(values"
" rename28_198"
" id:from29_199"
" id:to30_200))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                            \"bad syntax\""
" orig-s_193)))))"
"(values"
" #t"
" rename25_194"
" id:from26_195"
" id:to27_196)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-identifier!"
" id:from26_178"
" orig-s_2"
"(syntax-e$1"
" id:to27_179)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))))))"
"(if(unsafe-fx<"
" index_28"
" 9)"
"(if(unsafe-fx<"
" index_28"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_215"
" struct34_216"
" id:struct35_217"
" id:field36_218)"
"(let-values(((s_231)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_232)"
" s_231))"
"(let-values(((struct34_233"
" id:struct35_234"
" id:field36_235)"
"(let-values(((s_236)"
"(if(syntax?$1"
" s_231)"
"(syntax-e$1"
" s_231)"
" s_231)))"
"(if(pair?"
" s_236)"
"(let-values(((struct37_237)"
"(let-values(((s_240)"
"(car"
" s_236)))"
" s_240))"
"((id:struct38_238"
" id:field39_239)"
"(let-values(((s_241)"
"(cdr"
" s_236)))"
"(let-values(((s_242)"
"(if(syntax?$1"
" s_241)"
"(syntax-e$1"
" s_241)"
" s_241)))"
"(if(pair?"
" s_242)"
"(let-values(((id:struct40_243)"
"(let-values(((s_245)"
"(car"
" s_242)))"
"(if(let-values(((or-part_246)"
"(if(syntax?$1"
" s_245)"
"(symbol?"
"(syntax-e$1"
" s_245))"
" #f)))"
"(if or-part_246"
" or-part_246"
"(symbol?"
" s_245)))"
" s_245"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"not an identifier\""
" orig-s_232"
" s_245))))"
"((id:field41_244)"
"(let-values(((s_247)"
"(cdr"
" s_242)))"
"(let-values(((s_248)"
"(if(syntax?$1"
" s_247)"
"(syntax-e$1"
" s_247)"
" s_247)))"
"(if(pair?"
" s_248)"
"(let-values(((id:field42_249)"
"(let-values(((s_250)"
"(car"
" s_248)))"
"(let-values(((s_251)"
"(if(syntax?$1"
" s_250)"
"(syntax-e$1"
" s_250)"
" s_250)))"
"(let-values(((flat-s_252)"
"(to-syntax-list.1$1"
" s_251)))"
"(if(not"
" flat-s_252)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                        \"bad syntax\""
" orig-s_232))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                          \"bad syntax\""
" orig-s_232))"
"(let-values()"
"(let-values(((id:field_253)"
"(let-values(((lst_254)"
" flat-s_252))"
"(begin"
"(if(list?"
" lst_254)"
"(void)"
"(let-values()"
"(in-list"
" lst_254)))"
"((letrec-values(((for-loop_255)"
"(lambda(id:field_256"
" lst_257)"
"(if(pair?"
" lst_257)"
"(let-values(((s_258)"
"(unsafe-car"
" lst_257)))"
"(if #t"
"(let-values(((id:field_259)"
"(let-values(((id:field_260)"
" id:field_256))"
"(let-values(((id:field_261)"
"(let-values()"
"(let-values(((id:field43_262)"
"(let-values()"
"(if(let-values(((or-part_263)"
"(if(syntax?$1"
" s_258)"
"(symbol?"
"(syntax-e$1"
" s_258))"
" #f)))"
"(if or-part_263"
" or-part_263"
"(symbol?"
" s_258)))"
" s_258"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                        \"not an identifier\""
" orig-s_232"
" s_258)))))"
"(cons"
" id:field43_262"
" id:field_260)))))"
"(values"
" id:field_261)))))"
"(if #t"
"(for-loop_255"
" id:field_259"
"(unsafe-cdr"
" lst_257))"
" id:field_259))"
" id:field_256))"
" id:field_256))))"
" for-loop_255)"
" null"
" lst_254)))))"
"(alt-reverse"
" id:field_253)))))))))"
"(()"
"(let-values(((s_264)"
"(cdr"
" s_248)))"
"(let-values(((s_265)"
"(if(syntax?$1"
" s_264)"
"(syntax-e$1"
" s_264)"
" s_264)))"
"(if(null?"
" s_265)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                    \"bad syntax\""
" orig-s_232))))))"
"(values"
" id:field42_249))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_232))))))"
"(values"
" id:struct40_243"
" id:field41_244))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_232))))))"
"(values"
" struct37_237"
" id:struct38_238"
" id:field39_239))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                        \"bad syntax\""
" orig-s_232)))))"
"(values"
" #t"
" struct34_233"
" id:struct35_234"
" id:field36_235)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-struct!"
" id:struct35_217"
" orig-s_2"
" id:field36_218"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(if(unsafe-fx<"
" index_28"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_266"
" all-from44_267"
" mod-path45_268)"
"(let-values(((s_279)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_280)"
" s_279))"
"(let-values(((all-from44_281"
" mod-path45_282)"
"(let-values(((s_283)"
"(if(syntax?$1"
" s_279)"
"(syntax-e$1"
" s_279)"
" s_279)))"
"(if(pair?"
" s_283)"
"(let-values(((all-from46_284)"
"(let-values(((s_286)"
"(car"
" s_283)))"
" s_286))"
"((mod-path47_285)"
"(let-values(((s_287)"
"(cdr"
" s_283)))"
"(let-values(((s_288)"
"(if(syntax?$1"
" s_287)"
"(syntax-e$1"
" s_287)"
" s_287)))"
"(if(pair?"
" s_288)"
"(let-values(((mod-path48_289)"
"(let-values(((s_290)"
"(car"
" s_288)))"
" s_290))"
"(()"
"(let-values(((s_291)"
"(cdr"
" s_288)))"
"(let-values(((s_292)"
"(if(syntax?$1"
" s_291)"
"(syntax-e$1"
" s_291)"
" s_291)))"
"(if(null?"
" s_292)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"bad syntax\""
" orig-s_280))))))"
"(values"
" mod-path48_289))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_280))))))"
"(values"
" all-from46_284"
" mod-path47_285))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_280)))))"
"(values"
" #t"
" all-from44_281"
" mod-path45_282)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from"
" mod-path45_268"
" orig-s_2"
" self_4"
" null"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_293"
" all-from-except49_294"
" mod-path50_295"
" id51_296)"
"(let-values(((s_309)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_310)"
" s_309))"
"(let-values(((all-from-except49_311"
" mod-path50_312"
" id51_313)"
"(let-values(((s_314)"
"(if(syntax?$1"
" s_309)"
"(syntax-e$1"
" s_309)"
" s_309)))"
"(if(pair?"
" s_314)"
"(let-values(((all-from-except52_315)"
"(let-values(((s_318)"
"(car"
" s_314)))"
" s_318))"
"((mod-path53_316"
" id54_317)"
"(let-values(((s_319)"
"(cdr"
" s_314)))"
"(let-values(((s_320)"
"(if(syntax?$1"
" s_319)"
"(syntax-e$1"
" s_319)"
" s_319)))"
"(if(pair?"
" s_320)"
"(let-values(((mod-path55_321)"
"(let-values(((s_323)"
"(car"
" s_320)))"
" s_323))"
"((id56_322)"
"(let-values(((s_324)"
"(cdr"
" s_320)))"
"(let-values(((s_325)"
"(if(syntax?$1"
" s_324)"
"(syntax-e$1"
" s_324)"
" s_324)))"
"(let-values(((flat-s_326)"
"(to-syntax-list.1$1"
" s_325)))"
"(if(not"
" flat-s_326)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                      \"bad syntax\""
" orig-s_310))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                        \"bad syntax\""
" orig-s_310))"
"(let-values()"
"(let-values(((id_327)"
"(let-values(((lst_328)"
" flat-s_326))"
"(begin"
"(if(list?"
" lst_328)"
"(void)"
"(let-values()"
"(in-list"
" lst_328)))"
"((letrec-values(((for-loop_329)"
"(lambda(id_330"
" lst_331)"
"(if(pair?"
" lst_331)"
"(let-values(((s_332)"
"(unsafe-car"
" lst_331)))"
"(if #t"
"(let-values(((id_333)"
"(let-values(((id_334)"
" id_330))"
"(let-values(((id_335)"
"(let-values()"
"(let-values(((id57_336)"
"(let-values()"
"(if(let-values(((or-part_337)"
"(if(syntax?$1"
" s_332)"
"(symbol?"
"(syntax-e$1"
" s_332))"
" #f)))"
"(if or-part_337"
" or-part_337"
"(symbol?"
" s_332)))"
" s_332"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                      \"not an identifier\""
" orig-s_310"
" s_332)))))"
"(cons"
" id57_336"
" id_334)))))"
"(values"
" id_335)))))"
"(if #t"
"(for-loop_329"
" id_333"
"(unsafe-cdr"
" lst_331))"
" id_333))"
" id_330))"
" id_330))))"
" for-loop_329)"
" null"
" lst_328)))))"
"(alt-reverse"
" id_327))))))))))"
"(values"
" mod-path55_321"
" id56_322))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_310))))))"
"(values"
" all-from-except52_315"
" mod-path53_316"
" id54_317))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_310)))))"
"(values"
" #t"
" all-from-except49_311"
" mod-path50_312"
" id51_313)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from"
" mod-path50_295"
" orig-s_2"
" self_4"
" id51_296"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))))"
"(if(unsafe-fx<"
" index_28"
" 11)"
"(if(unsafe-fx<"
" index_28"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_338"
" all-defined58_339)"
"(let-values(((s_348)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_349)"
" s_348))"
"(let-values(((all-defined58_350)"
"(let-values(((s_351)"
"(if(syntax?$1"
" s_348)"
"(syntax-e$1"
" s_348)"
" s_348)))"
"(if(pair?"
" s_351)"
"(let-values(((all-defined59_352)"
"(let-values(((s_353)"
"(car"
" s_351)))"
" s_353))"
"(()"
"(let-values(((s_354)"
"(cdr"
" s_351)))"
"(let-values(((s_355)"
"(if(syntax?$1"
" s_354)"
"(syntax-e$1"
" s_354)"
" s_354)))"
"(if(null?"
" s_355)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_349))))))"
"(values"
" all-defined59_352))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_349)))))"
"(values"
" #t"
" all-defined58_350)))"
"(values"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
" null"
" #f"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_356"
" all-defined-except60_357"
" id61_358)"
"(let-values(((s_369)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_370)"
" s_369))"
"(let-values(((all-defined-except60_371"
" id61_372)"
"(let-values(((s_373)"
"(if(syntax?$1"
" s_369)"
"(syntax-e$1"
" s_369)"
" s_369)))"
"(if(pair?"
" s_373)"
"(let-values(((all-defined-except62_374)"
"(let-values(((s_376)"
"(car"
" s_373)))"
" s_376))"
"((id63_375)"
"(let-values(((s_377)"
"(cdr"
" s_373)))"
"(let-values(((s_378)"
"(if(syntax?$1"
" s_377)"
"(syntax-e$1"
" s_377)"
" s_377)))"
"(let-values(((flat-s_379)"
"(to-syntax-list.1$1"
" s_378)))"
"(if(not"
" flat-s_379)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                  \"bad syntax\""
" orig-s_370))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                    \"bad syntax\""
" orig-s_370))"
"(let-values()"
"(let-values(((id_380)"
"(let-values(((lst_381)"
" flat-s_379))"
"(begin"
"(if(list?"
" lst_381)"
"(void)"
"(let-values()"
"(in-list"
" lst_381)))"
"((letrec-values(((for-loop_382)"
"(lambda(id_383"
" lst_384)"
"(if(pair?"
" lst_384)"
"(let-values(((s_385)"
"(unsafe-car"
" lst_384)))"
"(if #t"
"(let-values(((id_386)"
"(let-values(((id_387)"
" id_383))"
"(let-values(((id_388)"
"(let-values()"
"(let-values(((id64_389)"
"(let-values()"
"(if(let-values(((or-part_390)"
"(if(syntax?$1"
" s_385)"
"(symbol?"
"(syntax-e$1"
" s_385))"
" #f)))"
"(if or-part_390"
" or-part_390"
"(symbol?"
" s_385)))"
" s_385"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                  \"not an identifier\""
" orig-s_370"
" s_385)))))"
"(cons"
" id64_389"
" id_387)))))"
"(values"
" id_388)))))"
"(if #t"
"(for-loop_382"
" id_386"
"(unsafe-cdr"
" lst_384))"
" id_386))"
" id_383))"
" id_383))))"
" for-loop_382)"
" null"
" lst_381)))))"
"(alt-reverse"
" id_380))))))))))"
"(values"
" all-defined-except62_374"
" id63_375))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_370)))))"
"(values"
" #t"
" all-defined-except60_371"
" id61_372)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
" id61_358"
" #f"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19))))))"
"(if(unsafe-fx<"
" index_28"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_391"
" prefix-all-defined65_392"
" id:prefix66_393)"
"(let-values(((s_404)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_405)"
" s_404))"
"(let-values(((prefix-all-defined65_406"
" id:prefix66_407)"
"(let-values(((s_408)"
"(if(syntax?$1"
" s_404)"
"(syntax-e$1"
" s_404)"
" s_404)))"
"(if(pair?"
" s_408)"
"(let-values(((prefix-all-defined67_409)"
"(let-values(((s_411)"
"(car"
" s_408)))"
" s_411))"
"((id:prefix68_410)"
"(let-values(((s_412)"
"(cdr"
" s_408)))"
"(let-values(((s_413)"
"(if(syntax?$1"
" s_412)"
"(syntax-e$1"
" s_412)"
" s_412)))"
"(if(pair?"
" s_413)"
"(let-values(((id:prefix69_414)"
"(let-values(((s_415)"
"(car"
" s_413)))"
"(if(let-values(((or-part_416)"
"(if(syntax?$1"
" s_415)"
"(symbol?"
"(syntax-e$1"
" s_415))"
" #f)))"
"(if or-part_416"
" or-part_416"
"(symbol?"
" s_415)))"
" s_415"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"not an identifier\""
" orig-s_405"
" s_415))))"
"(()"
"(let-values(((s_417)"
"(cdr"
" s_413)))"
"(let-values(((s_418)"
"(if(syntax?$1"
" s_417)"
"(syntax-e$1"
" s_417)"
" s_417)))"
"(if(null?"
" s_418)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"bad syntax\""
" orig-s_405))))))"
"(values"
" id:prefix69_414))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_405))))))"
"(values"
" prefix-all-defined67_409"
" id:prefix68_410))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_405)))))"
"(values"
" #t"
" prefix-all-defined65_406"
" id:prefix66_407)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
" null"
"(syntax-e$1"
" id:prefix66_393)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(if(unsafe-fx<"
" index_28"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_25"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_419"
" prefix-all-defined-except70_420"
" id:prefix71_421"
" id72_422)"
"(let-values(((s_435)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_436)"
" s_435))"
"(let-values(((prefix-all-defined-except70_437"
" id:prefix71_438"
" id72_439)"
"(let-values(((s_440)"
"(if(syntax?$1"
" s_435)"
"(syntax-e$1"
" s_435)"
" s_435)))"
"(if(pair?"
" s_440)"
"(let-values(((prefix-all-defined-except73_441)"
"(let-values(((s_444)"
"(car"
" s_440)))"
" s_444))"
"((id:prefix74_442"
" id75_443)"
"(let-values(((s_445)"
"(cdr"
" s_440)))"
"(let-values(((s_446)"
"(if(syntax?$1"
" s_445)"
"(syntax-e$1"
" s_445)"
" s_445)))"
"(if(pair?"
" s_446)"
"(let-values(((id:prefix76_447)"
"(let-values(((s_449)"
"(car"
" s_446)))"
"(if(let-values(((or-part_450)"
"(if(syntax?$1"
" s_449)"
"(symbol?"
"(syntax-e$1"
" s_449))"
" #f)))"
"(if or-part_450"
" or-part_450"
"(symbol?"
" s_449)))"
" s_449"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"not an identifier\""
" orig-s_436"
" s_449))))"
"((id77_448)"
"(let-values(((s_451)"
"(cdr"
" s_446)))"
"(let-values(((s_452)"
"(if(syntax?$1"
" s_451)"
"(syntax-e$1"
" s_451)"
" s_451)))"
"(let-values(((flat-s_453)"
"(to-syntax-list.1$1"
" s_452)))"
"(if(not"
" flat-s_453)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                        \"bad syntax\""
" orig-s_436))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                          \"bad syntax\""
" orig-s_436))"
"(let-values()"
"(let-values(((id_454)"
"(let-values(((lst_455)"
" flat-s_453))"
"(begin"
"(if(list?"
" lst_455)"
"(void)"
"(let-values()"
"(in-list"
" lst_455)))"
"((letrec-values(((for-loop_456)"
"(lambda(id_457"
" lst_458)"
"(if(pair?"
" lst_458)"
"(let-values(((s_459)"
"(unsafe-car"
" lst_458)))"
"(if #t"
"(let-values(((id_460)"
"(let-values(((id_461)"
" id_457))"
"(let-values(((id_462)"
"(let-values()"
"(let-values(((id78_463)"
"(let-values()"
"(if(let-values(((or-part_464)"
"(if(syntax?$1"
" s_459)"
"(symbol?"
"(syntax-e$1"
" s_459))"
" #f)))"
"(if or-part_464"
" or-part_464"
"(symbol?"
" s_459)))"
" s_459"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                        \"not an identifier\""
" orig-s_436"
" s_459)))))"
"(cons"
" id78_463"
" id_461)))))"
"(values"
" id_462)))))"
"(if #t"
"(for-loop_456"
" id_460"
"(unsafe-cdr"
" lst_458))"
" id_460))"
" id_457))"
" id_457))))"
" for-loop_456)"
" null"
" lst_455)))))"
"(alt-reverse"
" id_454))))))))))"
"(values"
" id:prefix76_447"
" id77_448))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_436))))))"
"(values"
" prefix-all-defined-except73_441"
" id:prefix74_442"
" id75_443))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                            \"bad syntax\""
" orig-s_436)))))"
"(values"
" #t"
" prefix-all-defined-except70_437"
" id:prefix71_438"
" id72_439)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(begin"
"(parse-all-from-module"
" self_4"
" spec_19"
" orig-s_2"
" id72_422"
"(syntax-e$1"
" id:prefix71_421)"
" at-phase_12"
" ns_9"
" rp_3"
" protected?_13)"
"(list"
" spec_19)))))"
"(let-values()"
"(let-values(((ok?_465"
" expand79_466"
" id80_467"
" datum81_468)"
"(let-values(((s_508)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_509)"
" s_508))"
"(let-values(((expand79_510"
" id80_511"
" datum81_512)"
"(let-values(((s_513)"
"(if(syntax?$1"
" s_508)"
"(syntax-e$1"
" s_508)"
" s_508)))"
"(if(pair?"
" s_513)"
"(let-values(((expand82_514)"
"(let-values(((s_517)"
"(car"
" s_513)))"
" s_517))"
"((id83_515"
" datum84_516)"
"(let-values(((s_518)"
"(cdr"
" s_513)))"
"(let-values(((s_519)"
"(if(syntax?$1"
" s_518)"
"(syntax-e$1"
" s_518)"
" s_518)))"
"(if(pair?"
" s_519)"
"(let-values(((id85_520"
" datum86_521)"
"(let-values(((s_522)"
"(car"
" s_519)))"
"(let-values(((s_523)"
"(if(syntax?$1"
" s_522)"
"(syntax-e$1"
" s_522)"
" s_522)))"
"(if(pair?"
" s_523)"
"(let-values(((id87_524)"
"(let-values(((s_526)"
"(car"
" s_523)))"
"(if(let-values(((or-part_527)"
"(if(syntax?$1"
" s_526)"
"(symbol?"
"(syntax-e$1"
" s_526))"
" #f)))"
"(if or-part_527"
" or-part_527"
"(symbol?"
" s_526)))"
" s_526"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                    \"not an identifier\""
" orig-s_509"
" s_526))))"
"((datum88_525)"
"(let-values(((s_528)"
"(cdr"
" s_523)))"
" s_528)))"
"(values"
" id87_524"
" datum88_525))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"bad syntax\""
" orig-s_509)))))"
"(()"
"(let-values(((s_529)"
"(cdr"
" s_519)))"
"(let-values(((s_530)"
"(if(syntax?$1"
" s_529)"
"(syntax-e$1"
" s_529)"
" s_529)))"
"(if(null?"
" s_530)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"bad syntax\""
" orig-s_509))))))"
"(values"
" id85_520"
" datum86_521))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_509))))))"
"(values"
" expand82_514"
" id83_515"
" datum84_516))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                          \"bad syntax\""
" orig-s_509)))))"
"(values"
" #t"
" expand79_510"
" id80_511"
" datum81_512)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ok?_481"
" expand89_482"
" form90_483)"
"(let-values(((s_531)"
" disarmed-spec_23))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_532)"
" s_531))"
"(let-values(((expand89_533"
" form90_534)"
"(let-values(((s_535)"
"(if(syntax?$1"
" s_531)"
"(syntax-e$1"
" s_531)"
" s_531)))"
"(if(pair?"
" s_535)"
"(let-values(((expand91_536)"
"(let-values(((s_538)"
"(car"
" s_535)))"
" s_538))"
"((form92_537)"
"(let-values(((s_539)"
"(cdr"
" s_535)))"
"(let-values(((s_540)"
"(if(syntax?$1"
" s_539)"
"(syntax-e$1"
" s_539)"
" s_539)))"
"(if(pair?"
" s_540)"
"(let-values(((form93_541)"
"(let-values(((s_542)"
"(car"
" s_540)))"
" s_542))"
"(()"
"(let-values(((s_543)"
"(cdr"
" s_540)))"
"(let-values(((s_544)"
"(if(syntax?$1"
" s_543)"
"(syntax-e$1"
" s_543)"
" s_543)))"
"(if(null?"
" s_544)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                    \"bad syntax\""
" orig-s_532))))))"
"(values"
" form93_541))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_532))))))"
"(values"
" expand91_536"
" form92_537))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                            \"bad syntax\""
" orig-s_532)))))"
"(values"
" #t"
" expand89_533"
" form90_534)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((exp-spec_494)"
"(expand_7"
" form90_483"
"(let-values(((the-struct_545)"
" ctx_6))"
"(if(expand-context?"
" the-struct_545)"
"(let-values(((only-immediate?98_546)"
" #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_545)"
"(root-expand-context-post-expansion-scope"
" the-struct_545)"
"(root-expand-context-top-level-bind-scope"
" the-struct_545)"
"(root-expand-context-all-scopes-stx"
" the-struct_545)"
"(root-expand-context-use-site-scopes"
" the-struct_545)"
"(root-expand-context-defined-syms"
" the-struct_545)"
"(root-expand-context-frame-id"
" the-struct_545)"
"(root-expand-context-counter"
" the-struct_545)"
"(root-expand-context-lift-key"
" the-struct_545)"
"(expand-context-context"
" the-struct_545)"
"(expand-context-phase"
" the-struct_545)"
"(expand-context-namespace"
" the-struct_545)"
"(expand-context-env"
" the-struct_545)"
"(expand-context-post-expansion-scope-action"
" the-struct_545)"
"(expand-context-scopes"
" the-struct_545)"
"(expand-context-def-ctx-scopes"
" the-struct_545)"
"(expand-context-reference-records"
" the-struct_545)"
" only-immediate?98_546"
"(expand-context-just-once?"
" the-struct_545)"
"(expand-context-module-begin-k"
" the-struct_545)"
"(expand-context-need-eventually-defined"
" the-struct_545)"
"(expand-context-allow-unbound?"
" the-struct_545)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_545)"
"(expand-context-stops"
" the-struct_545)"
"(expand-context-current-introduction-scopes"
" the-struct_545)"
"(expand-context-declared-submodule-names"
" the-struct_545)"
"(expand-context-lifts"
" the-struct_545)"
"(expand-context-lift-envs"
" the-struct_545)"
"(expand-context-module-lifts"
" the-struct_545)"
"(expand-context-require-lifts"
" the-struct_545)"
"(expand-context-to-module-lifts"
" the-struct_545)"
"(expand-context-requires+provides"
" the-struct_545)"
"(expand-context-name"
" the-struct_545)"
"(expand-context-observer"
" the-struct_545)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                           \"expand-context?\""
" the-struct_545))))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_494))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_494)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_494"
" at-phase_12))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                              \"expansion was not a `begin' sequence\""
" orig-s_2"
" spec_19)))"
"(values))))"
"(let-values(((ok?_495"
" begin94_496"
" spec95_497)"
"(let-values(((s_547)"
" exp-spec_494))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_548)"
" s_547))"
"(let-values(((begin94_549"
" spec95_550)"
"(let-values(((s_551)"
"(if(syntax?$1"
" s_547)"
"(syntax-e$1"
" s_547)"
" s_547)))"
"(if(pair?"
" s_551)"
"(let-values(((begin96_552)"
"(let-values(((s_554)"
"(car"
" s_551)))"
" s_554))"
"((spec97_553)"
"(let-values(((s_555)"
"(cdr"
" s_551)))"
"(let-values(((s_556)"
"(if(syntax?$1"
" s_555)"
"(syntax-e$1"
" s_555)"
" s_555)))"
"(let-values(((flat-s_557)"
"(to-syntax-list.1$1"
" s_556)))"
"(if(not"
" flat-s_557)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"bad syntax\""
" orig-s_548))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"bad syntax\""
" orig-s_548))"
"(let-values()"
"(let-values(((spec_558)"
"(let-values(((lst_559)"
" flat-s_557))"
"(begin"
"(if(list?"
" lst_559)"
"(void)"
"(let-values()"
"(in-list"
" lst_559)))"
"((letrec-values(((for-loop_560)"
"(lambda(spec_561"
" lst_562)"
"(if(pair?"
" lst_562)"
"(let-values(((s_563)"
"(unsafe-car"
" lst_562)))"
"(if #t"
"(let-values(((spec_564)"
"(let-values(((spec_565)"
" spec_561))"
"(let-values(((spec_566)"
"(let-values()"
"(let-values(((spec99_567)"
"(let-values()"
" s_563)))"
"(cons"
" spec99_567"
" spec_565)))))"
"(values"
" spec_566)))))"
"(if #t"
"(for-loop_560"
" spec_564"
"(unsafe-cdr"
" lst_562))"
" spec_564))"
" spec_561))"
" spec_561))))"
" for-loop_560)"
" null"
" lst_559)))))"
"(alt-reverse"
" spec_558))))))))))"
"(values"
" begin96_552"
" spec97_553))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                  \"bad syntax\""
" orig-s_548)))))"
"(values"
" #t"
" begin94_549"
" spec95_550)))"
"(values"
" #f"
" #f"
" #f)))))"
"(loop_10"
" spec95_497"
" at-phase_12"
" protected?_13"
" layer_14))))))))))))))))))"
" fold-var_21))))"
"(values fold-var_22)))))"
"(if #t"
"(for-loop_16 fold-var_20(unsafe-cdr lst_18))"
" fold-var_20))"
" fold-var_17))"
" fold-var_17))))"
" for-loop_16)"
" null"
" lst_15))))))))"
" loop_10)"
" specs_1"
" phase_5"
" #f"
" 'raw))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_568 orig-s_569 sym_570 at-phase_571 ns_572 rp_573 protected?_574)"
"(let-values(((b_575)(resolve+shift/extra-inspector spec_568 at-phase_571 ns_572)))"
"(let-values((()"
"(begin"
"(if b_575"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                           \"provided identifier is not defined or required\""
" orig-s_569"
" spec_568)))"
"(values))))"
"(let-values(((as-transformer?_576)(binding-for-transformer? b_575 spec_568 at-phase_571 ns_572)))"
"(let-values(((immed-b_577)"
"(let-values(((...r/expand/provide.rkt:157:18_578) resolve+shift15.1)"
"((spec109_579) spec_568)"
"((at-phase110_580) at-phase_571)"
"((temp111_581) #t))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f temp111_581 #t #f #f spec109_579 at-phase110_580)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:157:18_578"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list temp111_581)"
" spec109_579"
" at-phase110_580)))))"
"(let-values(((...r/expand/provide.rkt:158:2_582) add-provide!69.1)"
"((rp100_583) rp_573)"
"((sym101_584) sym_570)"
"((at-phase102_585) at-phase_571)"
"((b103_586) b_575)"
"((immed-b104_587) immed-b_577)"
"((spec105_588) spec_568)"
"((orig-s106_589) orig-s_569)"
"((protected?107_590) protected?_574)"
"((as-transformer?108_591) as-transformer?_576))"
"(if(variable-reference-constant?(#%variable-reference add-provide!69.1))"
"(add-provide!67.1"
" protected?107_590"
" as-transformer?108_591"
" rp100_583"
" sym101_584"
" at-phase102_585"
" b103_586"
" immed-b104_587"
" spec105_588"
" orig-s106_589)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:158:2_582"
" keyword-procedure-extract"
" '(#:as-protected? #:as-transformer?)"
" 9)"
" '(#:as-protected? #:as-transformer?)"
"(list protected?107_590 as-transformer?108_591)"
" rp100_583"
" sym101_584"
" at-phase102_585"
" b103_586"
" immed-b104_587"
" spec105_588"
" orig-s106_589)))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_592 orig-s_593 fields_594 at-phase_595 ns_596 rp_597 protected?_598)"
"(let-values(((mk_599)"
"(lambda(fmt_601)"
"(let-values(((sym_602)(string->symbol(format fmt_601(syntax-e$1 id:struct_592)))))"
"(datum->syntax$2 id:struct_592 sym_602 id:struct_592)))))"
"(let-values(((mk2_600)"
"(lambda(fmt_603 field-id_604)"
"(let-values(((sym_605)"
"(string->symbol"
"(format fmt_603(syntax-e$1 id:struct_592)(syntax-e$1 field-id_604)))))"
"(datum->syntax$2 id:struct_592 sym_605 id:struct_592)))))"
"(begin"
"(let-values(((pos->vals_606 pos-next_607 init_608 pos-cont?_609 val-cont?_610 all-cont?_611)"
"                        (make-sequence '(fmt) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\"))))"
"(begin"
"(void)"
"((letrec-values(((for-loop_612)"
"(lambda(fold-var_613 pos_614)"
"(if(if pos-cont?_609(pos-cont?_609 pos_614) #t)"
"(let-values(((fmt_615)(pos->vals_606 pos_614)))"
"(if(if val-cont?_610(val-cont?_610 fmt_615) #t)"
"(let-values(((fold-var_616)"
"(let-values(((fold-var_617) fold-var_613))"
"(let-values(((fold-var_618)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_619)(mk_599 fmt_615)))"
"(parse-identifier!"
" id_619"
" orig-s_593"
"(syntax-e$1 id_619)"
" at-phase_595"
" ns_596"
" rp_597"
" protected?_598)))"
"(void)))))"
"(values fold-var_618)))))"
"(if(if all-cont?_611(all-cont?_611 pos_614 fmt_615) #t)"
"(for-loop_612 fold-var_616(pos-next_607 pos_614))"
" fold-var_616))"
" fold-var_613))"
" fold-var_613))))"
" for-loop_612)"
"(void)"
" init_608)))"
"(let-values(((lst_620) fields_594))"
"(begin"
"(if(list? lst_620)(void)(let-values()(in-list lst_620)))"
"((letrec-values(((for-loop_621)"
"(lambda(fold-var_622 lst_623)"
"(if(pair? lst_623)"
"(let-values(((field_624)(unsafe-car lst_623)))"
"(if #t"
"(let-values(((fold-var_625)"
"(let-values(((fold-var_626) fold-var_622))"
"(let-values(((fold-var_627)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_628)"
"                                                                                          (mk2_600 \"~a-~a\" field_624)))"
"(let-values(((set-id_629)"
"(mk2_600"
"                                                                                             \"set-~a-~a!\""
" field_624)))"
"(begin"
"(parse-identifier!"
" get-id_628"
" orig-s_593"
"(syntax-e$1 get-id_628)"
" at-phase_595"
" ns_596"
" rp_597"
" protected?_598)"
"(parse-identifier!"
" set-id_629"
" orig-s_593"
"(syntax-e$1 set-id_629)"
" at-phase_595"
" ns_596"
" rp_597"
" protected?_598)))))"
"(void)))))"
"(values fold-var_627)))))"
"(if #t(for-loop_621 fold-var_625(unsafe-cdr lst_623)) fold-var_625))"
" fold-var_622))"
" fold-var_622))))"
" for-loop_621)"
"(void)"
" lst_620))))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_630 orig-s_631 self_632 except-ids_633 at-phase_634 ns_635 rp_636 protected?_637)"
"(let-values(((mod-path_638)(syntax->datum$1 mod-path-stx_630)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_638)"
"(void)"
"(let-values()"
"                          (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_631 mod-path-stx_630)))"
"(values))))"
"(let-values(((mpi_639)(1/module-path-index-join mod-path_638 self_632)))"
"(parse-all-from-module mpi_639 #f orig-s_631 except-ids_633 #f at-phase_634 ns_635 rp_636 protected?_637))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_640 matching-stx_641 orig-s_642 except-ids_643 prefix-sym_644 at-phase_645 ns_646 rp_647 protected?_648)"
"(let-values(((requireds_649)(extract-module-requires rp_647 mpi_640 at-phase_645)))"
"(let-values(((phase-desc_650)"
"(lambda()"
"(if(zero-phase? at-phase_645)"
"                        (let-values () \"\")"
"(if(label-phase? at-phase_645)"
"                          (let-values () \" for-label\")"
"                          (let-values () (format \" for phase ~a\" at-phase_645)))))))"
"(let-values((()"
"(begin"
"(if requireds_649"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             (format \"cannot provide from a module without a matching require~a\" (phase-desc_650))"
" orig-s_642"
" matching-stx_641)))"
"(values))))"
"(let-values(((add-prefix_651)"
"(lambda(sym_653)"
"                          (if prefix-sym_644 (string->symbol (format \"~a~a\" prefix-sym_644 sym_653)) sym_653))))"
"(let-values(((found_652)(make-hasheq)))"
"(begin"
"(let-values(((lst_654) requireds_649))"
"(begin"
"(if(list? lst_654)(void)(let-values()(in-list lst_654)))"
"((letrec-values(((for-loop_655)"
"(lambda(fold-var_656 lst_657)"
"(if(pair? lst_657)"
"(let-values(((i_658)(unsafe-car lst_657)))"
"(if #t"
"(let-values(((fold-var_659)"
"(let-values(((fold-var_660) fold-var_656))"
"(let-values(((fold-var_661)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_662)"
"(required-id i_658)))"
"(let-values(((phase_663)"
"(required-phase"
" i_658)))"
"(if(let-values(((or-part_664)"
"(if matching-stx_641"
"(not"
"(free-identifier=?$1"
" id_662"
"(datum->syntax$2"
" matching-stx_641"
"(syntax-e$1"
" id_662))"
" phase_663"
" phase_663))"
" #f)))"
"(if or-part_664"
" or-part_664"
"(let-values(((lst_665)"
" except-ids_643))"
"(begin"
"(if(list? lst_665)"
"(void)"
"(let-values()"
"(in-list"
" lst_665)))"
"((letrec-values(((for-loop_666)"
"(lambda(result_667"
" lst_668)"
"(if(pair?"
" lst_668)"
"(let-values(((except-id_669)"
"(unsafe-car"
" lst_668)))"
"(if #t"
"(let-values(((result_670)"
"(let-values(((result_671)"
" result_667))"
"(let-values(((result_672)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_662"
" except-id_669"
" phase_663"
" phase_663)"
"(hash-set!"
" found_652"
" except-id_669"
" #t)"
" #f)))))"
"(values"
" result_672)))))"
"(if(if #t"
"(not"
"((lambda x_673"
" result_670)"
" except-id_669))"
" #f)"
"(for-loop_666"
" result_670"
"(unsafe-cdr"
" lst_668))"
" result_670))"
" result_667))"
" result_667))))"
" for-loop_666)"
" #f"
" lst_665)))))"
"(void)"
"(let-values()"
"(let-values(((b_674)"
"(resolve+shift/extra-inspector"
" id_662"
" phase_663"
" ns_646)))"
"(let-values(((immed-b_675)"
"(let-values(((...r/expand/provide.rkt:224:22_676)"
" resolve+shift15.1)"
"((id121_677)"
" id_662)"
"((phase122_678)"
" phase_663)"
"((temp123_679)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp123_679"
" #t"
" #f"
" #f"
" id121_677"
" phase122_678)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:224:22_676"
" keyword-procedure-extract"
" '(#:immediate?)"
" 4)"
" '(#:immediate?)"
"(list"
" temp123_679)"
" id121_677"
" phase122_678)))))"
"(let-values(((...r/expand/provide.rkt:225:6_680)"
" add-provide!69.1)"
"((rp112_681)"
" rp_647)"
"((temp113_682)"
"(add-prefix_651"
"(syntax-e$1"
" id_662)))"
"((phase114_683)"
" phase_663)"
"((b115_684)"
" b_674)"
"((immed-b116_685)"
" immed-b_675)"
"((id117_686)"
" id_662)"
"((orig-s118_687)"
" orig-s_642)"
"((protected?119_688)"
" protected?_648)"
"((temp120_689)"
"(required-as-transformer?"
" i_658)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-provide!69.1))"
"(add-provide!67.1"
" protected?119_688"
" temp120_689"
" rp112_681"
" temp113_682"
" phase114_683"
" b115_684"
" immed-b116_685"
" id117_686"
" orig-s118_687)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...r/expand/provide.rkt:225:6_680"
" keyword-procedure-extract"
" '(#:as-protected?"
" #:as-transformer?)"
" 9)"
" '(#:as-protected?"
" #:as-transformer?)"
"(list"
" protected?119_688"
" temp120_689)"
" rp112_681"
" temp113_682"
" phase114_683"
" b115_684"
" immed-b116_685"
" id117_686"
" orig-s118_687))))))))))"
"(void)))))"
"(values fold-var_661)))))"
"(if #t(for-loop_655 fold-var_659(unsafe-cdr lst_657)) fold-var_659))"
" fold-var_656))"
" fold-var_656))))"
" for-loop_655)"
"(void)"
" lst_654)))"
"(if(=(hash-count found_652)(length except-ids_643))"
"(void)"
"(let-values()"
"(let-values(((lst_690) except-ids_643))"
"(begin"
"(if(list? lst_690)(void)(let-values()(in-list lst_690)))"
"((letrec-values(((for-loop_691)"
"(lambda(fold-var_692 lst_693)"
"(if(pair? lst_693)"
"(let-values(((except-id_694)(unsafe-car lst_693)))"
"(if #t"
"(let-values(((fold-var_695)"
"(let-values(((fold-var_696) fold-var_692))"
"(let-values(((fold-var_697)"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_698)"
"(hash-ref"
" found_652"
" except-id_694"
" #f)))"
"(if or-part_698"
" or-part_698"
"(let-values(((lst_699)"
" requireds_649))"
"(begin"
"(if(list? lst_699)"
"(void)"
"(let-values()"
"(in-list"
" lst_699)))"
"((letrec-values(((for-loop_700)"
"(lambda(result_701"
" lst_702)"
"(if(pair?"
" lst_702)"
"(let-values(((i_703)"
"(unsafe-car"
" lst_702)))"
"(if #t"
"(let-values(((result_704)"
"(let-values(((result_705)"
" result_701))"
"(let-values(((result_706)"
"(let-values()"
"(let-values()"
"(let-values(((id_707)"
"(required-id"
" i_703)))"
"(let-values(((phase_708)"
"(required-phase"
" i_703)))"
"(free-identifier=?$1"
" id_707"
" except-id_694"
" phase_708"
" phase_708)))))))"
"(values"
" result_706)))))"
"(if(if #t"
"(not"
"((lambda x_709"
" result_704)"
" i_703))"
" #f)"
"(for-loop_700"
" result_704"
"(unsafe-cdr"
" lst_702))"
" result_704))"
" result_701))"
" result_701))))"
" for-loop_700)"
" #f"
" lst_699)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_641"
"                                                                                              \"excluded identifier was not defined or required in the module~a\""
"                                                                                              \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_650))"
" orig-s_642"
" except-id_694))))"
"(void)))))"
"(values fold-var_697)))))"
"(if #t"
"(for-loop_691 fold-var_695(unsafe-cdr lst_693))"
" fold-var_695))"
" fold-var_692))"
" fold-var_692))))"
" for-loop_691)"
"(void)"
" lst_690)))))))))))))"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_1)(check-body bodys_1)))"
"(define-values"
"(check-body)"
"(lambda(bodys_2)"
"(let-values(((lst_3) bodys_2))"
"(begin"
"(if(list? lst_3)(void)(let-values()(in-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(fold-var_5 lst_6)"
"(if(pair? lst_6)"
"(let-values(((body_7)(unsafe-car lst_6)))"
"(if #t"
"(let-values(((fold-var_8)"
"(let-values(((fold-var_9) fold-var_5))"
"(let-values(((fold-var_10)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((tmp_11)(core-form-sym body_7 0)))"
"(if(equal? tmp_11 'begin)"
"(let-values()"
"(let-values(((ok?_12 begin1_13 e2_14)"
"(let-values(((s_25) body_7))"
"(if(if #t #t #f)"
"(let-values(((orig-s_26)"
" s_25))"
"(let-values(((begin1_27"
" e2_28)"
"(let-values(((s_29)"
"(if(syntax?$1"
" s_25)"
"(syntax-e$1"
" s_25)"
" s_25)))"
"(if(pair?"
" s_29)"
"(let-values(((begin3_30)"
"(let-values(((s_32)"
"(car"
" s_29)))"
" s_32))"
"((e4_31)"
"(let-values(((s_33)"
"(cdr"
" s_29)))"
"(let-values(((s_34)"
"(if(syntax?$1"
" s_33)"
"(syntax-e$1"
" s_33)"
" s_33)))"
"(let-values(((flat-s_35)"
"(to-syntax-list.1$1"
" s_34)))"
"(if(not"
" flat-s_35)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_26))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_26))"
"(let-values()"
"(let-values(((e_36)"
"(let-values(((lst_37)"
" flat-s_35))"
"(begin"
"(if(list?"
" lst_37)"
"(void)"
"(let-values()"
"(in-list"
" lst_37)))"
"((letrec-values(((for-loop_38)"
"(lambda(e_39"
" lst_40)"
"(if(pair?"
" lst_40)"
"(let-values(((s_41)"
"(unsafe-car"
" lst_40)))"
"(if #t"
"(let-values(((e_42)"
"(let-values(((e_43)"
" e_39))"
"(let-values(((e_44)"
"(let-values()"
"(let-values(((e5_45)"
"(let-values()"
" s_41)))"
"(cons"
" e5_45"
" e_43)))))"
"(values"
" e_44)))))"
"(if #t"
"(for-loop_38"
" e_42"
"(unsafe-cdr"
" lst_40))"
" e_42))"
" e_39))"
" e_39))))"
" for-loop_38)"
" null"
" lst_37)))))"
"(alt-reverse"
" e_36))))))))))"
"(values"
" begin3_30"
" e4_31))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_26)))))"
"(values"
" #t"
" begin1_27"
" e2_28)))"
"(values #f #f #f)))))"
"(check-body e2_14)))"
"(if(if(equal? tmp_11 '#%declare)"
" #t"
"(if(equal? tmp_11 '#%provide)"
" #t"
"(if(equal? tmp_11 '#%require)"
" #t"
"(if(equal? tmp_11 'module)"
" #t"
"(equal? tmp_11 'module*)))))"
"(let-values()(void))"
"(if(equal? tmp_11 'define-values)"
"(let-values()"
"(let-values(((ok?_46"
" define-values6_47"
" id7_48"
" rhs8_49)"
"(let-values(((s_62)"
" body_7))"
"(if(if #t #t #f)"
"(let-values(((orig-s_63)"
" s_62))"
"(let-values(((define-values6_64"
" id7_65"
" rhs8_66)"
"(let-values(((s_67)"
"(if(syntax?$1"
" s_62)"
"(syntax-e$1"
" s_62)"
" s_62)))"
"(if(pair?"
" s_67)"
"(let-values(((define-values9_68)"
"(let-values(((s_71)"
"(car"
" s_67)))"
" s_71))"
"((id10_69"
" rhs11_70)"
"(let-values(((s_72)"
"(cdr"
" s_67)))"
"(let-values(((s_73)"
"(if(syntax?$1"
" s_72)"
"(syntax-e$1"
" s_72)"
" s_72)))"
"(if(pair?"
" s_73)"
"(let-values(((id12_74)"
"(let-values(((s_76)"
"(car"
" s_73)))"
"(let-values(((s_77)"
"(if(syntax?$1"
" s_76)"
"(syntax-e$1"
" s_76)"
" s_76)))"
"(let-values(((flat-s_78)"
"(to-syntax-list.1$1"
" s_77)))"
"(if(not"
" flat-s_78)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_63))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_63))"
"(let-values()"
"(let-values(((id_79)"
"(let-values(((lst_80)"
" flat-s_78))"
"(begin"
"(if(list?"
" lst_80)"
"(void)"
"(let-values()"
"(in-list"
" lst_80)))"
"((letrec-values(((for-loop_81)"
"(lambda(id_82"
" lst_83)"
"(if(pair?"
" lst_83)"
"(let-values(((s_84)"
"(unsafe-car"
" lst_83)))"
"(if #t"
"(let-values(((id_85)"
"(let-values(((id_86)"
" id_82))"
"(let-values(((id_87)"
"(let-values()"
"(let-values(((id15_88)"
"(let-values()"
"(if(let-values(((or-part_89)"
"(if(syntax?$1"
" s_84)"
"(symbol?"
"(syntax-e$1"
" s_84))"
" #f)))"
"(if or-part_89"
" or-part_89"
"(symbol?"
" s_84)))"
" s_84"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_63"
" s_84)))))"
"(cons"
" id15_88"
" id_86)))))"
"(values"
" id_87)))))"
"(if #t"
"(for-loop_81"
" id_85"
"(unsafe-cdr"
" lst_83))"
" id_85))"
" id_82))"
" id_82))))"
" for-loop_81)"
" null"
" lst_80)))))"
"(alt-reverse"
" id_79)))))))))"
"((rhs13_75)"
"(let-values(((s_90)"
"(cdr"
" s_73)))"
"(let-values(((s_91)"
"(if(syntax?$1"
" s_90)"
"(syntax-e$1"
" s_90)"
" s_90)))"
"(if(pair?"
" s_91)"
"(let-values(((rhs14_92)"
"(let-values(((s_93)"
"(car"
" s_91)))"
" s_93))"
"(()"
"(let-values(((s_94)"
"(cdr"
" s_91)))"
"(let-values(((s_95)"
"(if(syntax?$1"
" s_94)"
"(syntax-e$1"
" s_94)"
" s_94)))"
"(if(null?"
" s_95)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_63))))))"
"(values"
" rhs14_92))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_63))))))"
"(values"
" id12_74"
" rhs13_75))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_63))))))"
"(values"
" define-values9_68"
" id10_69"
" rhs11_70))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_63)))))"
"(values"
" #t"
" define-values6_64"
" id7_65"
" rhs8_66)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(check-expr"
" rhs8_49"
"(length id7_48)"
" body_7)))"
"(let-values()(disallow body_7)))))))"
"(void)))))"
"(values fold-var_10)))))"
"(if #t(for-loop_4 fold-var_8(unsafe-cdr lst_6)) fold-var_8))"
" fold-var_5))"
" fold-var_5))))"
" for-loop_4)"
"(void)"
" lst_3)))))"
"(define-values"
"(check-expr)"
"(lambda(e_96 num-results_97 enclosing_98)"
"(let-values(((tmp_99)(core-form-sym e_96 0)))"
"(if(if(equal? tmp_99 'lambda) #t(equal? tmp_99 'case-lambda))"
"(let-values()(check-count 1 num-results_97 enclosing_98))"
"(if(equal? tmp_99 'quote)"
"(let-values()"
"(let-values(((ok?_100 quote16_101 datum17_102)"
"(let-values(((s_113) e_96))"
"(if(if #t #t #f)"
"(let-values(((orig-s_114) s_113))"
"(let-values(((quote16_115 datum17_116)"
"(let-values(((s_117)(if(syntax?$1 s_113)(syntax-e$1 s_113) s_113)))"
"(if(pair? s_117)"
"(let-values(((quote18_118)"
"(let-values(((s_120)(car s_117))) s_120))"
"((datum19_119)"
"(let-values(((s_121)(cdr s_117)))"
"(let-values(((s_122)"
"(if(syntax?$1 s_121)"
"(syntax-e$1 s_121)"
" s_121)))"
"(if(pair? s_122)"
"(let-values(((datum20_123)"
"(let-values(((s_124)(car s_122)))"
" s_124))"
"(()"
"(let-values(((s_125)(cdr s_122)))"
"(let-values(((s_126)"
"(if(syntax?$1"
" s_125)"
"(syntax-e$1 s_125)"
" s_125)))"
"(if(null? s_126)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_114))))))"
"(values datum20_123))"
"(raise-syntax-error$1"
" #f"
"                                                                       \"bad syntax\""
" orig-s_114))))))"
"(values quote18_118 datum19_119))"
"                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_114)))))"
"(values #t quote16_115 datum17_116)))"
"(values #f #f #f)))))"
"(begin(check-datum datum17_102)(check-count 1 num-results_97 enclosing_98))))"
"(if(equal? tmp_99 '#%app)"
"(let-values()"
"(let-values(((ok?_127 #%app21_128 rator22_129 rand23_130)"
"(let-values(((s_144) e_96))"
"(if(if #t #t #f)"
"(let-values(((orig-s_145) s_144))"
"(let-values(((#%app21_146 rator22_147 rand23_148)"
"(let-values(((s_149)(if(syntax?$1 s_144)(syntax-e$1 s_144) s_144)))"
"(if(pair? s_149)"
"(let-values(((#%app24_150)"
"(let-values(((s_153)(car s_149))) s_153))"
"((rator25_151 rand26_152)"
"(let-values(((s_154)(cdr s_149)))"
"(let-values(((s_155)"
"(if(syntax?$1 s_154)"
"(syntax-e$1 s_154)"
" s_154)))"
"(if(pair? s_155)"
"(let-values(((rator27_156)"
"(let-values(((s_158)"
"(car s_155)))"
" s_158))"
"((rand28_157)"
"(let-values(((s_159)"
"(cdr s_155)))"
"(let-values(((s_160)"
"(if(syntax?$1"
" s_159)"
"(syntax-e$1"
" s_159)"
" s_159)))"
"(let-values(((flat-s_161)"
"(to-syntax-list.1$1"
" s_160)))"
"(if(not flat-s_161)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_145))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_145))"
"(let-values()"
"(let-values(((rand_162)"
"(let-values(((lst_163)"
" flat-s_161))"
"(begin"
"(if(list?"
" lst_163)"
"(void)"
"(let-values()"
"(in-list"
" lst_163)))"
"((letrec-values(((for-loop_164)"
"(lambda(rand_165"
" lst_166)"
"(if(pair?"
" lst_166)"
"(let-values(((s_167)"
"(unsafe-car"
" lst_166)))"
"(if #t"
"(let-values(((rand_168)"
"(let-values(((rand_169)"
" rand_165))"
"(let-values(((rand_170)"
"(let-values()"
"(let-values(((rand29_171)"
"(let-values()"
" s_167)))"
"(cons"
" rand29_171"
" rand_169)))))"
"(values"
" rand_170)))))"
"(if #t"
"(for-loop_164"
" rand_168"
"(unsafe-cdr"
" lst_166))"
" rand_168))"
" rand_165))"
" rand_165))))"
" for-loop_164)"
" null"
" lst_163)))))"
"(alt-reverse"
" rand_162))))))))))"
"(values rator27_156 rand28_157))"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_145))))))"
"(values #%app24_150 rator25_151 rand26_152))"
"                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_145)))))"
"(values #t #%app21_146 rator22_147 rand23_148)))"
"(values #f #f #f #f)))))"
"(let-values(((rands_143) rand23_130))"
"(begin"
"(let-values(((lst_172) rands_143))"
"(begin"
"(if(list? lst_172)(void)(let-values()(in-list lst_172)))"
"((letrec-values(((for-loop_173)"
"(lambda(fold-var_174 lst_175)"
"(if(pair? lst_175)"
"(let-values(((rand_176)(unsafe-car lst_175)))"
"(if #t"
"(let-values(((fold-var_177)"
"(let-values(((fold-var_178) fold-var_174))"
"(let-values(((fold-var_179)"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr rand_176 1 e_96))"
"(void)))))"
"(values fold-var_179)))))"
"(if #t"
"(for-loop_173 fold-var_177(unsafe-cdr lst_175))"
" fold-var_177))"
" fold-var_174))"
" fold-var_174))))"
" for-loop_173)"
"(void)"
" lst_172)))"
"(let-values(((tmp_180)(cross-phase-primitive-name rator22_129)))"
"(if(if(equal? tmp_180 'cons) #t(equal? tmp_180 'list))"
"(let-values()(check-count 1 num-results_97 enclosing_98))"
"(if(equal? tmp_180 'make-struct-type)"
"(let-values()(check-count 5 num-results_97 enclosing_98))"
"(if(equal? tmp_180 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_97 enclosing_98))"
"(if(equal? tmp_180 'gensym)"
"(let-values()"
"(if(let-values(((or-part_181)(= 0(length rands_143))))"
"(if or-part_181"
" or-part_181"
"(if(= 1(length rands_143))(quoted-string?(car rands_143)) #f)))"
"(void)"
"(let-values()(disallow e_96))))"
"(if(equal? tmp_180 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_143))(quoted-string?(car rands_143)) #f)"
"(void)"
"(let-values()(disallow e_96))))"
"(let-values()(disallow e_96))))))))))))"
"(let-values()(void))))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_182 expected-num_183 enclosing_184)"
"(if(= is-num_182 expected-num_183)(void)(let-values()(disallow enclosing_184)))))"
"(define-values"
"(check-datum)"
"(lambda(datum_185)"
"(let-values(((d_186)(syntax-e$1 datum_185)))"
"(if(let-values(((or-part_187)(number? d_186)))"
"(if or-part_187"
" or-part_187"
"(let-values(((or-part_188)(boolean? d_186)))"
"(if or-part_188"
" or-part_188"
"(let-values(((or-part_189)(symbol? d_186)))"
"(if or-part_189"
" or-part_189"
"(let-values(((or-part_190)(string? d_186)))(if or-part_190 or-part_190(bytes? d_186)))))))))"
"(let-values()(void))"
"(let-values()(disallow datum_185))))))"
"(define-values"
"(quoted-string?)"
"(lambda(e_191)"
"(if(eq? 'quote(core-form-sym e_191 0))"
"(let-values()"
"(let-values(((ok?_192 quote30_193 datum31_194)"
"(let-values(((s_205) e_191))"
"(if(if #t #t #f)"
"(let-values(((orig-s_206) s_205))"
"(let-values(((quote30_207 datum31_208)"
"(let-values(((s_209)(if(syntax?$1 s_205)(syntax-e$1 s_205) s_205)))"
"(if(pair? s_209)"
"(let-values(((quote32_210)(let-values(((s_212)(car s_209))) s_212))"
"((datum33_211)"
"(let-values(((s_213)(cdr s_209)))"
"(let-values(((s_214)"
"(if(syntax?$1 s_213)"
"(syntax-e$1 s_213)"
" s_213)))"
"(if(pair? s_214)"
"(let-values(((datum34_215)"
"(let-values(((s_216)(car s_214)))"
" s_216))"
"(()"
"(let-values(((s_217)(cdr s_214)))"
"(let-values(((s_218)"
"(if(syntax?$1 s_217)"
"(syntax-e$1 s_217)"
" s_217)))"
"(if(null? s_218)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_206))))))"
"(values datum34_215))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_206))))))"
"(values quote32_210 datum33_211))"
"                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_206)))))"
"(values #t quote30_207 datum31_208)))"
"(values #f #f #f)))))"
"(string?(syntax-e$1 datum31_194))))"
" #f)))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_219)"
"(let-values(((b_220)"
"(let-values(((id35_221) id_219)((temp36_222) 0))"
"(if(variable-reference-constant?(#%variable-reference resolve+shift15.1))"
"(resolve+shift13.1 #f #f #f #f #f #f #f #f #f #f id35_221 temp36_222)"
"(resolve+shift15.1 id35_221 temp36_222)))))"
"(if(module-binding? b_220)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_220)))"
"(module-binding-sym b_220)"
" #f)"
" #f))))"
" (define-values (disallow) (lambda (body_223) (error \"not allowed in a cross-phase persistent module:\" body_223)))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module"
"(lambda(s_11 ctx_12)"
"(begin"
"(if(eq?(expand-context-context ctx_12) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_13)(expand-context-observer ctx_12)))"
"(if obs_13"
"(let-values()(if #t(let-values()(call-expand-observe obs_13 'prim-module))(void)))"
"(void)))"
"               (raise-syntax-error$1 #f \"allowed only at the top level\" s_11))))"
"(let-values(((s197_14) s_11)((ctx198_15) ctx_12)((temp199_16) #f))"
"(if(variable-reference-constant?(#%variable-reference expand-module14.1))"
"(expand-module12.1 #f #f #f #f #f #f #f #f s197_14 ctx198_15 temp199_16)"
"(expand-module14.1 s197_14 ctx198_15 temp199_16)))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'module*"
"(lambda(s_17 ctx_18)"
"(begin"
"(let-values(((obs_19)(expand-context-observer ctx_18)))"
"(if obs_19(let-values()(if #t(let-values()(call-expand-observe obs_19 'prim-module))(void)))(void)))"
"         (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_17)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%module-begin"
"(lambda(s_20 ctx_21)"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_21)))"
"(if obs_22"
"(let-values()(if #t(let-values()(call-expand-observe obs_22 'prim-module-begin))(void)))"
"(void)))"
"(if(eq?(expand-context-context ctx_21) 'module-begin)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_20)))"
"(if(expand-context-module-begin-k ctx_21)"
"(void)"
"           (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_20)))"
"((expand-context-module-begin-k ctx_21)"
" s_20"
"(let-values(((the-struct_23) ctx_21))"
"(if(expand-context? the-struct_23)"
"(let-values(((module-begin-k200_24) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_23)"
"(root-expand-context-post-expansion-scope the-struct_23)"
"(root-expand-context-top-level-bind-scope the-struct_23)"
"(root-expand-context-all-scopes-stx the-struct_23)"
"(root-expand-context-use-site-scopes the-struct_23)"
"(root-expand-context-defined-syms the-struct_23)"
"(root-expand-context-frame-id the-struct_23)"
"(root-expand-context-counter the-struct_23)"
"(root-expand-context-lift-key the-struct_23)"
"(expand-context-context the-struct_23)"
"(expand-context-phase the-struct_23)"
"(expand-context-namespace the-struct_23)"
"(expand-context-env the-struct_23)"
"(expand-context-post-expansion-scope-action the-struct_23)"
"(expand-context-scopes the-struct_23)"
"(expand-context-def-ctx-scopes the-struct_23)"
"(expand-context-reference-records the-struct_23)"
"(expand-context-only-immediate? the-struct_23)"
"(expand-context-just-once? the-struct_23)"
" module-begin-k200_24"
"(expand-context-need-eventually-defined the-struct_23)"
"(expand-context-allow-unbound? the-struct_23)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_23)"
"(expand-context-stops the-struct_23)"
"(expand-context-current-introduction-scopes the-struct_23)"
"(expand-context-declared-submodule-names the-struct_23)"
"(expand-context-lifts the-struct_23)"
"(expand-context-lift-envs the-struct_23)"
"(expand-context-module-lifts the-struct_23)"
"(expand-context-require-lifts the-struct_23)"
"(expand-context-to-module-lifts the-struct_23)"
"(expand-context-requires+provides the-struct_23)"
"(expand-context-name the-struct_23)"
"(expand-context-observer the-struct_23)))"
"              (raise-argument-error 'struct-copy \"expand-context?\" the-struct_23))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%declare"
"(lambda(s_25 ctx_26)"
"(begin"
"(let-values(((obs_27)(expand-context-observer ctx_26)))"
"(if obs_27(let-values()(if #t(let-values()(call-expand-observe obs_27 'prim-declare))(void)))(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_25)))))"
" print-values)"
"(define-values"
"(expand-module12.1)"
"(lambda(enclosing-is-cross-phase-persistent?2_28"
" enclosing-is-cross-phase-persistent?6_29"
" enclosing-requires+provides3_30"
" enclosing-requires+provides7_31"
" keep-enclosing-scope-at-phase1_32"
" keep-enclosing-scope-at-phase5_33"
" mpis-for-enclosing-reset4_34"
" mpis-for-enclosing-reset8_35"
" s9_36"
" init-ctx10_37"
" enclosing-self11_38)"
"(let-values(((s_39) s9_36))"
"(let-values(((init-ctx_40) init-ctx10_37))"
"(let-values(((enclosing-self_41) enclosing-self11_38))"
"(let-values(((keep-enclosing-scope-at-phase_42)"
"(if keep-enclosing-scope-at-phase5_33 keep-enclosing-scope-at-phase1_32 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_43)"
"(if enclosing-is-cross-phase-persistent?6_29 enclosing-is-cross-phase-persistent?2_28 #f)))"
"(let-values(((enclosing-r+p_44)(if enclosing-requires+provides7_31 enclosing-requires+provides3_30 #f)))"
"(let-values(((mpis-for-enclosing-reset_45)"
"(if mpis-for-enclosing-reset8_35 mpis-for-enclosing-reset4_34 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_91)(expand-context-observer init-ctx_40)))"
"(if obs_91"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_91 'prim-module))(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_46)(syntax-disarm$1 s_39)))"
"(let-values(((ok?_47 module201_48 id:module-name202_49 initial-require203_50 body204_51)"
"(let-values(((s_92) disarmed-s_46))"
"(if(if #t #t #f)"
"(let-values(((orig-s_93) s_92))"
"(let-values(((module201_94"
" id:module-name202_95"
" initial-require203_96"
" body204_97)"
"(let-values(((s_98)"
"(if(syntax?$1 s_92)(syntax-e$1 s_92) s_92)))"
"(if(pair? s_98)"
"(let-values(((module205_99)"
"(let-values(((s_103)(car s_98))) s_103))"
"((id:module-name206_100"
" initial-require207_101"
" body208_102)"
"(let-values(((s_104)(cdr s_98)))"
"(let-values(((s_105)"
"(if(syntax?$1 s_104)"
"(syntax-e$1 s_104)"
" s_104)))"
"(if(pair? s_105)"
"(let-values(((id:module-name209_106)"
"(let-values(((s_109)"
"(car"
" s_105)))"
"(if(let-values(((or-part_110)"
"(if(syntax?$1"
" s_109)"
"(symbol?"
"(syntax-e$1"
" s_109))"
" #f)))"
"(if or-part_110"
" or-part_110"
"(symbol?"
" s_109)))"
" s_109"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"not an identifier\""
" orig-s_93"
" s_109))))"
"((initial-require210_107"
" body211_108)"
"(let-values(((s_111)"
"(cdr"
" s_105)))"
"(let-values(((s_112)"
"(if(syntax?$1"
" s_111)"
"(syntax-e$1"
" s_111)"
" s_111)))"
"(if(pair? s_112)"
"(let-values(((initial-require212_113)"
"(let-values(((s_115)"
"(car"
" s_112)))"
" s_115))"
"((body213_114)"
"(let-values(((s_116)"
"(cdr"
" s_112)))"
"(let-values(((s_117)"
"(if(syntax?$1"
" s_116)"
"(syntax-e$1"
" s_116)"
" s_116)))"
"(let-values(((flat-s_118)"
"(to-syntax-list.1$1"
" s_117)))"
"(if(not"
" flat-s_118)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_93))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_93))"
"(let-values()"
"(let-values(((body_119)"
"(let-values(((lst_120)"
" flat-s_118))"
"(begin"
"(if(list?"
" lst_120)"
"(void)"
"(let-values()"
"(in-list"
" lst_120)))"
"((letrec-values(((for-loop_121)"
"(lambda(body_122"
" lst_123)"
"(if(pair?"
" lst_123)"
"(let-values(((s_124)"
"(unsafe-car"
" lst_123)))"
"(if #t"
"(let-values(((body_125)"
"(let-values(((body_126)"
" body_122))"
"(let-values(((body_127)"
"(let-values()"
"(let-values(((body214_128)"
"(let-values()"
" s_124)))"
"(cons"
" body214_128"
" body_126)))))"
"(values"
" body_127)))))"
"(if #t"
"(for-loop_121"
" body_125"
"(unsafe-cdr"
" lst_123))"
" body_125))"
" body_122))"
" body_122))))"
" for-loop_121)"
" null"
" lst_120)))))"
"(alt-reverse"
" body_119))))))))))"
"(values"
" initial-require212_113"
" body213_114))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_93))))))"
"(values"
" id:module-name209_106"
" initial-require210_107"
" body211_108))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_93))))))"
"(values"
" module205_99"
" id:module-name206_100"
" initial-require207_101"
" body208_102))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_93)))))"
"(values"
" #t"
" module201_94"
" id:module-name202_95"
" initial-require203_96"
" body204_97)))"
"(values #f #f #f #f #f)))))"
"(let-values(((initial-require_66)(syntax->datum$1 initial-require203_50)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_129) keep-enclosing-scope-at-phase_42))"
"(if or-part_129 or-part_129(1/module-path? initial-require_66)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                 \"not a module path\""
" s_39"
" initial-require203_50)))"
"(values))))"
"(let-values(((phase_67) 0))"
"(let-values(((module-name-sym_68)(syntax-e$1 id:module-name202_49)))"
"(let-values(((outside-scope_69)(new-scope 'module)))"
"(let-values(((inside-scope_70)(new-multi-scope module-name-sym_68)))"
"(let-values(((self_71)"
"(make-self-module-path-index module-name-sym_68 enclosing-self_41)))"
"(let-values(((enclosing-mod_72)"
"(if enclosing-self_41"
"                                                        (1/module-path-index-join '(submod \"..\") self_71)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_72 mpis-for-enclosing-reset_45 #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_45"
"(cons"
" enclosing-mod_72"
"(unbox mpis-for-enclosing-reset_45))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_73)"
"(make-apply-module-scopes"
" outside-scope_69"
" inside-scope_70"
" init-ctx_40"
" keep-enclosing-scope-at-phase_42"
" self_71"
" enclosing-self_41"
" enclosing-mod_72)))"
"(let-values(((initial-require-s_74)"
"(apply-module-scopes_73 initial-require203_50)))"
"(let-values(((root-ctx_75)"
"(let-values(((...er/expand/module.rkt:112:20_130)"
" make-root-expand-context12.1)"
"((temp215_131)"
"(if keep-enclosing-scope-at-phase_42"
"(root-expand-context-module-scopes"
" init-ctx_40)"
" null))"
"((outside-scope216_132) outside-scope_69)"
"((inside-scope217_133) inside-scope_70)"
"((initial-require-s218_134)"
" initial-require-s_74))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-root-expand-context12.1))"
"(make-root-expand-context10.1"
" initial-require-s218_134"
" #t"
" temp215_131"
" #t"
" outside-scope216_132"
" #t"
" inside-scope217_133"
" #t)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:112:20_130"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
" 2)"
" '(#:all-scopes-stx"
" #:initial-scopes"
" #:outside-scope"
" #:post-expansion-scope)"
"(list"
" initial-require-s218_134"
" temp215_131"
" outside-scope216_132"
" inside-scope217_133))))))"
"(let-values(((new-module-scopes_76)"
"(root-expand-context-module-scopes root-ctx_75)))"
"(let-values(((frame-id_77)"
"(root-expand-context-frame-id root-ctx_75)))"
"(let-values(((m-ns_78)"
"(let-values(((...er/expand/module.rkt:127:16_135)"
" make-module-namespace45.1)"
"((temp219_136)"
"(expand-context-namespace"
" init-ctx_40))"
"((self220_137) self_71)"
"((root-ctx221_138) root-ctx_75)"
"((temp222_139)"
"(if enclosing-self_41 #t #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-module-namespace45.1))"
"(make-module-namespace43.1"
" temp222_139"
" self220_137"
" root-ctx221_138"
" temp219_136)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:127:16_135"
" keyword-procedure-extract"
" '(#:for-submodule?"
" #:mpi"
" #:root-expand-context)"
" 3)"
" '(#:for-submodule? #:mpi #:root-expand-context)"
"(list temp222_139 self220_137 root-ctx221_138)"
" temp219_136)))))"
"(let-values(((ctx_79)"
"(let-values(((the-struct_140)"
"(copy-root-expand-context"
" init-ctx_40"
" root-ctx_75)))"
"(if(expand-context? the-struct_140)"
"(let-values(((allow-unbound?223_141) #f)"
"((namespace224_142) m-ns_78)"
"((post-expansion-scope-action225_143)"
" add-scope)"
"((phase226_144) phase_67)"
"((just-once?227_145) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_140)"
"(root-expand-context-post-expansion-scope"
" the-struct_140)"
"(root-expand-context-top-level-bind-scope"
" the-struct_140)"
"(root-expand-context-all-scopes-stx"
" the-struct_140)"
"(root-expand-context-use-site-scopes"
" the-struct_140)"
"(root-expand-context-defined-syms"
" the-struct_140)"
"(root-expand-context-frame-id"
" the-struct_140)"
"(root-expand-context-counter"
" the-struct_140)"
"(root-expand-context-lift-key"
" the-struct_140)"
"(expand-context-context the-struct_140)"
" phase226_144"
" namespace224_142"
"(expand-context-env the-struct_140)"
" post-expansion-scope-action225_143"
"(expand-context-scopes the-struct_140)"
"(expand-context-def-ctx-scopes"
" the-struct_140)"
"(expand-context-reference-records"
" the-struct_140)"
"(expand-context-only-immediate?"
" the-struct_140)"
" just-once?227_145"
"(expand-context-module-begin-k"
" the-struct_140)"
"(expand-context-need-eventually-defined"
" the-struct_140)"
" allow-unbound?223_141"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_140)"
"(expand-context-stops the-struct_140)"
"(expand-context-current-introduction-scopes"
" the-struct_140)"
"(expand-context-declared-submodule-names"
" the-struct_140)"
"(expand-context-lifts the-struct_140)"
"(expand-context-lift-envs the-struct_140)"
"(expand-context-module-lifts"
" the-struct_140)"
"(expand-context-require-lifts"
" the-struct_140)"
"(expand-context-to-module-lifts"
" the-struct_140)"
"(expand-context-requires+provides"
" the-struct_140)"
"(expand-context-name the-struct_140)"
"(expand-context-observer the-struct_140)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                           \"expand-context?\""
" the-struct_140)))))"
"(let-values(((bodys_80)"
"(map2 apply-module-scopes_73 body204_51)))"
"(let-values(((requires+provides_81)"
"(make-requires+provides self_71)))"
"(let-values(((defined-syms_82)"
"(root-expand-context-defined-syms"
" root-ctx_75)))"
"(let-values(((mpis-to-reset_83)(box null)))"
"(let-values(((initial-require!_84)"
"(lambda()"
"(if(not"
" keep-enclosing-scope-at-phase_42)"
"(let-values()"
"(perform-initial-require!"
" initial-require_66"
" self_71"
" initial-require-s_74"
" m-ns_78"
" requires+provides_81))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_81"
" enclosing-mod_72"
" keep-enclosing-scope-at-phase_42"
" enclosing-is-cross-phase-persistent?_43)"
"(let-values(((...er/expand/module.rkt:168:7_146)"
" add-enclosing-module-defined-and-required!35.1)"
"((requires+provides228_147)"
" requires+provides_81)"
"((enclosing-r+p229_148)"
" enclosing-r+p_44)"
"((enclosing-mod230_149)"
" enclosing-mod_72)"
"((keep-enclosing-scope-at-phase231_150)"
" keep-enclosing-scope-at-phase_42))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" add-enclosing-module-defined-and-required!35.1))"
"(add-enclosing-module-defined-and-required!33.1"
" enclosing-r+p229_148"
" requires+provides228_147"
" enclosing-mod230_149"
" keep-enclosing-scope-at-phase231_150)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:168:7_146"
" keyword-procedure-extract"
" '(#:enclosing-requires+provides)"
" 5)"
" '(#:enclosing-requires+provides)"
"(list enclosing-r+p229_148)"
" requires+provides228_147"
" enclosing-mod230_149"
" keep-enclosing-scope-at-phase231_150)))"
"(let-values(((m-ns232_151)"
" m-ns_78)"
"((enclosing-mod233_152)"
" enclosing-mod_72)"
"((keep-enclosing-scope-at-phase234_153)"
" keep-enclosing-scope-at-phase_42))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" namespace-module-visit!101.1))"
"(namespace-module-visit!99.1"
" #f"
" #f"
" m-ns232_151"
" enclosing-mod233_152"
" keep-enclosing-scope-at-phase234_153)"
"(namespace-module-visit!101.1"
" m-ns232_151"
" enclosing-mod233_152"
" keep-enclosing-scope-at-phase234_153)))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_154)"
"(expand-context-observer"
" init-ctx_40)))"
"(if obs_154"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_154"
" 'prepare-env))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(initial-require!_84)"
"(values))))"
"(let-values(((again?_85) #f))"
"(let-values(((module-begin-k_86)"
"(lambda(mb-s_155 ctx_156)"
"(let-values((()"
"(begin"
"(if again?_85"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_81)"
"(initial-require!_84)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_85"
" #t)"
"(values))))"
"(let-values(((added-s_157)"
"(add-scope"
" mb-s_155"
" inside-scope_70)))"
"(let-values((()"
"(begin"
"(let-values(((obs_183)"
"(expand-context-observer"
" ctx_156)))"
"(if obs_183"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_183"
" 'rename-one"
" added-s_157))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_158)"
"(syntax-disarm$1"
" added-s_157)))"
"(let-values(((ok?_159"
" #%module-begin235_160"
" body236_161)"
"(let-values(((s_184)"
" disarmed-mb-s_158))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_185)"
" s_184))"
"(let-values(((#%module-begin235_186"
" body236_187)"
"(let-values(((s_188)"
"(if(syntax?$1"
" s_184)"
"(syntax-e$1"
" s_184)"
" s_184)))"
"(if(pair?"
" s_188)"
"(let-values(((#%module-begin237_189)"
"(let-values(((s_191)"
"(car"
" s_188)))"
" s_191))"
"((body238_190)"
"(let-values(((s_192)"
"(cdr"
" s_188)))"
"(let-values(((s_193)"
"(if(syntax?$1"
" s_192)"
"(syntax-e$1"
" s_192)"
" s_192)))"
"(let-values(((flat-s_194)"
"(to-syntax-list.1$1"
" s_193)))"
"(if(not"
" flat-s_194)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_185))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_185))"
"(let-values()"
"(let-values(((body_195)"
"(let-values(((lst_196)"
" flat-s_194))"
"(begin"
"(if(list?"
" lst_196)"
"(void)"
"(let-values()"
"(in-list"
" lst_196)))"
"((letrec-values(((for-loop_197)"
"(lambda(body_198"
" lst_199)"
"(if(pair?"
" lst_199)"
"(let-values(((s_200)"
"(unsafe-car"
" lst_199)))"
"(if #t"
"(let-values(((body_201)"
"(let-values(((body_202)"
" body_198))"
"(let-values(((body_203)"
"(let-values()"
"(let-values(((body242_204)"
"(let-values()"
" s_200)))"
"(cons"
" body242_204"
" body_202)))))"
"(values"
" body_203)))))"
"(if #t"
"(for-loop_197"
" body_201"
"(unsafe-cdr"
" lst_199))"
" body_201))"
" body_198))"
" body_198))))"
" for-loop_197)"
" null"
" lst_196)))))"
"(alt-reverse"
" body_195))))))))))"
"(values"
" #%module-begin237_189"
" body238_190))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_185)))))"
"(values"
" #t"
" #%module-begin235_186"
" body236_187)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((bodys_172)"
" body236_161))"
"(let-values(((need-eventually-defined_173)"
"(make-hasheqv)))"
"(let-values(((module-ends_174)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_175)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_176)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_177)"
"((letrec-values(((pass-1-and-2-loop_205)"
"(lambda(bodys_206"
" phase_207)"
"(let-values(((partial-body-ctx_208)"
"(let-values(((the-struct_211)"
" ctx_156))"
"(if(expand-context?"
" the-struct_211)"
"(let-values(((context250_212)"
" 'module)"
"((phase251_213)"
" phase_207)"
"((namespace252_214)"
"(namespace->namespace-at-phase"
" m-ns_78"
" phase_207))"
"((only-immediate?253_215)"
" #t)"
"((need-eventually-defined254_216)"
" need-eventually-defined_173)"
"((declared-submodule-names255_217)"
" declared-submodule-names_176)"
"((lifts256_218)"
"(let-values(((temp260_222)"
"(make-wrap-as-definition"
" self_71"
" frame-id_77"
" inside-scope_70"
" initial-require-s_74"
" defined-syms_82"
" requires+provides_81)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-lift-context8.1))"
"(make-lift-context6.1"
" #f"
" #f"
" temp260_222)"
"(make-lift-context8.1"
" temp260_222))))"
"((module-lifts257_219)"
"(make-module-lift-context"
" phase_207"
" #t))"
"((require-lifts258_220)"
"(make-require-lift-context"
" phase_207"
"(let-values(((...er/expand/module.rkt:241:63_223)"
" make-parse-lifted-require196.1)"
"((m-ns261_224)"
" m-ns_78)"
"((self262_225)"
" self_71)"
"((requires+provides263_226)"
" requires+provides_81)"
"((declared-submodule-names264_227)"
" declared-submodule-names_176))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-parse-lifted-require196.1))"
"(make-parse-lifted-require194.1"
" declared-submodule-names264_227"
" m-ns261_224"
" self262_225"
" requires+provides263_226)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:241:63_223"
" keyword-procedure-extract"
" '(#:declared-submodule-names)"
" 5)"
" '(#:declared-submodule-names)"
"(list"
" declared-submodule-names264_227)"
" m-ns261_224"
" self262_225"
" requires+provides263_226)))))"
"((to-module-lifts259_221)"
"(let-values(((...er/expand/module.rkt:243:64_228)"
" make-to-module-lift-context28.1)"
"((phase265_229)"
" phase_207)"
"((module-ends266_230)"
" module-ends_174)"
"((temp267_231)"
" #f))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp267_231"
" module-ends266_230"
" phase265_229)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:243:64_228"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" 3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp267_231"
" module-ends266_230)"
" phase265_229)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_211)"
"(root-expand-context-post-expansion-scope"
" the-struct_211)"
"(root-expand-context-top-level-bind-scope"
" the-struct_211)"
"(root-expand-context-all-scopes-stx"
" the-struct_211)"
"(root-expand-context-use-site-scopes"
" the-struct_211)"
"(root-expand-context-defined-syms"
" the-struct_211)"
"(root-expand-context-frame-id"
" the-struct_211)"
"(root-expand-context-counter"
" the-struct_211)"
"(root-expand-context-lift-key"
" the-struct_211)"
" context250_212"
" phase251_213"
" namespace252_214"
"(expand-context-env"
" the-struct_211)"
"(expand-context-post-expansion-scope-action"
" the-struct_211)"
"(expand-context-scopes"
" the-struct_211)"
"(expand-context-def-ctx-scopes"
" the-struct_211)"
"(expand-context-reference-records"
" the-struct_211)"
" only-immediate?253_215"
"(expand-context-just-once?"
" the-struct_211)"
"(expand-context-module-begin-k"
" the-struct_211)"
" need-eventually-defined254_216"
"(expand-context-allow-unbound?"
" the-struct_211)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_211)"
"(expand-context-stops"
" the-struct_211)"
"(expand-context-current-introduction-scopes"
" the-struct_211)"
" declared-submodule-names255_217"
" lifts256_218"
"(expand-context-lift-envs"
" the-struct_211)"
" module-lifts257_219"
" require-lifts258_220"
" to-module-lifts259_221"
"(expand-context-requires+provides"
" the-struct_211)"
"(expand-context-name"
" the-struct_211)"
"(expand-context-observer"
" the-struct_211)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                     \"expand-context?\""
" the-struct_211)))))"
"(let-values(((partially-expanded-bodys_209)"
"(let-values(((...er/expand/module.rkt:249:11_232)"
" partially-expand-bodys75.1)"
"((bodys268_233)"
" bodys_206)"
"((s269_234)"
" s_39)"
"((temp270_235)"
"(zero?"
" phase_207))"
"((phase271_236)"
" phase_207)"
"((partial-body-ctx272_237)"
" partial-body-ctx_208)"
"((m-ns273_238)"
" m-ns_78)"
"((self274_239)"
" self_71)"
"((frame-id275_240)"
" frame-id_77)"
"((requires+provides276_241)"
" requires+provides_81)"
"((need-eventually-defined277_242)"
" need-eventually-defined_173)"
"((initial-require-s278_243)"
" initial-require-s_74)"
"((defined-syms279_244)"
" defined-syms_82)"
"((declared-keywords280_245)"
" declared-keywords_175)"
"((declared-submodule-names281_246)"
" declared-submodule-names_176)"
"((mpis-to-reset282_247)"
" mpis-to-reset_83)"
"((pass-1-and-2-loop283_248)"
" pass-1-and-2-loop_205))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" partially-expand-bodys75.1))"
"(partially-expand-bodys73.1"
" initial-require-s278_243"
" partial-body-ctx272_237"
" declared-keywords280_245"
" declared-submodule-names281_246"
" defined-syms279_244"
" frame-id275_240"
" pass-1-and-2-loop283_248"
" mpis-to-reset282_247"
" m-ns273_238"
" need-eventually-defined277_242"
" s269_234"
" phase271_236"
" requires+provides276_241"
" self274_239"
" temp270_235"
" bodys268_233)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:249:11_232"
" keyword-procedure-extract"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" 3)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
"(list"
" initial-require-s278_243"
" partial-body-ctx272_237"
" declared-keywords280_245"
" declared-submodule-names281_246"
" defined-syms279_244"
" frame-id275_240"
" pass-1-and-2-loop283_248"
" mpis-to-reset282_247"
" m-ns273_238"
" need-eventually-defined277_242"
" s269_234"
" phase271_236"
" requires+provides276_241"
" self274_239"
" temp270_235)"
" bodys268_233)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_249)"
"(expand-context-observer"
" partial-body-ctx_208)))"
"(if obs_249"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_249"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_210)"
"(let-values(((the-struct_250)"
" partial-body-ctx_208))"
"(if(expand-context?"
" the-struct_250)"
"(let-values(((only-immediate?284_251)"
" #f)"
"((frame-id285_252)"
" #f)"
"((post-expansion-scope286_253)"
" #f)"
"((to-module-lifts287_254)"
"(let-values(((...er/expand/module.rkt:275:56_255)"
" make-to-module-lift-context28.1)"
"((phase288_256)"
" phase_207)"
"((module-ends289_257)"
" module-ends_174)"
"((temp290_258)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-to-module-lift-context28.1))"
"(make-to-module-lift-context26.1"
" temp290_258"
" module-ends289_257"
" phase288_256)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:275:56_255"
" keyword-procedure-extract"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
" 3)"
" '(#:end-as-expressions?"
" #:shared-module-ends)"
"(list"
" temp290_258"
" module-ends289_257)"
" phase288_256)))))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_250)"
" post-expansion-scope286_253"
"(root-expand-context-top-level-bind-scope"
" the-struct_250)"
"(root-expand-context-all-scopes-stx"
" the-struct_250)"
"(root-expand-context-use-site-scopes"
" the-struct_250)"
"(root-expand-context-defined-syms"
" the-struct_250)"
" frame-id285_252"
"(root-expand-context-counter"
" the-struct_250)"
"(root-expand-context-lift-key"
" the-struct_250)"
"(expand-context-context"
" the-struct_250)"
"(expand-context-phase"
" the-struct_250)"
"(expand-context-namespace"
" the-struct_250)"
"(expand-context-env"
" the-struct_250)"
"(expand-context-post-expansion-scope-action"
" the-struct_250)"
"(expand-context-scopes"
" the-struct_250)"
"(expand-context-def-ctx-scopes"
" the-struct_250)"
"(expand-context-reference-records"
" the-struct_250)"
" only-immediate?284_251"
"(expand-context-just-once?"
" the-struct_250)"
"(expand-context-module-begin-k"
" the-struct_250)"
"(expand-context-need-eventually-defined"
" the-struct_250)"
"(expand-context-allow-unbound?"
" the-struct_250)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_250)"
"(expand-context-stops"
" the-struct_250)"
"(expand-context-current-introduction-scopes"
" the-struct_250)"
"(expand-context-declared-submodule-names"
" the-struct_250)"
"(expand-context-lifts"
" the-struct_250)"
"(expand-context-lift-envs"
" the-struct_250)"
"(expand-context-module-lifts"
" the-struct_250)"
"(expand-context-require-lifts"
" the-struct_250)"
" to-module-lifts287_254"
"(expand-context-requires+provides"
" the-struct_250)"
"(expand-context-name"
" the-struct_250)"
"(expand-context-observer"
" the-struct_250)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                           \"expand-context?\""
" the-struct_250)))))"
"(let-values(((...er/expand/module.rkt:279:9_259)"
" finish-expanding-body-expressons91.1)"
"((partially-expanded-bodys243_260)"
" partially-expanded-bodys_209)"
"((temp244_261)"
"(zero?"
" phase_207))"
"((phase245_262)"
" phase_207)"
"((body-ctx246_263)"
" body-ctx_210)"
"((self247_264)"
" self_71)"
"((declared-submodule-names248_265)"
" declared-submodule-names_176)"
"((mpis-to-reset249_266)"
" mpis-to-reset_83))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" finish-expanding-body-expressons91.1))"
"(finish-expanding-body-expressons89.1"
" body-ctx246_263"
" declared-submodule-names248_265"
" mpis-to-reset249_266"
" phase245_262"
" self247_264"
" temp244_261"
" partially-expanded-bodys243_260)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:279:9_259"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
" 3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:mpis-to-reset"
" #:phase"
" #:self"
" #:tail?)"
"(list"
" body-ctx246_263"
" declared-submodule-names248_265"
" mpis-to-reset249_266"
" phase245_262"
" self247_264"
" temp244_261)"
" partially-expanded-bodys243_260))))))))))"
" pass-1-and-2-loop_205)"
" bodys_172"
" phase_67)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_173"
" self_71)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_267)"
"(expand-context-observer"
" ctx_156)))"
"(if obs_267"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_267"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_178)"
"(let-values(((...er/expand/module.rkt:296:7_268)"
" resolve-provides109.1)"
"((expression-expanded-bodys291_269)"
" expression-expanded-bodys_177)"
"((s292_270)"
" s_39)"
"((requires+provides293_271)"
" requires+provides_81)"
"((declared-submodule-names294_272)"
" declared-submodule-names_176)"
"((m-ns295_273)"
" m-ns_78)"
"((phase296_274)"
" phase_67)"
"((self297_275)"
" self_71)"
"((ctx298_276)"
" ctx_156))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve-provides109.1))"
"(resolve-provides107.1"
" ctx298_276"
" declared-submodule-names294_272"
" m-ns295_273"
" s292_270"
" phase296_274"
" requires+provides293_271"
" self297_275"
" expression-expanded-bodys291_269)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:296:7_268"
" keyword-procedure-extract"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" 3)"
" '(#:ctx"
" #:declared-submodule-names"
" #:namespace"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" ctx298_276"
" declared-submodule-names294_272"
" m-ns295_273"
" s292_270"
" phase296_274"
" requires+provides293_271"
" self297_275)"
" expression-expanded-bodys291_269)))))"
"(let-values(((is-cross-phase-persistent?_179)"
"(hash-ref"
" declared-keywords_175"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_179"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_81)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"cannot be cross-phase persistent due to required modules\""
" s_39"
"(hash-ref"
" declared-keywords_175"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_178)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_277)"
"(expand-context-observer"
" ctx_156)))"
"(if obs_277"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_277"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((submod-ctx_180)"
"(let-values(((the-struct_278)"
" ctx_156))"
"(if(expand-context?"
" the-struct_278)"
"(let-values(((frame-id299_279)"
" #f)"
"((post-expansion-scope300_280)"
" #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_278)"
" post-expansion-scope300_280"
"(root-expand-context-top-level-bind-scope"
" the-struct_278)"
"(root-expand-context-all-scopes-stx"
" the-struct_278)"
"(root-expand-context-use-site-scopes"
" the-struct_278)"
"(root-expand-context-defined-syms"
" the-struct_278)"
" frame-id299_279"
"(root-expand-context-counter"
" the-struct_278)"
"(root-expand-context-lift-key"
" the-struct_278)"
"(expand-context-context"
" the-struct_278)"
"(expand-context-phase"
" the-struct_278)"
"(expand-context-namespace"
" the-struct_278)"
"(expand-context-env"
" the-struct_278)"
"(expand-context-post-expansion-scope-action"
" the-struct_278)"
"(expand-context-scopes"
" the-struct_278)"
"(expand-context-def-ctx-scopes"
" the-struct_278)"
"(expand-context-reference-records"
" the-struct_278)"
"(expand-context-only-immediate?"
" the-struct_278)"
"(expand-context-just-once?"
" the-struct_278)"
"(expand-context-module-begin-k"
" the-struct_278)"
"(expand-context-need-eventually-defined"
" the-struct_278)"
"(expand-context-allow-unbound?"
" the-struct_278)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_278)"
"(expand-context-stops"
" the-struct_278)"
"(expand-context-current-introduction-scopes"
" the-struct_278)"
"(expand-context-declared-submodule-names"
" the-struct_278)"
"(expand-context-lifts"
" the-struct_278)"
"(expand-context-lift-envs"
" the-struct_278)"
"(expand-context-module-lifts"
" the-struct_278)"
"(expand-context-require-lifts"
" the-struct_278)"
"(expand-context-to-module-lifts"
" the-struct_278)"
"(expand-context-requires+provides"
" the-struct_278)"
"(expand-context-name"
" the-struct_278)"
"(expand-context-observer"
" the-struct_278)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                 \"expand-context?\""
" the-struct_278)))))"
"(let-values(((declare-enclosing-module_181)"
"(delay"
"(lambda()"
"(let-values(((...er/expand/module.rkt:324:14_281)"
" declare-module-for-expansion129.1)"
"((fully-expanded-bodys-except-post-submodules301_282)"
" fully-expanded-bodys-except-post-submodules_178)"
"((temp302_283)"
" id:module-name202_49)"
"((temp303_284)"
" initial-require203_50)"
"((temp304_285)"
" #%module-begin235_160)"
"((requires+provides305_286)"
" requires+provides_81)"
"((m-ns306_287)"
" m-ns_78)"
"((self307_288)"
" self_71)"
"((enclosing-self308_289)"
" enclosing-self_41)"
"((root-ctx309_290)"
" root-ctx_75))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" declare-module-for-expansion129.1))"
"(declare-module-for-expansion127.1"
" enclosing-self308_289"
" temp304_285"
" temp303_284"
" temp302_283"
" m-ns306_287"
" requires+provides305_286"
" root-ctx309_290"
" self307_288"
" fully-expanded-bodys-except-post-submodules301_282)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:324:14_281"
" keyword-procedure-extract"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" 3)"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
"(list"
" enclosing-self308_289"
" temp304_285"
" temp303_284"
" temp302_283"
" m-ns306_287"
" requires+provides305_286"
" root-ctx309_290"
" self307_288)"
" fully-expanded-bodys-except-post-submodules301_282)))))))"
"(let-values(((fully-expanded-bodys_182)"
"(if(stop-at-module*?"
" ctx_156)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_178)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:339:9_291)"
" expand-post-submodules151.1)"
"((fully-expanded-bodys-except-post-submodules310_292)"
" fully-expanded-bodys-except-post-submodules_178)"
"((declare-enclosing-module311_293)"
" declare-enclosing-module_181)"
"((s312_294)"
" s_39)"
"((phase313_295)"
" phase_67)"
"((self314_296)"
" self_71)"
"((requires+provides315_297)"
" requires+provides_81)"
"((is-cross-phase-persistent?316_298)"
" is-cross-phase-persistent?_179)"
"((mpis-to-reset317_299)"
" mpis-to-reset_83)"
"((declared-submodule-names318_300)"
" declared-submodule-names_176)"
"((ctx319_301)"
" ctx_156))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-post-submodules151.1))"
"(expand-post-submodules149.1"
" ctx319_301"
" declare-enclosing-module311_293"
" declared-submodule-names318_300"
" is-cross-phase-persistent?316_298"
" mpis-to-reset317_299"
" s312_294"
" phase313_295"
" requires+provides315_297"
" self314_296"
" fully-expanded-bodys-except-post-submodules310_292)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:339:9_291"
" keyword-procedure-extract"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" 3)"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
"(list"
" ctx319_301"
" declare-enclosing-module311_293"
" declared-submodule-names318_300"
" is-cross-phase-persistent?316_298"
" mpis-to-reset317_299"
" s312_294"
" phase313_295"
" requires+provides315_297"
" self314_296)"
" fully-expanded-bodys-except-post-submodules310_292)))))))"
"(let-values(((mb-s239_302)"
" mb-s_155)"
"((disarmed-mb-s240_303)"
" disarmed-mb-s_158)"
"((temp241_304)"
"(list*"
" #%module-begin235_160"
" fully-expanded-bodys_182)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" mb-s239_302"
" disarmed-mb-s240_303"
" temp241_304)"
"(rebuild101.1"
" mb-s239_302"
" disarmed-mb-s240_303"
" temp241_304)))))))))))))))))))))))))))"
"(let-values(((mb-ctx_87)"
"(let-values(((the-struct_305)"
" ctx_79))"
"(if(expand-context?"
" the-struct_305)"
"(let-values(((context320_306)"
" 'module-begin)"
"((module-begin-k321_307)"
" module-begin-k_86))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_305)"
"(root-expand-context-post-expansion-scope"
" the-struct_305)"
"(root-expand-context-top-level-bind-scope"
" the-struct_305)"
"(root-expand-context-all-scopes-stx"
" the-struct_305)"
"(root-expand-context-use-site-scopes"
" the-struct_305)"
"(root-expand-context-defined-syms"
" the-struct_305)"
"(root-expand-context-frame-id"
" the-struct_305)"
"(root-expand-context-counter"
" the-struct_305)"
"(root-expand-context-lift-key"
" the-struct_305)"
" context320_306"
"(expand-context-phase"
" the-struct_305)"
"(expand-context-namespace"
" the-struct_305)"
"(expand-context-env"
" the-struct_305)"
"(expand-context-post-expansion-scope-action"
" the-struct_305)"
"(expand-context-scopes"
" the-struct_305)"
"(expand-context-def-ctx-scopes"
" the-struct_305)"
"(expand-context-reference-records"
" the-struct_305)"
"(expand-context-only-immediate?"
" the-struct_305)"
"(expand-context-just-once?"
" the-struct_305)"
" module-begin-k321_307"
"(expand-context-need-eventually-defined"
" the-struct_305)"
"(expand-context-allow-unbound?"
" the-struct_305)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_305)"
"(expand-context-stops"
" the-struct_305)"
"(expand-context-current-introduction-scopes"
" the-struct_305)"
"(expand-context-declared-submodule-names"
" the-struct_305)"
"(expand-context-lifts"
" the-struct_305)"
"(expand-context-lift-envs"
" the-struct_305)"
"(expand-context-module-lifts"
" the-struct_305)"
"(expand-context-require-lifts"
" the-struct_305)"
"(expand-context-to-module-lifts"
" the-struct_305)"
"(expand-context-requires+provides"
" the-struct_305)"
"(expand-context-name"
" the-struct_305)"
"(expand-context-observer"
" the-struct_305)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                               \"expand-context?\""
" the-struct_305)))))"
"(let-values(((mb_88)"
"(let-values(((...er/expand/module.rkt:372:5_308)"
" ensure-module-begin30.1)"
"((bodys322_309)"
" bodys_80)"
"((module-name-sym323_310)"
" module-name-sym_68)"
"((initial-require-s324_311)"
" initial-require-s_74)"
"((m-ns325_312)"
" m-ns_78)"
"((mb-ctx326_313)"
" mb-ctx_87)"
"((phase327_314)"
" phase_67)"
"((s328_315)"
" s_39))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" ensure-module-begin30.1))"
"(ensure-module-begin28.1"
" mb-ctx326_313"
" initial-require-s324_311"
" m-ns325_312"
" module-name-sym323_310"
" phase327_314"
" s328_315"
" bodys322_309)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:372:5_308"
" keyword-procedure-extract"
" '(#:ctx"
" #:initial-require-s"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s)"
" 3)"
" '(#:ctx"
" #:initial-require-s"
" #:m-ns"
" #:module-name-sym"
" #:phase"
" #:s)"
"(list"
" mb-ctx326_313"
" initial-require-s324_311"
" m-ns325_312"
" module-name-sym323_310"
" phase327_314"
" s328_315)"
" bodys322_309)))))"
"(let-values(((expanded-mb_89)"
"(let-values(((mb329_316)"
" mb_88)"
"((mb-ctx330_317)"
" mb-ctx_87))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" mb329_316"
" mb-ctx330_317)"
"(expand7.1"
" mb329_316"
" mb-ctx330_317)))))"
"(let-values(((generic-self_90)"
"(make-generic-self-module-path-index"
" self_71)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_71)"
"(let-values(((lst_318)"
"(unbox"
" mpis-to-reset_83)))"
"(begin"
"(if(list? lst_318)"
"(void)"
"(let-values()"
"(in-list lst_318)))"
"((letrec-values(((for-loop_319)"
"(lambda(fold-var_320"
" lst_321)"
"(if(pair?"
" lst_321)"
"(let-values(((mpi_322)"
"(unsafe-car"
" lst_321)))"
"(if #t"
"(let-values(((fold-var_323)"
"(let-values(((fold-var_324)"
" fold-var_320))"
"(let-values(((fold-var_325)"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_322))"
"(void)))))"
"(values"
" fold-var_325)))))"
"(if #t"
"(for-loop_319"
" fold-var_323"
"(unsafe-cdr"
" lst_321))"
" fold-var_323))"
" fold-var_320))"
" fold-var_320))))"
" for-loop_319)"
"(void)"
" lst_318)))"
"(let-values(((result-s_326)"
"(let-values(((s331_327)"
" s_39)"
"((disarmed-s332_328)"
" disarmed-s_46)"
"((temp333_329)"
"(list"
" module201_48"
" id:module-name202_49"
" initial-require-s_74"
" expanded-mb_89)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" s331_327"
" disarmed-s332_328"
" temp333_329)"
"(rebuild101.1"
" s331_327"
" disarmed-s332_328"
" temp333_329)))))"
"(let-values(((result-s_330)"
"(1/syntax-module-path-index-shift"
" result-s_326"
" self_71"
" generic-self_90)))"
"(let-values(((result-s_331)"
"(attach-require-provide-properties"
" requires+provides_81"
" result-s_330"
" self_71"
" generic-self_90)))"
"(let-values(((result-s_332)"
"(attach-root-expand-context-properties"
" result-s_331"
" root-ctx_75"
" self_71"
" generic-self_90)))"
"(let-values(((result-s_333)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_81)"
"(syntax-property$1"
" result-s_332"
" 'module-body-context-simple?"
" #t)"
" result-s_332)))"
"(begin"
"(let-values(((obs_334)"
"(expand-context-observer"
" ctx_79)))"
"(if obs_334"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_334"
" 'rename-one"
" result-s_333))"
"(void)))"
"(void)))"
" result-s_333)))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(unpack13.1$1)"
"(lambda(given-kws_335 given-args_336 s9_337 init-ctx10_338 enclosing-self11_339)"
"(let-values(((enclosing-is-cross-phase-persistent?6_340)"
"(if(pair? given-kws_335)(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_335)) #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?2_341)"
"(if enclosing-is-cross-phase-persistent?6_340(car given-args_336)(void)))"
"((given-kws_342)(if enclosing-is-cross-phase-persistent?6_340(cdr given-kws_335) given-kws_335))"
"((given-args_343)"
"(if enclosing-is-cross-phase-persistent?6_340(cdr given-args_336) given-args_336)))"
"(let-values(((enclosing-requires+provides7_344)"
"(if(pair? given-kws_342)(eq? '#:enclosing-requires+provides(car given-kws_342)) #f)))"
"(let-values(((enclosing-requires+provides3_345)"
"(if enclosing-requires+provides7_344(car given-args_343)(void)))"
"((given-kws_346)(if enclosing-requires+provides7_344(cdr given-kws_342) given-kws_342))"
"((given-args_347)(if enclosing-requires+provides7_344(cdr given-args_343) given-args_343)))"
"(let-values(((keep-enclosing-scope-at-phase5_348)"
"(if(pair? given-kws_346)(eq? '#:keep-enclosing-scope-at-phase(car given-kws_346)) #f)))"
"(let-values(((keep-enclosing-scope-at-phase1_349)"
"(if keep-enclosing-scope-at-phase5_348(car given-args_347)(void)))"
"((given-kws_350)(if keep-enclosing-scope-at-phase5_348(cdr given-kws_346) given-kws_346))"
"((given-args_351)"
"(if keep-enclosing-scope-at-phase5_348(cdr given-args_347) given-args_347)))"
"(let-values(((mpis-for-enclosing-reset8_352)(pair? given-kws_350)))"
"(let-values(((mpis-for-enclosing-reset4_353)"
"(if mpis-for-enclosing-reset8_352(car given-args_351)(void))))"
"(expand-module12.1"
" enclosing-is-cross-phase-persistent?2_341"
" enclosing-is-cross-phase-persistent?6_340"
" enclosing-requires+provides3_345"
" enclosing-requires+provides7_344"
" keep-enclosing-scope-at-phase1_349"
" keep-enclosing-scope-at-phase5_348"
" mpis-for-enclosing-reset4_353"
" mpis-for-enclosing-reset8_352"
" s9_337"
" init-ctx10_338"
" enclosing-self11_339)))))))))))"
"(define-values"
"(expand-module14.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_354 given-argc_355)"
"(if(= given-argc_355 5)"
"(let-values(((l1_356) given-kws_354))"
"(let-values(((l1_357)"
"(if(null? l1_356)"
" l1_356"
"(if(eq?(car l1_356) '#:enclosing-is-cross-phase-persistent?)(cdr l1_356) l1_356))))"
"(let-values(((l1_358) l1_357))"
"(let-values(((l1_359)"
"(if(null? l1_358)"
" l1_358"
"(if(eq?(car l1_358) '#:enclosing-requires+provides)(cdr l1_358) l1_358))))"
"(let-values(((l1_360) l1_359))"
"(let-values(((l1_361)"
"(if(null? l1_360)"
" l1_360"
"(if(eq?(car l1_360) '#:keep-enclosing-scope-at-phase)(cdr l1_360) l1_360))))"
"(let-values(((l1_362) l1_361))"
"(let-values(((l1_363)"
"(if(null? l1_362)"
" l1_362"
"(if(eq?(car l1_362) '#:mpis-for-enclosing-reset)(cdr l1_362) l1_362))))"
"(null? l1_363)))))))))"
" #f))"
"(case-lambda"
"((given-kws_364 given-args_365 s_366 init-ctx_367 enclosing-self_368)"
"(unpack13.1$1 given-kws_364 given-args_365 s_366 init-ctx_367 enclosing-self_368)))"
" null"
" '(#:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(let-values(((expand-module_369)"
"(case-lambda"
"((s_370 init-ctx_371 enclosing-self_372)"
"(unpack13.1$1 null null s_370 init-ctx_371 enclosing-self_372)))))"
" expand-module_369)))"
"(define-values"
"(lifted/1.1$10)"
"(make-required"
" 'ensure-module-begin"
"(case-lambda((self_373 bodys_374)(apply missing-kw self_373 bodys_374 null)))"
" #f"
" #f))"
"(define-values"
"(ensure-module-begin28.1)"
"(lambda(ctx18_375 initial-require-s16_376 m-ns17_377 module-name-sym15_378 phase19_379 s20_380 bodys27_381)"
"(let-values(((bodys_382) bodys27_381))"
"(let-values(((module-name-sym_383) module-name-sym15_378))"
"(let-values(((initial-require-s_384) initial-require-s16_376))"
"(let-values(((m-ns_385) m-ns17_377))"
"(let-values(((ctx_386) ctx18_375))"
"(let-values(((phase_387) phase19_379))"
"(let-values(((s_388) s20_380))"
"(let-values()"
"(let-values(((make-mb-ctx_389)"
"(lambda()"
"(let-values(((the-struct_391) ctx_386))"
"(if(expand-context? the-struct_391)"
"(let-values(((context334_392) 'module-begin)((only-immediate?335_393) #t))"
"(expand-context1.1"
"(root-expand-context-module-scopes the-struct_391)"
"(root-expand-context-post-expansion-scope the-struct_391)"
"(root-expand-context-top-level-bind-scope the-struct_391)"
"(root-expand-context-all-scopes-stx the-struct_391)"
"(root-expand-context-use-site-scopes the-struct_391)"
"(root-expand-context-defined-syms the-struct_391)"
"(root-expand-context-frame-id the-struct_391)"
"(root-expand-context-counter the-struct_391)"
"(root-expand-context-lift-key the-struct_391)"
" context334_392"
"(expand-context-phase the-struct_391)"
"(expand-context-namespace the-struct_391)"
"(expand-context-env the-struct_391)"
"(expand-context-post-expansion-scope-action the-struct_391)"
"(expand-context-scopes the-struct_391)"
"(expand-context-def-ctx-scopes the-struct_391)"
"(expand-context-reference-records the-struct_391)"
" only-immediate?335_393"
"(expand-context-just-once? the-struct_391)"
"(expand-context-module-begin-k the-struct_391)"
"(expand-context-need-eventually-defined the-struct_391)"
"(expand-context-allow-unbound? the-struct_391)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top? the-struct_391)"
"(expand-context-stops the-struct_391)"
"(expand-context-current-introduction-scopes the-struct_391)"
"(expand-context-declared-submodule-names the-struct_391)"
"(expand-context-lifts the-struct_391)"
"(expand-context-lift-envs the-struct_391)"
"(expand-context-module-lifts the-struct_391)"
"(expand-context-require-lifts the-struct_391)"
"(expand-context-to-module-lifts the-struct_391)"
"(expand-context-requires+provides the-struct_391)"
"(expand-context-name the-struct_391)"
"(expand-context-observer the-struct_391)))"
"                                        (raise-argument-error 'struct-copy \"expand-context?\" the-struct_391))))))"
"(let-values(((mb_390)"
"(if(= 1(length bodys_382))"
"(let-values()"
"(begin"
"(let-values(((obs_394)(expand-context-observer ctx_386)))"
"(if obs_394"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_394 'rename-one(car bodys_382)))"
"(void)))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_382)) phase_387))"
"(let-values()(car bodys_382))"
"(let-values()"
"(let-values(((partly-expanded-body_395)"
"(let-values(((temp336_396)"
"(add-enclosing-name-property"
"(car bodys_382)"
" module-name-sym_383))"
"((temp337_397)(make-mb-ctx_389)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp336_396 temp337_397)"
"(expand7.1 temp336_396 temp337_397)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_395)"
" phase_387))"
"(let-values() partly-expanded-body_395)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:450:10_398)"
" add-module-begin41.1)"
"((temp338_399)(list partly-expanded-body_395))"
"((s339_400) s_388)"
"((initial-require-s340_401) initial-require-s_384)"
"((phase341_402) phase_387)"
"((module-name-sym342_403) module-name-sym_383)"
"((temp343_404)(make-mb-ctx_389))"
"((temp344_405) #f))"
"(if(variable-reference-constant?"
"(#%variable-reference add-module-begin41.1))"
"(add-module-begin39.1"
" temp344_405"
" #t"
" temp338_399"
" s339_400"
" initial-require-s340_401"
" phase341_402"
" module-name-sym342_403"
" temp343_404)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:450:10_398"
" keyword-procedure-extract"
" '(#:log-rename-one?)"
" 8)"
" '(#:log-rename-one?)"
"(list temp344_405)"
" temp338_399"
" s339_400"
" initial-require-s340_401"
" phase341_402"
" module-name-sym342_403"
" temp343_404))))))))))"
"(let-values()"
"(let-values(((bodys345_406) bodys_382)"
"((s346_407) s_388)"
"((initial-require-s347_408) initial-require-s_384)"
"((phase348_409) phase_387)"
"((module-name-sym349_410) module-name-sym_383)"
"((temp350_411)(make-mb-ctx_389)))"
"(if(variable-reference-constant?(#%variable-reference add-module-begin41.1))"
"(add-module-begin39.1"
" #f"
" #f"
" bodys345_406"
" s346_407"
" initial-require-s347_408"
" phase348_409"
" module-name-sym349_410"
" temp350_411)"
"(add-module-begin41.1"
" bodys345_406"
" s346_407"
" initial-require-s347_408"
" phase348_409"
" module-name-sym349_410"
" temp350_411)))))))"
"(add-enclosing-name-property mb_390 module-name-sym_383)))))))))))))"
"(define-values"
"(unpack29.1$1)"
"(lambda(given-kws_412 given-args_413 bodys27_414)"
"(let-values(((ctx18_415)(car given-args_413))"
"((given-kws_416)(cdr given-kws_412))"
"((given-args_417)(cdr given-args_413)))"
"(let-values(((initial-require-s16_418)(car given-args_417))"
"((given-kws_419)(cdr given-kws_416))"
"((given-args_420)(cdr given-args_417)))"
"(let-values(((m-ns17_421)(car given-args_420))"
"((given-kws_422)(cdr given-kws_419))"
"((given-args_423)(cdr given-args_420)))"
"(let-values(((module-name-sym15_424)(car given-args_423))"
"((given-kws_425)(cdr given-kws_422))"
"((given-args_426)(cdr given-args_423)))"
"(let-values(((phase19_427)(car given-args_426))"
"((given-kws_428)(cdr given-kws_425))"
"((given-args_429)(cdr given-args_426)))"
"(let-values(((s20_430)(car given-args_429)))"
"(ensure-module-begin28.1"
" ctx18_415"
" initial-require-s16_418"
" m-ns17_421"
" module-name-sym15_424"
" phase19_427"
" s20_430"
" bodys27_414)))))))))"
"(define-values"
"(ensure-module-begin30.1)"
"(lifted/1.1$10"
"(lambda(given-kws_431 given-argc_432)"
"(if(= given-argc_432 3)"
"(let-values(((l2_433) given-kws_431))"
"(if(pair? l2_433)"
"(if(eq?(car l2_433) '#:ctx)"
"(let-values(((l2_434)(cdr l2_433)))"
"(if(pair? l2_434)"
"(if(eq?(car l2_434) '#:initial-require-s)"
"(let-values(((l2_435)(cdr l2_434)))"
"(if(pair? l2_435)"
"(if(eq?(car l2_435) '#:m-ns)"
"(let-values(((l2_436)(cdr l2_435)))"
"(if(pair? l2_436)"
"(if(eq?(car l2_436) '#:module-name-sym)"
"(let-values(((l2_437)(cdr l2_436)))"
"(if(pair? l2_437)"
"(if(eq?(car l2_437) '#:phase)"
"(let-values(((l2_438)(cdr l2_437)))"
"(if(pair? l2_438)(if(eq?(car l2_438) '#:s)(null?(cdr l2_438)) #f) #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_439 given-args_440 bodys_441)(unpack29.1$1 given-kws_439 given-args_440 bodys_441)))"
" '(#:ctx #:initial-require-s #:m-ns #:module-name-sym #:phase #:s)"
" '(#:ctx #:initial-require-s #:m-ns #:module-name-sym #:phase #:s)))"
"(define-values"
"(add-module-begin39.1)"
"(lambda(log-rename-one?31_442"
" log-rename-one?32_443"
" bodys33_444"
" s34_445"
" initial-require-s35_446"
" phase36_447"
" module-name-sym37_448"
" mb-ctx38_449)"
"(let-values(((bodys_450) bodys33_444))"
"(let-values(((s_451) s34_445))"
"(let-values(((initial-require-s_452) initial-require-s35_446))"
"(let-values(((phase_453) phase36_447))"
"(let-values(((module-name-sym_454) module-name-sym37_448))"
"(let-values(((mb-ctx_455) mb-ctx38_449))"
"(let-values(((log-rename-one?_456)(if log-rename-one?32_443 log-rename-one?31_442 #t)))"
"(let-values()"
"(let-values(((disarmed-initial-require-s_457)(syntax-disarm$1 initial-require-s_452)))"
"(let-values(((mb-id_458)(datum->syntax$2 disarmed-initial-require-s_457 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id351_461) mb-id_458)((phase352_462) phase_453))"
"(if(variable-reference-constant?(#%variable-reference resolve23.1))"
"(resolve21.1 #f #f #f #f #f #f mb-id351_461 phase352_462)"
"(resolve23.1 mb-id351_461 phase352_462)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                             \"no #%module-begin binding in the module's language\""
" s_451)))"
"(values))))"
"(let-values(((mb_459)"
"(datum->syntax$2"
" disarmed-initial-require-s_457"
"(list* mb-id_458 bodys_450)"
" s_451)))"
"(let-values((()"
"(begin"
"(let-values(((obs_463)(expand-context-observer mb-ctx_455)))"
"(if obs_463"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_463 'tag mb_459))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_456"
"(let-values()"
"(let-values(((obs_464)(expand-context-observer mb-ctx_455)))"
"(if obs_464"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_464 'rename-one mb_459))"
"(void)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_460)"
"(let-values(((temp353_465)"
"(add-enclosing-name-property mb_459 module-name-sym_454))"
"((mb-ctx354_466) mb-ctx_455))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp353_465 mb-ctx354_466)"
"(expand7.1 temp353_465 mb-ctx354_466)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_460) phase_453))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                         \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_451"
" partly-expanded-mb_460)))"
" partly-expanded-mb_460))))))))))))))))))"
"(define-values"
"(unpack40.1$1)"
"(lambda(given-kws_467"
" given-args_468"
" bodys33_469"
" s34_470"
" initial-require-s35_471"
" phase36_472"
" module-name-sym37_473"
" mb-ctx38_474)"
"(let-values(((log-rename-one?32_475)(pair? given-kws_467)))"
"(let-values(((log-rename-one?31_476)(if log-rename-one?32_475(car given-args_468)(void))))"
"(add-module-begin39.1"
" log-rename-one?31_476"
" log-rename-one?32_475"
" bodys33_469"
" s34_470"
" initial-require-s35_471"
" phase36_472"
" module-name-sym37_473"
" mb-ctx38_474)))))"
"(define-values"
"(add-module-begin41.1)"
"(make-optional-keyword-procedure"
"(lambda(given-kws_477 given-argc_478)"
"(if(= given-argc_478 8)"
"(let-values(((l1_479) given-kws_477))"
"(let-values(((l1_480)"
"(if(null? l1_479) l1_479(if(eq?(car l1_479) '#:log-rename-one?)(cdr l1_479) l1_479))))"
"(null? l1_480)))"
" #f))"
"(case-lambda"
"((given-kws_481 given-args_482 bodys_483 s_484 initial-require-s_485 phase_486 module-name-sym_487 mb-ctx_488)"
"(unpack40.1$1"
" given-kws_481"
" given-args_482"
" bodys_483"
" s_484"
" initial-require-s_485"
" phase_486"
" module-name-sym_487"
" mb-ctx_488)))"
" null"
" '(#:log-rename-one?)"
"(let-values(((add-module-begin_489)"
"(case-lambda"
"((bodys_490 s_491 initial-require-s_492 phase_493 module-name-sym_494 mb-ctx_495)"
"(unpack40.1$1"
" null"
" null"
" bodys_490"
" s_491"
" initial-require-s_492"
" phase_493"
" module-name-sym_494"
" mb-ctx_495)))))"
" add-module-begin_489)))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_496 module-name-sym_497)(syntax-property$1 stx_496 'enclosing-module-name module-name-sym_497)))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_498"
" outside-scope_499"
" init-ctx_500"
" keep-enclosing-scope-at-phase_501"
" self_502"
" enclosing-self_503"
" enclosing-mod_504)"
"(lambda(s_505)"
"(let-values(((s-without-enclosing_506)"
"(if keep-enclosing-scope-at-phase_501"
" s_505"
"(remove-use-site-scopes"
"(let-values(((lst_510)(root-expand-context-module-scopes init-ctx_500)))"
"(begin"
"(if(list? lst_510)(void)(let-values()(in-list lst_510)))"
"((letrec-values(((for-loop_511)"
"(lambda(s_512 lst_513)"
"(if(pair? lst_513)"
"(let-values(((sc_514)(unsafe-car lst_513)))"
"(if #t"
"(let-values(((s_515)"
"(let-values(((s_516) s_512))"
"(let-values(((s_517)"
"(let-values()"
"(remove-scope s_516 sc_514))))"
"(values s_517)))))"
"(if #t(for-loop_511 s_515(unsafe-cdr lst_513)) s_515))"
" s_512))"
" s_512))))"
" for-loop_511)"
" s_505"
" lst_510)))"
" init-ctx_500))))"
"(let-values(((s-with-edges_507)"
"(add-scope(add-scope s-without-enclosing_506 outside-scope_499) inside-scope_498)))"
"(let-values(((s-with-suitable-enclosing_508)"
"(if keep-enclosing-scope-at-phase_501"
"(let-values()"
"(1/syntax-module-path-index-shift s-with-edges_507 enclosing-self_503 enclosing-mod_504))"
"(let-values() s-with-edges_507))))"
"(let-values(((s-shifted_509)"
"(1/syntax-module-path-index-shift"
" s-with-suitable-enclosing_508"
"(make-generic-self-module-path-index self_502)"
" self_502)))"
"(syntax-set-inspector s-shifted_509(current-code-inspector)))))))))"
"(define-values"
"(lifted/2.1$1)"
"(make-required"
" 'partially-expand-bodys"
"(case-lambda((self_518 bodys_519)(apply missing-kw self_518 bodys_519 null)))"
" #f"
" #f))"
"(define-values"
"(partially-expand-bodys73.1)"
"(lambda(all-scopes-stx51_520"
" ctx45_521"
" declared-keywords53_522"
" declared-submodule-names54_523"
" defined-syms52_524"
" frame-id48_525"
" loop56_526"
" mpis-to-reset55_527"
" namespace46_528"
" need-eventually-defined50_529"
" original42_530"
" phase44_531"
" requires-and-provides49_532"
" self47_533"
" tail?43_534"
" bodys72_535)"
"(let-values(((bodys_536) bodys72_535))"
"(let-values(((s_537) original42_530))"
"(let-values(((tail?_538) tail?43_534))"
"(let-values(((phase_539) phase44_531))"
"(let-values(((partial-body-ctx_540) ctx45_521))"
"(let-values(((m-ns_541) namespace46_528))"
"(let-values(((self_542) self47_533))"
"(let-values(((frame-id_543) frame-id48_525))"
"(let-values(((requires+provides_544) requires-and-provides49_532))"
"(let-values(((need-eventually-defined_545) need-eventually-defined50_529))"
"(let-values(((all-scopes-stx_546) all-scopes-stx51_520))"
"(let-values(((defined-syms_547) defined-syms52_524))"
"(let-values(((declared-keywords_548) declared-keywords53_522))"
"(let-values(((declared-submodule-names_549) declared-submodule-names54_523))"
"(let-values(((mpis-to-reset_550) mpis-to-reset55_527))"
"(let-values(((pass-1-and-2-loop_551) loop56_526))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_541 phase_539)"
"((letrec-values(((loop_552)"
"(lambda(tail?_553 bodys_554)"
"(if(null? bodys_554)"
"(let-values()"
"(if tail?_553"
"(let-values()"
"(let-values(((bodys_555)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_540))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_540)))))"
"(if(null? bodys_555)"
" null"
"(loop_552"
" #t"
"(add-post-expansion-scope"
" bodys_555"
" partial-body-ctx_540)))))"
"(let-values() null)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_559)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_559"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_559"
" 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_556)"
"(let-values(((temp355_560)"
"(car bodys_554))"
"((partial-body-ctx356_561)"
" partial-body-ctx_540))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp355_560"
" partial-body-ctx356_561)"
"(expand7.1"
" temp355_560"
" partial-body-ctx356_561)))))"
"(let-values(((disarmed-exp-body_557)"
"(syntax-disarm$1 exp-body_556)))"
"(let-values(((lifted-defns_558)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_540))))"
"(begin"
"(if(null? lifted-defns_558)"
"(let-values()"
"(begin"
"(let-values(((obs_562)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_562"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_562"
" 'rename-list"
" lifted-defns_558))"
"(void)))"
"(void)))"
"(let-values(((obs_563)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_563"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_563"
" 'module-lift-loop"
"(append"
" lifted-defns_558"
"(cons"
" exp-body_556"
"(cdr bodys_554)))))"
"(void)))"
"(void)))))"
"(let-values()"
"(let-values(((obs_564)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_564"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_564"
" 'module-lift-end-loop"
"(cons"
" exp-body_556"
"(cdr bodys_554))))"
"(void)))"
"(void)))))"
"(let-values(((obs_565)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_565"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_565"
" 'rename-one"
" exp-body_556))"
"(void)))"
"(void)))"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_540))"
" lifted-defns_558"
"(loop_552"
" #f"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_540)))"
"(let-values(((tmp_566)"
"(core-form-sym"
" disarmed-exp-body_557"
" phase_539)))"
"(if(equal? tmp_566 'begin)"
"(let-values()"
"(let-values(((ok?_567"
" begin357_568"
" e358_569)"
"(let-values(((s_582)"
" disarmed-exp-body_557))"
"(if(if #t #t #f)"
"(let-values(((orig-s_583)"
" s_582))"
"(let-values(((begin357_584"
" e358_585)"
"(let-values(((s_586)"
"(if(syntax?$1"
" s_582)"
"(syntax-e$1"
" s_582)"
" s_582)))"
"(if(pair?"
" s_586)"
"(let-values(((begin359_587)"
"(let-values(((s_589)"
"(car"
" s_586)))"
" s_589))"
"((e360_588)"
"(let-values(((s_590)"
"(cdr"
" s_586)))"
"(let-values(((s_591)"
"(if(syntax?$1"
" s_590)"
"(syntax-e$1"
" s_590)"
" s_590)))"
"(let-values(((flat-s_592)"
"(to-syntax-list.1$1"
" s_591)))"
"(if(not"
" flat-s_592)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                \"bad syntax\""
" orig-s_583))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                  \"bad syntax\""
" orig-s_583))"
"(let-values()"
"(let-values(((e_593)"
"(let-values(((lst_594)"
" flat-s_592))"
"(begin"
"(if(list?"
" lst_594)"
"(void)"
"(let-values()"
"(in-list"
" lst_594)))"
"((letrec-values(((for-loop_595)"
"(lambda(e_596"
" lst_597)"
"(if(pair?"
" lst_597)"
"(let-values(((s_598)"
"(unsafe-car"
" lst_597)))"
"(if #t"
"(let-values(((e_599)"
"(let-values(((e_600)"
" e_596))"
"(let-values(((e_601)"
"(let-values()"
"(let-values(((e361_602)"
"(let-values()"
" s_598)))"
"(cons"
" e361_602"
" e_600)))))"
"(values"
" e_601)))))"
"(if #t"
"(for-loop_595"
" e_599"
"(unsafe-cdr"
" lst_597))"
" e_599))"
" e_596))"
" e_596))))"
" for-loop_595)"
" null"
" lst_594)))))"
"(alt-reverse"
" e_593))))))))))"
"(values"
" begin359_587"
" e360_588))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_583)))))"
"(values"
" #t"
" begin357_584"
" e358_585)))"
"(values #f #f #f)))))"
"(let-values(((track_580)"
"(lambda(e_603)"
"(syntax-track-origin$1"
" e_603"
" exp-body_556))))"
"(let-values(((spliced-bodys_581)"
"(append"
"(map2"
" track_580"
" e358_569)"
"(cdr bodys_554))))"
"(begin"
"(let-values(((obs_604)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_604"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_604"
" 'splice"
" spliced-bodys_581))"
"(void)))"
"(void)))"
"(loop_552"
" tail?_553"
" spliced-bodys_581))))))"
"(if(equal? tmp_566 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_620)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_620"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_620"
" 'enter-prim"
" exp-body_556))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_621)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_621"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_621"
" 'enter-prim-begin-for-syntax))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_605"
" begin-for-syntax362_606"
" e363_607)"
"(let-values(((s_622)"
" disarmed-exp-body_557))"
"(if(if #t #t #f)"
"(let-values(((orig-s_623)"
" s_622))"
"(let-values(((begin-for-syntax362_624"
" e363_625)"
"(let-values(((s_626)"
"(if(syntax?$1"
" s_622)"
"(syntax-e$1"
" s_622)"
" s_622)))"
"(if(pair?"
" s_626)"
"(let-values(((begin-for-syntax364_627)"
"(let-values(((s_629)"
"(car"
" s_626)))"
" s_629))"
"((e365_628)"
"(let-values(((s_630)"
"(cdr"
" s_626)))"
"(let-values(((s_631)"
"(if(syntax?$1"
" s_630)"
"(syntax-e$1"
" s_630)"
" s_630)))"
"(let-values(((flat-s_632)"
"(to-syntax-list.1$1"
" s_631)))"
"(if(not"
" flat-s_632)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                      \"bad syntax\""
" orig-s_623))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                        \"bad syntax\""
" orig-s_623))"
"(let-values()"
"(let-values(((e_633)"
"(let-values(((lst_634)"
" flat-s_632))"
"(begin"
"(if(list?"
" lst_634)"
"(void)"
"(let-values()"
"(in-list"
" lst_634)))"
"((letrec-values(((for-loop_635)"
"(lambda(e_636"
" lst_637)"
"(if(pair?"
" lst_637)"
"(let-values(((s_638)"
"(unsafe-car"
" lst_637)))"
"(if #t"
"(let-values(((e_639)"
"(let-values(((e_640)"
" e_636))"
"(let-values(((e_641)"
"(let-values()"
"(let-values(((e366_642)"
"(let-values()"
" s_638)))"
"(cons"
" e366_642"
" e_640)))))"
"(values"
" e_641)))))"
"(if #t"
"(for-loop_635"
" e_639"
"(unsafe-cdr"
" lst_637))"
" e_639))"
" e_636))"
" e_636))))"
" for-loop_635)"
" null"
" lst_634)))))"
"(alt-reverse"
" e_633))))))))))"
"(values"
" begin-for-syntax364_627"
" e365_628))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_623)))))"
"(values"
" #t"
" begin-for-syntax362_624"
" e363_625)))"
"(values"
" #f"
" #f"
" #f)))))"
"(let-values(((nested-bodys_618)"
"(pass-1-and-2-loop_551"
" e363_607"
"(add1"
" phase_539))))"
"(let-values(((ct-m-ns_619)"
"(namespace->namespace-at-phase"
" m-ns_541"
"(add1"
" phase_539))))"
"(begin"
"(namespace-run-available-modules!"
" m-ns_541"
"(add1 phase_539))"
"(eval-nested-bodys"
" nested-bodys_618"
"(add1 phase_539)"
" ct-m-ns_619"
" self_542"
" partial-body-ctx_540)"
"(namespace-visit-available-modules!"
" m-ns_541"
" phase_539)"
"(let-values(((obs_643)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_643"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_643"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body367_644)"
" exp-body_556)"
"((disarmed-exp-body368_645)"
" disarmed-exp-body_557)"
"((temp369_646)"
"(list*"
" begin-for-syntax362_606"
" nested-bodys_618)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" exp-body367_644"
" disarmed-exp-body368_645"
" temp369_646)"
"(rebuild101.1"
" exp-body367_644"
" disarmed-exp-body368_645"
" temp369_646)))"
"(loop_552"
" tail?_553"
"(cdr"
" bodys_554))))))))))"
"(if(equal? tmp_566 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_665)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_665"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_665"
" 'enter-prim"
" exp-body_556))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_666)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_666"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_666"
" 'enter-prim-define-values))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_647"
" define-values370_648"
" id371_649"
" rhs372_650)"
"(let-values(((s_667)"
" disarmed-exp-body_557))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_668)"
" s_667))"
"(let-values(((define-values370_669"
" id371_670"
" rhs372_671)"
"(let-values(((s_672)"
"(if(syntax?$1"
" s_667)"
"(syntax-e$1"
" s_667)"
" s_667)))"
"(if(pair?"
" s_672)"
"(let-values(((define-values373_673)"
"(let-values(((s_676)"
"(car"
" s_672)))"
" s_676))"
"((id374_674"
" rhs375_675)"
"(let-values(((s_677)"
"(cdr"
" s_672)))"
"(let-values(((s_678)"
"(if(syntax?$1"
" s_677)"
"(syntax-e$1"
" s_677)"
" s_677)))"
"(if(pair?"
" s_678)"
"(let-values(((id376_679)"
"(let-values(((s_681)"
"(car"
" s_678)))"
"(let-values(((s_682)"
"(if(syntax?$1"
" s_681)"
"(syntax-e$1"
" s_681)"
" s_681)))"
"(let-values(((flat-s_683)"
"(to-syntax-list.1$1"
" s_682)))"
"(if(not"
" flat-s_683)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                            \"bad syntax\""
" orig-s_668))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_668))"
"(let-values()"
"(let-values(((id_684)"
"(let-values(((lst_685)"
" flat-s_683))"
"(begin"
"(if(list?"
" lst_685)"
"(void)"
"(let-values()"
"(in-list"
" lst_685)))"
"((letrec-values(((for-loop_686)"
"(lambda(id_687"
" lst_688)"
"(if(pair?"
" lst_688)"
"(let-values(((s_689)"
"(unsafe-car"
" lst_688)))"
"(if #t"
"(let-values(((id_690)"
"(let-values(((id_691)"
" id_687))"
"(let-values(((id_692)"
"(let-values()"
"(let-values(((id386_693)"
"(let-values()"
"(if(let-values(((or-part_694)"
"(if(syntax?$1"
" s_689)"
"(symbol?"
"(syntax-e$1"
" s_689))"
" #f)))"
"(if or-part_694"
" or-part_694"
"(symbol?"
" s_689)))"
" s_689"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                            \"not an identifier\""
" orig-s_668"
" s_689)))))"
"(cons"
" id386_693"
" id_691)))))"
"(values"
" id_692)))))"
"(if #t"
"(for-loop_686"
" id_690"
"(unsafe-cdr"
" lst_688))"
" id_690))"
" id_687))"
" id_687))))"
" for-loop_686)"
" null"
" lst_685)))))"
"(alt-reverse"
" id_684)))))))))"
"((rhs377_680)"
"(let-values(((s_695)"
"(cdr"
" s_678)))"
"(let-values(((s_696)"
"(if(syntax?$1"
" s_695)"
"(syntax-e$1"
" s_695)"
" s_695)))"
"(if(pair?"
" s_696)"
"(let-values(((rhs378_697)"
"(let-values(((s_698)"
"(car"
" s_696)))"
" s_698))"
"(()"
"(let-values(((s_699)"
"(cdr"
" s_696)))"
"(let-values(((s_700)"
"(if(syntax?$1"
" s_699)"
"(syntax-e$1"
" s_699)"
" s_699)))"
"(if(null?"
" s_700)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"bad syntax\""
" orig-s_668))))))"
"(values"
" rhs378_697))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                        \"bad syntax\""
" orig-s_668))))))"
"(values"
" id376_679"
" rhs377_680))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                    \"bad syntax\""
" orig-s_668))))))"
"(values"
" define-values373_673"
" id374_674"
" rhs375_675))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_668)))))"
"(values"
" #t"
" define-values370_669"
" id371_670"
" rhs372_671)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_663)"
"(remove-use-site-scopes"
" id371_649"
" partial-body-ctx_540)))"
"(let-values((()"
"(begin"
"(let-values(((ids379_701)"
" ids_663)"
"((phase380_702)"
" phase_539)"
"((exp-body381_703)"
" exp-body_556))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids379_701"
" phase380_702"
" exp-body381_703"
" #f"
" #f)"
"(check-no-duplicate-ids10.1"
" ids379_701"
" phase380_702"
" exp-body381_703)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:607:10_704)"
" check-ids-unbound159.1)"
"((ids382_705)"
" ids_663)"
"((phase383_706)"
" phase_539)"
"((requires+provides384_707)"
" requires+provides_544)"
"((exp-body385_708)"
" exp-body_556))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound159.1))"
"(check-ids-unbound157.1"
" exp-body385_708"
" ids382_705"
" phase383_706"
" requires+provides384_707)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:607:10_704"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" exp-body385_708)"
" ids382_705"
" phase383_706"
" requires+provides384_707)))"
"(values))))"
"(let-values(((syms_664)"
"(let-values(((...er/expand/module.rkt:608:23_709)"
" select-defined-syms-and-bind!18.1)"
"((ids387_710)"
" ids_663)"
"((defined-syms388_711)"
" defined-syms_547)"
"((self389_712)"
" self_542)"
"((phase390_713)"
" phase_539)"
"((all-scopes-stx391_714)"
" all-scopes-stx_546)"
"((frame-id392_715)"
" frame-id_543)"
"((requires+provides393_716)"
" requires+provides_544)"
"((exp-body394_717)"
" exp-body_556))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id392_715"
" exp-body394_717"
" #t"
" requires+provides393_716"
" #t"
" #f"
" #f"
" ids387_710"
" defined-syms388_711"
" self389_712"
" phase390_713"
" all-scopes-stx391_714)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:608:23_709"
" keyword-procedure-extract"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
" 7)"
" '(#:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" frame-id392_715"
" exp-body394_717"
" requires+provides393_716)"
" ids387_710"
" defined-syms388_711"
" self389_712"
" phase390_713"
" all-scopes-stx391_714)))))"
"(begin"
"(add-defined-syms!"
" requires+provides_544"
" syms_664"
" phase_539)"
"(let-values(((obs_718)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_718"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_718"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body395_719)"
" exp-body_556)"
"((disarmed-exp-body396_720)"
" disarmed-exp-body_557)"
"((temp397_721)"
"(list"
" define-values370_648"
" ids_663"
" rhs372_650)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" exp-body395_719"
" disarmed-exp-body396_720"
" temp397_721)"
"(rebuild101.1"
" exp-body395_719"
" disarmed-exp-body396_720"
" temp397_721)))"
"(loop_552"
" tail?_553"
"(cdr"
" bodys_554))))))))))))"
"(if(equal? tmp_566 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_742)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_742"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_742"
" 'enter-prim"
" exp-body_556))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_743)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_743"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_743"
" 'enter-prim-define-syntaxes))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_722"
" define-syntaxes398_723"
" id399_724"
" rhs400_725)"
"(let-values(((s_744)"
" disarmed-exp-body_557))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_745)"
" s_744))"
"(let-values(((define-syntaxes398_746"
" id399_747"
" rhs400_748)"
"(let-values(((s_749)"
"(if(syntax?$1"
" s_744)"
"(syntax-e$1"
" s_744)"
" s_744)))"
"(if(pair?"
" s_749)"
"(let-values(((define-syntaxes401_750)"
"(let-values(((s_753)"
"(car"
" s_749)))"
" s_753))"
"((id402_751"
" rhs403_752)"
"(let-values(((s_754)"
"(cdr"
" s_749)))"
"(let-values(((s_755)"
"(if(syntax?$1"
" s_754)"
"(syntax-e$1"
" s_754)"
" s_754)))"
"(if(pair?"
" s_755)"
"(let-values(((id404_756)"
"(let-values(((s_758)"
"(car"
" s_755)))"
"(let-values(((s_759)"
"(if(syntax?$1"
" s_758)"
"(syntax-e$1"
" s_758)"
" s_758)))"
"(let-values(((flat-s_760)"
"(to-syntax-list.1$1"
" s_759)))"
"(if(not"
" flat-s_760)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"bad syntax\""
" orig-s_745))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                \"bad syntax\""
" orig-s_745))"
"(let-values()"
"(let-values(((id_761)"
"(let-values(((lst_762)"
" flat-s_760))"
"(begin"
"(if(list?"
" lst_762)"
"(void)"
"(let-values()"
"(in-list"
" lst_762)))"
"((letrec-values(((for-loop_763)"
"(lambda(id_764"
" lst_765)"
"(if(pair?"
" lst_765)"
"(let-values(((s_766)"
"(unsafe-car"
" lst_765)))"
"(if #t"
"(let-values(((id_767)"
"(let-values(((id_768)"
" id_764))"
"(let-values(((id_769)"
"(let-values()"
"(let-values(((id414_770)"
"(let-values()"
"(if(let-values(((or-part_771)"
"(if(syntax?$1"
" s_766)"
"(symbol?"
"(syntax-e$1"
" s_766))"
" #f)))"
"(if or-part_771"
" or-part_771"
"(symbol?"
" s_766)))"
" s_766"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                              \"not an identifier\""
" orig-s_745"
" s_766)))))"
"(cons"
" id414_770"
" id_768)))))"
"(values"
" id_769)))))"
"(if #t"
"(for-loop_763"
" id_767"
"(unsafe-cdr"
" lst_765))"
" id_767))"
" id_764))"
" id_764))))"
" for-loop_763)"
" null"
" lst_762)))))"
"(alt-reverse"
" id_761)))))))))"
"((rhs405_757)"
"(let-values(((s_772)"
"(cdr"
" s_755)))"
"(let-values(((s_773)"
"(if(syntax?$1"
" s_772)"
"(syntax-e$1"
" s_772)"
" s_772)))"
"(if(pair?"
" s_773)"
"(let-values(((rhs406_774)"
"(let-values(((s_775)"
"(car"
" s_773)))"
" s_775))"
"(()"
"(let-values(((s_776)"
"(cdr"
" s_773)))"
"(let-values(((s_777)"
"(if(syntax?$1"
" s_776)"
"(syntax-e$1"
" s_776)"
" s_776)))"
"(if(null?"
" s_777)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_745))))))"
"(values"
" rhs406_774))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                          \"bad syntax\""
" orig-s_745))))))"
"(values"
" id404_756"
" rhs405_757))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                      \"bad syntax\""
" orig-s_745))))))"
"(values"
" define-syntaxes401_750"
" id402_751"
" rhs403_752))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_745)))))"
"(values"
" #t"
" define-syntaxes398_746"
" id399_747"
" rhs400_748)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((ids_738)"
"(remove-use-site-scopes"
" id399_724"
" partial-body-ctx_540)))"
"(let-values((()"
"(begin"
"(let-values(((ids407_778)"
" ids_738)"
"((phase408_779)"
" phase_539)"
"((exp-body409_780)"
" exp-body_556))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids407_778"
" phase408_779"
" exp-body409_780"
" #f"
" #f)"
"(check-no-duplicate-ids10.1"
" ids407_778"
" phase408_779"
" exp-body409_780)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((...er/expand/module.rkt:625:10_781)"
" check-ids-unbound159.1)"
"((ids410_782)"
" ids_738)"
"((phase411_783)"
" phase_539)"
"((requires+provides412_784)"
" requires+provides_544)"
"((exp-body413_785)"
" exp-body_556))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-ids-unbound159.1))"
"(check-ids-unbound157.1"
" exp-body413_785"
" ids410_782"
" phase411_783"
" requires+provides412_784)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:625:10_781"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list"
" exp-body413_785)"
" ids410_782"
" phase411_783"
" requires+provides412_784)))"
"(values))))"
"(let-values(((syms_739)"
"(let-values(((...er/expand/module.rkt:626:23_786)"
" select-defined-syms-and-bind!18.1)"
"((ids415_787)"
" ids_738)"
"((defined-syms416_788)"
" defined-syms_547)"
"((self417_789)"
" self_542)"
"((phase418_790)"
" phase_539)"
"((all-scopes-stx419_791)"
" all-scopes-stx_546)"
"((frame-id420_792)"
" frame-id_543)"
"((requires+provides421_793)"
" requires+provides_544)"
"((exp-body422_794)"
" exp-body_556)"
"((temp423_795)"
" #t))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" temp423_795"
" #t"
" frame-id420_792"
" exp-body422_794"
" #t"
" requires+provides421_793"
" #t"
" #f"
" #f"
" ids415_787"
" defined-syms416_788"
" self417_789"
" phase418_790"
" all-scopes-stx419_791)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:626:23_786"
" keyword-procedure-extract"
" '(#:as-transformer?"
" #:frame-id"
" #:in"
" #:requires+provides)"
" 7)"
" '(#:as-transformer?"
" #:frame-id"
" #:in"
" #:requires+provides)"
"(list"
" temp423_795"
" frame-id420_792"
" exp-body422_794"
" requires+provides421_793)"
" ids415_787"
" defined-syms416_788"
" self417_789"
" phase418_790"
" all-scopes-stx419_791)))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_544"
" syms_739"
" phase_539)"
"(values))))"
"(let-values(((exp-rhs_740"
" vals_741)"
"(expand+eval-for-syntaxes-binding"
" rhs400_725"
" ids_738"
"(let-values(((the-struct_796)"
" partial-body-ctx_540))"
"(if(expand-context?"
" the-struct_796)"
"(let-values(((need-eventually-defined424_797)"
" need-eventually-defined_545))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_796)"
"(root-expand-context-post-expansion-scope"
" the-struct_796)"
"(root-expand-context-top-level-bind-scope"
" the-struct_796)"
"(root-expand-context-all-scopes-stx"
" the-struct_796)"
"(root-expand-context-use-site-scopes"
" the-struct_796)"
"(root-expand-context-defined-syms"
" the-struct_796)"
"(root-expand-context-frame-id"
" the-struct_796)"
"(root-expand-context-counter"
" the-struct_796)"
"(root-expand-context-lift-key"
" the-struct_796)"
"(expand-context-context"
" the-struct_796)"
"(expand-context-phase"
" the-struct_796)"
"(expand-context-namespace"
" the-struct_796)"
"(expand-context-env"
" the-struct_796)"
"(expand-context-post-expansion-scope-action"
" the-struct_796)"
"(expand-context-scopes"
" the-struct_796)"
"(expand-context-def-ctx-scopes"
" the-struct_796)"
"(expand-context-reference-records"
" the-struct_796)"
"(expand-context-only-immediate?"
" the-struct_796)"
"(expand-context-just-once?"
" the-struct_796)"
"(expand-context-module-begin-k"
" the-struct_796)"
" need-eventually-defined424_797"
"(expand-context-allow-unbound?"
" the-struct_796)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_796)"
"(expand-context-stops"
" the-struct_796)"
"(expand-context-current-introduction-scopes"
" the-struct_796)"
"(expand-context-declared-submodule-names"
" the-struct_796)"
"(expand-context-lifts"
" the-struct_796)"
"(expand-context-lift-envs"
" the-struct_796)"
"(expand-context-module-lifts"
" the-struct_796)"
"(expand-context-require-lifts"
" the-struct_796)"
"(expand-context-to-module-lifts"
" the-struct_796)"
"(expand-context-requires+provides"
" the-struct_796)"
"(expand-context-name"
" the-struct_796)"
"(expand-context-observer"
" the-struct_796)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                           \"expand-context?\""
" the-struct_796))))))"
"(begin"
"(let-values(((lst_798)"
" syms_739)"
"((lst_799)"
" vals_741)"
"((lst_800)"
" ids_738))"
"(begin"
"(if(list?"
" lst_798)"
"(void)"
"(let-values()"
"(in-list"
" lst_798)))"
"(if(list?"
" lst_799)"
"(void)"
"(let-values()"
"(in-list"
" lst_799)))"
"(if(list?"
" lst_800)"
"(void)"
"(let-values()"
"(in-list"
" lst_800)))"
"((letrec-values(((for-loop_801)"
"(lambda(fold-var_802"
" lst_803"
" lst_804"
" lst_805)"
"(if(if(pair?"
" lst_803)"
"(if(pair?"
" lst_804)"
"(pair?"
" lst_805)"
" #f)"
" #f)"
"(let-values(((sym_806)"
"(unsafe-car"
" lst_803))"
"((val_807)"
"(unsafe-car"
" lst_804))"
"((id_808)"
"(unsafe-car"
" lst_805)))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(let-values(((fold-var_809)"
"(let-values(((fold-var_810)"
" fold-var_802))"
"(let-values(((fold-var_811)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id!"
" val_807"
" id_808"
" phase_539)"
"(namespace-set-transformer!"
" m-ns_541"
" phase_539"
" sym_806"
" val_807)))"
"(void)))))"
"(values"
" fold-var_811)))))"
"(if(if #t"
"(if #t"
" #t"
" #f)"
" #f)"
"(for-loop_801"
" fold-var_809"
"(unsafe-cdr"
" lst_803)"
"(unsafe-cdr"
" lst_804)"
"(unsafe-cdr"
" lst_805))"
" fold-var_809))"
" fold-var_802))"
" fold-var_802))))"
" for-loop_801)"
"(void)"
" lst_798"
" lst_799"
" lst_800)))"
"(let-values(((obs_812)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_812"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_812"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((exp-body425_813)"
" exp-body_556)"
"((disarmed-exp-body426_814)"
" disarmed-exp-body_557)"
"((temp427_815)"
"(list"
" define-syntaxes398_723"
" ids_738"
" exp-rhs_740)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" exp-body425_813"
" disarmed-exp-body426_814"
" temp427_815)"
"(rebuild101.1"
" exp-body425_813"
" disarmed-exp-body426_814"
" temp427_815)))"
"(loop_552"
" tail?_553"
"(cdr"
" bodys_554))))))))))))))"
"(if(equal? tmp_566 '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_830)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_830"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_830"
" 'enter-prim"
" exp-body_556))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_831)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_831"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_831"
" 'enter-prim-require))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ready-body_816)"
"(remove-use-site-scopes"
" disarmed-exp-body_557"
" partial-body-ctx_540)))"
"(let-values(((ok?_817"
" #%require428_818"
" req429_819)"
"(let-values(((s_832)"
" ready-body_816))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_833)"
" s_832))"
"(let-values(((#%require428_834"
" req429_835)"
"(let-values(((s_836)"
"(if(syntax?$1"
" s_832)"
"(syntax-e$1"
" s_832)"
" s_832)))"
"(if(pair?"
" s_836)"
"(let-values(((#%require430_837)"
"(let-values(((s_839)"
"(car"
" s_836)))"
" s_839))"
"((req431_838)"
"(let-values(((s_840)"
"(cdr"
" s_836)))"
"(let-values(((s_841)"
"(if(syntax?$1"
" s_840)"
"(syntax-e$1"
" s_840)"
" s_840)))"
"(let-values(((flat-s_842)"
"(to-syntax-list.1$1"
" s_841)))"
"(if(not"
" flat-s_842)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                              \"bad syntax\""
" orig-s_833))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                \"bad syntax\""
" orig-s_833))"
"(let-values()"
"(let-values(((req_843)"
"(let-values(((lst_844)"
" flat-s_842))"
"(begin"
"(if(list?"
" lst_844)"
"(void)"
"(let-values()"
"(in-list"
" lst_844)))"
"((letrec-values(((for-loop_845)"
"(lambda(req_846"
" lst_847)"
"(if(pair?"
" lst_847)"
"(let-values(((s_848)"
"(unsafe-car"
" lst_847)))"
"(if #t"
"(let-values(((req_849)"
"(let-values(((req_850)"
" req_846))"
"(let-values(((req_851)"
"(let-values()"
"(let-values(((req440_852)"
"(let-values()"
" s_848)))"
"(cons"
" req440_852"
" req_850)))))"
"(values"
" req_851)))))"
"(if #t"
"(for-loop_845"
" req_849"
"(unsafe-cdr"
" lst_847))"
" req_849))"
" req_846))"
" req_846))))"
" for-loop_845)"
" null"
" lst_844)))))"
"(alt-reverse"
" req_843))))))))))"
"(values"
" #%require430_837"
" req431_838))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                      \"bad syntax\""
" orig-s_833)))))"
"(values"
" #t"
" #%require428_834"
" req429_835)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(let-values(((...er/expand/module.rkt:654:10_853)"
" parse-and-perform-requires!22.1)"
"((temp432_854)"
" req429_819)"
"((exp-body433_855)"
" exp-body_556)"
"((self434_856)"
" self_542)"
"((m-ns435_857)"
" m-ns_541)"
"((phase436_858)"
" phase_539)"
"((phase437_859)"
" phase_539)"
"((requires+provides438_860)"
" requires+provides_544)"
"((declared-submodule-names439_861)"
" declared-submodule-names_549))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names439_861"
" #t"
" phase437_859"
" #t"
" #f"
" #f"
" self434_856"
" #t"
" #f"
" #f"
" temp432_854"
" exp-body433_855"
" m-ns435_857"
" phase436_858"
" requires+provides438_860)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:654:10_853"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self)"
" 7)"
" '(#:declared-submodule-names"
" #:run-phase"
" #:self)"
"(list"
" declared-submodule-names439_861"
" phase437_859"
" self434_856)"
" temp432_854"
" exp-body433_855"
" m-ns435_857"
" phase436_858"
" requires+provides438_860)))"
"(let-values(((obs_862)"
"(expand-context-observer"
" partial-body-ctx_540)))"
"(if obs_862"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_862"
" 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
" exp-body_556"
"(loop_552"
" tail?_553"
"(cdr"
" bodys_554)))))))))"
"(if(equal? tmp_566 '#%provide)"
"(let-values()"
"(cons"
" exp-body_556"
"(loop_552"
" tail?_553"
"(cdr bodys_554))))"
"(if(equal? tmp_566 'module)"
"(let-values()"
"(let-values(((ready-body_863)"
"(remove-use-site-scopes"
" exp-body_556"
" partial-body-ctx_540)))"
"(let-values(((submod_864)"
"(let-values(((...er/expand/module.rkt:669:12_865)"
" expand-submodule177.1)"
"((ready-body441_866)"
" ready-body_863)"
"((self442_867)"
" self_542)"
"((partial-body-ctx443_868)"
" partial-body-ctx_540)"
"((temp444_869)"
" #f)"
"((declared-submodule-names445_870)"
" declared-submodule-names_549)"
"((mpis-to-reset446_871)"
" mpis-to-reset_550))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule177.1))"
"(expand-submodule175.1"
" declared-submodule-names445_870"
" #f"
" #f"
" #f"
" #f"
" temp444_869"
" #f"
" #f"
" mpis-to-reset446_871"
" ready-body441_866"
" self442_867"
" partial-body-ctx443_868)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:669:12_865"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names445_870"
" temp444_869"
" mpis-to-reset446_871)"
" ready-body441_866"
" self442_867"
" partial-body-ctx443_868)))))"
"(cons"
" submod_864"
"(loop_552"
" tail?_553"
"(cdr bodys_554))))))"
"(if(equal? tmp_566 'module*)"
"(let-values()"
"(cons"
" exp-body_556"
"(loop_552"
" tail?_553"
"(cdr bodys_554))))"
"(if(equal?"
" tmp_566"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_872"
" #%declare447_873"
" kw448_874)"
"(let-values(((s_885)"
" disarmed-exp-body_557))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((orig-s_886)"
" s_885))"
"(let-values(((#%declare447_887"
" kw448_888)"
"(let-values(((s_889)"
"(if(syntax?$1"
" s_885)"
"(syntax-e$1"
" s_885)"
" s_885)))"
"(if(pair?"
" s_889)"
"(let-values(((#%declare449_890)"
"(let-values(((s_892)"
"(car"
" s_889)))"
" s_892))"
"((kw450_891)"
"(let-values(((s_893)"
"(cdr"
" s_889)))"
"(let-values(((s_894)"
"(if(syntax?$1"
" s_893)"
"(syntax-e$1"
" s_893)"
" s_893)))"
"(let-values(((flat-s_895)"
"(to-syntax-list.1$1"
" s_894)))"
"(if(not"
" flat-s_895)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                \"bad syntax\""
" orig-s_886))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                  \"bad syntax\""
" orig-s_886))"
"(let-values()"
"(let-values(((kw_896)"
"(let-values(((lst_897)"
" flat-s_895))"
"(begin"
"(if(list?"
" lst_897)"
"(void)"
"(let-values()"
"(in-list"
" lst_897)))"
"((letrec-values(((for-loop_898)"
"(lambda(kw_899"
" lst_900)"
"(if(pair?"
" lst_900)"
"(let-values(((s_901)"
"(unsafe-car"
" lst_900)))"
"(if #t"
"(let-values(((kw_902)"
"(let-values(((kw_903)"
" kw_899))"
"(let-values(((kw_904)"
"(let-values()"
"(let-values(((kw451_905)"
"(let-values()"
" s_901)))"
"(cons"
" kw451_905"
" kw_903)))))"
"(values"
" kw_904)))))"
"(if #t"
"(for-loop_898"
" kw_902"
"(unsafe-cdr"
" lst_900))"
" kw_902))"
" kw_899))"
" kw_899))))"
" for-loop_898)"
" null"
" lst_897)))))"
"(alt-reverse"
" kw_896))))))))))"
"(values"
" #%declare449_890"
" kw450_891))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                        \"bad syntax\""
" orig-s_886)))))"
"(values"
" #t"
" #%declare447_887"
" kw448_888)))"
"(values"
" #f"
" #f"
" #f)))))"
"(begin"
"(let-values(((lst_906)"
" kw448_874))"
"(begin"
"(if(list?"
" lst_906)"
"(void)"
"(let-values()"
"(in-list"
" lst_906)))"
"((letrec-values(((for-loop_907)"
"(lambda(fold-var_908"
" lst_909)"
"(if(pair?"
" lst_909)"
"(let-values(((kw_910)"
"(unsafe-car"
" lst_909)))"
"(if #t"
"(let-values(((fold-var_911)"
"(let-values(((fold-var_912)"
" fold-var_908))"
"(let-values(((fold-var_913)"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_910))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"expected a keyword\""
" exp-body_556"
" kw_910)))"
"(if(memq"
"(syntax-e$1"
" kw_910)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"not an allowed declaration keyword\""
" exp-body_556"
" kw_910)))"
"(if(hash-ref"
" declared-keywords_548"
"(syntax-e$1"
" kw_910)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                              \"keyword declared multiple times\""
" exp-body_556"
" kw_910))"
"(void))"
"(hash-set!"
" declared-keywords_548"
"(syntax-e$1"
" kw_910)"
" kw_910)))"
"(void)))))"
"(values"
" fold-var_913)))))"
"(if #t"
"(for-loop_907"
" fold-var_911"
"(unsafe-cdr"
" lst_909))"
" fold-var_911))"
" fold-var_908))"
" fold-var_908))))"
" for-loop_907)"
"(void)"
" lst_906)))"
"(cons"
" exp-body_556"
"(loop_552"
" tail?_553"
"(cdr"
" bodys_554))))))"
"(let-values()"
"(cons"
" exp-body_556"
"(loop_552"
" tail?_553"
"(cdr"
" bodys_554)))))))))))))))))))))))))"
" loop_552)"
" tail?_538"
" bodys_536)))))))))))))))))))))"
"(define-values"
"(unpack74.1)"
"(lambda(given-kws_914 given-args_915 bodys72_916)"
"(let-values(((all-scopes-stx51_917)(car given-args_915))"
"((given-kws_918)(cdr given-kws_914))"
"((given-args_919)(cdr given-args_915)))"
"(let-values(((ctx45_920)(car given-args_919))"
"((given-kws_921)(cdr given-kws_918))"
"((given-args_922)(cdr given-args_919)))"
"(let-values(((declared-keywords53_923)(car given-args_922))"
"((given-kws_924)(cdr given-kws_921))"
"((given-args_925)(cdr given-args_922)))"
"(let-values(((declared-submodule-names54_926)(car given-args_925))"
"((given-kws_927)(cdr given-kws_924))"
"((given-args_928)(cdr given-args_925)))"
"(let-values(((defined-syms52_929)(car given-args_928))"
"((given-kws_930)(cdr given-kws_927))"
"((given-args_931)(cdr given-args_928)))"
"(let-values(((frame-id48_932)(car given-args_931))"
"((given-kws_933)(cdr given-kws_930))"
"((given-args_934)(cdr given-args_931)))"
"(let-values(((loop56_935)(car given-args_934))"
"((given-kws_936)(cdr given-kws_933))"
"((given-args_937)(cdr given-args_934)))"
"(let-values(((mpis-to-reset55_938)(car given-args_937))"
"((given-kws_939)(cdr given-kws_936))"
"((given-args_940)(cdr given-args_937)))"
"(let-values(((namespace46_941)(car given-args_940))"
"((given-kws_942)(cdr given-kws_939))"
"((given-args_943)(cdr given-args_940)))"
"(let-values(((need-eventually-defined50_944)(car given-args_943))"
"((given-kws_945)(cdr given-kws_942))"
"((given-args_946)(cdr given-args_943)))"
"(let-values(((original42_947)(car given-args_946))"
"((given-kws_948)(cdr given-kws_945))"
"((given-args_949)(cdr given-args_946)))"
"(let-values(((phase44_950)(car given-args_949))"
"((given-kws_951)(cdr given-kws_948))"
"((given-args_952)(cdr given-args_949)))"
"(let-values(((requires-and-provides49_953)(car given-args_952))"
"((given-kws_954)(cdr given-kws_951))"
"((given-args_955)(cdr given-args_952)))"
"(let-values(((self47_956)(car given-args_955))"
"((given-kws_957)(cdr given-kws_954))"
"((given-args_958)(cdr given-args_955)))"
"(let-values(((tail?43_959)(car given-args_958)))"
"(partially-expand-bodys73.1"
" all-scopes-stx51_917"
" ctx45_920"
" declared-keywords53_923"
" declared-submodule-names54_926"
" defined-syms52_929"
" frame-id48_932"
" loop56_935"
" mpis-to-reset55_938"
" namespace46_941"
" need-eventually-defined50_944"
" original42_947"
" phase44_950"
" requires-and-provides49_953"
" self47_956"
" tail?43_959"
" bodys72_916))))))))))))))))))"
"(define-values"
"(partially-expand-bodys75.1)"
"(lifted/2.1$1"
"(lambda(given-kws_960 given-argc_961)"
"(if(= given-argc_961 3)"
"(let-values(((l2_962) given-kws_960))"
"(if(pair? l2_962)"
"(if(eq?(car l2_962) '#:all-scopes-stx)"
"(let-values(((l2_963)(cdr l2_962)))"
"(if(pair? l2_963)"
"(if(eq?(car l2_963) '#:ctx)"
"(let-values(((l2_964)(cdr l2_963)))"
"(if(pair? l2_964)"
"(if(eq?(car l2_964) '#:declared-keywords)"
"(let-values(((l2_965)(cdr l2_964)))"
"(if(pair? l2_965)"
"(if(eq?(car l2_965) '#:declared-submodule-names)"
"(let-values(((l2_966)(cdr l2_965)))"
"(if(pair? l2_966)"
"(if(eq?(car l2_966) '#:defined-syms)"
"(let-values(((l2_967)(cdr l2_966)))"
"(if(pair? l2_967)"
"(if(eq?(car l2_967) '#:frame-id)"
"(let-values(((l2_968)(cdr l2_967)))"
"(if(pair? l2_968)"
"(if(eq?(car l2_968) '#:loop)"
"(let-values(((l2_969)(cdr l2_968)))"
"(if(pair? l2_969)"
"(if(eq?(car l2_969) '#:mpis-to-reset)"
"(let-values(((l2_970)(cdr l2_969)))"
"(if(pair? l2_970)"
"(if(eq?(car l2_970) '#:namespace)"
"(let-values(((l2_971)(cdr l2_970)))"
"(if(pair? l2_971)"
"(if(eq?(car l2_971) '#:need-eventually-defined)"
"(let-values(((l2_972)(cdr l2_971)))"
"(if(pair? l2_972)"
"(if(eq?(car l2_972) '#:original)"
"(let-values(((l2_973)(cdr l2_972)))"
"(if(pair? l2_973)"
"(if(eq?(car l2_973) '#:phase)"
"(let-values(((l2_974)(cdr l2_973)))"
"(if(pair? l2_974)"
"(if(eq?"
"(car l2_974)"
" '#:requires-and-provides)"
"(let-values(((l2_975)"
"(cdr l2_974)))"
"(if(pair? l2_975)"
"(if(eq?(car l2_975) '#:self)"
"(let-values(((l2_976)"
"(cdr l2_975)))"
"(if(pair? l2_976)"
"(if(eq?"
"(car l2_976)"
" '#:tail?)"
"(null?(cdr l2_976))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda((given-kws_977 given-args_978 bodys_979)(unpack74.1 given-kws_977 given-args_978 bodys_979)))"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)"
" '(#:all-scopes-stx"
" #:ctx"
" #:declared-keywords"
" #:declared-submodule-names"
" #:defined-syms"
" #:frame-id"
" #:loop"
" #:mpis-to-reset"
" #:namespace"
" #:need-eventually-defined"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self"
" #:tail?)))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_980 frame-id_981 inside-scope_982 all-scopes-stx_983 defined-syms_984 requires+provides_985)"
"(lambda(ids_986 rhs_987 phase_988)"
"(let-values(((scoped-ids_989)"
"(alt-reverse"
"(let-values(((lst_990) ids_986))"
"(begin"
"(if(list? lst_990)(void)(let-values()(in-list lst_990)))"
"((letrec-values(((for-loop_991)"
"(lambda(fold-var_992 lst_993)"
"(if(pair? lst_993)"
"(let-values(((id_994)(unsafe-car lst_993)))"
"(if #t"
"(let-values(((fold-var_995)"
"(let-values(((fold-var_996) fold-var_992))"
"(let-values(((fold-var_997)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_994"
" inside-scope_982))"
" fold-var_996))))"
"(values fold-var_997)))))"
"(if #t"
"(for-loop_991 fold-var_995(unsafe-cdr lst_993))"
" fold-var_995))"
" fold-var_992))"
" fold-var_992))))"
" for-loop_991)"
" null"
" lst_990))))))"
"(begin"
"(let-values(((...er/expand/module.rkt:703:4_998) select-defined-syms-and-bind!18.1)"
"((scoped-ids452_999) scoped-ids_989)"
"((defined-syms453_1000) defined-syms_984)"
"((self454_1001) self_980)"
"((phase455_1002) phase_988)"
"((all-scopes-stx456_1003) all-scopes-stx_983)"
"((frame-id457_1004) frame-id_981)"
"((requires+provides458_1005) requires+provides_985))"
"(if(variable-reference-constant?(#%variable-reference select-defined-syms-and-bind!18.1))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id457_1004"
" #f"
" #f"
" requires+provides458_1005"
" #t"
" #f"
" #f"
" scoped-ids452_999"
" defined-syms453_1000"
" self454_1001"
" phase455_1002"
" all-scopes-stx456_1003)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:703:4_998"
" keyword-procedure-extract"
" '(#:frame-id #:requires+provides)"
" 7)"
" '(#:frame-id #:requires+provides)"
"(list frame-id457_1004 requires+provides458_1005)"
" scoped-ids452_999"
" defined-syms453_1000"
" self454_1001"
" phase455_1002"
" all-scopes-stx456_1003)))"
"(values"
" scoped-ids_989"
"(add-scope"
"(datum->syntax$2"
" #f"
"(list"
"(datum->syntax$2(syntax-shift-phase-level$1 core-stx phase_988) 'define-values)"
" scoped-ids_989"
" rhs_987))"
" inside-scope_982)))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_1006 ctx_1007)"
"(let-values(((sc_1008)(root-expand-context-post-expansion-scope ctx_1007)))"
"(alt-reverse"
"(let-values(((lst_1009) bodys_1006))"
"(begin"
"(if(list? lst_1009)(void)(let-values()(in-list lst_1009)))"
"((letrec-values(((for-loop_1010)"
"(lambda(fold-var_1011 lst_1012)"
"(if(pair? lst_1012)"
"(let-values(((body_1013)(unsafe-car lst_1012)))"
"(if #t"
"(let-values(((fold-var_1014)"
"(let-values(((fold-var_1015) fold-var_1011))"
"(let-values(((fold-var_1016)"
"(let-values()"
"(cons"
"(let-values()(add-scope body_1013 sc_1008))"
" fold-var_1015))))"
"(values fold-var_1016)))))"
"(if #t(for-loop_1010 fold-var_1014(unsafe-cdr lst_1012)) fold-var_1014))"
" fold-var_1011))"
" fold-var_1011))))"
" for-loop_1010)"
" null"
" lst_1009)))))))"
"(define-values"
"(lifted/3.1$4)"
"(make-required"
" 'finish-expanding-body-expressons"
"(case-lambda"
"((self_1017 partially-expanded-bodys_1018)(apply missing-kw self_1017 partially-expanded-bodys_1018 null)))"
" #f"
" #f))"
"(define-values"
"(finish-expanding-body-expressons89.1)"
"(lambda(ctx78_1019"
" declared-submodule-names80_1020"
" mpis-to-reset81_1021"
" phase77_1022"
" self79_1023"
" tail?76_1024"
" partially-expanded-bodys88_1025)"
"(let-values(((partially-expanded-bodys_1026) partially-expanded-bodys88_1025))"
"(let-values(((tail?_1027) tail?76_1024))"
"(let-values(((phase_1028) phase77_1022))"
"(let-values(((body-ctx_1029) ctx78_1019))"
"(let-values(((self_1030) self79_1023))"
"(let-values(((declared-submodule-names_1031) declared-submodule-names80_1020))"
"(let-values(((mpis-to-reset_1032) mpis-to-reset81_1021))"
"(let-values()"
"((letrec-values(((loop_1033)"
"(lambda(tail?_1034 bodys_1035)"
"(if(null? bodys_1035)"
"(let-values()"
"(if tail?_1034"
"(let-values()"
"(let-values(((bodys_1036)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_1029))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_1029)))))"
"(if(null? bodys_1036) null(loop_1033 #t bodys_1036))))"
"(let-values() bodys_1035)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1042)"
"(expand-context-observer body-ctx_1029)))"
"(if obs_1042"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1042 'next))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-body_1037)(syntax-disarm$1(car bodys_1035))))"
"(let-values(((exp-body_1038)"
"(let-values(((tmp_1043)"
"(core-form-sym"
" disarmed-body_1037"
" phase_1028)))"
"(if(equal? tmp_1043 'define-values)"
"(let-values()"
"(let-values(((ok?_1044"
" define-values459_1045"
" id460_1046"
" rhs461_1047)"
"(let-values(((s_1061)"
" disarmed-body_1037))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1062)"
" s_1061))"
"(let-values(((define-values459_1063"
" id460_1064"
" rhs461_1065)"
"(let-values(((s_1066)"
"(if(syntax?$1"
" s_1061)"
"(syntax-e$1"
" s_1061)"
" s_1061)))"
"(if(pair?"
" s_1066)"
"(let-values(((define-values462_1067)"
"(let-values(((s_1070)"
"(car"
" s_1066)))"
" s_1070))"
"((id463_1068"
" rhs464_1069)"
"(let-values(((s_1071)"
"(cdr"
" s_1066)))"
"(let-values(((s_1072)"
"(if(syntax?$1"
" s_1071)"
"(syntax-e$1"
" s_1071)"
" s_1071)))"
"(if(pair?"
" s_1072)"
"(let-values(((id465_1073)"
"(let-values(((s_1075)"
"(car"
" s_1072)))"
"(let-values(((s_1076)"
"(if(syntax?$1"
" s_1075)"
"(syntax-e$1"
" s_1075)"
" s_1075)))"
"(let-values(((flat-s_1077)"
"(to-syntax-list.1$1"
" s_1076)))"
"(if(not"
" flat-s_1077)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_1062))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_1062))"
"(let-values()"
"(let-values(((id_1078)"
"(let-values(((lst_1079)"
" flat-s_1077))"
"(begin"
"(if(list?"
" lst_1079)"
"(void)"
"(let-values()"
"(in-list"
" lst_1079)))"
"((letrec-values(((for-loop_1080)"
"(lambda(id_1081"
" lst_1082)"
"(if(pair?"
" lst_1082)"
"(let-values(((s_1083)"
"(unsafe-car"
" lst_1082)))"
"(if #t"
"(let-values(((id_1084)"
"(let-values(((id_1085)"
" id_1081))"
"(let-values(((id_1086)"
"(let-values()"
"(let-values(((id471_1087)"
"(let-values()"
"(if(let-values(((or-part_1088)"
"(if(syntax?$1"
" s_1083)"
"(symbol?"
"(syntax-e$1"
" s_1083))"
" #f)))"
"(if or-part_1088"
" or-part_1088"
"(symbol?"
" s_1083)))"
" s_1083"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_1062"
" s_1083)))))"
"(cons"
" id471_1087"
" id_1085)))))"
"(values"
" id_1086)))))"
"(if #t"
"(for-loop_1080"
" id_1084"
"(unsafe-cdr"
" lst_1082))"
" id_1084))"
" id_1081))"
" id_1081))))"
" for-loop_1080)"
" null"
" lst_1079)))))"
"(alt-reverse"
" id_1078)))))))))"
"((rhs466_1074)"
"(let-values(((s_1089)"
"(cdr"
" s_1072)))"
"(let-values(((s_1090)"
"(if(syntax?$1"
" s_1089)"
"(syntax-e$1"
" s_1089)"
" s_1089)))"
"(if(pair?"
" s_1090)"
"(let-values(((rhs467_1091)"
"(let-values(((s_1092)"
"(car"
" s_1090)))"
" s_1092))"
"(()"
"(let-values(((s_1093)"
"(cdr"
" s_1090)))"
"(let-values(((s_1094)"
"(if(syntax?$1"
" s_1093)"
"(syntax-e$1"
" s_1093)"
" s_1093)))"
"(if(null?"
" s_1094)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_1062))))))"
"(values"
" rhs467_1091))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_1062))))))"
"(values"
" id465_1073"
" rhs466_1074))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_1062))))))"
"(values"
" define-values462_1067"
" id463_1068"
" rhs464_1069))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_1062)))))"
"(values"
" #t"
" define-values459_1063"
" id460_1064"
" rhs461_1065)))"
"(values #f #f #f #f)))))"
"(let-values(((exp-rhs_1060)"
"(let-values(((temp472_1095)"
" rhs461_1047)"
"((temp473_1096)"
"(as-named-context"
"(as-expression-context"
" body-ctx_1029)"
" id460_1046)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand7.1))"
"(expand5.1"
" #f"
" #f"
" temp472_1095"
" temp473_1096)"
"(expand7.1"
" temp472_1095"
" temp473_1096)))))"
"(let-values(((temp468_1097)(car bodys_1035))"
"((disarmed-body469_1098)"
" disarmed-body_1037)"
"((temp470_1099)"
"(list"
" define-values459_1045"
" id460_1046"
" exp-rhs_1060)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" temp468_1097"
" disarmed-body469_1098"
" temp470_1099)"
"(rebuild101.1"
" temp468_1097"
" disarmed-body469_1098"
" temp470_1099))))))"
"(if(if(equal? tmp_1043 'define-syntaxes)"
" #t"
"(if(equal? tmp_1043 '#%require)"
" #t"
"(if(equal? tmp_1043 '#%provide)"
" #t"
"(if(equal? tmp_1043 'begin-for-syntax)"
" #t"
"(if(equal? tmp_1043 'module)"
" #t"
"(if(equal? tmp_1043 'module*)"
" #t"
"(equal? tmp_1043 '#%declare)))))))"
"(let-values()(car bodys_1035))"
"(let-values()"
"(let-values(((temp474_1100)(car bodys_1035))"
"((temp475_1101)"
"(as-expression-context"
" body-ctx_1029)))"
"(if(variable-reference-constant?"
"(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp474_1100 temp475_1101)"
"(expand7.1 temp474_1100 temp475_1101)))))))))"
"(let-values(((lifted-defns_1039)"
"(loop_1033"
" #f"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_1029)))))"
"(let-values(((lifted-requires_1040)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_1029))))"
"(let-values(((lifted-modules_1041)"
"(let-values(((...er/expand/module.rkt:771:8_1102)"
" expand-non-module*-submodules188.1)"
"((temp476_1103)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_1029)))"
"((phase477_1104) phase_1028)"
"((self478_1105) self_1030)"
"((body-ctx479_1106) body-ctx_1029)"
"((mpis-to-reset480_1107)"
" mpis-to-reset_1032)"
"((declared-submodule-names481_1108)"
" declared-submodule-names_1031))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-non-module*-submodules188.1))"
"(expand-non-module*-submodules186.1"
" declared-submodule-names481_1108"
" mpis-to-reset480_1107"
" temp476_1103"
" phase477_1104"
" self478_1105"
" body-ctx479_1106)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:771:8_1102"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:mpis-to-reset)"
" 6)"
" '(#:declared-submodule-names #:mpis-to-reset)"
"(list"
" declared-submodule-names481_1108"
" mpis-to-reset480_1107)"
" temp476_1103"
" phase477_1104"
" self478_1105"
" body-ctx479_1106)))))"
"(begin"
"(if(null? lifted-defns_1039)"
"(let-values()"
"(let-values(((obs_1109)"
"(expand-context-observer body-ctx_1029)))"
"(if obs_1109"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1109"
" 'module-lift-loop"
" lifted-defns_1039))"
"(void)))"
"(void))))"
"(let-values()"
"(let-values(((obs_1110)"
"(expand-context-observer body-ctx_1029)))"
"(if obs_1110"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1110"
" 'module-lift-end-loop"
"(cons exp-body_1038(cdr bodys_1035))))"
"(void)))"
"(void)))))"
"(append"
" lifted-requires_1040"
" lifted-defns_1039"
" lifted-modules_1041"
"(cons"
" exp-body_1038"
"(loop_1033 tail?_1034(cdr bodys_1035))))))))))))))))"
" loop_1033)"
" tail?_1027"
" partially-expanded-bodys_1026)))))))))))"
"(define-values"
"(unpack90.1)"
"(lambda(given-kws_1111 given-args_1112 partially-expanded-bodys88_1113)"
"(let-values(((ctx78_1114)(car given-args_1112))"
"((given-kws_1115)(cdr given-kws_1111))"
"((given-args_1116)(cdr given-args_1112)))"
"(let-values(((declared-submodule-names80_1117)(car given-args_1116))"
"((given-kws_1118)(cdr given-kws_1115))"
"((given-args_1119)(cdr given-args_1116)))"
"(let-values(((mpis-to-reset81_1120)(car given-args_1119))"
"((given-kws_1121)(cdr given-kws_1118))"
"((given-args_1122)(cdr given-args_1119)))"
"(let-values(((phase77_1123)(car given-args_1122))"
"((given-kws_1124)(cdr given-kws_1121))"
"((given-args_1125)(cdr given-args_1122)))"
"(let-values(((self79_1126)(car given-args_1125))"
"((given-kws_1127)(cdr given-kws_1124))"
"((given-args_1128)(cdr given-args_1125)))"
"(let-values(((tail?76_1129)(car given-args_1128)))"
"(finish-expanding-body-expressons89.1"
" ctx78_1114"
" declared-submodule-names80_1117"
" mpis-to-reset81_1120"
" phase77_1123"
" self79_1126"
" tail?76_1129"
" partially-expanded-bodys88_1113)))))))))"
"(define-values"
"(finish-expanding-body-expressons91.1)"
"(lifted/3.1$4"
"(lambda(given-kws_1130 given-argc_1131)"
"(if(= given-argc_1131 3)"
"(let-values(((l2_1132) given-kws_1130))"
"(if(pair? l2_1132)"
"(if(eq?(car l2_1132) '#:ctx)"
"(let-values(((l2_1133)(cdr l2_1132)))"
"(if(pair? l2_1133)"
"(if(eq?(car l2_1133) '#:declared-submodule-names)"
"(let-values(((l2_1134)(cdr l2_1133)))"
"(if(pair? l2_1134)"
"(if(eq?(car l2_1134) '#:mpis-to-reset)"
"(let-values(((l2_1135)(cdr l2_1134)))"
"(if(pair? l2_1135)"
"(if(eq?(car l2_1135) '#:phase)"
"(let-values(((l2_1136)(cdr l2_1135)))"
"(if(pair? l2_1136)"
"(if(eq?(car l2_1136) '#:self)"
"(let-values(((l2_1137)(cdr l2_1136)))"
"(if(pair? l2_1137)"
"(if(eq?(car l2_1137) '#:tail?)(null?(cdr l2_1137)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1138 given-args_1139 partially-expanded-bodys_1140)"
"(unpack90.1 given-kws_1138 given-args_1139 partially-expanded-bodys_1140)))"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)"
" '(#:ctx #:declared-submodule-names #:mpis-to-reset #:phase #:self #:tail?)))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_1141 self_1142)"
"(let-values(((ht_1143) need-eventually-defined_1141))"
"(begin"
"(if((lambda(ht_1144)(hash? ht_1144)) ht_1143)(void)(let-values()(default-in-hash ht_1143)))"
"((letrec-values(((for-loop_1145)"
"(lambda(fold-var_1146 i_1147)"
"(if i_1147"
"(let-values(((phase_1148 l_1149)(hash-iterate-key+value ht_1143 i_1147)))"
"(if #t"
"(let-values(((fold-var_1150)"
"(let-values(((fold-var_1151) fold-var_1146))"
"(let-values(((fold-var_1152)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((lst_1153) l_1149))"
"(begin"
"(if(list? lst_1153)"
"(void)"
"(let-values()(in-list lst_1153)))"
"((letrec-values(((for-loop_1154)"
"(lambda(fold-var_1155"
" lst_1156)"
"(if(pair? lst_1156)"
"(let-values(((id_1157)"
"(unsafe-car"
" lst_1156)))"
"(if #t"
"(let-values(((fold-var_1158)"
"(let-values(((fold-var_1159)"
" fold-var_1155))"
"(let-values(((fold-var_1160)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1161)"
"(let-values(((id482_1162)"
" id_1157)"
"((phase483_1163)"
" phase_1148))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve+shift15.1))"
"(resolve+shift13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id482_1162"
" phase483_1163)"
"(resolve+shift15.1"
" id482_1162"
" phase483_1163)))))"
"(if(if b_1161"
"(if(module-binding?"
" b_1161)"
"(if(eq?"
"(module-binding-sym"
" b_1161)"
"(syntax-e$1"
" id_1157))"
"(eq?"
"(module-binding-module"
" b_1161)"
" self_1142)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"reference to an unbound identifier\""
" id_1157)))))"
"(void)))))"
"(values"
" fold-var_1160)))))"
"(if #t"
"(for-loop_1154"
" fold-var_1158"
"(unsafe-cdr"
" lst_1156))"
" fold-var_1158))"
" fold-var_1155))"
" fold-var_1155))))"
" for-loop_1154)"
"(void)"
" lst_1153))))"
"(void)))))"
"(values fold-var_1152)))))"
"(if #t"
"(for-loop_1145 fold-var_1150(hash-iterate-next ht_1143 i_1147))"
" fold-var_1150))"
" fold-var_1146))"
" fold-var_1146))))"
" for-loop_1145)"
"(void)"
"(hash-iterate-first ht_1143))))))"
"(define-values"
"(lifted/4.1$4)"
"(make-required"
" 'resolve-provides"
"(case-lambda"
"((self_1164 expression-expanded-bodys_1165)(apply missing-kw self_1164 expression-expanded-bodys_1165 null)))"
" #f"
" #f))"
"(define-values"
"(resolve-provides107.1)"
"(lambda(ctx98_1166"
" declared-submodule-names94_1167"
" namespace95_1168"
" original92_1169"
" phase96_1170"
" requires-and-provides93_1171"
" self97_1172"
" expression-expanded-bodys106_1173)"
"(let-values(((expression-expanded-bodys_1174) expression-expanded-bodys106_1173))"
"(let-values(((s_1175) original92_1169))"
"(let-values(((requires+provides_1176) requires-and-provides93_1171))"
"(let-values(((declared-submodule-names_1177) declared-submodule-names94_1167))"
"(let-values(((m-ns_1178) namespace95_1168))"
"(let-values(((phase_1179) phase96_1170))"
"(let-values(((self_1180) self97_1172))"
"(let-values(((ctx_1181) ctx98_1166))"
"(let-values()"
"((letrec-values(((loop_1182)"
"(lambda(bodys_1183 phase_1184)"
"(if(null? bodys_1183)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_1185)(syntax-disarm$1(car bodys_1183))))"
"(let-values(((tmp_1186)(core-form-sym disarmed-body_1185 phase_1184)))"
"(if(equal? tmp_1186 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1201)"
"(expand-context-observer ctx_1181)))"
"(if obs_1201"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1201"
" 'enter-prim"
"(car bodys_1183)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1202)"
"(expand-context-observer"
" ctx_1181)))"
"(if obs_1202"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1202"
" 'enter-prim-provide))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1187 #%provide484_1188 spec485_1189)"
"(let-values(((s_1203) disarmed-body_1185))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1204) s_1203))"
"(let-values(((#%provide484_1205"
" spec485_1206)"
"(let-values(((s_1207)"
"(if(syntax?$1"
" s_1203)"
"(syntax-e$1"
" s_1203)"
" s_1203)))"
"(if(pair? s_1207)"
"(let-values(((#%provide486_1208)"
"(let-values(((s_1210)"
"(car"
" s_1207)))"
" s_1210))"
"((spec487_1209)"
"(let-values(((s_1211)"
"(cdr"
" s_1207)))"
"(let-values(((s_1212)"
"(if(syntax?$1"
" s_1211)"
"(syntax-e$1"
" s_1211)"
" s_1211)))"
"(let-values(((flat-s_1213)"
"(to-syntax-list.1$1"
" s_1212)))"
"(if(not"
" flat-s_1213)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_1204))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1204))"
"(let-values()"
"(let-values(((spec_1214)"
"(let-values(((lst_1215)"
" flat-s_1213))"
"(begin"
"(if(list?"
" lst_1215)"
"(void)"
"(let-values()"
"(in-list"
" lst_1215)))"
"((letrec-values(((for-loop_1216)"
"(lambda(spec_1217"
" lst_1218)"
"(if(pair?"
" lst_1218)"
"(let-values(((s_1219)"
"(unsafe-car"
" lst_1218)))"
"(if #t"
"(let-values(((spec_1220)"
"(let-values(((spec_1221)"
" spec_1217))"
"(let-values(((spec_1222)"
"(let-values()"
"(let-values(((spec488_1223)"
"(let-values()"
" s_1219)))"
"(cons"
" spec488_1223"
" spec_1221)))))"
"(values"
" spec_1222)))))"
"(if #t"
"(for-loop_1216"
" spec_1220"
"(unsafe-cdr"
" lst_1218))"
" spec_1220))"
" spec_1217))"
" spec_1217))))"
" for-loop_1216)"
" null"
" lst_1215)))))"
"(alt-reverse"
" spec_1214))))))))))"
"(values"
" #%provide486_1208"
" spec487_1209))"
"(raise-syntax-error$1"
" #f"
"                                                                                                 \"bad syntax\""
" orig-s_1204)))))"
"(values"
" #t"
" #%provide484_1205"
" spec485_1206)))"
"(values #f #f #f)))))"
"(let-values(((specs_1200)"
"(parse-and-expand-provides!"
" spec485_1189"
"(car bodys_1183)"
" requires+provides_1176"
" self_1180"
" phase_1184"
"(let-values(((the-struct_1224) ctx_1181))"
"(if(expand-context? the-struct_1224)"
"(let-values(((context489_1225)"
" 'top-level)"
"((phase490_1226) phase_1184)"
"((namespace491_1227)"
"(namespace->namespace-at-phase"
" m-ns_1178"
" phase_1184))"
"((requires+provides492_1228)"
" requires+provides_1176)"
"((declared-submodule-names493_1229)"
" declared-submodule-names_1177))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1224)"
"(root-expand-context-post-expansion-scope"
" the-struct_1224)"
"(root-expand-context-top-level-bind-scope"
" the-struct_1224)"
"(root-expand-context-all-scopes-stx"
" the-struct_1224)"
"(root-expand-context-use-site-scopes"
" the-struct_1224)"
"(root-expand-context-defined-syms"
" the-struct_1224)"
"(root-expand-context-frame-id"
" the-struct_1224)"
"(root-expand-context-counter"
" the-struct_1224)"
"(root-expand-context-lift-key"
" the-struct_1224)"
" context489_1225"
" phase490_1226"
" namespace491_1227"
"(expand-context-env the-struct_1224)"
"(expand-context-post-expansion-scope-action"
" the-struct_1224)"
"(expand-context-scopes"
" the-struct_1224)"
"(expand-context-def-ctx-scopes"
" the-struct_1224)"
"(expand-context-reference-records"
" the-struct_1224)"
"(expand-context-only-immediate?"
" the-struct_1224)"
"(expand-context-just-once?"
" the-struct_1224)"
"(expand-context-module-begin-k"
" the-struct_1224)"
"(expand-context-need-eventually-defined"
" the-struct_1224)"
"(expand-context-allow-unbound?"
" the-struct_1224)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1224)"
"(expand-context-stops the-struct_1224)"
"(expand-context-current-introduction-scopes"
" the-struct_1224)"
" declared-submodule-names493_1229"
"(expand-context-lifts the-struct_1224)"
"(expand-context-lift-envs"
" the-struct_1224)"
"(expand-context-module-lifts"
" the-struct_1224)"
"(expand-context-require-lifts"
" the-struct_1224)"
"(expand-context-to-module-lifts"
" the-struct_1224)"
" requires+provides492_1228"
"(expand-context-name the-struct_1224)"
"(expand-context-observer"
" the-struct_1224)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                \"expand-context?\""
" the-struct_1224)))"
" expand7.1"
" rebuild101.1)))"
"(begin"
"(let-values(((obs_1230)"
"(expand-context-observer ctx_1181)))"
"(if obs_1230"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_1230 'exit-prim))"
"(void)))"
"(void)))"
"(cons"
"(let-values(((temp494_1231)(car bodys_1183))"
"((disarmed-body495_1232)"
" disarmed-body_1185)"
"((temp496_1233)"
"(list* #%provide484_1188 specs_1200)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" temp494_1231"
" disarmed-body495_1232"
" temp496_1233)"
"(rebuild101.1"
" temp494_1231"
" disarmed-body495_1232"
" temp496_1233)))"
"(loop_1182(cdr bodys_1183) phase_1184))))))))"
"(if(equal? tmp_1186 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_1234 begin-for-syntax497_1235 e498_1236)"
"(let-values(((s_1248) disarmed-body_1185))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1249) s_1248))"
"(let-values(((begin-for-syntax497_1250"
" e498_1251)"
"(let-values(((s_1252)"
"(if(syntax?$1"
" s_1248)"
"(syntax-e$1"
" s_1248)"
" s_1248)))"
"(if(pair? s_1252)"
"(let-values(((begin-for-syntax499_1253)"
"(let-values(((s_1255)"
"(car"
" s_1252)))"
" s_1255))"
"((e500_1254)"
"(let-values(((s_1256)"
"(cdr"
" s_1252)))"
"(let-values(((s_1257)"
"(if(syntax?$1"
" s_1256)"
"(syntax-e$1"
" s_1256)"
" s_1256)))"
"(let-values(((flat-s_1258)"
"(to-syntax-list.1$1"
" s_1257)))"
"(if(not"
" flat-s_1258)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_1249))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_1249))"
"(let-values()"
"(let-values(((e_1259)"
"(let-values(((lst_1260)"
" flat-s_1258))"
"(begin"
"(if(list?"
" lst_1260)"
"(void)"
"(let-values()"
"(in-list"
" lst_1260)))"
"((letrec-values(((for-loop_1261)"
"(lambda(e_1262"
" lst_1263)"
"(if(pair?"
" lst_1263)"
"(let-values(((s_1264)"
"(unsafe-car"
" lst_1263)))"
"(if #t"
"(let-values(((e_1265)"
"(let-values(((e_1266)"
" e_1262))"
"(let-values(((e_1267)"
"(let-values()"
"(let-values(((e501_1268)"
"(let-values()"
" s_1264)))"
"(cons"
" e501_1268"
" e_1266)))))"
"(values"
" e_1267)))))"
"(if #t"
"(for-loop_1261"
" e_1265"
"(unsafe-cdr"
" lst_1263))"
" e_1265))"
" e_1262))"
" e_1262))))"
" for-loop_1261)"
" null"
" lst_1260)))))"
"(alt-reverse"
" e_1259))))))))))"
"(values"
" begin-for-syntax499_1253"
" e500_1254))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_1249)))))"
"(values"
" #t"
" begin-for-syntax497_1250"
" e498_1251)))"
"(values #f #f #f)))))"
"(let-values(((nested-bodys_1247)"
"(loop_1182 e498_1236(add1 phase_1184))))"
"(cons"
"(let-values(((temp502_1269)(car bodys_1183))"
"((disarmed-body503_1270) disarmed-body_1185)"
"((temp504_1271)"
"(list*"
" begin-for-syntax497_1235"
" nested-bodys_1247)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" temp502_1269"
" disarmed-body503_1270"
" temp504_1271)"
"(rebuild101.1"
" temp502_1269"
" disarmed-body503_1270"
" temp504_1271)))"
"(loop_1182(cdr bodys_1183) phase_1184)))))"
"(let-values()"
"(cons"
"(car bodys_1183)"
"(loop_1182(cdr bodys_1183) phase_1184))))))))))))"
" loop_1182)"
" expression-expanded-bodys_1174"
" phase_1179))))))))))))"
"(define-values"
"(unpack108.1)"
"(lambda(given-kws_1272 given-args_1273 expression-expanded-bodys106_1274)"
"(let-values(((ctx98_1275)(car given-args_1273))"
"((given-kws_1276)(cdr given-kws_1272))"
"((given-args_1277)(cdr given-args_1273)))"
"(let-values(((declared-submodule-names94_1278)(car given-args_1277))"
"((given-kws_1279)(cdr given-kws_1276))"
"((given-args_1280)(cdr given-args_1277)))"
"(let-values(((namespace95_1281)(car given-args_1280))"
"((given-kws_1282)(cdr given-kws_1279))"
"((given-args_1283)(cdr given-args_1280)))"
"(let-values(((original92_1284)(car given-args_1283))"
"((given-kws_1285)(cdr given-kws_1282))"
"((given-args_1286)(cdr given-args_1283)))"
"(let-values(((phase96_1287)(car given-args_1286))"
"((given-kws_1288)(cdr given-kws_1285))"
"((given-args_1289)(cdr given-args_1286)))"
"(let-values(((requires-and-provides93_1290)(car given-args_1289))"
"((given-kws_1291)(cdr given-kws_1288))"
"((given-args_1292)(cdr given-args_1289)))"
"(let-values(((self97_1293)(car given-args_1292)))"
"(resolve-provides107.1"
" ctx98_1275"
" declared-submodule-names94_1278"
" namespace95_1281"
" original92_1284"
" phase96_1287"
" requires-and-provides93_1290"
" self97_1293"
" expression-expanded-bodys106_1274))))))))))"
"(define-values"
"(resolve-provides109.1)"
"(lifted/4.1$4"
"(lambda(given-kws_1294 given-argc_1295)"
"(if(= given-argc_1295 3)"
"(let-values(((l2_1296) given-kws_1294))"
"(if(pair? l2_1296)"
"(if(eq?(car l2_1296) '#:ctx)"
"(let-values(((l2_1297)(cdr l2_1296)))"
"(if(pair? l2_1297)"
"(if(eq?(car l2_1297) '#:declared-submodule-names)"
"(let-values(((l2_1298)(cdr l2_1297)))"
"(if(pair? l2_1298)"
"(if(eq?(car l2_1298) '#:namespace)"
"(let-values(((l2_1299)(cdr l2_1298)))"
"(if(pair? l2_1299)"
"(if(eq?(car l2_1299) '#:original)"
"(let-values(((l2_1300)(cdr l2_1299)))"
"(if(pair? l2_1300)"
"(if(eq?(car l2_1300) '#:phase)"
"(let-values(((l2_1301)(cdr l2_1300)))"
"(if(pair? l2_1301)"
"(if(eq?(car l2_1301) '#:requires-and-provides)"
"(let-values(((l2_1302)(cdr l2_1301)))"
"(if(pair? l2_1302)"
"(if(eq?(car l2_1302) '#:self)(null?(cdr l2_1302)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1303 given-args_1304 expression-expanded-bodys_1305)"
"(unpack108.1 given-kws_1303 given-args_1304 expression-expanded-bodys_1305)))"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)"
" '(#:ctx #:declared-submodule-names #:namespace #:original #:phase #:requires-and-provides #:self)))"
"(define-values"
"(lifted/5.1)"
"(make-required"
" 'declare-module-for-expansion"
"(case-lambda"
"((self_1306 fully-expanded-bodys-except-post-submodules_1307)"
"(apply missing-kw self_1306 fully-expanded-bodys-except-post-submodules_1307 null)))"
" #f"
" #f))"
"(define-values"
"(declare-module-for-expansion127.1)"
"(lambda(enclosing116_1308"
" module-begin-id112_1309"
" module-intial-require111_1310"
" module-name-id110_1311"
" namespace114_1312"
" requires-and-provides113_1313"
" root-ctx117_1314"
" self115_1315"
" fully-expanded-bodys-except-post-submodules126_1316)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1317)"
" fully-expanded-bodys-except-post-submodules126_1316))"
"(let-values(((module-name-id_1318) module-name-id110_1311))"
"(let-values(((module-initial-require_1319) module-intial-require111_1310))"
"(let-values(((module-begin-id_1320) module-begin-id112_1309))"
"(let-values(((requires+provides_1321) requires-and-provides113_1313))"
"(let-values(((m-ns_1322) namespace114_1312))"
"(let-values(((self_1323) self115_1315))"
"(let-values(((enclosing-self_1324) enclosing116_1308))"
"(let-values(((root-ctx_1325) root-ctx117_1314))"
"(let-values()"
"(let-values(((tmp-mod_1326)"
"(attach-root-expand-context-properties"
"(attach-require-provide-properties"
" requires+provides_1321"
"(datum->syntax$2"
" #f"
"(list"
"(datum->syntax$2 core-stx 'module)"
" module-name-id_1318"
" module-initial-require_1319"
"(list*"
" module-begin-id_1320"
" fully-expanded-bodys-except-post-submodules_1317)))"
" self_1323"
" self_1323)"
" root-ctx_1325"
" self_1323"
" self_1323)))"
"(let-values(((module-name_1327)"
"(1/module-path-index-resolve"
"(let-values(((or-part_1329) enclosing-self_1324))"
"(if or-part_1329 or-part_1329 self_1323)))))"
"(let-values(((root-module-name_1328)(resolved-module-path-root-name module-name_1327)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_1322"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1328))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:878:4_1330) eval-module10.1)"
"((temp505_1331)"
"(let-values(((...er/expand/module.rkt:879:5_1333) compile-module13.1)"
"((tmp-mod507_1334) tmp-mod_1326)"
"((temp508_1335)"
"(let-values(((...er/expand/module.rkt:880:21_1338)"
" make-compile-context16.1)"
"((m-ns511_1339) m-ns_1322)"
"((enclosing-self512_1340) enclosing-self_1324)"
"((temp513_1341)"
"(if enclosing-self_1324"
"(1/resolved-module-path-name"
" module-name_1327)"
" #f)))"
"(if(variable-reference-constant?"
"(#%variable-reference make-compile-context16.1))"
"(make-compile-context14.1"
" temp513_1341"
" #t"
" #f"
" #f"
" enclosing-self512_1340"
" #t"
" m-ns511_1339"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:880:21_1338"
" keyword-procedure-extract"
" '(#:full-module-name #:module-self #:namespace)"
" 2)"
" '(#:full-module-name #:module-self #:namespace)"
"(list"
" temp513_1341"
" enclosing-self512_1340"
" m-ns511_1339)))))"
"((self509_1336) self_1323)"
"((temp510_1337) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module13.1))"
"(compile-module11.1"
" temp510_1337"
" #t"
" self509_1336"
" #t"
" #f"
" #f"
" #f"
" #f"
" tmp-mod507_1334"
" temp508_1335)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:879:5_1333"
" keyword-procedure-extract"
" '(#:as-submodule? #:self)"
" 4)"
" '(#:as-submodule? #:self)"
"(list temp510_1337 self509_1336)"
" tmp-mod507_1334"
" temp508_1335))))"
"((temp506_1332) #t))"
"(if(variable-reference-constant?(#%variable-reference eval-module10.1))"
"(eval-module8.1 temp506_1332 #t #f #f #f #f temp505_1331)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:878:4_1330"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" 3)"
" '(#:as-submodule?)"
"(list temp506_1332)"
" temp505_1331))))))))))))))))))))"
"(define-values"
"(unpack128.1)"
"(lambda(given-kws_1342 given-args_1343 fully-expanded-bodys-except-post-submodules126_1344)"
"(let-values(((enclosing116_1345)(car given-args_1343))"
"((given-kws_1346)(cdr given-kws_1342))"
"((given-args_1347)(cdr given-args_1343)))"
"(let-values(((module-begin-id112_1348)(car given-args_1347))"
"((given-kws_1349)(cdr given-kws_1346))"
"((given-args_1350)(cdr given-args_1347)))"
"(let-values(((module-intial-require111_1351)(car given-args_1350))"
"((given-kws_1352)(cdr given-kws_1349))"
"((given-args_1353)(cdr given-args_1350)))"
"(let-values(((module-name-id110_1354)(car given-args_1353))"
"((given-kws_1355)(cdr given-kws_1352))"
"((given-args_1356)(cdr given-args_1353)))"
"(let-values(((namespace114_1357)(car given-args_1356))"
"((given-kws_1358)(cdr given-kws_1355))"
"((given-args_1359)(cdr given-args_1356)))"
"(let-values(((requires-and-provides113_1360)(car given-args_1359))"
"((given-kws_1361)(cdr given-kws_1358))"
"((given-args_1362)(cdr given-args_1359)))"
"(let-values(((root-ctx117_1363)(car given-args_1362))"
"((given-kws_1364)(cdr given-kws_1361))"
"((given-args_1365)(cdr given-args_1362)))"
"(let-values(((self115_1366)(car given-args_1365)))"
"(declare-module-for-expansion127.1"
" enclosing116_1345"
" module-begin-id112_1348"
" module-intial-require111_1351"
" module-name-id110_1354"
" namespace114_1357"
" requires-and-provides113_1360"
" root-ctx117_1363"
" self115_1366"
" fully-expanded-bodys-except-post-submodules126_1344)))))))))))"
"(define-values"
"(declare-module-for-expansion129.1)"
"(lifted/5.1"
"(lambda(given-kws_1367 given-argc_1368)"
"(if(= given-argc_1368 3)"
"(let-values(((l2_1369) given-kws_1367))"
"(if(pair? l2_1369)"
"(if(eq?(car l2_1369) '#:enclosing)"
"(let-values(((l2_1370)(cdr l2_1369)))"
"(if(pair? l2_1370)"
"(if(eq?(car l2_1370) '#:module-begin-id)"
"(let-values(((l2_1371)(cdr l2_1370)))"
"(if(pair? l2_1371)"
"(if(eq?(car l2_1371) '#:module-intial-require)"
"(let-values(((l2_1372)(cdr l2_1371)))"
"(if(pair? l2_1372)"
"(if(eq?(car l2_1372) '#:module-name-id)"
"(let-values(((l2_1373)(cdr l2_1372)))"
"(if(pair? l2_1373)"
"(if(eq?(car l2_1373) '#:namespace)"
"(let-values(((l2_1374)(cdr l2_1373)))"
"(if(pair? l2_1374)"
"(if(eq?(car l2_1374) '#:requires-and-provides)"
"(let-values(((l2_1375)(cdr l2_1374)))"
"(if(pair? l2_1375)"
"(if(eq?(car l2_1375) '#:root-ctx)"
"(let-values(((l2_1376)(cdr l2_1375)))"
"(if(pair? l2_1376)"
"(if(eq?(car l2_1376) '#:self)(null?(cdr l2_1376)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1377 given-args_1378 fully-expanded-bodys-except-post-submodules_1379)"
"(unpack128.1 given-kws_1377 given-args_1378 fully-expanded-bodys-except-post-submodules_1379)))"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)"
" '(#:enclosing"
" #:module-begin-id"
" #:module-intial-require"
" #:module-name-id"
" #:namespace"
" #:requires-and-provides"
" #:root-ctx"
" #:self)))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_1380 root-ctx_1381 orig-self_1382 new-self_1383)"
"(syntax-property$1"
" s_1380"
" 'module-root-expand-context"
"(root-expand-context-encode-for-module root-ctx_1381 orig-self_1382 new-self_1383))))"
"(define-values"
"(lifted/6.1$1)"
"(make-required"
" 'expand-post-submodules"
"(case-lambda"
"((self_1384 fully-expanded-bodys-except-post-submodules_1385)"
"(apply missing-kw self_1384 fully-expanded-bodys-except-post-submodules_1385 null)))"
" #f"
" #f))"
"(define-values"
"(expand-post-submodules149.1)"
"(lambda(ctx138_1386"
" declare-enclosing130_1387"
" declared-submodule-names137_1388"
" enclosing-is-cross-phase-persistent?135_1389"
" mpis-to-reset136_1390"
" original131_1391"
" phase132_1392"
" requires-and-provides134_1393"
" self133_1394"
" fully-expanded-bodys-except-post-submodules148_1395)"
"(let-values(((fully-expanded-bodys-except-post-submodules_1396)"
" fully-expanded-bodys-except-post-submodules148_1395))"
"(let-values(((declare-enclosing-module_1397) declare-enclosing130_1387))"
"(let-values(((s_1398) original131_1391))"
"(let-values(((phase_1399) phase132_1392))"
"(let-values(((self_1400) self133_1394))"
"(let-values(((requires+provides_1401) requires-and-provides134_1393))"
"(let-values(((enclosing-is-cross-phase-persistent?_1402) enclosing-is-cross-phase-persistent?135_1389))"
"(let-values(((mpis-to-reset_1403) mpis-to-reset136_1390))"
"(let-values(((declared-submodule-names_1404) declared-submodule-names137_1388))"
"(let-values(((submod-ctx_1405) ctx138_1386))"
"(let-values()"
"((letrec-values(((loop_1406)"
"(lambda(bodys_1407 phase_1408)"
"(if(null? bodys_1407)"
"(let-values() null)"
"(let-values()"
"(let-values(((disarmed-body_1409)"
"(syntax-disarm$1(car bodys_1407))))"
"(let-values(((tmp_1410)"
"(core-form-sym disarmed-body_1409 phase_1408)))"
"(if(equal? tmp_1410 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force declare-enclosing-module_1397)"
"(values))))"
"(let-values(((ready-body_1411)"
"(remove-use-site-scopes"
"(car bodys_1407)"
" submod-ctx_1405)))"
"(let-values(((ok?_1412"
" module*514_1413"
" name515_1414"
" _516_1415)"
"(let-values(((s_1429) disarmed-body_1409))"
"(if(if #t"
"(let-values(((s_1430)"
"(if(syntax?$1 s_1429)"
"(syntax-e$1 s_1429)"
" s_1429)))"
"(if(pair? s_1430)"
"(if(let-values(((s_1431)"
"(car s_1430)))"
" #t)"
"(let-values(((s_1432)"
"(cdr s_1430)))"
"(let-values(((s_1433)"
"(if(syntax?$1"
" s_1432)"
"(syntax-e$1"
" s_1432)"
" s_1432)))"
"(if(pair? s_1433)"
"(if(let-values(((s_1434)"
"(car"
" s_1433)))"
" #t)"
"(let-values(((s_1435)"
"(cdr"
" s_1433)))"
"(let-values(((s_1436)"
"(if(syntax?$1"
" s_1435)"
"(syntax-e$1"
" s_1435)"
" s_1435)))"
"(if(pair? s_1436)"
"(if(let-values(((s_1437)"
"(car"
" s_1436)))"
"(let-values(((s_1438)"
"(if(syntax?$1"
" s_1437)"
"(syntax-e$1"
" s_1437)"
" s_1437)))"
"(eq?"
" #f"
" s_1438)))"
"(let-values(((s_1439)"
"(cdr"
" s_1436)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values(((orig-s_1440) s_1429))"
"(let-values(((module*514_1441"
" name515_1442"
" _516_1443)"
"(let-values(((s_1444)"
"(if(syntax?$1"
" s_1429)"
"(syntax-e$1"
" s_1429)"
" s_1429)))"
"(if #t"
"(let-values(((module*517_1445)"
"(let-values(((s_1448)"
"(car"
" s_1444)))"
" s_1448))"
"((name518_1446"
" _519_1447)"
"(let-values(((s_1449)"
"(cdr"
" s_1444)))"
"(let-values(((s_1450)"
"(if(syntax?$1"
" s_1449)"
"(syntax-e$1"
" s_1449)"
" s_1449)))"
"(if #t"
"(let-values(((name520_1451)"
"(let-values(((s_1453)"
"(car"
" s_1450)))"
" s_1453))"
"((_521_1452)"
"(let-values(((s_1454)"
"(cdr"
" s_1450)))"
"(let-values(((s_1455)"
"(if(syntax?$1"
" s_1454)"
"(syntax-e$1"
" s_1454)"
" s_1454)))"
"(if #t"
"(let-values((()"
"(let-values(((s_1457)"
"(car"
" s_1455)))"
"(let-values(((s_1458)"
"(if(syntax?$1"
" s_1457)"
"(syntax-e$1"
" s_1457)"
" s_1457)))"
"(values))))"
"((_522_1456)"
"(let-values(((s_1459)"
"(cdr"
" s_1455)))"
" s_1459)))"
"(values"
" _522_1456))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_1440))))))"
"(values"
" name520_1451"
" _521_1452))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                         \"bad syntax\""
" orig-s_1440))))))"
"(values"
" module*517_1445"
" name518_1446"
" _519_1447))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_1440)))))"
"(values"
" #t"
" module*514_1441"
" name515_1442"
" _516_1443)))"
"(values #f #f #f #f)))))"
"(let-values(((submod_1428)"
"(if ok?_1412"
"(let-values()"
"(let-values(((neg-phase_1460)"
"(phase- 0 phase_1408)))"
"(let-values(((shifted-s_1461)"
"(syntax-shift-phase-level$1"
" ready-body_1411"
" neg-phase_1460)))"
"(let-values(((submod_1462)"
"(let-values(((...er/expand/module.rkt:926:15_1463)"
" expand-submodule177.1)"
"((shifted-s523_1464)"
" shifted-s_1461)"
"((self524_1465)"
" self_1400)"
"((submod-ctx525_1466)"
" submod-ctx_1405)"
"((temp526_1467)"
" #t)"
"((neg-phase527_1468)"
" neg-phase_1460)"
"((requires+provides528_1469)"
" requires+provides_1401)"
"((enclosing-is-cross-phase-persistent?529_1470)"
" enclosing-is-cross-phase-persistent?_1402)"
"((mpis-to-reset530_1471)"
" mpis-to-reset_1403)"
"((declared-submodule-names531_1472)"
" declared-submodule-names_1404))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule177.1))"
"(expand-submodule175.1"
" declared-submodule-names531_1472"
" enclosing-is-cross-phase-persistent?529_1470"
" #t"
" requires+provides528_1469"
" #t"
" temp526_1467"
" neg-phase527_1468"
" #t"
" mpis-to-reset530_1471"
" shifted-s523_1464"
" self524_1465"
" submod-ctx525_1466)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:926:15_1463"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names531_1472"
" enclosing-is-cross-phase-persistent?529_1470"
" requires+provides528_1469"
" temp526_1467"
" neg-phase527_1468"
" mpis-to-reset530_1471)"
" shifted-s523_1464"
" self524_1465"
" submod-ctx525_1466)))))"
"(syntax-shift-phase-level$1"
" submod_1462"
" phase_1408)))))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:935:13_1473)"
" expand-submodule177.1)"
"((ready-body532_1474)"
" ready-body_1411)"
"((self533_1475)"
" self_1400)"
"((submod-ctx534_1476)"
" submod-ctx_1405)"
"((temp535_1477) #t)"
"((mpis-to-reset536_1478)"
" mpis-to-reset_1403)"
"((declared-submodule-names537_1479)"
" declared-submodule-names_1404))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule177.1))"
"(expand-submodule175.1"
" declared-submodule-names537_1479"
" #f"
" #f"
" #f"
" #f"
" temp535_1477"
" #f"
" #f"
" mpis-to-reset536_1478"
" ready-body532_1474"
" self533_1475"
" submod-ctx534_1476)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:935:13_1473"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names537_1479"
" temp535_1477"
" mpis-to-reset536_1478)"
" ready-body532_1474"
" self533_1475"
" submod-ctx534_1476)))))))"
"(cons"
" submod_1428"
"(loop_1406(cdr bodys_1407) phase_1408)))))))"
"(if(equal? tmp_1410 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_1480 begin-for-syntax538_1481 e539_1482)"
"(let-values(((s_1494) disarmed-body_1409))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1495) s_1494))"
"(let-values(((begin-for-syntax538_1496"
" e539_1497)"
"(let-values(((s_1498)"
"(if(syntax?$1"
" s_1494)"
"(syntax-e$1"
" s_1494)"
" s_1494)))"
"(if(pair? s_1498)"
"(let-values(((begin-for-syntax540_1499)"
"(let-values(((s_1501)"
"(car"
" s_1498)))"
" s_1501))"
"((e541_1500)"
"(let-values(((s_1502)"
"(cdr"
" s_1498)))"
"(let-values(((s_1503)"
"(if(syntax?$1"
" s_1502)"
"(syntax-e$1"
" s_1502)"
" s_1502)))"
"(let-values(((flat-s_1504)"
"(to-syntax-list.1$1"
" s_1503)))"
"(if(not"
" flat-s_1504)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1495))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_1495))"
"(let-values()"
"(let-values(((e_1505)"
"(let-values(((lst_1506)"
" flat-s_1504))"
"(begin"
"(if(list?"
" lst_1506)"
"(void)"
"(let-values()"
"(in-list"
" lst_1506)))"
"((letrec-values(((for-loop_1507)"
"(lambda(e_1508"
" lst_1509)"
"(if(pair?"
" lst_1509)"
"(let-values(((s_1510)"
"(unsafe-car"
" lst_1509)))"
"(if #t"
"(let-values(((e_1511)"
"(let-values(((e_1512)"
" e_1508))"
"(let-values(((e_1513)"
"(let-values()"
"(let-values(((e542_1514)"
"(let-values()"
" s_1510)))"
"(cons"
" e542_1514"
" e_1512)))))"
"(values"
" e_1513)))))"
"(if #t"
"(for-loop_1507"
" e_1511"
"(unsafe-cdr"
" lst_1509))"
" e_1511))"
" e_1508))"
" e_1508))))"
" for-loop_1507)"
" null"
" lst_1506)))))"
"(alt-reverse"
" e_1505))))))))))"
"(values"
" begin-for-syntax540_1499"
" e541_1500))"
"(raise-syntax-error$1"
" #f"
"                                                                                                   \"bad syntax\""
" orig-s_1495)))))"
"(values"
" #t"
" begin-for-syntax538_1496"
" e539_1497)))"
"(values #f #f #f)))))"
"(let-values(((nested-bodys_1493)"
"(loop_1406 e539_1482(add1 phase_1408))))"
"(cons"
"(let-values(((temp543_1515)(car bodys_1407))"
"((disarmed-body544_1516)"
" disarmed-body_1409)"
"((temp545_1517)"
"(list*"
" begin-for-syntax538_1481"
" nested-bodys_1493)))"
"(if(variable-reference-constant?"
"(#%variable-reference rebuild101.1))"
"(rebuild99.1"
" #f"
" #f"
" temp543_1515"
" disarmed-body544_1516"
" temp545_1517)"
"(rebuild101.1"
" temp543_1515"
" disarmed-body544_1516"
" temp545_1517)))"
"(loop_1406(cdr bodys_1407) phase_1408)))))"
"(let-values()"
"(cons"
"(car bodys_1407)"
"(loop_1406(cdr bodys_1407) phase_1408))))))))))))"
" loop_1406)"
" fully-expanded-bodys-except-post-submodules_1396"
" phase_1399))))))))))))))"
"(define-values"
"(unpack150.1)"
"(lambda(given-kws_1518 given-args_1519 fully-expanded-bodys-except-post-submodules148_1520)"
"(let-values(((ctx138_1521)(car given-args_1519))"
"((given-kws_1522)(cdr given-kws_1518))"
"((given-args_1523)(cdr given-args_1519)))"
"(let-values(((declare-enclosing130_1524)(car given-args_1523))"
"((given-kws_1525)(cdr given-kws_1522))"
"((given-args_1526)(cdr given-args_1523)))"
"(let-values(((declared-submodule-names137_1527)(car given-args_1526))"
"((given-kws_1528)(cdr given-kws_1525))"
"((given-args_1529)(cdr given-args_1526)))"
"(let-values(((enclosing-is-cross-phase-persistent?135_1530)(car given-args_1529))"
"((given-kws_1531)(cdr given-kws_1528))"
"((given-args_1532)(cdr given-args_1529)))"
"(let-values(((mpis-to-reset136_1533)(car given-args_1532))"
"((given-kws_1534)(cdr given-kws_1531))"
"((given-args_1535)(cdr given-args_1532)))"
"(let-values(((original131_1536)(car given-args_1535))"
"((given-kws_1537)(cdr given-kws_1534))"
"((given-args_1538)(cdr given-args_1535)))"
"(let-values(((phase132_1539)(car given-args_1538))"
"((given-kws_1540)(cdr given-kws_1537))"
"((given-args_1541)(cdr given-args_1538)))"
"(let-values(((requires-and-provides134_1542)(car given-args_1541))"
"((given-kws_1543)(cdr given-kws_1540))"
"((given-args_1544)(cdr given-args_1541)))"
"(let-values(((self133_1545)(car given-args_1544)))"
"(expand-post-submodules149.1"
" ctx138_1521"
" declare-enclosing130_1524"
" declared-submodule-names137_1527"
" enclosing-is-cross-phase-persistent?135_1530"
" mpis-to-reset136_1533"
" original131_1536"
" phase132_1539"
" requires-and-provides134_1542"
" self133_1545"
" fully-expanded-bodys-except-post-submodules148_1520))))))))))))"
"(define-values"
"(expand-post-submodules151.1)"
"(lifted/6.1$1"
"(lambda(given-kws_1546 given-argc_1547)"
"(if(= given-argc_1547 3)"
"(let-values(((l2_1548) given-kws_1546))"
"(if(pair? l2_1548)"
"(if(eq?(car l2_1548) '#:ctx)"
"(let-values(((l2_1549)(cdr l2_1548)))"
"(if(pair? l2_1549)"
"(if(eq?(car l2_1549) '#:declare-enclosing)"
"(let-values(((l2_1550)(cdr l2_1549)))"
"(if(pair? l2_1550)"
"(if(eq?(car l2_1550) '#:declared-submodule-names)"
"(let-values(((l2_1551)(cdr l2_1550)))"
"(if(pair? l2_1551)"
"(if(eq?(car l2_1551) '#:enclosing-is-cross-phase-persistent?)"
"(let-values(((l2_1552)(cdr l2_1551)))"
"(if(pair? l2_1552)"
"(if(eq?(car l2_1552) '#:mpis-to-reset)"
"(let-values(((l2_1553)(cdr l2_1552)))"
"(if(pair? l2_1553)"
"(if(eq?(car l2_1553) '#:original)"
"(let-values(((l2_1554)(cdr l2_1553)))"
"(if(pair? l2_1554)"
"(if(eq?(car l2_1554) '#:phase)"
"(let-values(((l2_1555)(cdr l2_1554)))"
"(if(pair? l2_1555)"
"(if(eq?(car l2_1555) '#:requires-and-provides)"
"(let-values(((l2_1556)(cdr l2_1555)))"
"(if(pair? l2_1556)"
"(if(eq?(car l2_1556) '#:self)(null?(cdr l2_1556)) #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1557 given-args_1558 fully-expanded-bodys-except-post-submodules_1559)"
"(unpack150.1 given-kws_1557 given-args_1558 fully-expanded-bodys-except-post-submodules_1559)))"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)"
" '(#:ctx"
" #:declare-enclosing"
" #:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:mpis-to-reset"
" #:original"
" #:phase"
" #:requires-and-provides"
" #:self)))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_1560)"
"(free-id-set-member?"
"(expand-context-stops ctx_1560)"
"(expand-context-phase ctx_1560)"
"(syntax-shift-phase-level$1(datum->syntax$2 core-stx 'module*)(expand-context-phase ctx_1560)))))"
"(define-values"
"(lifted/7.1)"
"(make-required"
" 'check-ids-unbound"
"(case-lambda"
"((self_1561 ids_1562 phase_1563 requires+provides_1564)"
"(apply missing-kw self_1561 ids_1562 phase_1563 requires+provides_1564 null)))"
" #f"
" #f))"
"(define-values"
"(check-ids-unbound157.1)"
"(lambda(in152_1565 ids154_1566 phase155_1567 requires+provides156_1568)"
"(let-values(((ids_1569) ids154_1566))"
"(let-values(((phase_1570) phase155_1567))"
"(let-values(((requires+provides_1571) requires+provides156_1568))"
"(let-values(((s_1572) in152_1565))"
"(let-values()"
"(let-values(((lst_1573) ids_1569))"
"(begin"
"(if(list? lst_1573)(void)(let-values()(in-list lst_1573)))"
"((letrec-values(((for-loop_1574)"
"(lambda(fold-var_1575 lst_1576)"
"(if(pair? lst_1576)"
"(let-values(((id_1577)(unsafe-car lst_1576)))"
"(if #t"
"(let-values(((fold-var_1578)"
"(let-values(((fold-var_1579) fold-var_1575))"
"(let-values(((fold-var_1580)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...er/expand/module.rkt:960:4_1581)"
" check-not-defined55.1)"
"((requires+provides546_1582)"
" requires+provides_1571)"
"((id547_1583) id_1577)"
"((phase548_1584)"
" phase_1570)"
"((s549_1585) s_1572))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" check-not-defined55.1))"
"(check-not-defined53.1"
" #f"
" #f"
" s549_1585"
" #f"
" #f"
" requires+provides546_1582"
" id547_1583"
" phase548_1584)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:960:4_1581"
" keyword-procedure-extract"
" '(#:in)"
" 5)"
" '(#:in)"
"(list s549_1585)"
" requires+provides546_1582"
" id547_1583"
" phase548_1584))))"
"(void)))))"
"(values fold-var_1580)))))"
"(if #t(for-loop_1574 fold-var_1578(unsafe-cdr lst_1576)) fold-var_1578))"
" fold-var_1575))"
" fold-var_1575))))"
" for-loop_1574)"
"(void)"
" lst_1573))))))))))"
"(define-values"
"(unpack158.1)"
"(lambda(given-kws_1586 given-args_1587 ids154_1588 phase155_1589 requires+provides156_1590)"
"(let-values(((in152_1591)(car given-args_1587)))"
"(check-ids-unbound157.1 in152_1591 ids154_1588 phase155_1589 requires+provides156_1590))))"
"(define-values"
"(check-ids-unbound159.1)"
"(lifted/7.1"
"(lambda(given-kws_1592 given-argc_1593)"
"(if(= given-argc_1593 5)"
"(let-values(((l2_1594) given-kws_1592))"
"(if(pair? l2_1594)(if(eq?(car l2_1594) '#:in)(null?(cdr l2_1594)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1595 given-args_1596 ids_1597 phase_1598 requires+provides_1599)"
"(unpack158.1 given-kws_1595 given-args_1596 ids_1597 phase_1598 requires+provides_1599)))"
" '(#:in)"
" '(#:in)))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_1600 phase_1601 m-ns_1602 self_1603 ctx_1604)"
"(let-values(((lst_1605) bodys_1600))"
"(begin"
"(if(list? lst_1605)(void)(let-values()(in-list lst_1605)))"
"((letrec-values(((for-loop_1606)"
"(lambda(fold-var_1607 lst_1608)"
"(if(pair? lst_1608)"
"(let-values(((body_1609)(unsafe-car lst_1608)))"
"(if #t"
"(let-values(((fold-var_1610)"
"(let-values(((fold-var_1611) fold-var_1607))"
"(let-values(((fold-var_1612)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((disarmed-body_1613)"
"(syntax-disarm$1 body_1609)))"
"(let-values(((tmp_1614)"
"(core-form-sym"
" disarmed-body_1613"
" phase_1601)))"
"(if(equal? tmp_1614 'define-values)"
"(let-values()"
"(let-values(((ok?_1615"
" define-values550_1616"
" id551_1617"
" rhs552_1618)"
"(let-values(((s_1633)"
" disarmed-body_1613))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1634)"
" s_1633))"
"(let-values(((define-values550_1635"
" id551_1636"
" rhs552_1637)"
"(let-values(((s_1638)"
"(if(syntax?$1"
" s_1633)"
"(syntax-e$1"
" s_1633)"
" s_1633)))"
"(if(pair?"
" s_1638)"
"(let-values(((define-values553_1639)"
"(let-values(((s_1642)"
"(car"
" s_1638)))"
" s_1642))"
"((id554_1640"
" rhs555_1641)"
"(let-values(((s_1643)"
"(cdr"
" s_1638)))"
"(let-values(((s_1644)"
"(if(syntax?$1"
" s_1643)"
"(syntax-e$1"
" s_1643)"
" s_1643)))"
"(if(pair?"
" s_1644)"
"(let-values(((id556_1645)"
"(let-values(((s_1647)"
"(car"
" s_1644)))"
"(let-values(((s_1648)"
"(if(syntax?$1"
" s_1647)"
"(syntax-e$1"
" s_1647)"
" s_1647)))"
"(let-values(((flat-s_1649)"
"(to-syntax-list.1$1"
" s_1648)))"
"(if(not"
" flat-s_1649)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_1634))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_1634))"
"(let-values()"
"(let-values(((id_1650)"
"(let-values(((lst_1651)"
" flat-s_1649))"
"(begin"
"(if(list?"
" lst_1651)"
"(void)"
"(let-values()"
"(in-list"
" lst_1651)))"
"((letrec-values(((for-loop_1652)"
"(lambda(id_1653"
" lst_1654)"
"(if(pair?"
" lst_1654)"
"(let-values(((s_1655)"
"(unsafe-car"
" lst_1654)))"
"(if #t"
"(let-values(((id_1656)"
"(let-values(((id_1657)"
" id_1653))"
"(let-values(((id_1658)"
"(let-values()"
"(let-values(((id559_1659)"
"(let-values()"
"(if(let-values(((or-part_1660)"
"(if(syntax?$1"
" s_1655)"
"(symbol?"
"(syntax-e$1"
" s_1655))"
" #f)))"
"(if or-part_1660"
" or-part_1660"
"(symbol?"
" s_1655)))"
" s_1655"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_1634"
" s_1655)))))"
"(cons"
" id559_1659"
" id_1657)))))"
"(values"
" id_1658)))))"
"(if #t"
"(for-loop_1652"
" id_1656"
"(unsafe-cdr"
" lst_1654))"
" id_1656))"
" id_1653))"
" id_1653))))"
" for-loop_1652)"
" null"
" lst_1651)))))"
"(alt-reverse"
" id_1650)))))))))"
"((rhs557_1646)"
"(let-values(((s_1661)"
"(cdr"
" s_1644)))"
"(let-values(((s_1662)"
"(if(syntax?$1"
" s_1661)"
"(syntax-e$1"
" s_1661)"
" s_1661)))"
"(if(pair?"
" s_1662)"
"(let-values(((rhs558_1663)"
"(let-values(((s_1664)"
"(car"
" s_1662)))"
" s_1664))"
"(()"
"(let-values(((s_1665)"
"(cdr"
" s_1662)))"
"(let-values(((s_1666)"
"(if(syntax?$1"
" s_1665)"
"(syntax-e$1"
" s_1665)"
" s_1665)))"
"(if(null?"
" s_1666)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_1634))))))"
"(values"
" rhs558_1663))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_1634))))))"
"(values"
" id556_1645"
" rhs557_1646))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_1634))))))"
"(values"
" define-values553_1639"
" id554_1640"
" rhs555_1641))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_1634)))))"
"(values"
" #t"
" define-values550_1635"
" id551_1636"
" rhs552_1637)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_1631) id551_1617))"
"(let-values(((vals_1632)"
"(eval-for-bindings"
" ids_1631"
" rhs552_1618"
" phase_1601"
" m-ns_1602"
" ctx_1604)))"
"(let-values(((lst_1667) ids_1631)"
"((lst_1668) vals_1632))"
"(begin"
"(if(list? lst_1667)"
"(void)"
"(let-values()"
"(in-list lst_1667)))"
"(if(list? lst_1668)"
"(void)"
"(let-values()"
"(in-list lst_1668)))"
"((letrec-values(((for-loop_1669)"
"(lambda(fold-var_1670"
" lst_1671"
" lst_1672)"
"(if(if(pair?"
" lst_1671)"
"(pair?"
" lst_1672)"
" #f)"
"(let-values(((id_1673)"
"(unsafe-car"
" lst_1671))"
"((val_1674)"
"(unsafe-car"
" lst_1672)))"
"(if(if #t"
" #t"
" #f)"
"(let-values(((fold-var_1675)"
"(let-values(((fold-var_1676)"
" fold-var_1670))"
"(let-values(((fold-var_1677)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1678)"
"(let-values(((id560_1679)"
" id_1673)"
"((phase561_1680)"
" phase_1601))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" resolve23.1))"
"(resolve21.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id560_1679"
" phase561_1680)"
"(resolve23.1"
" id560_1679"
" phase561_1680)))))"
"(begin"
"(if(if(module-binding?"
" b_1678)"
"(equal?"
" self_1603"
"(module-binding-module"
" b_1678))"
" #f)"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                               \"internal error: nested binding is not to self\")))"
"(namespace-set-variable!"
" m-ns_1602"
" phase_1601"
"(module-binding-sym"
" b_1678)"
" val_1674))))"
"(void)))))"
"(values"
" fold-var_1677)))))"
"(if(if #t"
" #t"
" #f)"
"(for-loop_1669"
" fold-var_1675"
"(unsafe-cdr"
" lst_1671)"
"(unsafe-cdr"
" lst_1672))"
" fold-var_1675))"
" fold-var_1670))"
" fold-var_1670))))"
" for-loop_1669)"
"(void)"
" lst_1667"
" lst_1668)))))))"
"(if(equal? tmp_1614 'define-syntaxes)"
"(let-values()(void))"
"(if(if(equal? tmp_1614 '#%provide)"
" #t"
"(if(equal? tmp_1614 '#%require)"
" #t"
"(if(equal? tmp_1614 'module)"
" #t"
"(if(equal? tmp_1614 'module*)"
" #t"
"(if(equal?"
" tmp_1614"
" 'begin-for-syntax)"
" #t"
"(equal?"
" tmp_1614"
" '#%declare))))))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_1604"
" 1/current-namespace"
" m-ns_1602)"
"(let-values()"
"(eval-top"
"(compile-single"
" body_1609"
"(let-values(((...er/expand/module.rkt:992:31_1681)"
" make-compile-context16.1)"
"((m-ns562_1682)"
" m-ns_1602)"
"((phase563_1683)"
" phase_1601))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context16.1))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" m-ns562_1682"
" #t"
" phase563_1683"
" #t"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:992:31_1681"
" keyword-procedure-extract"
" '(#:namespace #:phase)"
" 2)"
" '(#:namespace #:phase)"
"(list"
" m-ns562_1682"
" phase563_1683)))))"
" m-ns_1602))))))))))"
"(void)))))"
"(values fold-var_1612)))))"
"(if #t(for-loop_1606 fold-var_1610(unsafe-cdr lst_1608)) fold-var_1610))"
" fold-var_1607))"
" fold-var_1607))))"
" for-loop_1606)"
"(void)"
" lst_1605)))))"
"(define-values"
"(lifted/8.1)"
"(make-required"
" 'expand-submodule"
"(case-lambda((self_1684 s_1685 self_1686 ctx_1687)(apply missing-kw self_1684 s_1685 self_1686 ctx_1687 null)))"
" #f"
" #f))"
"(define-values"
"(expand-submodule175.1)"
"(lambda(declared-submodule-names165_1688"
" enclosing-is-cross-phase-persistent?163_1689"
" enclosing-is-cross-phase-persistent?169_1690"
" enclosing-requires+provides162_1691"
" enclosing-requires+provides168_1692"
" is-star?160_1693"
" keep-enclosing-scope-at-phase161_1694"
" keep-enclosing-scope-at-phase167_1695"
" mpis-to-reset164_1696"
" s172_1697"
" self173_1698"
" ctx174_1699)"
"(let-values(((s_1700) s172_1697))"
"(let-values(((self_1701) self173_1698))"
"(let-values(((ctx_1702) ctx174_1699))"
"(let-values(((is-star?_1703) is-star?160_1693))"
"(let-values(((keep-enclosing-scope-at-phase_1704)"
"(if keep-enclosing-scope-at-phase167_1695 keep-enclosing-scope-at-phase161_1694 #f)))"
"(let-values(((enclosing-r+p_1705)"
"(if enclosing-requires+provides168_1692 enclosing-requires+provides162_1691 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_1706)"
"(if enclosing-is-cross-phase-persistent?169_1690"
" enclosing-is-cross-phase-persistent?163_1689"
" #f)))"
"(let-values(((mpis-to-reset_1707) mpis-to-reset164_1696))"
"(let-values(((declared-submodule-names_1708) declared-submodule-names165_1688))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1730)(expand-context-observer ctx_1702)))"
"(if obs_1730"
"(let-values()"
"(if #t"
"(let-values()(call-expand-observe obs_1730 'enter-prim s_1700))"
"(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1731)(expand-context-observer ctx_1702)))"
"(if obs_1731"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe"
" obs_1731"
"(if is-star?_1703 'enter-prim-submodule* 'enter-prim-submodule)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((ok?_1709 module564_1710 name565_1711 _566_1712)"
"(let-values(((s_1732) s_1700))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1733) s_1732))"
"(let-values(((module564_1734 name565_1735 _566_1736)"
"(let-values(((s_1737)"
"(if(syntax?$1 s_1732)"
"(syntax-e$1 s_1732)"
" s_1732)))"
"(if(pair? s_1737)"
"(let-values(((module567_1738)"
"(let-values(((s_1741)(car s_1737)))"
" s_1741))"
"((name568_1739 _569_1740)"
"(let-values(((s_1742)(cdr s_1737)))"
"(let-values(((s_1743)"
"(if(syntax?$1 s_1742)"
"(syntax-e$1 s_1742)"
" s_1742)))"
"(if(pair? s_1743)"
"(let-values(((name570_1744)"
"(let-values(((s_1746)"
"(car"
" s_1743)))"
" s_1746))"
"((_571_1745)"
"(let-values(((s_1747)"
"(cdr"
" s_1743)))"
" s_1747)))"
"(values name570_1744 _571_1745))"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_1733))))))"
"(values module567_1738 name568_1739 _569_1740))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_1733)))))"
"(values #t module564_1734 name565_1735 _566_1736)))"
"(values #f #f #f #f)))))"
"(let-values(((name_1725)(syntax-e$1 name565_1711)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_1708 name_1725 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                     \"submodule already declared with the same name\""
" s_1700"
" name_1725))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_1708"
" name_1725"
"(syntax-e$1 module564_1710))"
"(values))))"
"(let-values(((submod_1726)"
"(let-values(((...er/expand/module.rkt:1017:4_1748) expand-module14.1)"
"((s572_1749) s_1700)"
"((temp573_1750)"
"(let-values(((the-struct_1756) ctx_1702))"
"(if(expand-context? the-struct_1756)"
"(let-values(((context579_1757) 'module)"
"((only-immediate?580_1758) #f)"
"((post-expansion-scope581_1759) #f))"
"(expand-context1.1"
"(root-expand-context-module-scopes"
" the-struct_1756)"
" post-expansion-scope581_1759"
"(root-expand-context-top-level-bind-scope"
" the-struct_1756)"
"(root-expand-context-all-scopes-stx"
" the-struct_1756)"
"(root-expand-context-use-site-scopes"
" the-struct_1756)"
"(root-expand-context-defined-syms"
" the-struct_1756)"
"(root-expand-context-frame-id the-struct_1756)"
"(root-expand-context-counter the-struct_1756)"
"(root-expand-context-lift-key the-struct_1756)"
" context579_1757"
"(expand-context-phase the-struct_1756)"
"(expand-context-namespace the-struct_1756)"
"(expand-context-env the-struct_1756)"
"(expand-context-post-expansion-scope-action"
" the-struct_1756)"
"(expand-context-scopes the-struct_1756)"
"(expand-context-def-ctx-scopes the-struct_1756)"
"(expand-context-reference-records"
" the-struct_1756)"
" only-immediate?580_1758"
"(expand-context-just-once? the-struct_1756)"
"(expand-context-module-begin-k the-struct_1756)"
"(expand-context-need-eventually-defined"
" the-struct_1756)"
"(expand-context-allow-unbound? the-struct_1756)"
"(expand-context-preserve-#%expression-and-do-not-add-#%top?"
" the-struct_1756)"
"(expand-context-stops the-struct_1756)"
"(expand-context-current-introduction-scopes"
" the-struct_1756)"
"(expand-context-declared-submodule-names"
" the-struct_1756)"
"(expand-context-lifts the-struct_1756)"
"(expand-context-lift-envs the-struct_1756)"
"(expand-context-module-lifts the-struct_1756)"
"(expand-context-require-lifts the-struct_1756)"
"(expand-context-to-module-lifts the-struct_1756)"
"(expand-context-requires+provides"
" the-struct_1756)"
"(expand-context-name the-struct_1756)"
"(expand-context-observer the-struct_1756)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context?\""
" the-struct_1756))))"
"((self574_1751) self_1701)"
"((keep-enclosing-scope-at-phase575_1752)"
" keep-enclosing-scope-at-phase_1704)"
"((enclosing-r+p576_1753) enclosing-r+p_1705)"
"((enclosing-is-cross-phase-persistent?577_1754)"
" enclosing-is-cross-phase-persistent?_1706)"
"((mpis-to-reset578_1755) mpis-to-reset_1707))"
"(if(variable-reference-constant?"
"(#%variable-reference expand-module14.1))"
"(expand-module12.1"
" enclosing-is-cross-phase-persistent?577_1754"
" #t"
" enclosing-r+p576_1753"
" #t"
" keep-enclosing-scope-at-phase575_1752"
" #t"
" mpis-to-reset578_1755"
" #t"
" s572_1749"
" temp573_1750"
" self574_1751)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1017:4_1748"
" keyword-procedure-extract"
" '(#:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
" 5)"
" '(#:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:keep-enclosing-scope-at-phase"
" #:mpis-for-enclosing-reset)"
"(list"
" enclosing-is-cross-phase-persistent?577_1754"
" enclosing-r+p576_1753"
" keep-enclosing-scope-at-phase575_1752"
" mpis-to-reset578_1755)"
" s572_1749"
" temp573_1750"
" self574_1751)))))"
"(let-values(((ns_1727)(expand-context-namespace ctx_1702)))"
"(let-values(((module-name_1728)(1/module-path-index-resolve self_1701)))"
"(let-values(((root-module-name_1729)"
"(resolved-module-path-root-name module-name_1728)))"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_1727"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1729))"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1035:4_1760) eval-module10.1)"
"((temp582_1761)"
"(let-values(((...er/expand/module.rkt:1036:5_1763)"
" compile-module13.1)"
"((submod584_1764) submod_1726)"
"((temp585_1765)"
"(let-values(((...er/expand/module.rkt:1037:21_1767)"
" make-compile-context16.1)"
"((ns587_1768) ns_1727)"
"((self588_1769) self_1701)"
"((temp589_1770)"
"(1/resolved-module-path-name"
" module-name_1728)))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" make-compile-context16.1))"
"(make-compile-context14.1"
" temp589_1770"
" #t"
" #f"
" #f"
" self588_1769"
" #t"
" ns587_1768"
" #t"
" #f"
" #f"
" #f"
" #f)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1037:21_1767"
" keyword-procedure-extract"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
" 2)"
" '(#:full-module-name"
" #:module-self"
" #:namespace)"
"(list"
" temp589_1770"
" self588_1769"
" ns587_1768)))))"
"((temp586_1766) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference compile-module13.1))"
"(compile-module11.1"
" temp586_1766"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" submod584_1764"
" temp585_1765)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1036:5_1763"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" 4)"
" '(#:as-submodule?)"
"(list temp586_1766)"
" submod584_1764"
" temp585_1765))))"
"((temp583_1762) #t))"
"(if(variable-reference-constant?"
"(#%variable-reference eval-module10.1))"
"(eval-module8.1 temp583_1762 #t #f #f #f #f temp582_1761)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1035:4_1760"
" keyword-procedure-extract"
" '(#:as-submodule?)"
" 3)"
" '(#:as-submodule?)"
"(list temp583_1762)"
" temp582_1761)))))"
"(let-values(((obs_1771)(expand-context-observer ctx_1702)))"
"(if obs_1771"
"(let-values()"
"(if #t"
"(let-values()"
"(call-expand-observe obs_1771 'exit-prim submod_1726))"
"(void)))"
"(void)))"
" submod_1726)))))))))))))))))))))))"
"(define-values"
"(unpack176.1)"
"(lambda(given-kws_1772 given-args_1773 s172_1774 self173_1775 ctx174_1776)"
"(let-values(((declared-submodule-names165_1777)(car given-args_1773))"
"((given-kws_1778)(cdr given-kws_1772))"
"((given-args_1779)(cdr given-args_1773)))"
"(let-values(((enclosing-is-cross-phase-persistent?169_1780)"
"(if(pair? given-kws_1778)(eq? '#:enclosing-is-cross-phase-persistent?(car given-kws_1778)) #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?163_1781)"
"(if enclosing-is-cross-phase-persistent?169_1780(car given-args_1779)(void)))"
"((given-kws_1782)"
"(if enclosing-is-cross-phase-persistent?169_1780(cdr given-kws_1778) given-kws_1778))"
"((given-args_1783)"
"(if enclosing-is-cross-phase-persistent?169_1780(cdr given-args_1779) given-args_1779)))"
"(let-values(((enclosing-requires+provides168_1784)"
"(if(pair? given-kws_1782)(eq? '#:enclosing-requires+provides(car given-kws_1782)) #f)))"
"(let-values(((enclosing-requires+provides162_1785)"
"(if enclosing-requires+provides168_1784(car given-args_1783)(void)))"
"((given-kws_1786)(if enclosing-requires+provides168_1784(cdr given-kws_1782) given-kws_1782))"
"((given-args_1787)"
"(if enclosing-requires+provides168_1784(cdr given-args_1783) given-args_1783)))"
"(let-values(((is-star?160_1788)(car given-args_1787))"
"((given-kws_1789)(cdr given-kws_1786))"
"((given-args_1790)(cdr given-args_1787)))"
"(let-values(((keep-enclosing-scope-at-phase167_1791)"
"(if(pair? given-kws_1789)"
"(eq? '#:keep-enclosing-scope-at-phase(car given-kws_1789))"
" #f)))"
"(let-values(((keep-enclosing-scope-at-phase161_1792)"
"(if keep-enclosing-scope-at-phase167_1791(car given-args_1790)(void)))"
"((given-kws_1793)"
"(if keep-enclosing-scope-at-phase167_1791(cdr given-kws_1789) given-kws_1789))"
"((given-args_1794)"
"(if keep-enclosing-scope-at-phase167_1791(cdr given-args_1790) given-args_1790)))"
"(let-values(((mpis-to-reset164_1795)(car given-args_1794)))"
"(expand-submodule175.1"
" declared-submodule-names165_1777"
" enclosing-is-cross-phase-persistent?163_1781"
" enclosing-is-cross-phase-persistent?169_1780"
" enclosing-requires+provides162_1785"
" enclosing-requires+provides168_1784"
" is-star?160_1788"
" keep-enclosing-scope-at-phase161_1792"
" keep-enclosing-scope-at-phase167_1791"
" mpis-to-reset164_1795"
" s172_1774"
" self173_1775"
" ctx174_1776))))))))))))"
"(define-values"
"(expand-submodule177.1)"
"(lifted/8.1"
"(lambda(given-kws_1796 given-argc_1797)"
"(if(= given-argc_1797 5)"
"(subsets?"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" given-kws_1796"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset))"
" #f))"
"(case-lambda"
"((given-kws_1798 given-args_1799 s_1800 self_1801 ctx_1802)"
"(unpack176.1 given-kws_1798 given-args_1799 s_1800 self_1801 ctx_1802)))"
" '(#:declared-submodule-names #:is-star? #:mpis-to-reset)"
" '(#:declared-submodule-names"
" #:enclosing-is-cross-phase-persistent?"
" #:enclosing-requires+provides"
" #:is-star?"
" #:keep-enclosing-scope-at-phase"
" #:mpis-to-reset)))"
"(define-values"
"(lifted/9.1)"
"(make-required"
" 'expand-non-module*-submodules"
"(case-lambda"
"((self_1803 bodys_1804 phase_1805 self_1806 ctx_1807)"
"(apply missing-kw self_1803 bodys_1804 phase_1805 self_1806 ctx_1807 null)))"
" #f"
" #f))"
"(define-values"
"(expand-non-module*-submodules186.1)"
"(lambda(declared-submodule-names179_1808 mpis-to-reset178_1809 bodys182_1810 phase183_1811 self184_1812 ctx185_1813)"
"(let-values(((bodys_1814) bodys182_1810))"
"(let-values(((phase_1815) phase183_1811))"
"(let-values(((self_1816) self184_1812))"
"(let-values(((ctx_1817) ctx185_1813))"
"(let-values(((mpis-to-reset_1818) mpis-to-reset178_1809))"
"(let-values(((declared-submodule-names_1819) declared-submodule-names179_1808))"
"(let-values()"
"(alt-reverse"
"(let-values(((lst_1820) bodys_1814))"
"(begin"
"(if(list? lst_1820)(void)(let-values()(in-list lst_1820)))"
"((letrec-values(((for-loop_1821)"
"(lambda(fold-var_1822 lst_1823)"
"(if(pair? lst_1823)"
"(let-values(((body_1824)(unsafe-car lst_1823)))"
"(if #t"
"(let-values(((fold-var_1825)"
"(let-values(((fold-var_1826) fold-var_1822))"
"(let-values(((fold-var_1827)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_1828)"
"(core-form-sym"
"(syntax-disarm$1"
" body_1824)"
" phase_1815)))"
"(if(equal? tmp_1828 'module)"
"(let-values()"
"(let-values(((...er/expand/module.rkt:1055:7_1829)"
" expand-submodule177.1)"
"((body590_1830)"
" body_1824)"
"((self591_1831)"
" self_1816)"
"((ctx592_1832)"
" ctx_1817)"
"((temp593_1833)"
" #f)"
"((mpis-to-reset594_1834)"
" mpis-to-reset_1818)"
"((declared-submodule-names595_1835)"
" declared-submodule-names_1819))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" expand-submodule177.1))"
"(expand-submodule175.1"
" declared-submodule-names595_1835"
" #f"
" #f"
" #f"
" #f"
" temp593_1833"
" #f"
" #f"
" mpis-to-reset594_1834"
" body590_1830"
" self591_1831"
" ctx592_1832)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1055:7_1829"
" keyword-procedure-extract"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
" 5)"
" '(#:declared-submodule-names"
" #:is-star?"
" #:mpis-to-reset)"
"(list"
" declared-submodule-names595_1835"
" temp593_1833"
" mpis-to-reset594_1834)"
" body590_1830"
" self591_1831"
" ctx592_1832))))"
"(let-values() body_1824))))"
" fold-var_1826))))"
"(values fold-var_1827)))))"
"(if #t"
"(for-loop_1821 fold-var_1825(unsafe-cdr lst_1823))"
" fold-var_1825))"
" fold-var_1822))"
" fold-var_1822))))"
" for-loop_1821)"
" null"
" lst_1820)))))))))))))"
"(define-values"
"(unpack187.1)"
"(lambda(given-kws_1836 given-args_1837 bodys182_1838 phase183_1839 self184_1840 ctx185_1841)"
"(let-values(((declared-submodule-names179_1842)(car given-args_1837))"
"((given-kws_1843)(cdr given-kws_1836))"
"((given-args_1844)(cdr given-args_1837)))"
"(let-values(((mpis-to-reset178_1845)(car given-args_1844)))"
"(expand-non-module*-submodules186.1"
" declared-submodule-names179_1842"
" mpis-to-reset178_1845"
" bodys182_1838"
" phase183_1839"
" self184_1840"
" ctx185_1841)))))"
"(define-values"
"(expand-non-module*-submodules188.1)"
"(lifted/9.1"
"(lambda(given-kws_1846 given-argc_1847)"
"(if(= given-argc_1847 6)"
"(let-values(((l2_1848) given-kws_1846))"
"(if(pair? l2_1848)"
"(if(eq?(car l2_1848) '#:declared-submodule-names)"
"(let-values(((l2_1849)(cdr l2_1848)))"
"(if(pair? l2_1849)(if(eq?(car l2_1849) '#:mpis-to-reset)(null?(cdr l2_1849)) #f) #f))"
" #f)"
" #f))"
" #f))"
"(case-lambda"
"((given-kws_1850 given-args_1851 bodys_1852 phase_1853 self_1854 ctx_1855)"
"(unpack187.1 given-kws_1850 given-args_1851 bodys_1852 phase_1853 self_1854 ctx_1855)))"
" '(#:declared-submodule-names #:mpis-to-reset)"
" '(#:declared-submodule-names #:mpis-to-reset)))"
"(define-values"
"(lifted/10.1)"
"(make-required"
" 'make-parse-lifted-require"
"(case-lambda"
"((self_1856 m-ns_1857 self_1858 requires+provides_1859)"
"(apply missing-kw self_1856 m-ns_1857 self_1858 requires+provides_1859 null)))"
" #f"
" #f))"
"(define-values"
"(make-parse-lifted-require194.1)"
"(lambda(declared-submodule-names189_1860 m-ns191_1861 self192_1862 requires+provides193_1863)"
"(let-values(((m-ns_1864) m-ns191_1861))"
"(let-values(((self_1865) self192_1862))"
"(let-values(((requires+provides_1866) requires+provides193_1863))"
"(let-values(((declared-submodule-names_1867) declared-submodule-names189_1860))"
"(let-values()"
"(lambda(s_1868 phase_1869)"
"(let-values(((ok?_1870 #%require596_1871 req597_1872)"
"(let-values(((s_1883)(syntax-disarm$1 s_1868)))"
"(if(if #t #t #f)"
"(let-values(((orig-s_1884) s_1883))"
"(let-values(((#%require596_1885 req597_1886)"
"(let-values(((s_1887)"
"(if(syntax?$1 s_1883)(syntax-e$1 s_1883) s_1883)))"
"(if(pair? s_1887)"
"(let-values(((#%require598_1888)"
"(let-values(((s_1890)(car s_1887))) s_1890))"
"((req599_1889)"
"(let-values(((s_1891)(cdr s_1887)))"
"(let-values(((s_1892)"
"(if(syntax?$1 s_1891)"
"(syntax-e$1 s_1891)"
" s_1891)))"
"(if(pair? s_1892)"
"(let-values(((req600_1893)"
"(let-values(((s_1894)"
"(car s_1892)))"
" s_1894))"
"(()"
"(let-values(((s_1895)"
"(cdr s_1892)))"
"(let-values(((s_1896)"
"(if(syntax?$1"
" s_1895)"
"(syntax-e$1"
" s_1895)"
" s_1895)))"
"(if(null? s_1896)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_1884))))))"
"(values req600_1893))"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_1884))))))"
"(values #%require598_1888 req599_1889))"
"                                                      (raise-syntax-error$1 #f \"bad syntax\" orig-s_1884)))))"
"(values #t #%require596_1885 req597_1886)))"
"(values #f #f #f)))))"
"(let-values(((...er/expand/module.rkt:1067:4_1897) parse-and-perform-requires!22.1)"
"((temp601_1898)(list req597_1872))"
"((s602_1899) s_1868)"
"((self603_1900) self_1865)"
"((m-ns604_1901) m-ns_1864)"
"((phase605_1902) phase_1869)"
"((phase606_1903) phase_1869)"
"((requires+provides607_1904) requires+provides_1866)"
"((declared-submodule-names608_1905) declared-submodule-names_1867))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" declared-submodule-names608_1905"
" #t"
" phase606_1903"
" #t"
" #f"
" #f"
" self603_1900"
" #t"
" #f"
" #f"
" temp601_1898"
" s602_1899"
" m-ns604_1901"
" phase605_1902"
" requires+provides607_1904)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...er/expand/module.rkt:1067:4_1897"
" keyword-procedure-extract"
" '(#:declared-submodule-names #:run-phase #:self)"
" 7)"
" '(#:declared-submodule-names #:run-phase #:self)"
"(list declared-submodule-names608_1905 phase606_1903 self603_1900)"
" temp601_1898"
" s602_1899"
" m-ns604_1901"
" phase605_1902"
" requires+provides607_1904))))))))))))"
"(define-values"
"(unpack195.1)"
"(lambda(given-kws_1906 given-args_1907 m-ns191_1908 self192_1909 requires+provides193_1910)"
"(let-values(((declared-submodule-names189_1911)(car given-args_1907)))"
"(make-parse-lifted-require194.1"
" declared-submodule-names189_1911"
" m-ns191_1908"
" self192_1909"
" requires+provides193_1910))))"
"(define-values"
"(make-parse-lifted-require196.1)"
"(lifted/10.1"
"(lambda(given-kws_1912 given-argc_1913)"
"(if(= given-argc_1913 5)"
"(let-values(((l2_1914) given-kws_1912))"
"(if(pair? l2_1914)(if(eq?(car l2_1914) '#:declared-submodule-names)(null?(cdr l2_1914)) #f) #f))"
" #f))"
"(case-lambda"
"((given-kws_1915 given-args_1916 m-ns_1917 self_1918 requires+provides_1919)"
"(unpack195.1 given-kws_1915 given-args_1916 m-ns_1917 self_1918 requires+provides_1919)))"
" '(#:declared-submodule-names)"
" '(#:declared-submodule-names)))"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_1 s_2 ctx_3)"
"(let-values(((top-level-bind-scope_4)(root-expand-context-top-level-bind-scope ctx_3)))"
"(let-values(((tl-ids_5)"
"(alt-reverse"
"(let-values(((lst_6) ids_1))"
"(begin"
"(if(list? lst_6)(void)(let-values()(in-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_8 lst_9)"
"(if(pair? lst_9)"
"(let-values(((id_10)(unsafe-car lst_9)))"
"(if #t"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_8))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
"(remove-use-site-scopes"
" id_10"
" ctx_3)"
" top-level-bind-scope_4))"
" fold-var_12))))"
"(values fold-var_13)))))"
"(if #t(for-loop_7 fold-var_11(unsafe-cdr lst_9)) fold-var_11))"
" fold-var_8))"
" fold-var_8))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(begin"
"(let-values(((tl-ids1_14) tl-ids_5)((temp2_15)(expand-context-phase ctx_3))((s3_16) s_2))"
"(if(variable-reference-constant?(#%variable-reference check-no-duplicate-ids10.1))"
"(check-no-duplicate-ids8.1 #f #f tl-ids1_14 temp2_15 s3_16 #f #f)"
"(check-no-duplicate-ids10.1 tl-ids1_14 temp2_15 s3_16)))"
"(select-defined-syms-and-bind!/ctx tl-ids_5 ctx_3)"
" tl-ids_5)))))"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-values"
"(lambda(s_1 ctx_2)"
"(let-values((()"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_2)))"
"(if obs_22"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_22 'prim-define-values))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_2) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_1)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_1)))"
"(let-values(((ok?_4 define-values1_5 id2_6 rhs3_7)"
"(let-values(((s_23) s_1))"
"(if(if #t #t #f)"
"(let-values(((orig-s_24) s_23))"
"(let-values(((define-values1_25 id2_26 rhs3_27)"
"(let-values(((s_28)(if(syntax?$1 s_23)(syntax-e$1 s_23) s_23)))"
"(if(pair? s_28)"
"(let-values(((define-values4_29)"
"(let-values(((s_32)(car s_28))) s_32))"
"((id5_30 rhs6_31)"
"(let-values(((s_33)(cdr s_28)))"
"(let-values(((s_34)"
"(if(syntax?$1 s_33)"
"(syntax-e$1 s_33)"
" s_33)))"
"(if(pair? s_34)"
"(let-values(((id7_35)"
"(let-values(((s_37)(car s_34)))"
"(let-values(((s_38)"
"(if(syntax?$1"
" s_37)"
"(syntax-e$1 s_37)"
" s_37)))"
"(let-values(((flat-s_39)"
"(to-syntax-list.1$1"
" s_38)))"
"(if(not flat-s_39)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_24))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_24))"
"(let-values()"
"(let-values(((id_40)"
"(let-values(((lst_41)"
" flat-s_39))"
"(begin"
"(if(list?"
" lst_41)"
"(void)"
"(let-values()"
"(in-list"
" lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(id_43"
" lst_44)"
"(if(pair?"
" lst_44)"
"(let-values(((s_45)"
"(unsafe-car"
" lst_44)))"
"(if #t"
"(let-values(((id_46)"
"(let-values(((id_47)"
" id_43))"
"(let-values(((id_48)"
"(let-values()"
"(let-values(((id13_49)"
"(let-values()"
"(if(let-values(((or-part_50)"
"(if(syntax?$1"
" s_45)"
"(symbol?"
"(syntax-e$1"
" s_45))"
" #f)))"
"(if or-part_50"
" or-part_50"
"(symbol?"
" s_45)))"
" s_45"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"not an identifier\""
" orig-s_24"
" s_45)))))"
"(cons"
" id13_49"
" id_47)))))"
"(values"
" id_48)))))"
"(if #t"
"(for-loop_42"
" id_46"
"(unsafe-cdr"
" lst_44))"
" id_46))"
" id_43))"
" id_43))))"
" for-loop_42)"
" null"
" lst_41)))))"
"(alt-reverse"
" id_40)))))))))"
"((rhs8_36)"
"(let-values(((s_51)(cdr s_34)))"
"(let-values(((s_52)"
"(if(syntax?$1"
" s_51)"
"(syntax-e$1 s_51)"
" s_51)))"
"(if(pair? s_52)"
"(let-values(((rhs9_53)"
"(let-values(((s_54)"
"(car"
" s_52)))"
" s_54))"
"(()"
"(let-values(((s_55)"
"(cdr"
" s_52)))"
"(let-values(((s_56)"
"(if(syntax?$1"
" s_55)"
"(syntax-e$1"
" s_55)"
" s_55)))"
"(if(null?"
" s_56)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                \"bad syntax\""
" orig-s_24))))))"
"(values rhs9_53))"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_24))))))"
"(values id7_35 rhs8_36))"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_24))))))"
"(values define-values4_29 id5_30 rhs6_31))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_24)))))"
"(values #t define-values1_25 id2_26 rhs3_27)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_20)(as-expand-time-top-level-bindings id2_6 s_1 ctx_2)))"
"(let-values(((exp-rhs_21)"
"(let-values(((temp14_57) rhs3_7)((temp15_58)(as-named-context ctx_2 ids_20)))"
"(if(variable-reference-constant?(#%variable-reference expand7.1))"
"(expand5.1 #f #f temp14_57 temp15_58)"
"(expand7.1 temp14_57 temp15_58)))))"
"(let-values(((s10_59) s_1)"
"((disarmed-s11_60) disarmed-s_3)"
"((temp12_61)(list define-values1_5 ids_20 exp-rhs_21)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s10_59 disarmed-s11_60 temp12_61)"
"(rebuild101.1 s10_59 disarmed-s11_60 temp12_61))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'define-syntaxes"
"(lambda(s_62 ctx_63)"
"(let-values((()"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_63)))"
"(if obs_83"
"(let-values()"
"(if #t(let-values()(call-expand-observe obs_83 'prim-define-syntaxes))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_84)(expand-context-observer ctx_63)))"
"(if obs_84"
"(let-values()(if #t(let-values()(call-expand-observe obs_84 'prepare-env))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_63) 'top-level)"
"(void)"
"                             (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_62)))"
"(values))))"
"(let-values(((disarmed-s_64)(syntax-disarm$1 s_62)))"
"(let-values(((ok?_65 define-syntaxes16_66 id17_67 rhs18_68)"
"(let-values(((s_85) disarmed-s_64))"
"(if(if #t #t #f)"
"(let-values(((orig-s_86) s_85))"
"(let-values(((define-syntaxes16_87 id17_88 rhs18_89)"
"(let-values(((s_90)(if(syntax?$1 s_85)(syntax-e$1 s_85) s_85)))"
"(if(pair? s_90)"
"(let-values(((define-syntaxes19_91)"
"(let-values(((s_94)(car s_90))) s_94))"
"((id20_92 rhs21_93)"
"(let-values(((s_95)(cdr s_90)))"
"(let-values(((s_96)"
"(if(syntax?$1 s_95)"
"(syntax-e$1 s_95)"
" s_95)))"
"(if(pair? s_96)"
"(let-values(((id22_97)"
"(let-values(((s_99)(car s_96)))"
"(let-values(((s_100)"
"(if(syntax?$1"
" s_99)"
"(syntax-e$1"
" s_99)"
" s_99)))"
"(let-values(((flat-s_101)"
"(to-syntax-list.1$1"
" s_100)))"
"(if(not flat-s_101)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                  \"bad syntax\""
" orig-s_86))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_86))"
"(let-values()"
"(let-values(((id_102)"
"(let-values(((lst_103)"
" flat-s_101))"
"(begin"
"(if(list?"
" lst_103)"
"(void)"
"(let-values()"
"(in-list"
" lst_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(id_105"
" lst_106)"
"(if(pair?"
" lst_106)"
"(let-values(((s_107)"
"(unsafe-car"
" lst_106)))"
"(if #t"
"(let-values(((id_108)"
"(let-values(((id_109)"
" id_105))"
"(let-values(((id_110)"
"(let-values()"
"(let-values(((id28_111)"
"(let-values()"
"(if(let-values(((or-part_112)"
"(if(syntax?$1"
" s_107)"
"(symbol?"
"(syntax-e$1"
" s_107))"
" #f)))"
"(if or-part_112"
" or-part_112"
"(symbol?"
" s_107)))"
" s_107"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"not an identifier\""
" orig-s_86"
" s_107)))))"
"(cons"
" id28_111"
" id_109)))))"
"(values"
" id_110)))))"
"(if #t"
"(for-loop_104"
" id_108"
"(unsafe-cdr"
" lst_106))"
" id_108))"
" id_105))"
" id_105))))"
" for-loop_104)"
" null"
" lst_103)))))"
"(alt-reverse"
" id_102)))))))))"
"((rhs23_98)"
"(let-values(((s_113)"
"(cdr s_96)))"
"(let-values(((s_114)"
"(if(syntax?$1"
" s_113)"
"(syntax-e$1"
" s_113)"
" s_113)))"
"(if(pair? s_114)"
"(let-values(((rhs24_115)"
"(let-values(((s_116)"
"(car"
" s_114)))"
" s_116))"
"(()"
"(let-values(((s_117)"
"(cdr"
" s_114)))"
"(let-values(((s_118)"
"(if(syntax?$1"
" s_117)"
"(syntax-e$1"
" s_117)"
" s_117)))"
"(if(null?"
" s_118)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                  \"bad syntax\""
" orig-s_86))))))"
"(values rhs24_115))"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_86))))))"
"(values id22_97 rhs23_98))"
"(raise-syntax-error$1"
" #f"
"                                                                          \"bad syntax\""
" orig-s_86))))))"
"(values define-syntaxes19_91 id20_92 rhs21_93))"
"                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_86)))))"
"(values #t define-syntaxes16_87 id17_88 rhs18_89)))"
"(values #f #f #f #f)))))"
"(let-values(((ids_81)(as-expand-time-top-level-bindings id17_67 s_62 ctx_63)))"
"(let-values(((exp-rhs_82)"
"(let-values(((temp29_119) rhs18_68)((temp30_120)(as-named-context ctx_63 ids_81)))"
"(if(variable-reference-constant?(#%variable-reference expand-transformer93.1))"
"(expand-transformer91.1 #f #f #f #f #f #f #f #f temp29_119 temp30_120)"
"(expand-transformer93.1 temp29_119 temp30_120)))))"
"(let-values(((s25_121) s_62)"
"((disarmed-s26_122) disarmed-s_64)"
"((temp27_123)(list define-syntaxes16_66 ids_81 exp-rhs_82)))"
"(if(variable-reference-constant?(#%variable-reference rebuild101.1))"
"(rebuild99.1 #f #f s25_121 disarmed-s26_122 temp27_123)"
"(rebuild101.1 s25_121 disarmed-s26_122 temp27_123)))))))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" 'begin-for-syntax"
"     (lambda (s_124 ctx_125) (raise-syntax-error$1 #f \"not allowed in an expression position\" s_124))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%require"
"(lambda(s_126 ctx_127)"
"(let-values((()"
"(begin"
"(let-values(((obs_143)(expand-context-observer ctx_127)))"
"(if obs_143"
"(let-values()(if #t(let-values()(call-expand-observe obs_143 'prim-require))(void)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_127) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_126)))"
"(values))))"
"(let-values(((disarmed-s_128)(syntax-disarm$1 s_126)))"
"(let-values(((ok?_129 #%require31_130 req32_131)"
"(let-values(((s_144) disarmed-s_128))"
"(if(if #t #t #f)"
"(let-values(((orig-s_145) s_144))"
"(let-values(((#%require31_146 req32_147)"
"(let-values(((s_148)(if(syntax?$1 s_144)(syntax-e$1 s_144) s_144)))"
"(if(pair? s_148)"
"(let-values(((#%require33_149)"
"(let-values(((s_151)(car s_148))) s_151))"
"((req34_150)"
"(let-values(((s_152)(cdr s_148)))"
"(let-values(((s_153)"
"(if(syntax?$1 s_152)"
"(syntax-e$1 s_152)"
" s_152)))"
"(let-values(((flat-s_154)"
"(to-syntax-list.1$1 s_153)))"
"(if(not flat-s_154)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_145))"
"(if #f"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_145))"
"(let-values()"
"(let-values(((req_155)"
"(let-values(((lst_156)"
" flat-s_154))"
"(begin"
"(if(list? lst_156)"
"(void)"
"(let-values()"
"(in-list lst_156)))"
"((letrec-values(((for-loop_157)"
"(lambda(req_158"
" lst_159)"
"(if(pair?"
" lst_159)"
"(let-values(((s_160)"
"(unsafe-car"
" lst_159)))"
"(if #t"
"(let-values(((req_161)"
"(let-values(((req_162)"
" req_158))"
"(let-values(((req_163)"
"(let-values()"
"(let-values(((req41_164)"
"(let-values()"
" s_160)))"
"(cons"
" req41_164"
" req_162)))))"
"(values"
" req_163)))))"
"(if #t"
"(for-loop_157"
" req_161"
"(unsafe-cdr"
" lst_159))"
" req_161))"
" req_158))"
" req_158))))"
" for-loop_157)"
" null"
" lst_156)))))"
"(alt-reverse req_155))))))))))"
"(values #%require33_149 req34_150))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_145)))))"
"(values #t #%require31_146 req32_147)))"
"(values #f #f #f)))))"
"(let-values(((sc_142)(new-scope 'macro)))"
"(begin"
"(let-values(((...expand/top-level.rkt:62:3_165) parse-and-perform-requires!22.1)"
"((temp35_166)"
"(alt-reverse"
"(let-values(((lst_172) req32_131))"
"(begin"
"(if(list? lst_172)(void)(let-values()(in-list lst_172)))"
"((letrec-values(((for-loop_173)"
"(lambda(fold-var_174 lst_175)"
"(if(pair? lst_175)"
"(let-values(((req_176)(unsafe-car lst_175)))"
"(if #t"
"(let-values(((fold-var_177)"
"(let-values(((fold-var_178)"
" fold-var_174))"
"(let-values(((fold-var_179)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_176"
" sc_142))"
" fold-var_178))))"
"(values fold-var_179)))))"
"(if #t"
"(for-loop_173 fold-var_177(unsafe-cdr lst_175))"
" fold-var_177))"
" fold-var_174))"
" fold-var_174))))"
" for-loop_173)"
" null"
" lst_172)))))"
"((s36_167) s_126)"
"((temp37_168) #f)"
"((temp38_169)(expand-context-namespace ctx_127))"
"((temp39_170)(expand-context-phase ctx_127))"
"((temp40_171)(make-requires+provides #f)))"
"(if(variable-reference-constant?(#%variable-reference parse-and-perform-requires!22.1))"
"(parse-and-perform-requires!20.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp37_168"
" #t"
" temp35_166"
" s36_167"
" temp38_169"
" temp39_170"
" temp40_171)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...expand/top-level.rkt:62:3_165"
" keyword-procedure-extract"
" '(#:visit?)"
" 7)"
" '(#:visit?)"
"(list temp37_168)"
" temp35_166"
" s36_167"
" temp38_169"
" temp39_170"
" temp40_171)))"
" s_126)))))))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(add-core-form!"
" '#%provide"
"(lambda(s_180 ctx_181)"
"(begin"
"(let-values(((obs_182)(expand-context-observer ctx_181)))"
"(if obs_182"
"(let-values()(if #t(let-values()(call-expand-observe obs_182 'prim-provide))(void)))"
"(void)))"
"         (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_180)))))"
" print-values)"
"(define-values(ns)(make-namespace))"
"(call-with-values(lambda()(declare-core-module! ns)) print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:98:0_1) declare-hash-based-module!41.1)"
"((temp1_2) '#%main)"
"((main-primitives2_3) main-primitives)"
"((ns3_4) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns3_4 #f #f #f #f #f #f #f #f temp1_2 main-primitives2_3)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:98:0_1"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns3_4)"
" temp1_2"
" main-primitives2_3))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:99:0_5) declare-hash-based-module!41.1)"
"((temp4_6) '#%utils)"
"((utils-primitives5_7) utils-primitives)"
"((ns6_8) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns6_8 #f #f #f #f #f #f #f #f temp4_6 utils-primitives5_7)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:99:0_5"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns6_8)"
" temp4_6"
" utils-primitives5_7))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:100:0_9) declare-hash-based-module!41.1)"
"((temp7_10) '#%place-struct)"
"((place-struct-primitives8_11) place-struct-primitives)"
"((ns9_12) ns)"
"((temp10_13) '(dynamic-place)))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns9_12 #f #f temp10_13 #t #f #f #f #f temp7_10 place-struct-primitives8_11)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:100:0_9"
" keyword-procedure-extract"
" '(#:namespace #:protected)"
" 4)"
" '(#:namespace #:protected)"
"(list ns9_12 temp10_13)"
" temp7_10"
" place-struct-primitives8_11))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:105:0_14) declare-hash-based-module!41.1)"
"((temp11_15) '#%boot)"
"((boot-primitives12_16) boot-primitives)"
"((ns13_17) ns))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns13_17 #f #f #f #f #f #f #f #f temp11_15 boot-primitives12_16)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:105:0_14"
" keyword-procedure-extract"
" '(#:namespace)"
" 4)"
" '(#:namespace)"
"(list ns13_17)"
" temp11_15"
" boot-primitives12_16))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((linklet-primitives_18)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((...tt/expander/main.rkt:112:2_19) declare-hash-based-module!41.1)"
"((temp25_20) '#%linklet)"
"((linklet-primitives26_21) linklet-primitives_18)"
"((ns27_22) ns)"
"((temp28_23) #t)"
"((temp29_24) #t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1"
" ns27_22"
" temp28_23"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp29_24"
" #t"
" temp25_20"
" linklet-primitives26_21)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:112:2_19"
" keyword-procedure-extract"
" '(#:namespace #:primitive? #:register-builtin?)"
" 4)"
" '(#:namespace #:primitive? #:register-builtin?)"
"(list ns27_22 temp28_23 temp29_24)"
" temp25_20"
" linklet-primitives26_21)))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:115:0_25) declare-hash-based-module!41.1)"
"((temp14_26) '#%expobs)"
"((expobs-primitives15_27) expobs-primitives)"
"((ns16_28) ns)"
"((temp17_29) #t))"
"(if(variable-reference-constant?(#%variable-reference declare-hash-based-module!41.1))"
"(declare-hash-based-module!39.1 ns16_28 #f #f #f #f temp17_29 #t #f #f temp14_26 expobs-primitives15_27)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:115:0_25"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" 4)"
" '(#:namespace #:protected?)"
"(list ns16_28 temp17_29)"
" temp14_26"
" expobs-primitives15_27))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:117:0_30) declare-kernel-module!8.1)"
"((ns18_31) ns)"
"((eval19_32) eval$1)"
"((temp20_33)"
"(let-values(((ht_34) main-primitives))"
"(begin"
"(if((lambda(ht_35)(hash? ht_35)) ht_34)(void)(let-values()(default-in-hash-keys ht_34)))"
"((letrec-values(((for-loop_36)"
"(lambda(table_37 i_38)"
"(if i_38"
"(let-values(((name_39)(hash-iterate-key ht_34 i_38)))"
"(if #t"
"(let-values(((table_40)"
"(let-values(((table_41) table_37))"
"(let-values(((table_42)"
"(let-values()"
"(let-values(((key_43 val_44)"
"(let-values()"
"(values"
"(let-values() name_39)"
" #t))))"
"(hash-set table_41 key_43 val_44)))))"
"(values table_42)))))"
"(if #t"
"(for-loop_36 table_40(hash-iterate-next ht_34 i_38))"
" table_40))"
" table_37))"
" table_37))))"
" for-loop_36)"
" '#hash()"
"(hash-iterate-first ht_34))))))"
"(if(variable-reference-constant?(#%variable-reference declare-kernel-module!8.1))"
"(declare-kernel-module!6.1 eval19_32 temp20_33 ns18_31)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:117:0_30"
" keyword-procedure-extract"
" '(#:eval #:main-ids)"
" 3)"
" '(#:eval #:main-ids)"
"(list eval19_32 temp20_33)"
" ns18_31))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((lst_45) runtime-instances))"
"(begin"
"(if(list? lst_45)(void)(let-values()(in-list lst_45)))"
"((letrec-values(((for-loop_46)"
"(lambda(fold-var_47 lst_48)"
"(if(pair? lst_48)"
"(let-values(((name_49)(unsafe-car lst_48)))"
"(if #t"
"(let-values(((fold-var_50)"
"(let-values(((fold-var_51) fold-var_47))"
"(if(eq? name_49 '#%kernel)"
" fold-var_51"
"(let-values(((fold-var_52) fold-var_51))"
"(let-values(((fold-var_53)"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((...tt/expander/main.rkt:123:2_54)"
" copy-runtime-module!26.1)"
"((name30_55) name_49)"
"((ns31_56) ns)"
"((temp32_57)"
"(let-values(((or-part_58)"
"(eq?"
" name_49"
" '#%foreign)))"
"(if or-part_58"
" or-part_58"
"(eq? name_49 '#%futures)))))"
"(if(variable-reference-constant?"
"(#%variable-reference"
" copy-runtime-module!26.1))"
"(copy-runtime-module!24.1"
" #f"
" #f"
" #f"
" #f"
" ns31_56"
" #f"
" #f"
" temp32_57"
" #t"
" #f"
" #f"
" #f"
" #f"
" name30_55)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:123:2_54"
" keyword-procedure-extract"
" '(#:namespace #:protected?)"
" 3)"
" '(#:namespace #:protected?)"
"(list ns31_56 temp32_57)"
" name30_55))))"
"(void)))))"
"(values fold-var_53)))))))"
"(if #t(for-loop_46 fold-var_50(unsafe-cdr lst_48)) fold-var_50))"
" fold-var_47))"
" fold-var_47))))"
" for-loop_46)"
"(void)"
" lst_45))))"
" print-values)"
"(call-with-values"
"(lambda()"
"(let-values(((...tt/expander/main.rkt:127:0_59) declare-reexporting-module!50.1)"
"((temp21_60) '#%builtin)"
"((temp22_61)(list* '#%place-struct '#%utils '#%boot '#%expobs runtime-instances))"
"((ns23_62) ns)"
"((temp24_63) #f))"
"(if(variable-reference-constant?(#%variable-reference declare-reexporting-module!50.1))"
"(declare-reexporting-module!48.1 ns23_62 temp24_63 #t temp21_60 temp22_61)"
"((checked-procedure-check-and-extract"
" struct:keyword-procedure"
" ...tt/expander/main.rkt:127:0_59"
" keyword-procedure-extract"
" '(#:namespace #:reexport?)"
" 4)"
" '(#:namespace #:reexport?)"
"(list ns23_62 temp24_63)"
" temp21_60"
" temp22_61))))"
" print-values)"
"(call-with-values(lambda()(1/current-namespace ns)) print-values)"
"(call-with-values(lambda()(1/dynamic-require ''#%kernel 0)) print-values)"
"(define-values(datum->kernel-syntax)(lambda(s_64)(1/datum->syntax core-stx s_64))))"
);
